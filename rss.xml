<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#39;est la Z</title>
    <link>https://cestlaz.github.io/</link>
    <description>C&#39;est la Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Mar 2022 07:28:46 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>SIGCSE 2022 APCS-A Costs of changing the language</title>
      <link>https://cestlaz.github.io/post/sigcse-2022-apcs-costs/</link>
      <pubDate>Tue, 08 Mar 2022 07:28:46 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2022-apcs-costs/</guid>
      <description>&lt;p&gt;
One of the arguments for keeping APCS-A as is are the costs to
change. There are of course, many kinds of costs.&lt;/p&gt;
&lt;p&gt;
The first are the monetary costs. New text book, curricular materials
and possibly equipment. The College Board has their development costs
but I don&amp;#39;t care about those - they&amp;#39;re raking in money hand over fist
anyway. I don&amp;#39;t think these costs amount to much. Companies that sell
materials for classes are always trying to make sales and even when
subjects don&amp;#39;t change there are always new books and other
resources. So, these costs shouldn&amp;#39;t really figure into switching
languages.&lt;/p&gt;
&lt;p&gt;
Another cost relates to ancillary effects. Does changing the language
or changing the course have an effect on how well or how poorly
students are prepared for what&amp;#39;s to come. The argument here for
keeping Java is that CS2, data structures in most colleges is taught
in Java or C++ so switching APCS-A to Python wouldn&amp;#39;t prepare students
as effectively. This may or may not be the case. Students already have
to deal with the switch from Java to C++ if they go to a C++ school
adn get placement out of CS1 and some colleges do indeed teach CS1 in
Python and then switch.&lt;/p&gt;
&lt;p&gt;
So, changing languages won&amp;#39;t necessarily hamper students that take
data structures in a different language in college.&lt;/p&gt;
&lt;p&gt;
On the other hand, if the course content changes significantly -
changing from the A in APCS-A meaning Algorithm to API as Owen
Astrachan suggested at SIGCSE then that&amp;#39;s a different kettle of fish. &lt;/p&gt;
&lt;p&gt;
Digging a little deeper on this front is that when a college designs
their CS0, CS1, and CS2 classes they should look at the full
sequence - all three of these classes and beyond. If you change a
course, you really have to think about how it changes the future
ones. Hopefully colleges do this when changing curriculum but I did
talk about how Hunter didn&amp;#39;t when it rebooted their CS0 class. Now,
this really isn&amp;#39;t a reason to change or not to change since a high
school can&amp;#39;t really track and pay attention to every colleges CS0,
CS1, CS2 sequence so I guess it&amp;#39;s neither here nor there.&lt;/p&gt;
&lt;p&gt;
I guess the bottom line for this cost is that as long as APCS-A
remains fundamentally the same content wise it may not matter what the
language is and if the College Board clearly states that APCS-A is
&lt;strong&gt;not&lt;/strong&gt; going to be a college CS1 then any language is fair game.&lt;/p&gt;
&lt;p&gt;
The biggest cost that people bring up is teacher training. All the
teachers will have to learn the new language and possibly a new
paradigm. This one is &lt;strong&gt;huge&lt;/strong&gt;. I work with a lot of teachers who are
relatively new to CS and some of them are struggling their way through
APCS-A. These teachers are basically students in CS0 or maybe CS1 and
just finding there way to and through CS. Switching languages for them
is no easy feat and concepts in one language don&amp;#39;t necessarily
translate to another. I&amp;#39;ve seen teachers who claim proficiency with
Python or JS struggle to write the simplest of Java programs or after
spending a significant amount of time in Java they have similar
struggles switching to Python.&lt;/p&gt;
&lt;p&gt;
In spite of so many people saying CS is easy and anyone can do it,
learning new things is in fact hard and takes both time and effort.&lt;/p&gt;
&lt;p&gt;
As a side note, this cost flies in the face of every PD provider (I&amp;#39;m
looking at you code.org) that claims &amp;#34;we&amp;#39;ve trained XXX teachers to be
CS teachers in just YYY sessions!&amp;#34;&lt;/p&gt;
&lt;p&gt;
This is the state we&amp;#39;re in today but this is also a warning. We &lt;strong&gt;have&lt;/strong&gt;
to do better with respect to teacher training so as to make this cost
meaningless.&lt;/p&gt;
&lt;p&gt;
When I entered teaching, I had been doing C programming professionally
but knew Pascal along with other languages from college. Teaching APCS-A/B
in Pascal was easy. Well, the language was easy. I was a new teacher
so teaching overall was hard but teaching APCS-A/B wasn&amp;#39;t any harder
than say teaching Trig or Linear Algebra. Actually, maybe it was a
little easier since I was a CS guy at heart and not a math
person.&lt;/p&gt;
&lt;p&gt;
When the class switched to C++, I figured out C++. I had never done
OOP before but I figured it out. Switching to Java? Same deal. I also
taught myself Python, NetLogo and other languages that I had to or wanted
to teach with.&lt;/p&gt;
&lt;p&gt;
The point is, I had a strong CS background so picking up a new
language wasn&amp;#39;t really a major cost. It wasn&amp;#39;t free - I had to spend
some time and at times figure out new tooling but it wasn&amp;#39;t this
insurmountable thing.&lt;/p&gt;
&lt;p&gt;
Right now, we&amp;#39;re at a point where we can&amp;#39;t really ask this of our CS
teachers. Too many are too new but we have to make sure that our
pre-service training programs and state requirements are such that in
the future we will have CS teachers that know enough CS so that a
language switch in a course isn&amp;#39;t a big deal. Rather, a teacher will
be able to do an analysis of the new tool solely based on asking if
it&amp;#39;s right for their students.&lt;/p&gt;
&lt;p&gt;
So, those are the costs. Are they enough of a reason to keep Java? I
don&amp;#39;t think so. If you give enough lead time, as pre-service programs
are getting up to speed you can minimize the training costs. Just
give it 10 years instead of 5. Of course, you have to be confident
that Python will be the language that far into the future.&lt;/p&gt;
&lt;p&gt;
That said, I&amp;#39;m not advocating for a switch to Python. We still have to
go back to my first post on this - The College Board has to decide if
this will be a college CS1 class or something else and only then can
we do the language vs language analysis.&lt;/p&gt;
&lt;p&gt;
Are we done with this thread? Almost but I think it&amp;#39;s worth spending
some time looking at some possible alternatives to both Java and
Python.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s next time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2022 - APCS-A Language strengths and weaknesses</title>
      <link>https://cestlaz.github.io/post/sigcse-2022-apcs-languages/</link>
      <pubDate>Mon, 07 Mar 2022 13:54:58 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2022-apcs-languages/</guid>
      <description>&lt;p&gt;
Last time we talked about the &lt;a href=&#34;https://cestlaz.github.io/post/sigcse-2022-apcs-intent/&#34;&gt;intent of APCS-A&lt;/a&gt; and without deciding on
that we can&amp;#39;t really chose a language. Still, we can talk about
strengths and weaknesses of languages. Let&amp;#39;s do that by taking a walk
down history.&lt;/p&gt;
&lt;p&gt;
APCS started in Pascal. Back then it was a one year course that
included CS1 (programming) and CS2 (data structures). Later  they
offered two exams A (programming) and AB (programming plus data
structures). The AB exam was last administered in May 2009. In it&amp;#39;s
last year, only 3,881 students took the AB exam - about 10% of those
students were from Stuy.&lt;/p&gt;
&lt;p&gt;
The exam started in Pascal but switched to C++ in 1999. Why switch? I
can&amp;#39;t say for sure. I was a young teacher back then. Under 10 years in
and wasn&amp;#39;t involved in the greater AP scene. Pascal was a nice
learning language but it had a number of deficiencies. Pascal was
pretty straight forward, encouraged structured programming, required
memory management which I say as a plus since it allowed one to study
it and overall was a strong learning language. On the other hand, programs were
limited to a single file, there was no standard for graphics or I
think even file access, and it couldn&amp;#39;t do OOP which was becoming all
the rage. It also was rarely used in industry even though I did have a
nice job offer back then from Brown Brothers Harriman &amp;amp; Co. working in
Turbo Pascal.&lt;/p&gt;
&lt;p&gt;
C++ was a hot language, it supported OOP as well as multiple files. It
had much greater complexity but I guess that wasn&amp;#39;t a deal breaker for
the College Board. I also have no idea if the conversation was
switching from Pascal to C++ or if it was switching from Pascal to
something else and then C++ was chosen.&lt;/p&gt;
&lt;p&gt;
In 2004 the exam moved to Java. Again, something gained something
lost.&lt;/p&gt;
&lt;p&gt;
Java was the new hotness so no problem there. What about other
changes? Java was &lt;strong&gt;much&lt;/strong&gt; simpler. C++ had many ways to do things while
Java nudged you into the Java way. Java also forced Object Oriented
Programming which, at the time, I guess people felt was a good
thing. C++ was more multi-modal and at the time, heck even today, was
taught more like C with objects. Java also had a standard way to do
I/O and graphics which, I guess was also a plus.&lt;/p&gt;
&lt;p&gt;
What about the downside?&lt;/p&gt;
&lt;p&gt;
Personally, I found the forced OOP to be a problem Even though the
language forced all objects all the time, the nature of problems
attacked in a CS1 don&amp;#39;t necessarily lend themselves towards Object
Oriented solutions. This made OOP forced and this is a problem.&lt;/p&gt;
&lt;p&gt;
Java also required a lot of &amp;#34;magic:&amp;#34; - ignore the &lt;strong&gt;public static void
main&lt;/strong&gt; behind the curtain. You&amp;#39;ll understand it later.&lt;/p&gt;
&lt;p&gt;
The big loss to me and others pointed to this as a gain was that Java
took out memory management. I liked that you still had to allocate
memory using &lt;strong&gt;new&lt;/strong&gt; to create things like nodes for trees and linked
lists but you didn&amp;#39;t have to manage them yourself.&lt;/p&gt;
&lt;p&gt;
True, this is generally a good thing but the problem was that APCS-A/B
was a class, not the real world. If you were going to take out memory
management from CS1/CS2 in APCS-A/B then it had to go back in
somewhere or kids would never get it. This is where looking at a
course and not the full sequence can be a problem. If you take
something important out of APCS and then it&amp;#39;s not in the college
classes later on you&amp;#39;ve taken it out of the students overall
preparation.&lt;/p&gt;
&lt;p&gt;
Based on talking to my tech friends hiring after the switch, this was
a real problem.&lt;/p&gt;
&lt;p&gt;
In any event, the class chugged along, dropping the B part up through
today.&lt;/p&gt;
&lt;p&gt;
So, why consider Python?&lt;/p&gt;
&lt;p&gt;
Python goes back to multi-modal and takes away the magic. Hello World
is just one line. No classes necessary. Python is also, by most
measures simpler. Python also has tons of libraries. You can use Flask
to build a web server, NLTK to explore language, Pygame for games and
on and on. Python is also used by many other fields besides direct CS.&lt;/p&gt;
&lt;p&gt;
But there&amp;#39;s always a cost.&lt;/p&gt;
&lt;p&gt;
Python&amp;#39;s object model is, to put it kindly, ugly and ackward. Not as
bad a Perl but having to use self and no real private kind of kills it
from a teaching point of view. The libraries and use in other fields
are also less important if the intent is to mirror college CS1 content
as opposed to rolling a new non major, more general course.&lt;/p&gt;
&lt;p&gt;
Another cost is the use of lists rather than arrays. Lists give much
more power much more quickly but at the cost of teaching array style
indexed data structures. This isn&amp;#39;t a cost for everyone but it&amp;#39;s
something to consider. Related to this is that Python doesn&amp;#39;t really
have a counting loop. It has a &lt;strong&gt;while&lt;/strong&gt; and a &lt;strong&gt;for each&lt;/strong&gt; but not a
counting &lt;strong&gt;for&lt;/strong&gt;. This may or may not be an issue depending on how you
feel about traversing data.&lt;/p&gt;
&lt;p&gt;
The potential big cost comes down to typing. Sure, writing &lt;code&gt;int a&lt;/code&gt; is
a pain in statically typed Java vs Python&amp;#39;s dynamic typing but while
dyanmic is quicker and easier and makes sense given Python&amp;#39;s scripting
roots, static is safer and makes it easier to write larger more robust
systems.&lt;/p&gt;
&lt;p&gt;
Memory management, is of course still long gone :-(.&lt;/p&gt;
&lt;p&gt;
So, what to do? &lt;/p&gt;
&lt;p&gt;
Python is used in many fields and is a startup darling but Java is
still one of the kings, along with C++ in the industrial strength and
enterprise world. I have mixed feelings and might take a strong stance
but not yet.&lt;/p&gt;
&lt;p&gt;
We still have to look at more aspects of this question. Specifically
what about the costs of switching from one language to any other
language and also does the choice of language in CS1 matter with
respect to CS2.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll do at least one more post maybe more to address those but I think
that&amp;#39;s it for today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2022 - What language APCS-A part 1 - the intent</title>
      <link>https://cestlaz.github.io/post/sigcse-2022-apcs-intent/</link>
      <pubDate>Sun, 06 Mar 2022 16:00:07 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2022-apcs-intent/</guid>
      <description>&lt;p&gt;
One of the first sessions of SIGCSE2022 was a panel on the choice of
language for APCS-A. Should it continue to use Java or should it shift
to Python. This topic comes up from time to time. I didn&amp;#39;t attend this
particular session but discussed it at length with a few people who
did.&lt;/p&gt;
&lt;p&gt;
Truth be told, I wasn&amp;#39;t going to start writing about SIGCSE and APCS-A
until I finished a few other SIGCSE posts but my friend &lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred
Thompson&lt;/a&gt; said he was writing one and was planning on posting it
soon. I think it&amp;#39;s better when us CS Ed bloggers write about similar
things at similar times - fosters better discussion so I&amp;#39;m writing
this today (Sunday) and will post it as soon as I see Alfred&amp;#39;s post.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot to unpack when it comes to language choice for
APCS-A. Language strengths and weaknesses, ease of learning, tooling
and training costs and more. I&amp;#39;ll share my feelings on all of these
and maybe more but before we dig into those I think it&amp;#39;s worth
thinking about the intent of the course.&lt;/p&gt;
&lt;p&gt;
The AP program was originally created to allow advanced high school
students to get started on college work in their field of interest. An
AP class would either be the first course in a major or it would be a
requirement like calculus is for CS majors. There were fewer exams and
FAR fewer students taking them.&lt;/p&gt;
&lt;p&gt;
Over time, things evolved and today that&amp;#39;s not necessarily the
case. APCS-A, Calc and many others still fit the bill but then you
have classes like AP Euro - sometimes offered to HS sophomores and is
really a regurgitation course. Sorry but a class appropriate for HS
sophomores is not college level. Same for APCS-Principles. Might be
good, might be bad but it&amp;#39;s not college level.&lt;/p&gt;
&lt;p&gt;
So, before deciding on the language you really have to decide on
intent. If APCS-A is to be the first class in the CS major then the
college board has to really follow what colleges are doing. Some
people think that APCS-A should be a course for everybody or for non
CS majors but if the class is supposed to be a first in major course,
it &lt;strong&gt;has&lt;/strong&gt; to follow the college lead.&lt;/p&gt;
&lt;p&gt;
If colleges decide to make their CS1 a more general course, more about
APIs, less about either programming or, to it&amp;#39;s already limited extent
algorithms and data structures, then it&amp;#39;s fine to change but as long as the
college board is pushing CS1 as a first course in the CS major then
APCS-A has to follow the general CS1 outline.&lt;/p&gt;
&lt;p&gt;
So, assuming this stays the same, you might still argue a change to
Python. I&amp;#39;ll look at the pros and cons of doing this at a later post but one
argument against the change is that students having taken CS1 in
Python have a harder time transitioning to Java (or C++) in CS2.&lt;/p&gt;
&lt;p&gt;
Some people say this isn&amp;#39;t an issue but I think it is. APCS-A is
already frequently a watered down CS1 and students sometimes struggle
in CS2 even when it&amp;#39;s in the same language. Switching languages will
result in kids hitting a brick wall. This is an example of a problem
I&amp;#39;ve seen over and over again - people changing a class because they
feel there&amp;#39;s a need but not paying attention to the next class let
alone the full pipeline.&lt;/p&gt;
&lt;p&gt;
This happened at Hunter recently - I warned the department that it
would but nobody listened. Our CS0 course up until my first
year at Hunter was a pretty bad course It was a random assortment
of topics with a lot of cruft and it just didn&amp;#39;t serve anybody. In my
second semester the class was slated to change to a new course. The
new course was going to have more programming - all in Python - lots
of small programs. It was a much broader class and we all agreed that
it would be much better. It was except for one thing. Nobody was
paying attention to how well it prepared students for our CS1 and that
first CS1 class after the new CS0 was full of complaints, student
struggles, and student failures. On the one hand, the new course had
more programming than the earlier one but since it was only tiny
programs, students weren&amp;#39;t prepared for CS1 right out of the gate but
students thought they were prepared. Things have gotten better since then
but the problem was easily to predict.&lt;/p&gt;
&lt;p&gt;
If High Schools move to a less rigorous class with an &amp;#34;easier&amp;#34;
language like Python great care should be taken to make sure that it
prepares students to jump into a college CS2 which won&amp;#39;t have nearly
the supports that are present in high school.&lt;/p&gt;
&lt;p&gt;
So that&amp;#39;s it for this installment. Before you can even think about
language you have to think about class intent. Now that we&amp;#39;ve done
that we can start looking at language choice. That&amp;#39;s for next time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2022 - Conference format</title>
      <link>https://cestlaz.github.io/post/sigcse-2022-hybrid/</link>
      <pubDate>Sat, 05 Mar 2022 08:05:15 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2022-hybrid/</guid>
      <description>&lt;p&gt;
Before diving into the content I thought I&amp;#39;d share my thoughts about
SIGCSE as a hybrid conference. Prior to Covid, SIGCSE was pushing
2,000 in person participants. This time around ther were a little
under 800 in person and a number of hundreds more remote. The in
person numbers mirrored what CSTA has grown to. It&amp;#39;s a nice size. Not
overwhelming but manageable. It&amp;#39;s at the upper edge of possibly
feeling intimate. Once you get into the thousands things feel far less
personal. You can go the entire conference not finding people you want
to connect with. On the other hand you can also blend into the crowd
should you choose that route.&lt;/p&gt;
&lt;p&gt;
Things basically ran as usual. Opening announcements and keynote,
coffee break, sessions and so on but remote was interjected
throughout. There were also remote only sessions but I can&amp;#39;t speak to
those.&lt;/p&gt;
&lt;p&gt;
We started out with the opening keynote. Barbara Liskov Zoomed in from
her home. She gave a &lt;strong&gt;great&lt;/strong&gt; talk going through her history which in
many was is &lt;strong&gt;the&lt;/strong&gt; history of some key aspects of computer science,
programming languages, and programming.&lt;/p&gt;
&lt;p&gt;
There was zero downside to having a remote keynote speaker. Barbara
was intersting and engaging. I was blown away. The only thing I found
a bit weird was that I kept glancing over to the dias where the
speaker would normally stand and it was empty. That&amp;#39;s on me though.&lt;/p&gt;
&lt;p&gt;
At the end we had Q&amp;amp;A from both people in the live audience and people
on the remote platform. This was an all around win.&lt;/p&gt;
&lt;p&gt;
The first thing that somewhat irked me about virtual was at a paper
session. The second paper was presented as a video. This part was
fine, maybe even preferable since it allows the presented to make sure
the video is set up the way they want and it also keeps within time
limits. The problem was that there was no Q&amp;amp;A. If you&amp;#39;re going to do a
video presentation, the presenter should hop on some platform at the
end for Q&amp;amp;A. There is zero value added to just showing the video. I
could do that from home.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not criticizing SIGCSE here. They tried something. In my opinion
it didn&amp;#39;t work. In the future, I&amp;#39;d love to see video presentations but
with a live, in person or via some Zoom platform Q&amp;amp;A. In theory there
could be some &amp;#34;flipped sessions&amp;#34; (although I think a lot of the
flipped classroom concepts are bunk) where you could watch the video
or read the paper prior to the session and then have a meaty
discussion.&lt;/p&gt;
&lt;p&gt;
The second hybrid thing that I didn&amp;#39;t like was a hybrid BOF. I just
think it din&amp;#39;t work. It basically turned into a few small mini
presentations by the organizers. All the prior SIGCSE BOFs I&amp;#39;ve
attended had the hosts facilitating a room wide discussion. This was
similar but slightly more awkward in the few virtual group discussion
sessions I&amp;#39;ve taken part in. This was a case of hybrid not
working. With some people in the room and some people at home you just
couldn&amp;#39;t have meaningful discussion. The people in the room couldn&amp;#39;t
talk without excluding the remote people and remote conversation
wasn&amp;#39;t available easily to the in person crowd.&lt;/p&gt;
&lt;p&gt;
Birds of a feather just don&amp;#39;t fly mixed. Do them remote or do them in
person.&lt;/p&gt;
&lt;p&gt;
A third thing that didn&amp;#39;t really bother me but I found weird was one
panel where one person was in person and the rest were remote while I
knew that at least one of the remote people were attending in
person. The mix just didn&amp;#39;t flow as well for me. I&amp;#39;ve attende all in
person panels, all remote panels, and panels where all the panelists
were in a room together but presenting remotely. All of these formats
worked. It think the mix of in person and remote was just kindof
weird. In future, I&amp;#39;d say either have all the presenters in a room
together at a big table even if it&amp;#39;s remote or have them all &amp;#34;dial
in.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Overall the conference was great so these are really nitpicks.&lt;/p&gt;
&lt;p&gt;
With this post out of the way I can get to the content posts but I
feel it would be remiss if I didn&amp;#39;t mention a couple of non content
related highlights that the SIGCSE organizers provided.&lt;/p&gt;
&lt;p&gt;
First, the opening evening reception had a &lt;strong&gt;bacon bar&lt;/strong&gt;. All
receptions, coffee breaks, snack times, and I&amp;#39;d even say sessions
should provide bacon.&lt;/p&gt;
&lt;p&gt;
The other thing which I&amp;#39;m more serious about is that they provided
coffee and tea before the opening sessions rather than their usual
practice of withholding caffeine for the 10:00 break. I can&amp;#39;t imagine
it would cost much to just put out the urns early.&lt;/p&gt;
&lt;p&gt;
Overall, great conference and great job by the organizers.&lt;/p&gt;
&lt;p&gt;
Content related posts to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE2022 - Things I plan to blog about</title>
      <link>https://cestlaz.github.io/post/sigcse2022-intro/</link>
      <pubDate>Fri, 04 Mar 2022 20:07:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse2022-intro/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been up in Providence RI since this past Wednesday for
SIGCSE2022. The big Computer Science Educators conference. Also, my
first in person conference since pre-covid.&lt;/p&gt;
&lt;p&gt;
I wasn&amp;#39;t sure how I was going to feel about this big in person
gathering but as it&amp;#39;s turned out, it&amp;#39;s been pretty comfortable.&lt;/p&gt;
&lt;p&gt;
So far, I&amp;#39;ve attended two terrific keynotes. One by Barbara
Liskov and the other Barbara Ericson, some really interesting sessions
and some less interesting ones and have had a great time discussing CS
education.&lt;/p&gt;
&lt;p&gt;
The big highlight has been seeing friends in person and being able to
talk. Sitting down for coffee with a friend or having a rount table
discussion around a well, round table.&lt;/p&gt;
&lt;p&gt;
One of those friends I was delighted to see was Alfred
Thompson. Alfred&amp;#39;s already sumarized his &lt;a href=&#34;https://blog.acthompson.net/2022/03/sigcse-2022-day-1.html&#34;&gt;first&lt;/a&gt; and &lt;a href=&#34;https://blog.acthompson.net/2022/03/sigcse-2022-day-2.html&#34;&gt;second&lt;/a&gt; day
experiences so there&amp;#39;s not reason for me to write much the same so I
figured I&amp;#39;d just quickly list out a few of my highlights and in
particular things I plan to write more about when I get back to NYC.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Language choice for APCS. There was a panel that considered why
change to Python or why stick with Java. I didn&amp;#39;t attend this
session but talked at length about it with a number of people. It
had me reconsidering my opinions and I&amp;#39;ll certainly write about this
in the near future.&lt;/li&gt;
&lt;li&gt;I saw an interesting talk by Sam Lau in which he discussed how
statisticians and computer scientists differed in their views as to
how and what should be taught in a data science course. This got me
thinking about developing CS offerings at the high school level.&lt;/li&gt;
&lt;li&gt;I attended the &amp;#34;It seemed like a good idea at the time&amp;#34; session for
the first time where teachers discussed their failures. This was a
&lt;strong&gt;great&lt;/strong&gt; session hosted by two more friends I haven&amp;#39;t seen since
pre-covid - Dan Garcia and Jim Huggins. One topic brought up there
was dealing with late assignments as well as alternative
grading. This too is something I plan to write about.&lt;/li&gt;
&lt;li&gt;PD For CS Teachers and teacher prep programs. This is clearly
something I care deeply about and there were some sessions on this.&lt;/li&gt;
&lt;li&gt;I also spent a good amount of time catching up with my friends Jim
and Robin from Siena College. They&amp;#39;re doing some cool thing up there
so that&amp;#39;s another thing I&amp;#39;d like to write about.&lt;/li&gt;
&lt;li&gt;I also had some good discussions with vendors in the exhibit hall as
well as some great hallway tract talks.&lt;/li&gt;
&lt;li&gt;My thoughts on the hybrid format of this conference&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#39;s a big list - a lot of things to write about. I hope to get on
this when I get back to NYC on Sunday.&lt;/p&gt;
&lt;p&gt;
In the meantime, if you&amp;#39;re in providence for tomorrow&amp;#39;s last day of
SIGCSE, please find me and say hello!!!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First live conference in 2 years</title>
      <link>https://cestlaz.github.io/post/sigcse-2022/</link>
      <pubDate>Tue, 01 Mar 2022 08:13:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2022/</guid>
      <description>&lt;p&gt;
Tomorrow I&amp;#39;ll be driving up to Providence Rhode Island for SIGSE 2022,
basically the largest computer science education conference out
there. I guess ITSE, a conference I&amp;#39;ve never attended, is larger but
that&amp;#39;s really EdTech with some CS.&lt;/p&gt;
&lt;p&gt;
The last in person conference I went to was two almost exactly two
years ago - also SIGCSE. I arrived in Portland and went to a
pre-conference session and on the morning of the big start, about three
hours before I ran my session, I saw an email saying we were
canceled. I flew home and a few days later we began our shelter in for
covid.&lt;/p&gt;
&lt;p&gt;
In spite of the latest CDC release, SIGCSE is still requiring
masks. This is something I support. I have no problem taking a
conservative view on health, particularly at an event that brings
together people from all over the world.&lt;/p&gt;
&lt;p&gt;
The sessions should be comfortable. Everybody will be vaccinated and
should be masked so it&amp;#39;s no different than attending a concert in
NYC. I am curious though about the lunches and big reception. Will
everyone just dump the masks for food since we&amp;#39;re all vaccinated? Will
there be some trepidation? We&amp;#39;ll see.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m also curious to see the overall attendance. The last SIGCSE had
well over 1,500 attendees. What will this one be like? &lt;/p&gt;
&lt;p&gt;
There are some sessions I&amp;#39;m really looking forward to. There are some
on K12 teacher preparation and professional development. I feel pretty
confident that the approach I&amp;#39;m taking at Hunter is the right one but
it&amp;#39;s always good to see what other people are thinking about and
trying - always happy to steal better ideas. I&amp;#39;m also looking forward
to some of the sessions that deal with teaching more advanced CS
concepts. This is something that&amp;#39;s lacking in CS Ed. The CSTA
conference which focuses on K12 is more about actual teaching but
since K12 CS is still in its infancy, most schools are still dealing
with intro level stuff and conferences like CSTA really have to work
to support our new teachers.&lt;/p&gt;
&lt;p&gt;
Most importantly though, I&amp;#39;m looking forward to seeing people that I
haven&amp;#39;t seen in a couple of years. Both those that I consider real
friends and also the many acquaintances I&amp;#39;m friendly with.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m also looking to see the breakdown of K12 and higher ed
people. Over the years the number of K12 teachers at the conference
has grown and it&amp;#39;s interesting to see the differences in the
camps. The teachers, by and large know far less CS but are much
stronger teachers while the professors know the topic but while they
might research teaching, they don&amp;#39;t nearly have the depth of teaching
knowlege that K12 teachers posess.&lt;/p&gt;
&lt;p&gt;
This is a probably unfair oversimplification but you could say that teachers teach
the student and professors teach the subject.&lt;/p&gt;
&lt;p&gt;
This can make for an interesting dynamic. I hope over time, the
teachers become stronger in the subject material and that the
professors realize that teaching is an art and a craft and that what
one does at an elite institution is worlds away from the inner city
middle school.&lt;/p&gt;
&lt;p&gt;
Anyway, enough yammering. For those of you who&amp;#39;ll be in providence
this week, make sure to say hi. I&amp;#39;m sure we&amp;#39;ll all learn a lot and have
a blast doing it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming Problem Solving And Crosswords</title>
      <link>https://cestlaz.github.io/post/programming-problem-solving-and-crosswords/</link>
      <pubDate>Mon, 21 Feb 2022 17:37:46 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/programming-problem-solving-and-crosswords/</guid>
      <description>&lt;p&gt;
I used to do the New York Times Crossword puzzle. I don&amp;#39;t remember
when I started - some time late in Eugene Maleska&amp;#39;s tenure as the
editor. I continued on a few years into Will Shortz&amp;#39;s puzzles. I
stopped when the Times wanted to charge me for both print and
online. I preferred reading the physical paper but liked printing the
puzzle from their online site. I was also pissed at the Times coverage
of a number of issues at the time.&lt;/p&gt;
&lt;p&gt;
I picked up the puzzle again when Covid started and have only missed a
few days since. I&amp;#39;m pretty sure the puzzle is easier these days. Way
back when, I&amp;#39;d sometimes complete or almost complete a Saturday puzzle
but more frequently I&amp;#39;d just fill in a smattering of words. On this
run, I&amp;#39;ve completed every puzzle I started except one. I say the
puzzle must be getting easier because if anything, I&amp;#39;m getting dumber.&lt;/p&gt;
&lt;p&gt;
I was doing the puzzle the other day and it got me thinking about the
advice I give my students when I first meet them. I tell them it&amp;#39;s one
of the true secrets of success. Of course, I know it&amp;#39;s my job as teacher to tell
them these critical secrets and it&amp;#39;s their job as student to ignore
it.&lt;/p&gt;
&lt;p&gt;
I tell my students that regardless of when they do an assignment they
should read over it the day they get it. It doesn&amp;#39;t matter if the
assignment isn&amp;#39;t due for two weeks -  read it and give it a bit of
thought the day you get it. Even if you don&amp;#39;t work on the assignment
right then and there, your brain will start working on it in the
background.&lt;/p&gt;
&lt;p&gt;
When I do the crossword, particularly Friday and Saturday, but
sometimes other days as well, I start the puzzle with my first cup of
coffee. Sometimes I&amp;#39;ll get a good amount done but on those Saturday
puzzles, I&amp;#39;ll sometimes get stuck with the fewest of words. I&amp;#39;ll look
at clues and, well, have no clue and think &amp;#34;guess I won&amp;#39;t be finishing
this one.&amp;#34; At some point I stop - do something else. I check my email,
read some blogs in my feeds and a little later go back to the
puzzle. Invariably, I&amp;#39;ll read some clues that while opaque just a few
minutes earlier are trivial now. Hitting another wall I take another
break. I&amp;#39;ll come back after breakfast and fill in some more. So far,
this has just about always resulted in a solved puzzle.&lt;/p&gt;
&lt;p&gt;
This got me thinking of a few things. One, the break is giving my
brain time to work in the background while focusing on something
else. It also lets me look at the puzzle with fresh eyes when I pick
it up again. A last little point that&amp;#39;s neither here nor there is that
it is a manner of perseverance (no, I won&amp;#39;t use that term grit which
I hate).&lt;/p&gt;
&lt;p&gt;
To me this was a really clear and concise example of exactly what I&amp;#39;ve
been preaching to my kids for decades. Not only read the assignment
early but also when you hit a roadblock, take a break - clear your
head. Come back with fresh eyes. Work smarter not harder. &lt;/p&gt;
&lt;p&gt;
Unfortunately, I don&amp;#39;t think this example is more relatable to my kids
than the other ways I try to share this wisdom with them but I still
think it&amp;#39;s a great example.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rubrics for teacher observations are garbage</title>
      <link>https://cestlaz.github.io/post/observation-rubrics/</link>
      <pubDate>Wed, 09 Feb 2022 12:12:26 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/observation-rubrics/</guid>
      <description>&lt;p&gt;
There have been a lot of bad ideas foisted onto educators over the
course of my career. One of the ones that always pissed me off was the
use of a rubric for teacher observation. Specifically, using the
Danielson Framework. &lt;/p&gt;
&lt;p&gt;
The Danielson Framework is a LONG laundry list of topics and concepts
and for each a teacher could be rated ineffective, developing,
effective, or highly effective.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s garbage.&lt;/p&gt;
&lt;p&gt;
Sure, there are some good things in the framework but using a
restrictive rubric to judge a teacher is just a bad idea. Even the
frameworks creator, Charlotte Danielson publicly stated when this
nonsense got started that the framework should not be used to evaluate
teachers. Of course departments of education would give a nod nod
wink wink and say &amp;#34;no, it&amp;#39;s not for evaluation, it&amp;#39;s for teacher
improvement.&amp;#34;&lt;/p&gt;
&lt;p&gt;
I remember talking to a colleague at Stuy. She hated the Danielson
Framework that was being forced on teachers for observations. She was
known to be a strong teacher but according to Danielson, she was off
the charts good. She reason she hated it was because she recognized
that her teaching style just happened to map well to the framework du
jour and eventually it would be a different rubric and she would no
longer be good.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve actually seen this happen - teachers going from good to bad or
the reverse based on an observation rubric. The teacher didn&amp;#39;t change,
nor the students but change the rubric and you can get the results you
want. Good, or more frequently bad, I mean it was then Governor Cuomo
who said that his teacher evaluation metric was clearly no good
because too many teachers were scoring well.&lt;/p&gt;
&lt;p&gt;
Why am I bringing this up? Because student teachers. My CS Education
Masters program is about to have it&amp;#39;s first graduates and New York
State will have it&amp;#39;s first two newly certified CS teachers with said
degrees. They&amp;#39;re both finishing up our program with a last course (CS
Topics) and student teaching. Both of our student teachers will have
to be officially observed three times and ultimately I&amp;#39;ll have to rate
them and enter those ratings into Hunter&amp;#39;s system.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m ranting on Danielson because Hunter uses said framework to
evaluate its student teachers. Like an institution, Hunter&amp;#39;s a complex
beast and there&amp;#39;s both good and bad but seeing what is essentially the
Danielson framework being used to evaluate student teachers knocked
them (us) down a peg in my book.&lt;/p&gt;
&lt;p&gt;
Now, from a top down approach, using something like Danielson makes
sense. It gives a series of check boxes making things easy to measure
even if they&amp;#39;re the wrong things. It also made sense back when it came
to be because of the leadership model espoused by people like Michael
Bloomberg where he would take young teachers with a year or two of
experience and make them principals. A horrible idea which persists to
this day. Traditionally, an AP or P would have decades of teaching
under their belt. They knew what a good lesson looked like. Not
Bloomberg era principals. I mean, it takes a dozen years before you&amp;#39;re
really an intermediate stage teacher. A two year principal doesn&amp;#39;t
have a chance nor a clue.&lt;/p&gt;
&lt;p&gt;
The bottom line is that good (and bad) teaching is so varied and
nuanced that you can&amp;#39;t boil it down to a rubric. All you can say are
things like look for questioning, engagement etc..&lt;/p&gt;
&lt;p&gt;
My approach to observations was set by my first supervisor at Seward
Park High School. He was a master teacher. Just ask him. Unlike many
APs who just teach honors or the top level class, he would rotate
classes among his entire department. He would teach everything from
calculus to remedial math. He&amp;#39;d say &amp;#34;those kids deserve me too.&amp;#34; Yeah,
he was arrogant, but he really was a master teacher. He was also great
if he liked you but a horror if he didn&amp;#39;t. Fortunately, he liked me.&lt;/p&gt;
&lt;p&gt;
He said that the one thing you have to keep asking yourself when you
observe a class is &amp;#34;is learning happening.&amp;#34; It&amp;#39;s that simple. Then,
it&amp;#39;s up to you as the observer to figure out where, how and why and
what you can suggest to make it better (while observing the cardinal
rule of not fixing the lesson). This makes all the sense in the world
to an experienced educator and it allows them to hone in on an
observee&amp;#39;s strenghts and weaknesses while also adjusting for the class
and circumstances.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;ve got good observers and trust them, it works and works very
well.&lt;/p&gt;
&lt;p&gt;
What don&amp;#39;t work? Detailed rubrics by non teachers.&lt;/p&gt;
&lt;p&gt;
Unfortunately, right now, this is just another idiotic idea that
teachers are forced to deal with and just another thing driving
teachers away from the profession.&lt;/p&gt;
&lt;p&gt;
Will the powers that be ever learn? Probably not so for now it&amp;#39;s up to
good supervisors to shield their teachers from the nonsense and I
hope, in my capacity, when I&amp;#39;m able I can do the same.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When is remote better</title>
      <link>https://cestlaz.github.io/post/whats-better-remote/</link>
      <pubDate>Fri, 28 Jan 2022 08:13:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/whats-better-remote/</guid>
      <description>
&lt;p&gt;
With my first classes of the semester coming up on Monday I thought
I&amp;#39;d write a bit about what worked better remote than in person. When I
say better I mean specifically, worked better for me given my
situation. I think they worked better for the class but I can&amp;#39;t say
with any certainty given the length of the educational feedback loop
and other factors.&lt;/p&gt;
&lt;p&gt;
My in person teaching situation is as follows. Last semester I taught
2 in person classes (plus one remote). Both were in computer
labs. Minimal distance between the kids. Everyone had to have set
assigned seats and masks had to be on at all times. As the instructor,
I was allowed to remove my mask but I never would.&lt;/p&gt;
&lt;p&gt;
So, here we go.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
feeling safe
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Big one. Remote felt safer. It doesn&amp;#39;t really matter if it was safer
or not. This is a case of perception being reality. Since I felt less
safe - particularly at the start of the year before the students were
vaccinated, I can say for sure that I wasn&amp;#39;t as effective. If the
students didn&amp;#39;t feel safe I&amp;#39;m sure their learning also took a hit.&lt;/p&gt;
&lt;p&gt;
For all the dings on remote teaching, we all felt safe.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
participation
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
In my personal opinion, my classes last semester went from what I hope
were good classes to not so good lectures. Since students wore masks
and don&amp;#39;t project their voices in any case, student participation was
really tough. It would turn into asking students to repeat their
answers multiple times and to project louder and louder. It didn&amp;#39;t
help that windows had to be open and we&amp;#39;re in the heard of NYC with
all the associated street noise.&lt;/p&gt;
&lt;p&gt;
Now, remote participation is no great shakes. It&amp;#39;s really easy for a
student to just tune out but at least it was possible. Students could
be called on or could volunteer and between the Zoom and our Zulip
chat, there were far more opportunities for students to be involved.&lt;/p&gt;
&lt;p&gt;
Now, once we&amp;#39;re safe and mask free, in class will probably be better
than remote for this but for now, I can&amp;#39;t say that it is.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Group work
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Group work in person was pretty much impossible. Even though there was
little distancing between the students, they had to stay in their
assigned locations. On Zoom we had breakout rooms and on our Zulip,
group chats. In normal times, in person would blow away remote but
something reasonable on zoom and zulip was far better than nothing in
person.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Working with individuals / small groups
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I also couldn&amp;#39;t really work well with individual students (or small
groups if we were able to set them up). Online I could do a breakout
visit or an individual or group chat. Again, something being better
than nothing. The one place where in person was better is that, while
it was limited, I could eaves drop on the kids - look over while they
worked. It was limited because I didn&amp;#39;t want to get too close and also
for the reasons cited above but it was something. Can&amp;#39;t do that with
Zoom. Interestingly enough, Big Blue Button - an opensource Zoomalike
does have an eavesdrop on breakout rooms feature as it&amp;#39;s made for
teachers but last I checked the overall platform was not quite ready
for prime time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Polls
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Another big win for remote was the use of the Zulip chat. Emoji polls
replicate the use of a clicker but with more power and flexibility and
less overhead.&lt;/p&gt;
&lt;p&gt;
You can also give a question and have them all type a response but
not hit  the &lt;strong&gt;enter&lt;/strong&gt; key. The can then all post at once. You can do
similar things with hand signals in class but this is much more
flexible and robust. Big win.
.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Discussion of student work
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Finally, the chat platform gave us the ability to discuss more
student&amp;#39;s work. Typically, in class you can only look at one or two
student solutions for a given problem but using the chat, you can
stretch out the discussion. A typical strategy is to have  everyone
post their initial answer/response/whatever and then over the course
of time have each student comment on at least two other student
posts. Yes, this has it&amp;#39;s kinks but it&amp;#39;s a nice way to get more
students to look at more other student&amp;#39;s work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
Takeaways
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
At the beginning of last semester, I felt that we should have at least
started online - particularly with the students potentially
unvaccinated. Looking back, I think it would have been better
overall.&lt;/p&gt;
&lt;p&gt;
Truthfully, the ideal would have been to do remote until students were
vaccinated then allow professors to mix and match as best suits their
classes.&lt;/p&gt;
&lt;p&gt;
If we ever get past this and back to regular old school in person
classes, sure, that beats remote for instruction overall but remote
does have it&amp;#39;s moments. On top of that, good remote can beat crippled
in person and sometimes there are other good reasons for a remote
option such as why I want my teacher prep program to remain online.&lt;/p&gt;
&lt;p&gt;
So, there it is. Where I think remote teaching outshone in person for
me over the last year. As a college istructor I have more flexibility
than a K12 teacher so can mix in remote practices that I feel work
better. I&amp;#39;m hoping that over time those that set the K12 structure
would make it similarly possible at that level.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Trends In Professional Development in CS - it&#39;s not all good</title>
      <link>https://cestlaz.github.io/post/trends-in-pd/</link>
      <pubDate>Tue, 25 Jan 2022 17:46:43 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/trends-in-pd/</guid>
      <description>&lt;p&gt;
My friend &lt;a href=&#34;https://twitter.com/mrtomocon/status/1486012499304587269&#34;&gt;Tom&lt;/a&gt; tweeted earlier which led me to &lt;a href=&#34;https://csforall.medium.com/virtual-professional-development-is-here-to-stay-d2a3888f2d1a &#34;&gt;this piece&lt;/a&gt; on trends in
CS professional development (PD). Tom&amp;#39;s tweet was talking about virtual vs
in person PD so I initially thought I&amp;#39;d write about that and PD in
general but the article actually led to some deeper issues with PD.&lt;/p&gt;
&lt;p&gt;
The article talks about PD being focussed on specific units or
modules, narrowing to more popular offerings and also becoming less
localized. This led me to think about a real issue with CS PD that a
few of us have been harping on for years. The &lt;strong&gt;VAST&lt;/strong&gt; majority of CS PD
is provided for by &amp;#34;content providers&amp;#34; - people with a product to
sell. That might be a curriculum, a technical platform, or both but
something to sell. It&amp;#39;s not just CS knowledge and how to teach
it. I include organizations like code.org in this bucket because while
they&amp;#39;re not selling in the same sense as a textbook publish, they are
selling or pitching their curriculum and platform.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s easy to see how we got here. There are so few people out there
that actually know both the CS content and how to teach it that there
was a void so EdTech and a few others stepped in. The truth is, most
of the big PD providers also don&amp;#39;t have both deep CS and deep CS
pedagogical knowledge. What they do have is influence. This isn&amp;#39;t to
say that they&amp;#39;re all bad. There are some providers whom I like very
much and I think are doing a great job but that&amp;#39;s not the point here.&lt;/p&gt;
&lt;p&gt;
So, we&amp;#39;re left with a system where the majority of CS teachers have
very little CS or CS teaching experience and the providers are pushing
very specific training tied closely with their product, course, or
curriculum. I know I&amp;#39;ll get some hate for this but it&amp;#39;s just where we
are right now.&lt;/p&gt;
&lt;p&gt;
This might change over time as preservice teaching programs start to
emerge but I fear that many of them will just continue the trend of
pushing canned curricula. I&amp;#39;ve already seen proposed and existing
programs that essentially have a teacher candidate go through a
version of APCS-A, APCS-P, a computers in society class and something else
similar and voila, CS teacher.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s contrast all of this with math PD or at least the math PD that I
was subject to for most of my high school teaching career. Most
department meetings I attended always had a PD piece and that was
usually something interesting, or at least supposed to be interesting
presented by a colleague. It might be one of their practices or it
might be something they got from a conference or an outside PD. We&amp;#39;d
also have larger PD sessions a couple of times a year. Topics would be
things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to use the graphing calculator to explore functions&lt;/li&gt;
&lt;li&gt;History and math&lt;/li&gt;
&lt;li&gt;Math in your student&amp;#39;s worlds&lt;/li&gt;
&lt;li&gt;Exploring math competition problems&lt;/li&gt;
&lt;li&gt;An introduction to some advanced or new math topic&lt;/li&gt;
&lt;li&gt;Motivating a lesson on something or other&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Few of these were tied to a specific course and none were tied to a
specific implementation or curriculum. There might be a special
section on something like Geometers Sketchpad or a vendor might run a
session but those were in the minority.&lt;/p&gt;
&lt;p&gt;
It was mostly about math and how to teach math and most offerings were
by teachers not content providers.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know what math education PD is like now but what a word of
difference.&lt;/p&gt;
&lt;p&gt;
Will CS PD get better, and I do think locally, teacher  generated PD
is better? I don&amp;#39;t know. I&amp;#39;ve been told that the sessions I ran
pre-covid were worthwhile but I don&amp;#39;t see those happening again until
we can do in person events and in any event that&amp;#39;s small scale.&lt;/p&gt;
&lt;p&gt;
All this said and I haven&amp;#39;t touched on what led me to the article to
begin with - the point that PD is going much more virtual. Is this a
good thing? Sometimes but it&amp;#39;s also, in my opinion a confirmation on
the sad state of PD in general.&lt;/p&gt;
&lt;p&gt;
The idea behind PD is ongoing professional growth but the truth is,
teachers don&amp;#39;t really have time for PD during the school year so what
they do is mostly mandated. In my own experience and in talking to
many teachers in many subject areas the majority of PD forced upon
teachers is garbage. Even if it is good, too often it&amp;#39;s not relevant
to the teachers day to day and by the time it matters, if it ever
does, it&amp;#39;s long forgotten. Unfortunately, many teachers are required
to accumulate PD hours. In NY they&amp;#39;re called CTLE hours (Continuing
Teacher and Leader Education).&lt;/p&gt;
&lt;p&gt;
Since teachers are being forced to accumulate these hours and they
don&amp;#39;t find them valuable they&amp;#39;re taking the path of least
resistance. That frequently means online offerings.&lt;/p&gt;
&lt;p&gt;
None of this is to say that online PD is bad or always bad. It can be
very effective for some things. Others really should be done in
person. I&amp;#39;m just saying that it&amp;#39;s not a surprise that we&amp;#39;re here and
that we have to look deeper to figure out how we got here and why.&lt;/p&gt;
&lt;p&gt;
Where do we go from here? I have no idea. I&amp;#39;ve long resigned myself to
try to just worry about my corner of the world. I&amp;#39;ll make the best
offerings I can be they in my pre/in service courses or in PD wether
they&amp;#39;re in person or online. I think that those that come will find
value so those are the ones I&amp;#39;ll worry about.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do you need to know assembly to be a computer scientist?</title>
      <link>https://cestlaz.github.io/post/assembly/</link>
      <pubDate>Wed, 19 Jan 2022 06:47:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/assembly/</guid>
      <description>&lt;p&gt;
Another recent discussion online asked &amp;#34;do you need to know assembly
language to be a computer scientist?&amp;#34;&lt;/p&gt;
&lt;p&gt;
Sides quickly formed. On one side, it was a strict requirement. Some
going so far as saying you &lt;strong&gt;had&lt;/strong&gt; to start with it or at worst a
language like C. On the other side you had people claiming that it&amp;#39;s
wholly unnecessary for most CS graduates like many of the classes we
require of a CS major (I&amp;#39;m looking at you Calc II and beyond).&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t dispute that many people with CS degrees have great tech
careers and never program in assembly. Further, the idea that a low
level assembly programmer describes what a &amp;#34;computer scientist looks
like&amp;#34; or &amp;#34;should look like&amp;#34; is pretty off base.&lt;/p&gt;
&lt;p&gt;
On the other hand, I&amp;#39;d argue that a well educated computer scientist
should have some knowledge of low level concepts which can probably
best be explored through some exposure to assembly language.&lt;/p&gt;
&lt;p&gt;
To start, what is a computer scientist? As a field we still haven&amp;#39;t
worked that one out. Certainly, people employed as professors in
computer science departments are pretty much, by definition, computer
scientists but that&amp;#39;s the minority of CS majors.&lt;/p&gt;
&lt;p&gt;
To me, and this isn&amp;#39;t really a great formal definition, a person who
employs the creative and problem solving techniques associated with
computer science in their day to day can certainly call themselves a
computer scientist.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a wishy washy definition, I know but to me, it works. Someone
employed as a software engineer &lt;strong&gt;can&lt;/strong&gt; be a computer scientist or they
might not be. It depends on their job and how they approach it. Say
said SE is given screen descriptions, layouts and what to do when
events happen and they write code to implement this, they&amp;#39;re not being
a computer scientist. Likewise, if they implement an algorithm
specifically given to them for a task. On the other hand, if the same
person designs the interface making creative decisions involving
accessibility and usability or solves a problem using or designing an
algorithm then implementing one, then they would be, in my view acting
as a computer scientist.&lt;/p&gt;
&lt;p&gt;
Of course, in the general sense a SE could be a real software
engineer, software architect, or many more things as well.&lt;/p&gt;
&lt;p&gt;
So, does a computer scientist &lt;strong&gt;need&lt;/strong&gt; to actively know assembly?
No. That said, do they benefit from knowing something about it? I&amp;#39;d
say yes.&lt;/p&gt;
&lt;p&gt;
Years ago, I was watching a special with Itzhak Perlman, arguably the
greatest violinist of a generation and one of my favorites. He was
talking to and playing with a bunch of &lt;a href=&#34;https://en.wikipedia.org/wiki/Klezmer&#34;&gt;klezmer&lt;/a&gt; musucians. Or rather, I
should say trying to play with. Klezmer is something of a Jewish jazz
with a lot of improvisation. Perlman understood this, could
meaningfully converse about it with the other musucians but he had the
hardest time trying to keep up with them. Nobody could seriously say
that Izhak Perlman wasn&amp;#39;t and isn&amp;#39;t a brilliant musician and artist
but he really couldn&amp;#39;t play improvisational jazz. His training and art
are just in a different corner of the music world. That said, he was
certainly well versed in it. He knew jazz even though he didn&amp;#39;t
perform it.&lt;/p&gt;
&lt;p&gt;
I also saw this at a Bobby Mcferrin concert. He was performing with a
small string orchestra. I think maybe it was Gidon Kremer&amp;#39;s Kremerate
Baltica but I don&amp;#39;t remember. At one point he was calling out the
individual orchestra members to do some improv. It did not go
well. Again, these were all clearly master artists and they certainly
knew and were comfortable with Jazz, just not performing it on the
fly.&lt;/p&gt;
&lt;p&gt;
In case you really want to see what I&amp;#39;m talking about, I&amp;#39;ll give one
more example:&lt;/p&gt;


&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6mRT61rRSGc?t=37&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/iframe&gt;
&lt;p&gt;
Having some knowledge of assembly, or more specifically, how low level
things work is what I call a &amp;#34;latin&amp;#34; of CS. Understanding things like
memory or how a processor works help an individual understand buffer
overflows or why data types matter, why floating point calculations
are innacurate or why a hash table has to be sparse. They may never
program in assembly but some knowledge will make them a stronger
computer scientist. I would say the same for my other CS latin -
theory. They might not use it day to day but it will help shape their
decisions and make them a stronger software engineer or whatever.&lt;/p&gt;
&lt;p&gt;
So, can you be a gainfully employed tech person and never have seen
anything low level? Of course. Can you do computer science stuff and
say the same? Sure. But a well educated, well rounded computer
scientist will have had some exposure to low level concepts and have
some base level understanding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pension Consultations</title>
      <link>https://cestlaz.github.io/post/pension/</link>
      <pubDate>Mon, 17 Jan 2022 17:41:42 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pension/</guid>
      <description>&lt;p&gt;
Devorah and I just got off a Zoom pension consultation. Very
enlightening.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m 54 so regardless, can&amp;#39;t retire for another year but Devorah hit 55
last November and the DOE can really kill ones spirit and grind you down.&lt;/p&gt;
&lt;p&gt;
Overall I&amp;#39;ve been pretty happy at Hunter but I&amp;#39;ve written before about
the fact that I&amp;#39;ve been feeling some burn out and have been basically
doing 2+ full time jobs myself at Hunter for the past few years and
that&amp;#39;s just not sustainable.&lt;/p&gt;
&lt;p&gt;
Not saying I know what I&amp;#39;m going to do  but it&amp;#39;s important to know
your options.&lt;/p&gt;
&lt;p&gt;
I wasn&amp;#39;t sure what our retirement benefits would look like but when I
came in to teaching, looking at the older tier 1 teachers, I felt that
back then there was something of a societal pact, at least in NYC. As
a teacher back then, you weren&amp;#39;t going to get rich. In good times,
you&amp;#39;d do okay - not great but okay. On the other hand, in bad times,
you wouldn&amp;#39;t do terrible. You&amp;#39;d be able to have a decent home and
while you couldn&amp;#39;t jet set you&amp;#39;d be able to vacation reasonably and at
the end of it all, you&amp;#39;d have a comfortable retirement. Again, you
wouldn&amp;#39;t be rich, but you wouldn&amp;#39;t have to worry about making ends
meet either.&lt;/p&gt;
&lt;p&gt;
Over the course of my career, I saw that pact erode, even in NY. Young
teachers don&amp;#39;t earn enough for the housing market and the workload and
work pressures have just exploded. For the newest teachers, the
retirement end of the deal has also gotten worse.&lt;/p&gt;
&lt;p&gt;
So, what does it look like for us after putting in and paying in for
30 years?&lt;/p&gt;
&lt;p&gt;
With 30 years in, it turns out that pension will net me just a few
hundred dollars less than my current net. It&amp;#39;s much closer than I
thought it would be. Devorah doesn&amp;#39;t do quite as well. Her difference
is greater but that&amp;#39;s because she hasn&amp;#39;t crossed the 30 year barrier
yet. If she stays one more year, she will.&lt;/p&gt;
&lt;p&gt;
Add to that a substantial TDA and we&amp;#39;re actually in really good
retirement shape.&lt;/p&gt;
&lt;p&gt;
A lot of older teachers say they finally &amp;#34;had&amp;#34; to retire because based
on tax benefits and other factors, they were actually losing money by
not retiring.&lt;/p&gt;
&lt;p&gt;
Based on the differences I mentioned above we&amp;#39;re not there yet but
when you factor our housing, we might be, or if not it&amp;#39;s really
close. We currently live in what&amp;#39;s known as a &amp;#34;limited equity coop.&amp;#34;
It&amp;#39;s a coop but it receives local and state tax benefits. In return,
there are earning caps on the residents. We currently earn well over
the cap so pay a significant surcharge on our monthly maintenance.&lt;/p&gt;
&lt;p&gt;
When we retire, our lower incomes will result in a much lower
surcharge or maybe it will remove the surcharge entirely - we&amp;#39;re
working on figuring that out.&lt;/p&gt;
&lt;p&gt;
Depending on how that plays out we might actually be losing money if
we don&amp;#39;t retire.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll have to see.&lt;/p&gt;
&lt;p&gt;
As I said at the top. I&amp;#39;m basically happy at Hunter and I think I&amp;#39;ve
accomplished a lot so I&amp;#39;m not saying I&amp;#39;m out the door as soon as I can
walk. We&amp;#39;ve got to lower my workload but they&amp;#39;ve known that for a
while so hopefully are working to solve the problem. Devorah and I
also have to figure out what we want to do in our next phase. I do
know that regardless, I think I&amp;#39;ve still got something to give in the
CS Ed space.&lt;/p&gt;
&lt;p&gt;
For any young teachers out there - make sure to max out on that
TDA. It seems like nothing at first but when you look back after 20 or
30 years it&amp;#39;ll surprise you - that + the defined pension are what
allow you to have a few years of leisure at the end of a life of
service. And don&amp;#39;t let anyone tell you that you don&amp;#39;t deserve it or
that it&amp;#39;s an entitlement. You&amp;#39;ve paid into it for your whole career
and are just getting back what you&amp;#39;ve earned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What is a Syllabus and why does it matter?</title>
      <link>https://cestlaz.github.io/post/whats-a-syllabus/</link>
      <pubDate>Fri, 14 Jan 2022 07:14:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/whats-a-syllabus/</guid>
      <description>&lt;p&gt;
Over in the Facebook CS Ed groups there was a discussion of the
forthcoming code.org APCS-A curriculum. As far as I can tell, the
curriculum isn&amp;#39;t actually available yet so I can&amp;#39;t really comment on it
but the discussion started with a concern about some of the
announcement. It made me think of what a curriculum was when I started
teaching, what it is now, and the ramifications of the change.&lt;/p&gt;
&lt;p&gt;
Back when I started, I might get a math curriculum, a section of which
might have looked like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Day&lt;/th&gt;
&lt;th&gt;Topic&lt;/th&gt;
&lt;th&gt;Chapters&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5,6&lt;/td&gt;
&lt;td&gt;solving simple linear equations&lt;/td&gt;
&lt;td&gt;3.1 - 3.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;solving more complex linear equations&lt;/td&gt;
&lt;td&gt;3.5, 3.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8-10&lt;/td&gt;
&lt;td&gt;graphing linear equations&lt;/td&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
etc.&lt;/p&gt;
&lt;p&gt;
That was it. As a teacher, you knew the topic. If you had to get an
idea as to the depth of which to cover you looked at the text and
other resources you had in school and consulted with your
colleagues. You knew yourself, your school and your students and you designed
lessons to suit.&lt;/p&gt;
&lt;p&gt;
This is a far cry from what you&amp;#39;ll see today. Going back to the
forthcoming code.org apcs-a curriculum.  &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the blurb that code.org provides:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CSA curricula have traditionally been focused on the building blocks
required to design solutions to problems through programming. Creating
this new curriculum with equity in mind means reimagining the
structure and pedagogy to excite and inspire students from
underrepresented racial and ethnic groups and young women while
teaching the technical building blocks and preparing students for the
AP® exam. Code.org’s CSA curriculum:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incorporates culturally responsive and equitable teaching strategies
and frameworks by considering cultural references and learning styles
throughout the curriculum — from the vocabulary, to the visuals, to
the sequence of concepts taught.&lt;/li&gt;
&lt;li&gt;Acknowledges diversity of experiences and interests. Students
investigate real-world problems during class activities and make
connections to their own work. Projects are carefully designed to be
instructive yet open-ended, enabling students to demonstrate mastery
of concepts and engage in their passions without making assumptions
about their cultural background or life experiences.&lt;/li&gt;
&lt;li&gt;Brings to life a “Software Engineering for All” narrative. This
narrative helps students envision themselves as software engineers,
and the curriculum uses videos featuring presenters from different
backgrounds who work in technology to help students visualize
opportunities for their own futures.&lt;/li&gt;
&lt;li&gt;Helps students develop and model valuable, real-world career
skills. In addition to skills like tracing code segments and
documenting code, Code.org’s approach to CSA incorporates
collaboration and career skills that go beyond the AP® CSA course
requirements. For example, our curriculum includes a student-friendly
code review tool, which is a common quality assurance practice in the
technology industry.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There&amp;#39;s nothing inherently wrong with any of this but it is worth
noting that the APCS-A class is indeed a course concerned with &amp;#34;building blocks
required to design solutions to problems through programming.&amp;#34; It is
based on a college CS1 class which is all about programming to solve
problems. Like it or not, that&amp;#39;s the course.&lt;/p&gt;
&lt;p&gt;
Now, having a culturally responsive course etc. etc. is all good and I
guess that since APCS-A is usually implemented a full year course to
cover a half year of college material there should, in theory, be room
for all the additions but that&amp;#39;s not really here nor there.&lt;/p&gt;
&lt;p&gt;
The thing is, APCS-A is supposed to be about programming. A well
taught APCS-A will be culturally responsive etc. but that&amp;#39;s the
implementation. Unless something changed, that&amp;#39;s not actually in the
course as defined by the college board or the college classes on which
it&amp;#39;s based.&lt;/p&gt;
&lt;p&gt;
This says to me that when code.org publishes its curriculum, it will
most likely resemble the products pushed by most modern curriculum
providers - really not just a curriculum but a collection of very
detailed units and lessons.&lt;/p&gt;
&lt;p&gt;
Now, I do think that some of the things mentioned in the
code.org blurb like collaboration, software engineering, and other
topics like ethical ramifications &lt;strong&gt;should&lt;/strong&gt; be in curricula but even
so, the exact lessons should be teacher designed and tuned to their
school and students. &lt;/p&gt;
&lt;p&gt;
Again, nothing wrong with any of this. It can be a great and valuable resource,
particularly for an inexperienced teacher.&lt;/p&gt;
&lt;p&gt;
But then, there is something wrong overall and it&amp;#39;s with the direction
those with influence are taking as a profession. &lt;/p&gt;
&lt;p&gt;
Teachers are less and less expected as much to know their subjects, their
students, and how to teach but rather to follow the script. This
approach might get those students past the standardized exam but in
the long run it&amp;#39;s not giving students what they need nor deserve.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen this every year in my undergraduate CS classes. Since APCS
Principles was launched many of my students have come in having taken
the classed and &amp;#34;passed&amp;#34; the exam. Truth be told, the majority of them
come in basically knowing nothing. This wouldn&amp;#39;t be a problem if they
didn&amp;#39;t come in thinking they knew quite a bit.  You can contrast that
with the students that come in having taken APCS-A. These students, by
and large, do indeed have a reasonably solid introduction to
programming under their belts. Further investigation usually reveals
what &amp;#34;curriculum&amp;#34; they learned under and the CS background of the
teacher.&lt;/p&gt;
&lt;p&gt;
Some will argue that we need the crutch of the scripted lesson in
order to get started. Fair enough. I don&amp;#39;t disagree with this basic
premise but the truth is that history seems to indicate that we&amp;#39;re not
going to get beyond this. My favorite example is the old Cisco
networking class. Some teachers knew legit networks and decided to
teach the class - that was great. Some didn&amp;#39;t and just had their
students use the Cisco provided computer based modules which, in my
opinion, weren&amp;#39;t so great. Of those that didn&amp;#39;t start with a
networking background, just about all I&amp;#39;ve met never moved beyond
where they started in networking knowledge.&lt;/p&gt;
&lt;p&gt;
I fear we&amp;#39;re already seeing that in CS. School supervisors don&amp;#39;t know
any better so they see that they can check off the computer science
box. Many teachers probably don&amp;#39;t know better because their short term
training is focusing on how easy CS is and how you don&amp;#39;t have to learn
anything to teach it rather than the truth - it&amp;#39;s just like anything
else, it takes time and effort to really master. &lt;/p&gt;
&lt;p&gt;
I already know that my view isn&amp;#39;t the popular one but I&amp;#39;ll say it over
and over until I retire - CS teachers really do need to know CS and
providers that provide short form &amp;#34;training&amp;#34; and scripted content,
unless they push with even more vigor, the next steps, are ultimately
going leave us in no better shape than we started. Kids in well to do
schools with administrations that can afford to bring in knowledgeable
experts and the gap will widen with the poorest getting the low
end scripted curricula.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Will Online Influence Teaching</title>
      <link>https://cestlaz.github.io/post/how-will-online-influence-teaching/</link>
      <pubDate>Mon, 03 Jan 2022 08:53:28 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/how-will-online-influence-teaching/</guid>
      <description>&lt;p&gt;
I always enjoy Fred Wilson&amp;#39;s predictions for the new year over on his
  &lt;a href=&#34;https://avc.com&#34;&gt;blog&lt;/a&gt; and &lt;a href=&#34;https://avc.com/2022/01/what-is-going-to-happen-in-2022&#34;&gt;this year&lt;/a&gt;  was no exception.&lt;/p&gt;
&lt;p&gt;
I was inspired to think a bit on his education prediction:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;K12 systems around the US (and around the world) faced with teacher
shortages and desperate to erase several years of learning shortfalls,
will increasingly adopt online learning services in the school
building in lieu of and in addition to in-class learning.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Fred&amp;#39;s a VERY sharp and perceptive guy and a friend and I think
he&amp;#39;s correct on the adoption of online learning but I thought a couple
of points merited a deeper dive from a guy who&amp;#39;s spent a lifetime in
the trenches.&lt;/p&gt;
&lt;p&gt;
The first thing I think worth talking about, and this isn&amp;#39;t really
about the adoption of online learning are learning shortfalls They
don&amp;#39;t exist. Learning shortfalls due to Covid, also described as
learning loss is a made up concept. Usually pushed by politicians.&lt;/p&gt;
&lt;p&gt;
The claim is that due to COVID students learned less than what they
were supposed to and we have to make that up. Less than what? Less
than who? Everyone in the world was hit with this.&lt;/p&gt;
&lt;p&gt;
This comes back to our countries love affair with high stakes
testing - every student MUST finish Algebra by 8th grade, or MUST have
a certain reading proficiency by 5th grade (whatever that means).&lt;/p&gt;
&lt;p&gt;
On the other hand, we&amp;#39;re told that students work at their own
pace.&lt;/p&gt;
&lt;p&gt;
Which is it?&lt;/p&gt;
&lt;p&gt;
The truth is that a large amount of specific topics we cover in K12
could be eliminated and we&amp;#39;d be none the worse for wear. In Algebra 2
/ Trig there&amp;#39;s around a month of Circle Geometry. It seems randomly
placed and really doesn&amp;#39;t introduce any new meaningful concepts. I
suspect that it originally was placed in the course when Alg2/Trig was
the terminal HS math course and people through &amp;#34;well, kids should see
this sometime&amp;#34; but now this is no longer the case. We could easily
knock it out.&lt;/p&gt;
&lt;p&gt;
Likewise, look at how Geometry evolved. Even though it&amp;#39;s supposed to
be a course about proof many schools only pay lip service to teaching
it. This is a result of high stakes testing. Teachers know that
teaching proof is HARD and learning it likewise. They also know that
the students need to pass the regents to graduate and that both
student and teacher will be judged on passing the exam. Further, they
know that the best route to get the student passing is to barely deal
with proof and focus on the rest of the class which is easier to teach
and learn and is worth the lions share of the points on the regents.&lt;/p&gt;
&lt;p&gt;
In English we can read one less Shakespeare and I&amp;#39;m sure we can go
down the list we&amp;#39;ll find that a lot of these things that kids didn&amp;#39;t
learn are really just arbitrary.&lt;/p&gt;
&lt;p&gt;
The other truth is that indeed people learn at different rates and
if we really cared about education we&amp;#39;d admit and deal with this
rather than keeping our lock step testing based system.&lt;/p&gt;
&lt;p&gt;
So, learning shortfalls are manufactured and could easily be
dismissed.&lt;/p&gt;
&lt;p&gt;
With that aside, we can look at online learning.&lt;/p&gt;
&lt;p&gt;
Just to get started - I think that online learning has a place. It can
be at times a great supplement to in person learning and at times it
can be the superior option. I&amp;#39;ll write more about that soon. Probably
not for another week or so since Devorah and I are hoping to get away
to San Diego for a little vacation later this week. My concern comes
from me being much more the pessimist than Fred.&lt;/p&gt;
&lt;p&gt;
Well, I used to be more of an optimist but working in the system for
30 years has a way of beating you down. Now I&amp;#39;m much more of a &amp;#34;hope
for the best, expect the worst&amp;#34; kind of guy.&lt;/p&gt;
&lt;p&gt;
My first fear is that online learning will be used just as Fred
mentioned, due to teacher shortages. I think this is likely to happen
and it&amp;#39;s not going to be pretty. Better to actually address teacher
shortages by, I don&amp;#39;t know, paying teachers fairly and having them
work in safe environments with reasonable work loads.&lt;/p&gt;
&lt;p&gt;
Instead, I see a new wave of technology based solutions like online
charters which have proven to be ripe for scandal or programs like the
technology based &amp;#34;credit recovery&amp;#34; courses that came online under
Bloomberg. These were self paced online courses where students clicked
through repeatedly. Great for graduation rates. Horrible for actual
learning.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re also going to see technology being used not to make teachers
more effective but either to add to their workload and/or class sizes.
A small and maybe frivolous example is when politicians were talking
about eliminating snow days - they&amp;#39;ll just teach online. Now, since
you don&amp;#39;t know a snow day is coming this leaves a teacher to scramble
at the last minute to come up with something and given how much time
can go into prep, this is a BIG add to the teachers week. As a
teacher, I loved snow days not so much as a &amp;#34;party day&amp;#34; but rather as
a day where I got the gift of a day back to catch up on planning,
grading, and paperwork. Besides, I think that rare surprise day off is
actually healthy for kids.&lt;/p&gt;
&lt;p&gt;
A bigger example is that I&amp;#39;m thinking that we&amp;#39;ll see schools expecting
teachers be available to students and parents 24x7. We already see
this starting.&lt;/p&gt;
&lt;p&gt;
A third would be instead of a small class where teachers and students
interact using technology to balloon up the class size. So much of
teaching, particularly in K12 is about relationships and interactions
and you just don&amp;#39;t get that when you decide to do a class on computers
and drive up the enrollment.&lt;/p&gt;
&lt;p&gt;
You&amp;#39;ll also see technology that seem to help teachers but even those
have a downside. Prime example - autograders. They&amp;#39;re great for
providing students with instant feedback and for grading &amp;#34;short
answer&amp;#34; or &amp;#34;right or wrong&amp;#34; questions but when a teacher grades a
teacher sees a students work and gains insights into the student. If
I&amp;#39;m not grading projects, I&amp;#39;m losing that insight.&lt;/p&gt;
&lt;p&gt;
Actually, a great example is looking at student projects in the old
world and in the new one.&lt;/p&gt;
&lt;p&gt;
In the old world, a project is assigned in class. Maybe we have a lab
day or two, then some work on their own time. More lab days, then
finally the project is due and the teacher grades. With all that in
class time, the teacher is observing and interacting and getting to
know the students and their work. To be honest, by the time I grade a
project, I already know most of the story but reading over the code
and running the program on my own is the final piece.&lt;/p&gt;
&lt;p&gt;
The new way? The project is assigned. Work is done outside of hte
teacher&amp;#39;s view. The teacher only sees the students work if they ask
for help outside of class hours (since you can&amp;#39;t use that important
synchronous class time for that with 100+ students) and then it&amp;#39;s
autograded.&lt;/p&gt;
&lt;p&gt;
The old way takes more time and more work but that&amp;#39;s teaching and
learning. The new way will work great for the autodidacts and a number
of kids will flow through the machine but here technology which would
seem like a win, really isn&amp;#39;t.&lt;/p&gt;
&lt;p&gt;
This is a lot of &amp;#34;expect the worst&amp;#34; and I do want to be clear - I love
tech and think that tech can be a great boon to education if done
right. I&amp;#39;m just really wary of past experience being a predictor of
how things will go in the future. I think Smart, well meaning people
are going to continue to come up with wonderful tools that could do
worlds of good for students and teachers but I have little confidence
in the decision makers deploying them in ways that will truly benefit
students.&lt;/p&gt;
&lt;p&gt;
I hope I&amp;#39;m wrong and none of this pessimism will stop me from working
with technologists, ed tech people, and playing with the new toys as
they become available. I just also want to be prepared for the worst
while I&amp;#39;m hoping for  the best.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exit 2021</title>
      <link>https://cestlaz.github.io/post/exit-2021/</link>
      <pubDate>Sat, 01 Jan 2022 09:04:37 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/exit-2021/</guid>
      <description>&lt;p&gt;
So, 2021&amp;#39;s gone and 2022 just starting.&lt;/p&gt;
&lt;p&gt;
In a lot of ways, I don&amp;#39;t really see this as a new year. Maybe after I
retire but for me and I&amp;#39;m guessing other working teachers the year
really starts in early September.&lt;/p&gt;
&lt;p&gt;
Still, the calendar changed over so even if it feels like midyear to
me, it&amp;#39;s still worth a quick look back.&lt;/p&gt;
&lt;p&gt;
Obviously, a trying year for all of us so I won&amp;#39;t dwell to much on
that. Professionally, I think the highlight came in early June when
our first set of Advanced Certificate students filed and received
their state certifications as CS teachers. That was big. I had the
undergraduate CS Daedalus program running long enough to have grads
and a bit of a history but taking working teachers through my program
and to state certification let me check off another mission completed
box. It felt good, particularly to be able to do it with long time
friends and collaborators like JonAlf and Topher.&lt;/p&gt;
&lt;p&gt;
The lowlight professionally was probably my in person teaching. Don&amp;#39;t
get me wrong, teaching is still the highlight of what I do but I don&amp;#39;t
think I was up to par this past semester. Truth be told, I think I did
a better job fully remote in the prior year. There&amp;#39;s more to say about
that but I think it&amp;#39;s worth its own post in a few days. TL;DR -
teaching in masks and with fixed seating turned good lessons into bad
lectures. It also sucks when you overall don&amp;#39;t feel super comfortable
in the environment so it basically becomes, you go to class, you
teach, you leave. &lt;/p&gt;
&lt;p&gt;
There was a teaching highlight, however which was teaching my Ethics
course. That was fun and since it was remote and with the teachers I
worked with over the summer, I think it went pretty well overall.&lt;/p&gt;
&lt;p&gt;
On the personal front, I read more, programmed less, and continued to
try to learn to paint. &lt;/p&gt;
&lt;p&gt;
Overall, I can&amp;#39;t say much good about last year and I think a lot of
people feel that way so I won&amp;#39;t dwell on it.&lt;/p&gt;
&lt;p&gt;
As to this coming year and the rest of this school year? I think I&amp;#39;m
looking forward to the fact that in late May we&amp;#39;ll be graduating our
first couple of CS Education Masters students. That&amp;#39;s the last box I
feel I have to check to be able to say mission accomplished on what I
set out to do at Hunter and then some. Other than that it should
(hopefully) be business as usual and that&amp;#39;s not a horrible thing. I&amp;#39;m
unsure if things will be better in class before the Fall given omicron
but we&amp;#39;ll see.&lt;/p&gt;
&lt;p&gt;
Devorah and I are planning on going away late next week so that should
recharge the batteries to get ready for the Spring semester. Heading
off to San Diego - never been so if you&amp;#39;ve got some pointers on what
to do that might be off the beaten path, drop me a line.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Transparent Origami - Advent 2021 Day 13</title>
      <link>https://cestlaz.github.io/post/advent-2021-day13/</link>
      <pubDate>Mon, 13 Dec 2021 13:28:28 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day13/</guid>
      <description>&lt;p&gt;
No post so far on &lt;a href=&#34;https://adventofcode.com/2021/day/12&#34;&gt;day 12&lt;/a&gt;. I finished part 1 but my code was pretty
messy which turned part 2 into a mess. I still have to go back to get
that second star so just like day 10, my day 12 write up is on hold.&lt;/p&gt;
&lt;p&gt;
That said, I really enjoyed [[&lt;a href=&#34;https://adventofcode.com/2021/day/13&#34;&gt;https://adventofcode.com/2021/day/13&lt;/a&gt;
][today&amp;#39;s]] challenge. Paper foldind. You&amp;#39;re given transparent paper with
a bunch of marks on it. You have to fold the paper over horizontal or
vertical lines and examine the results.&lt;/p&gt;
&lt;p&gt;
Input was in the form of lines x,y pairs followed by lines specifying
the folds.&lt;/p&gt;
&lt;p&gt;
First decision - data representation. Since we&amp;#39;ve got a grid,
temptation would be to use a 2D structure like a 2D array but there
are two problems. One is that each fold will make the paper smaller
and smaller which makes a 2D array wasteful if not clumsy. The other
issue is that we don&amp;#39;t know the ranges for our coordiates. We know
that all the values will be positive but we have no idea where they
start and end.&lt;/p&gt;
&lt;p&gt;
Just like with the cellular automaton, I decided to use a dictionary
where the key was  the x,y pair and the entry was the mark. I could
have used a plain list for the points but the dictionary gave me quick
lookup. Also, if part 2 had us change the marks based on if they
overlap after a fold, I&amp;#39;d be prepared.&lt;/p&gt;
&lt;p&gt;
For convenience (and as I learned later, part 2) I also wanted a
routine that could print the board. Here&amp;#39;s that routine in case you
want to see some clojure.&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;board-&amp;gt;string [board]
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[maxx (apply max (map first (keys board))) &lt;span style=&#34;color:#75715e&#34;&gt;;; find the largest x&lt;/span&gt;
          maxy (apply max (map second (keys board))) &lt;span style=&#34;color:#75715e&#34;&gt;;; find the largest y&lt;/span&gt;
          k (keys board)

          &lt;span style=&#34;color:#75715e&#34;&gt;;; The next line makes a vector of maxy vectors&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;;; each of which has maxx spaces&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;;; basically a vector of vectors or 2D matrix if you would&lt;/span&gt;
          grid (into [] (repeat (inc maxy) (into [] (repeat (inc maxx) &lt;span style=&#34;color:#e6db74&#34;&gt;\ &lt;/span&gt;))))

          &lt;span style=&#34;color:#75715e&#34;&gt;;; go through the keys to our board (which is a hash table&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;;; and mark those squares with a #&lt;/span&gt;
          filled-grid (reduce (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[b [y x]] (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc-in&lt;/span&gt; b [x y] &lt;span style=&#34;color:#e6db74&#34;&gt;\#&lt;/span&gt;)) grid k)

          &lt;span style=&#34;color:#75715e&#34;&gt;;; change each line from a vector to a string&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;;; but leave the overall thing a vector since&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;;; it looks fine when I print it.&lt;/span&gt;
          string-grid (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(apply str %) filled-grid)
          ]
      string-grid
      ))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Once we have our &amp;#34;board&amp;#34; we can then deal with folding. Folds had to
be over a horizontal (ex: y=7) or vertical (ex: x=5).&lt;/p&gt;
&lt;p&gt;
It was important to note that since we&amp;#39;re folding we only want to take
the points with coordinates greater than the folding line and
transform those and not just transform all the points.&lt;/p&gt;
&lt;p&gt;
The actual transformation is pretty straightforward. Given the line&amp;#39;s
coordinate L the new point value can be calculated using:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
newcoord = oldcoord - 2 * abs(oldcoord-L)
&lt;/pre&gt;
&lt;p&gt;
We just go through the points and if they have to be transformed,
update them.&lt;/p&gt;
&lt;p&gt;
Part 1 solved.&lt;/p&gt;
&lt;p&gt;
Part 2 turned out to be far easier than I expected. Part 1 had us just
do the first fold. Part 2 had us do all of them at which point, if we
printed our board it would show us the 8 secret letters that formed
our anwer. Since the example on the problem page was a y fold and the
first fold of my data was an x fold I knew both my folds worked. I
just ran through all the folds and voila.&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m not complaining about an easy problem. If it were harder I
might not finish and then no write up but I was expecting something
more.&lt;/p&gt;
&lt;p&gt;
There were ways to make part two a bit more complex. I could see maybe
placing the data so far off the end so that you had to translate them
down closer to the origin so that your result would print or maybe do
something with overlapping marks when you fold as I mentioned up top.&lt;/p&gt;
&lt;p&gt;
Still, nothing wrong with an easy day mixed in and I still think it&amp;#39;s
a great problem. This could be done by a CS0 or CS1 class. What I
particularly love about problems like this is that when you
ultimately solve it you &amp;#34;decode&amp;#34; a secret message. Much cooler than
just getting some number.&lt;/p&gt;
&lt;p&gt;
So, over half way done. I still have that part 2 of day 12 to finish
but still captured half the total stars for the event. That&amp;#39;s my
starting goal each year.&lt;/p&gt;
&lt;p&gt;
If you want to see my full solution, you can check it out &lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day13.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dumbo Octopus and the Game of Life - AOC 2011 Day 11</title>
      <link>https://cestlaz.github.io/post/advent-2021-day11/</link>
      <pubDate>Sat, 11 Dec 2021 11:31:32 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day11/</guid>
      <description>&lt;p&gt;
I wasn&amp;#39;t particularly motivated to start &lt;a href=&#34;https://adventofcode.com/2021/day/11 &#34;&gt;day 11&lt;/a&gt; but took a look over
coffee. A grid of points where on each turn or step the points are
modified by some rule. Hey, this sounds familiar - cellular automata
like Conway&amp;#39;s Game of Life.&lt;/p&gt;
&lt;p&gt;
You set up your grid and then on each turn just follow the rules. In a
traditional Cellular Automaton like &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&#34;&gt;Conway&amp;#39;s Game of Life&lt;/a&gt;, on each
turn each cell looks at its six neighbors and makes a decision as to
its next state based on the neighbors and a rule.&lt;/p&gt;
&lt;p&gt;
For &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&#34;&gt;Conway&amp;#39;s Game of Life&lt;/a&gt;, a cell is either alive or dead. On each
turn, it counts all it&amp;#39;s neighbors and then decides if it will be
alive or dead next turn based on its current state and how many
neithbors are currently alive.&lt;/p&gt;
&lt;p&gt;
I love talking about Cellular Automata in class although I haven&amp;#39;t
done it since my Stuy days. One of my favorite topics is using CS to
solve a maze in NetLogo. I wrote about that &lt;a href=&#34;https://cestlaz.github.io/posts/2016-01-17-maze-ca/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Cellular Automata is also not a stranger to Advent of Code with three
problems being CS problems in 2020 and I think there were more in
earlier years.&lt;/p&gt;
&lt;p&gt;
This year the twist was that the rule for each step had two stages and
the second stage could repeat over and over again.&lt;/p&gt;
&lt;p&gt;
The first stage was just to increment the value of each cell. The
second involved &amp;#34;flashing.&amp;#34; This would happen if a cell&amp;#39;s value
exceeded nine. If a cell flashed, it would increment the value of each
of its neighbors. This could cause a cascade by having a neighbor&amp;#39;s
value exceed nine. This kept going until the board stabalized. You
also had to account for the fact that a cell should only flip at most
once per step.&lt;/p&gt;
&lt;p&gt;
Part one had you calculate the number of flashes over the course of
100 steps.&lt;/p&gt;
&lt;p&gt;
When I do CA in a class like APCS-A we usually use a 2D array to
represent our world. In NetLogo, the world is already a grid. Since
I&amp;#39;m using Clojure, I though a hash table would be easier. The keys are
x,y coordinates and the values are the state of the cell (the integer
value). To set things up I stole the code from my code from last year,
also coincidentally &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day11.clj&#34;&gt;day 11&lt;/a&gt;. My &lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day11/&#34;&gt;write up&lt;/a&gt; also talke about using a hash
table or dictionary instead of a 2D array.&lt;/p&gt;
&lt;p&gt;
The first stage of each step was easy. Just map the increment function
across the entire board.&lt;/p&gt;
&lt;p&gt;
The second step took more thought. First, I went through the board and
for any cell that was greater than 9 I incremented all its
neighbors. Then to make sure I don&amp;#39;t flash a cell more than once a
turn, I marked the current cell as being flashed. I did this by making
it a large negative number.&lt;/p&gt;
&lt;p&gt;
I repeated that second step over and over until it stabilized. That
is, you went through an iteration where the board didn&amp;#39;t change - no
new flashes.&lt;/p&gt;
&lt;p&gt;
Finally, I set all the negative cells, which indicated they flashed to
zero in preparation for the next step.&lt;/p&gt;
&lt;p&gt;
In the loop I counted and added up how many flashes we had and that
was part 1.&lt;/p&gt;
&lt;p&gt;
For part 2 you were looking for a step where every cell flashed at the
same time. This was pretty easy because we were able to essentially
use the same engine. The only difference was that instead of doing 100
steps, you kept going until every cell flashed in one turn. That
turned out to be easy to check. You know that happened when all of the
cells at the start of a turn are 0.&lt;/p&gt;
&lt;p&gt;
As usual, the full solution can be found on &lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day11.clj&#34;&gt;GitHub.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Wasn&amp;#39;t motivated to start today but it turned out to be a fun little
challenge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bracket Bonanza (AOC 2021 day 10)</title>
      <link>https://cestlaz.github.io/post/advent-2021-day10/</link>
      <pubDate>Fri, 10 Dec 2021 12:15:34 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day10/</guid>
      <description>&lt;p&gt;
I know, where&amp;#39;s day 9? Thursdays (and Mondays) are already tight for
me - I teach all morning and it&amp;#39;s been a rough week. I just had very
little energy and focus all day yesterday. I snuck some time in to
finish part 1 but couldn&amp;#39;t focus on part 2.&lt;/p&gt;
&lt;p&gt;
Today, however, my body gave me an extra half hour of sleep (til
4:30am) so I had extra time and energy. I was fortunate in that
today&amp;#39;s problem was essentially one that I&amp;#39;ve assigned time and time
again so I was able to wrap it up quickly and then go back to finish
day 9.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s pretty likely that there&amp;#39;ll be a day I can&amp;#39;t solve in the near
future so maybe I&amp;#39;ll write up day 9 then.&lt;/p&gt;
&lt;p&gt;
But for now, &lt;a href=&#34;https://adventofcode.com/2021/day/10&#34;&gt;day 10 - Syntax Scoring&lt;/a&gt; or as I like to say a bracket
bonanza. Inputs were lines of brackets like this:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
[({(&amp;lt;(())[]&amp;gt;[[{[]{&amp;lt;()&amp;lt;&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
Both parts of the problem involve figuring out if the line is valid,
that is, if each open bracket has a matching close bracket without
overlap. For example (([])) is valid but (([)]) is not becaue the
inner () and the [] overlap.&lt;/p&gt;
&lt;p&gt;
I could be like a kid doing a technical interview and pretend I hadn&amp;#39;t
solved the problem before the interview but the truth is, I&amp;#39;ve
done problems very similar to this most times I teach data structures.&lt;/p&gt;
&lt;p&gt;
As you process through the input, whenever you see a closing bracket,
it &lt;strong&gt;has&lt;/strong&gt; to match up with the last seen open bracket otherwise the
expression is invalid. This means you have to maintain a data
structure in such a way that the last open bracket you see is the
first one you check whenever you see a closing brace.&lt;/p&gt;
&lt;p&gt;
This is, by definition, a stack. A stack is a data structure where the
last item you put in is the first item you take out.&lt;/p&gt;
&lt;p&gt;
So, the algorithm is pretty simple.&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;make an empty stack
For each character in the input:
  1. If it&amp;#39;s an open bracket put it on the stack
  2. If it&amp;#39;s a close bracket, check the top of the stack.
     1. If the stack is empty you&amp;#39;ve got an invalid expression - exit
     2. If top of the stack doesn&amp;#39;t match your bracket - invalid -exit
     3. If top of the stack does match your braket, pop it off the stack and keep going&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
That&amp;#39;s basically it. The only remaining task is to figure out the
specifics to answer the problem.&lt;/p&gt;
&lt;p&gt;
For part 1 you had to run the above algorithm on each line of input
and for each invalid expression look up the invalid character&amp;#39;s value
(provide in the problem text) and add them all up.&lt;/p&gt;
&lt;p&gt;
For part two you had to take the remaining characters in the lines
once you hit an invalid brace and figure out a slightly more complex
score.&lt;/p&gt;
&lt;p&gt;
So, given that I had basically done this problem it wasn&amp;#39;t hard but it
was fun. This could be directly assigned to any data structures class.&lt;/p&gt;
&lt;p&gt;
As usual, my code can be found here:
&lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day10.clj&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day10.clj&#34;&gt;https://github.com/zamansky/advent2021/blob/main/src/day10.clj&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seven Segment Silliness - Advent 2021 Day08</title>
      <link>https://cestlaz.github.io/post/advent-2021-day08/</link>
      <pubDate>Wed, 08 Dec 2021 13:20:49 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day08/</guid>
      <description>&lt;p&gt;
Day 8 took a lot longer than the other days. Not all that much code
and not too complex, at least after getting through a scary sounding
lead up but going from problem statement to solution took both time
and thought.&lt;/p&gt;
&lt;p&gt;
As I started to read the problem, I wasn&amp;#39;t sure I&amp;#39;d finish it let
alone have time to write it up.&lt;/p&gt;
&lt;p&gt;
Take a minute to read over the problem. You can find it [[&lt;a href=&#34;https://adventofcode.com/2021/day/8&#34;&gt;https://adventofcode.com/2021/day/8&lt;/a&gt;
][here.]]&lt;/p&gt;
&lt;p&gt;
A pretty intimidating wall of text. &lt;/p&gt;
&lt;p&gt;
You&amp;#39;ve got a bunch of lines, each looking like this:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe
&lt;/pre&gt;
&lt;p&gt;
Each &amp;#34;word&amp;#34; represents a seven segment display. The side to the left
of the | is the input for that line and the stuff on the right, the
output.&lt;/p&gt;
&lt;p&gt;
The problem is that each line has the inputs scrambled. We jave to
figure out which letter maps to the top segment, which the bottom,
etc.&lt;/p&gt;
&lt;p&gt;
Oh boy.&lt;/p&gt;
&lt;p&gt;
It turns out that part one really wasn&amp;#39;t hard at all. In fact, it
could make a nice early CS assignment. If you look at the display for
a &lt;strong&gt;1&lt;/strong&gt;, it has two segment on the right hand side. It&amp;#39;s the only number
that uses 2 and only 2 of the seven segments. Likewise a &lt;strong&gt;4&lt;/strong&gt; is the
only four segment letter, &lt;strong&gt;7&lt;/strong&gt; is the only one that uses 3 segments,
and &lt;strong&gt;8&lt;/strong&gt; is the only one that uses all seven segments.&lt;/p&gt;
&lt;p&gt;
For part 1 you just had to look at all the outputs  - that is, the
stuff on each line after the | and add up the number of items that
are either a 1, 4, 7, or 8. That&amp;#39;s easily accomplished by going over
each of those items and checking if they have the correct number of
characters and then figuring out the total number of these items.&lt;/p&gt;
&lt;p&gt;
I had already parsed my data into the a two item list where the left
item is a list of inputs and the right a list of outputs:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;[ [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cg&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cdbga&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bcg&amp;#34;&lt;/span&gt; ...] [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;geac&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ceag&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;faedcb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cg&amp;#34;&lt;/span&gt;]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
So all I had to do go through all the output sides, count the characters in
each item and then add up the number of them.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;myfilter [x]
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;takes a list of numbers and returns only those that are 2,4,3, or 7&amp;#34;&lt;/span&gt;
    (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(contains? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;} %) x))


  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;part1 [  data]
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[results (map second data) &lt;span style=&#34;color:#75715e&#34;&gt;;; pull out all the outputs&lt;/span&gt;
          counted (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(map count %) results) &lt;span style=&#34;color:#75715e&#34;&gt;;; turn the &amp;#34;words&amp;#34; into counts of their lengths&lt;/span&gt;
          f (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;myfilter&lt;/span&gt; %) counted) &lt;span style=&#34;color:#75715e&#34;&gt;;; only keep the ones that are the right lengths&lt;/span&gt;
          total (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(count %) f) &lt;span style=&#34;color:#75715e&#34;&gt;;; count how many are in each line&lt;/span&gt;
          ]
      (apply +  total))) &lt;span style=&#34;color:#75715e&#34;&gt;;; add them all up &lt;/span&gt;

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt; data)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For part 2 we had to decode all the output lines and then turn them
into numbers and add them up.&lt;/p&gt;
&lt;p&gt;
Sounded really daunting. It required some thought but it wasn&amp;#39;t that
bad.&lt;/p&gt;
&lt;p&gt;
I wanted to build a dictionary where the keys were the digits and the
values would be the segments for that particular input line that
represent  that digit.&lt;/p&gt;
&lt;p&gt;
For a given line, we can do it pretty easily for the unique numbers 2,
4,3, and 7 so we just loop through all the items in a line  and when
we see an item with the appropriate length, we store the number in our
dictionary.&lt;/p&gt;
&lt;p&gt;
We might have something like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;align-right&#34;&gt;key&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;td&gt;b e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;td&gt;b c e g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;7&lt;/td&gt;
&lt;td&gt;b d e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;8&lt;/td&gt;
&lt;td&gt;a b c d e f g&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
These were the values from the first line of the example data. Also, I
used a Clojure set  to store the values since that makes the rest of
the solution easier.&lt;/p&gt;
&lt;p&gt;
I then took this dictionary and tried to add to it by figuring out the
5 segment numbers - specifically, 2, 3 and 5. It turns out that of the
5 segment numbers, the &lt;strong&gt;3&lt;/strong&gt; is the only one that ovelaps with the two
segments from the &lt;strong&gt;1&lt;/strong&gt; so we can find that one pretty easily. If the
five segment number wasn&amp;#39;t a 3, I looked to see if it was a 5. For
this, I looked to see if it had the left and middle segments that the
4 had. Finally, if it wasn&amp;#39;t a &lt;strong&gt;3&lt;/strong&gt; or a &lt;strong&gt;5&lt;/strong&gt; then it had to be a &lt;strong&gt;2&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
Next, I did the same for the remaining segments which were all 6
segments. You can look at my full code (linked below) for specifics.&lt;/p&gt;
&lt;p&gt;
Once we had the complet dictionary I flipped it - keys became values
and values became keys so we could look up the output numbers. From
there, it was easy to convert them to numbers and find the final
answer.&lt;/p&gt;
&lt;p&gt;
The part of this problem that was both fun and challenging was trying
to figure out how to decode a given letter given what you already
figured out. That took some time but getting the final answers for
problems like this are somehow more satisfying than just a straight up
&amp;#34;code it&amp;#34; problem.&lt;/p&gt;
&lt;p&gt;
You can find my full solution &lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day08.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
I was worried I wasn&amp;#39;t going to finished this one when I first read it
but I think it&amp;#39;s my favorite of the year so far.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How you look at a problem can make it easier - AOC 2021 Day 7</title>
      <link>https://cestlaz.github.io/post/advent-2021-day07/</link>
      <pubDate>Tue, 07 Dec 2021 09:04:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day07/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2021/day/7&#34;&gt;Today&amp;#39;s problem&lt;/a&gt; was similar to &lt;a href=&#34;https://cestlaz.github.io/post/advent-2021-day06/&#34;&gt;yesterday&amp;#39;s&lt;/a&gt; in that it&amp;#39;s ease or
difficulty really depended on how you looked at the question.&lt;/p&gt;
&lt;p&gt;
For yesterday, the problem was hard if you approached it by modeling
each and every lanternfish but it was much easier if you modeled the 8
days of the reproduction cycle. Sure, there was still work to be done
but looking at the problem the right way made things much easier.&lt;/p&gt;
&lt;p&gt;
Same thing for today, at least for me.&lt;/p&gt;
&lt;p&gt;
We were given a list of crabs and their locations and the challenge
was getting them all to the same spot. Fortunately, crabs in their
submarines can only move in one dimension - they can only move
horizontally. This gives us an input that&amp;#39;s just a list of integers,
each representing a crab location.&lt;/p&gt;
&lt;p&gt;
We want to move all the crabs to the same location and we want to do
it as efficiently as possible. The crab submarines use one unit of
fuel for each step taken so we want to minimize the overall amount of
fuel used.&lt;/p&gt;
&lt;p&gt;
If we look at this from the crab point of view this could seem
daunting - do we move the crabs one at a time? Do we have them
converge? Will we have to do some crazy recursive movement thing?&lt;/p&gt;
&lt;p&gt;
It turns out, none of the above. As soon as we realize that we don&amp;#39;t
have to figure out actual moves or actually move the crabs the problem
becomes much easier. It isn&amp;#39;t about the crabs but rather about the
locations. We want to figure out the minimal cost of moving all the
crabs to each location and then we can pick the lowest overall cost.&lt;/p&gt;
&lt;p&gt;
This turns out to be rather simple.&lt;/p&gt;
&lt;p&gt;
For each possible location (looping from smallest crab location to
larges):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;calculate the distance from each crab to this location.&lt;/li&gt;
&lt;li&gt;Add up all those distances.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We then just need to take the smallest distance and we&amp;#39;re done.&lt;/p&gt;
&lt;p&gt;
On to part two.&lt;/p&gt;
&lt;p&gt;
For part two, there was a change to the fuel cost. Instead of just
being the distance between the two locations, the cost of the fuel
increased by one for each step. So, for moving 1 step the cost would
be one. Two steps, 1+2, three 1+2+3 etc..&lt;/p&gt;
&lt;p&gt;
This was easy enough to model. I just changed the function that
calculated the old cost with one that calculated the new cost. To do
that, I took the difference between the two endpoints and calculated
the sum from 1 up to and including that number.&lt;/p&gt;
&lt;p&gt;
This added an additional loop but I figured might as well try it. It
was noticeably slower than part 1 - about 11 seconds as opposed to
around 90 msec but fast enough to get an answer and finish the problem
for the day. That said, it was easy enough to improve the solution if
you know that you can calculate the sum from 1 to n using the formula
(n*(n+1))/2. This got the speed back to just over 100 msec.&lt;/p&gt;
&lt;p&gt;
Looking over the adventofcode subreddit people were talking about
using the median to more quickly solve the problem but what I did was
good enough for me.&lt;/p&gt;
&lt;p&gt;
As always, the clojure code can be found &lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day07.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lanternfish and lots of data (AOC 2021 Day 6)</title>
      <link>https://cestlaz.github.io/post/advent-2021-day06/</link>
      <pubDate>Mon, 06 Dec 2021 16:25:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day06/</guid>
      <description>&lt;p&gt;
Today we had to model the growth of the lanternfish population
(&lt;a href=&#34;https://adventofcode.com/2021/day/6&#34;&gt;problem here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;
Lanternfish spawn new lanternfish every seven days. The trick is that
the original starting population consists of fish at different points
in the cycle. For instance, if your input data was 3,2,4 then each fish
would spawn a new fish in three, two, and four days respectively. The
new fish would set their timers to 8 and start counting down to their
spawn date on the next day and the original fish would reset it&amp;#39;s
timer to 6.&lt;/p&gt;
&lt;p&gt;
Of course, lanternfish never die so the population is going to get
quite large.&lt;/p&gt;
&lt;p&gt;
At first glance this seems to be an easy problem to model. Read the
fish into a list or array and start processing them a day at a
time. Add fish to the end as needed.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m guessing this would work for part 1 but doubt it would work for
part 2. Even before I started solving this just seemed like a problem
where part 2 would blow away our data set getting much to large much
too fast.&lt;/p&gt;
&lt;p&gt;
So, what to do? It turns out the problem is cyclical. Instead of
looking at fish, we can look at days. We have an 8 day cycle. Instead
of storing the fish, store the number of fish that will spawn on any
given day.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the insight.&lt;/p&gt;
&lt;p&gt;
I started by playing around with mod and trying to figure out how to
walk around the list while summing up fish but after a while my brain
started to hurt. Instead, I just did things in the most
straightforward way I could.&lt;/p&gt;
&lt;p&gt;
Fist, I made a list with my initial state. The example problem had a
data set of &lt;code&gt;&amp;#34;3,4,3,1 2&amp;#34;&lt;/code&gt; which led to this list:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Notice that I have 9  not 8 slots (indexed 0 - 8). That extra one at
the end is where I move the fish that are spawning today (day 0) so
they can start the cycle again.&lt;/p&gt;
&lt;p&gt;
From there, it&amp;#39;s just following the rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Grab the number of fish to spawn today.&lt;/li&gt;
&lt;li&gt;Move all the fish down a day - that is, the fish in day 1 go to day
0, day 2 to day 1 etc.&lt;/li&gt;
&lt;li&gt;Add the new fish to slot 6 (as per the specification).&lt;/li&gt;
&lt;li&gt;Add the number that spawned today to the end.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Repeat this for the requisite number of days and then add them all up.&lt;/p&gt;
&lt;p&gt;
The Clojure code for the complete solution is:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;      (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;solve [data days]
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[start-state (&lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;
                           (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[sofar next]
                             (&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt; sofar next inc))
                           [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ] data )]
          (apply + (&lt;span style=&#34;color:#66d9ef&#34;&gt;loop &lt;/span&gt;[i &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                          gens start-state]
                     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;lt; i days)
                       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[last (first gens)
                             gens  (into []  ( drop &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; gens))
                             gens  (assoc gens &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; (+ (nth gens &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) last))
                             gens  (conj gens last)
                             ]
                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;recur&lt;/span&gt; (inc i) gens)
                         )
                       gens)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For those of you not familiar with Clojure, that &lt;code&gt;reduce&lt;/code&gt; in the let on the second line is how we take the data
and build our starting state. For those of you who DO know clojure, I
could probably have made it cleaner with a threading macro instead of
the three step assignment to gens in the bottom let.&lt;/p&gt;
&lt;p&gt;
In any event, we walk away with a memory efficient time efficient
solution.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s probably some recurrence that could be set up and solved to do
this all with math but since the mod stuff made my head hurt working
on a recurrence equation would probably make it explode.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s usually at least one problem like this in advent of code each
year. Something where it looks like you&amp;#39;ll have to calculate forever
but it turns out you can set up a short repeating cycle to get the job
done. Unfortunately, they&amp;#39;re all too advanced for my average intro CS
students. Sure, I could go over the problem and they&amp;#39;d kindof get it
but I don&amp;#39;t think the majority would really grok it. Alternatively
they could just follow the rules given and led in class to setting up
the cycle but I&amp;#39;d love to come up with one where they can really
discover the magic.&lt;/p&gt;
&lt;p&gt;
I should spend some time thinking about this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>One man&#39;s complex is another man&#39;s simple (AOC 2021 Day 5)</title>
      <link>https://cestlaz.github.io/post/advent-2021-day05/</link>
      <pubDate>Sun, 05 Dec 2021 10:40:21 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day05/</guid>
      <description>&lt;p&gt;
Yesterday I wrote about the virtues of a simple straightforward
solution as opposed to a super &amp;#34;clever&amp;#34; one. Today reminded me that
what seems simple to one person might be clever to another.&lt;/p&gt;
&lt;p&gt;
Having successfully survived bingo with a giant squid, Today&amp;#39;s
&lt;a href=&#34;https://adventofcode.com/2021/day/5&#34;&gt;challenge&lt;/a&gt; had us navigating our sub so as to avoid dangerous parts of
the ocean. We were given a bunch of lines represented by endpoints as
input. If we graphed all the lines, some of them would overlap. The
more the overlap, the more dangerous. Given all the points on the
graph that are covered by a line, we had to determine how many points
were covered by two or more lines.&lt;/p&gt;
&lt;p&gt;
For example, if we have the following 10x10 grid with 1,1 being the
upper left adn 10,10 the lower right and the following lines:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
1,2 --&amp;gt; 8,2
3,1 --&amp;gt; 3,7
2,4 --&amp;gt; 7,4
6,1 --&amp;gt; 6,8
&lt;/pre&gt;
&lt;p&gt;
we&amp;#39;d have the following lines:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
..X..X....
XXXXXXXX..
..X..X....
.XXXXXX...
..X..X....
..X..X....
.....X....
.....X....
..........
..........
&lt;/pre&gt;
&lt;p&gt;
If instead of X we marked each square with the number of times it was
drawn on we&amp;#39;d have&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
..1..1....
11211211..
..1..1....
.121121...
..1..1....
..1..1....
.....1....
.....1....
..........
..........
&lt;/pre&gt;
&lt;p&gt;
In the above example, the answer to part 1 would be 4 since 4 squares
have more than one line on them&lt;/p&gt;
&lt;p&gt;
Here our lines are all vertical and horizontal. For part 1 we only had
ton consider horizontal and vertical even though the input might
specify diagonals.&lt;/p&gt;
&lt;p&gt;
Part 2 required we also deal with diagonals but only the ones with a
45 degree angle.&lt;/p&gt;
&lt;p&gt;
For a relatively new programmer the obvious solution would be to
create a 2D array. Then you just have to scan through the data and
fill the array. Finally, go over the array and count the cells that
were hit more than once.&lt;/p&gt;
&lt;p&gt;
This approach presents three problems. The first, which is minor is
that you&amp;#39;d first have to scan the input to determine the required
array size. The second problem is that you could have negative values
in your input so you&amp;#39;d have to somehow compensate for that
possibility. Finally, you could have spares input. What if there were
only two lines but one was from -1000000,-1000000 –&amp;gt; -999999,999999
and the other from 1000000,1000000 –&amp;gt; 1000001,1000001. You have two
tiny lines but you&amp;#39;d need a HUGE array.&lt;/p&gt;
&lt;p&gt;
For me, an easier, simpler solution was to use a dictionary (also
called hash table, or map depending on language). My grid would start
as an empty map and then I&amp;#39;d add points by walking the line segments. For
example if I had a line from 0,0 –&amp;gt; 2,0, I&amp;#39;d add three entries to the
map. The keys would be (0,0), (1,0), and (2,0), and the values would
be all 1 since each location was hit once.&lt;/p&gt;
&lt;p&gt;
If I then added the line (1,0) –&amp;gt; (1,2), I&amp;#39;d end up with this final
map:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  {(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) : &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
   (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note that the (1,0) entry now has a two since it was hit twice.&lt;/p&gt;
&lt;p&gt;
Once we added all the lines, pull out the values and count how many
are greater or equal to two.&lt;/p&gt;
&lt;p&gt;
Once armed with this approach it was easy enough to solve the
problem. You can check out the code &lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day05.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll maintain that I used a simple, clear, and maintainable approach
but it&amp;#39;s also worth noting that if I presented this problem to
relative beginners, depending on what tools they&amp;#39;ve used, they might
very well lean heavily on an array representation. This would
certainly be true when I was a beginner - we never saw maps or
dictionaries until we built them in our data structures courses. Now,
with students cutting their teeth in languages like Python where
dictionaries come up much earlier, perhaps today&amp;#39;s beginners would
also opt for the map / dictionary solution.&lt;/p&gt;
&lt;p&gt;
In any event, I always like problems like this where there are
multiple ways of representing the data in the solution which leads to
some nice food for thought.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working code is better than clever code (AOC 2021 day 4)</title>
      <link>https://cestlaz.github.io/post/advent-2021-day04/</link>
      <pubDate>Sat, 04 Dec 2021 12:17:30 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day04/</guid>
      <description>&lt;p&gt;
I always tell my students that the cleverest program is
worthless if it doesn&amp;#39;t actually work.&lt;/p&gt;
&lt;p&gt;
There are always some kids in class that all too often try to write
the fanciest solutions.&lt;/p&gt;
&lt;p&gt;
They&amp;#39;re the ones that write&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s){&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!*&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;(l(&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;s)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
instead of something like:&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string_length&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s){
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (s[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
    i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
to calculate the length of a string.&lt;/p&gt;
&lt;p&gt;
They try to code in a way they envision a master programmer coding
which invariably leads them to hours of heartache and misery as they
try to fix a poorly and complexly designed system. When I was a kid I
did this as well but learned better early on. One thing I was pretty
proud of as a young professional programmer were the number of
comments I&amp;#39;d get from peers and superiors on the readability of my
work.&lt;/p&gt;
&lt;p&gt;
Of course, my view isn&amp;#39;t unique. Much more famously, Donald Knuth said
the same when he quipped that &amp;#34;premature optimization is the root of
all evil.&amp;#34;&lt;/p&gt;
&lt;p&gt;
So while today&amp;#39;s advent of code problem presented a number of design
choices, I decided to go lazy and simple. Sure, my solution&amp;#39;s probably
slower than others but it&amp;#39;s easy and understandable.&lt;/p&gt;
&lt;p&gt;
Today&amp;#39;s problem had you playing bingo against a giant squid (full
problem &lt;a href=&#34;https://adventofcode.com/2021/day/4&#34;&gt;here&lt;/a&gt;). The core was that after a number of numbers were drawn,
each time you crossing that number off your boards, you had to figure
out if a board was a winner.&lt;/p&gt;
&lt;p&gt;
First the input. It was easy enough to read in the file. The first
line were the bingo balls in the order they were to be drawn and then
you had a bunch of 5 line blocks, each line with 5 numbers
representing a 5x5 board. Each board was separated by a space.&lt;/p&gt;
&lt;p&gt;
My strategy was to read in all the boards into a list, then as I draw
each bingo ball, replace all occurrences of the number drawn in on the
boards with an X. Then, check to see if we have 5 X&amp;#39;s in a row either
vertically or horizontally.&lt;/p&gt;
&lt;p&gt;
Reading was easy but there were some decisions to be made. I was going
to have a list of boards but what should a board look like? I didn&amp;#39;t
want to use a 2D array since that&amp;#39;s not Clojure&amp;#39;s strong suit but I
could easily use a list of lists (or vector of vectors).&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
((22 13 17 11  0)
 ( 8  2 23  4 24)
 (21  9 14 16  7)
 (6 10  3 18  5)
 (1 12 20 15 19))
&lt;/pre&gt;
&lt;p&gt;
If I were coding in Python, I could do this as well using a list of lists.&lt;/p&gt;
&lt;p&gt;
This representation makes it &lt;strong&gt;very&lt;/strong&gt; easy to check to see if we have a winner
going across but checking vertically is a little annoying and doing
the substitutions is also annoying.&lt;/p&gt;
&lt;p&gt;
On the other hand, I could represent the board as a list of 25 items
and use a mapping function to get to a specific row,col location such
as &lt;code&gt;index = board[row*5+col]&lt;/code&gt; . This representation makes checking the
board for winners a little onerous but marking squares with an X
becomes trivial - just replace all occurrences of the number in
question with an X. This can be done in Clojure using map:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;add-mark [board mark]
  (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= % mark) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt; %) board))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Thinking about it, it was really easy to switch from the list of 25
items to the list of list representations. We can do this with the
Clojure partition function.&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;))

    &lt;span style=&#34;color:#75715e&#34;&gt;;; results in:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;((0 1 2 3 4)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;; (5 6 7 8 9 )&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;; (10 11 12 13 14)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;; (15 16 17 18 19)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;; (20 21 22 23 24))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
So, we can use the 25 element list representation to mark the boxes
and then switch to the list of lists to check for a winner. What&amp;#39;s
better, we can transpose the list of lists, that is switch the rows
and columns so as to make the vertical check into a horizontal one.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my code to do all the checking:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;has-five? [board]
  (&amp;gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; board
           (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(filter (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[x] (= x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;))%)  ) &lt;span style=&#34;color:#75715e&#34;&gt;;; keep only the Xs&lt;/span&gt;
           (map count) &lt;span style=&#34;color:#75715e&#34;&gt;;; how many are there in each row&lt;/span&gt;
           (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(= &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; % )) &lt;span style=&#34;color:#75715e&#34;&gt;;; keep the winners (5 in a row)&lt;/span&gt;
           count) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;;; return true if we have any winners&lt;/span&gt;



(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;check-board [board]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[horiz (&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; board) &lt;span style=&#34;color:#75715e&#34;&gt;;; convert 1D board to a 2D one&lt;/span&gt;
        vert  (apply mapv vector horiz)] &lt;span style=&#34;color:#75715e&#34;&gt;;; transpose &lt;/span&gt;
    (or  (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-five?&lt;/span&gt; horiz)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-five?&lt;/span&gt; vert))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now, solving part 1 was easy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;take the next ball&lt;/li&gt;
&lt;li&gt;mark all the locations with the ball&amp;#39;s number&lt;/li&gt;
&lt;li&gt;see if there&amp;#39;s a winner&lt;/li&gt;
&lt;li&gt;If not, go back to step 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Sure, we&amp;#39;re doing more transformations on the data than needed but
it&amp;#39;s clean and easy and at least from my point of view, made the whole
exercise much less error prone.&lt;/p&gt;
&lt;p&gt;
On to part 2.&lt;/p&gt;
&lt;p&gt;
Turns out that was also pretty simple. Instead of stopping at the
first winning board we had to find the last winning board.&lt;/p&gt;
&lt;p&gt;
Pretty easy. We just had to modify the above procedure to the
following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;take the next ball&lt;/li&gt;
&lt;li&gt;mark all the locations wiht the ball&amp;#39;s number&lt;/li&gt;
&lt;li&gt;remove any board that&amp;#39;s a winner&lt;/li&gt;
&lt;li&gt;If we&amp;#39;re down to one board remaining we&amp;#39;ve found the board&lt;/li&gt;
&lt;li&gt;If not, back to step 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I did this but first got a wrong answer. After looking at my results I
realized that I stopped when I got down to 1 board but it hadn&amp;#39;t
necessarily won yet. I had to then continue drawing balls and marking
squares until that final board was solved.&lt;/p&gt;
&lt;p&gt;
That was it.&lt;/p&gt;
&lt;p&gt;
Upon later reflection, I realized my solution wasn&amp;#39;t perfect. It would
fail if there were some boards that were never solvable. This though
is an easy fix.&lt;/p&gt;
&lt;p&gt;
So, maybe not a super clever super fast solution but a clean one that
works and is easy to understand and modify. To me that&amp;#39;s the
definition of a great solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Work through the example!!!!!</title>
      <link>https://cestlaz.github.io/post/advent-2021-day03/</link>
      <pubDate>Fri, 03 Dec 2021 17:10:50 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day03/</guid>
      <description>&lt;p&gt;
It&amp;#39;s that time of year again. Yep, you got it. Time for &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of
Code&lt;/a&gt;. I&amp;#39;m not feeling nearly as motivated as in past years but so far
so good. Finished the first three days.&lt;/p&gt;
&lt;p&gt;
Today I got a good reminder - work through your examples. You can find
today&amp;#39;s problem &lt;a href=&#34;https://adventofcode.com/2021/day/3&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
For part 1 you got a list of binary numbers and had to figure out how
many ones and zeros there were in any given digit.&lt;/p&gt;
&lt;p&gt;
For example, if we had these numbers:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
0010
0111 
1001
1010
1111
&lt;/pre&gt;
&lt;p&gt;
The ones digit has 3 total ones and 2 zeros. The  2s digit has 4
ones and 1 zero. You then had to do some calculations based on if
there were more ones in a given column or more zeros.&lt;/p&gt;
&lt;p&gt;
Pretty straight forward. As usual, I&amp;#39;m working in Clojure so I used
map and reduce to figure out the number of ones in each column and
then did the required calculation. If you want to see the code, you
can find it &lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day03.clj&#34;&gt;here&lt;/a&gt;. Later in the day I looked at other people&amp;#39;s
solutions and it was interesting in that a lot of people approached it
differently - they basically looked at the list of numbers and rotated
it so that columns became rows and rows became columns which then make
counting ones and zeros easier,  but I digress.&lt;/p&gt;
&lt;p&gt;
I then had to rush through part 2 because I had to leave for the
ophthalmologist. I didn&amp;#39;t know if my eyes were going to be dilated and
if they were, I wasn&amp;#39;t going to be able to come back to the problem
until late in the evening.&lt;/p&gt;
&lt;p&gt;
I got something done but unfortunately, didn&amp;#39;t quite
finish. Fortunately, my eyes weren&amp;#39;t dilated so after getting home I
set to finish the problem.&lt;/p&gt;
&lt;p&gt;
Part 2 involved taking your list of numbers, calculating some values
using the part 1 code and then using those values to eliminate some of
the numbers. You then repeated this process until you were left with a
single number. See the problem statement and if you want my solution
for details.&lt;/p&gt;
&lt;p&gt;
I got something working but my answer was incorrect. I spent, well,
frankly, too much time trying to figure out why. I was
stumped. Finally I went back to the example in the question and
actually worked through it (as opposed to glancing over it). I quickly
saw my error. I had calculated the part 1 values based on the original
data then kept applying those to the data list until it reduced to a
single number. I was supposed to recalculate the part 1 values on the
reduced data set each time instead. Once I realized this, it was a
pretty quick solution.&lt;/p&gt;
&lt;p&gt;
This isn&amp;#39;t the first time my carelessness cost me time. Back in 2016 I
spent way too long trying to fix an Advent of Code problem where the
problem was that I had the wrong parameters in a function (&lt;a href=&#34;https://cestlaz.github.io/posts/2015-12-17-im-an-idiot/&#34;&gt;link&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;
In this case, the moral of the story is &lt;strong&gt;work through the provided
examples!!!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s it for today. If you haven&amp;#39;t checked out Advent of Code, I
highly recommend it and if you want to see my solutions, however far I
get, you can find them &lt;a href=&#34;https://github.com/zamansky/advent2021&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Finally, in the spirit of the season, Natan composed a new Chanukah
song.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re so inclined, you can check it out below:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/fatTWGfXO_o&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Seats on a plane - addendum</title>
      <link>https://cestlaz.github.io/post/airline-seats-2/</link>
      <pubDate>Tue, 02 Nov 2021 07:15:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/airline-seats-2/</guid>
      <description>&lt;p&gt;
While my &lt;a href=&#34;https://cestlaz.github.io/post/airline-seats/&#34;&gt;last post&lt;/a&gt; was well received, I did have a few conversations
where people asked why I did this with such a seemingly minor ethical
issue. They wondered that with issues the Facebook algorithm, bail and
sentencing algorithms, gerrymandering and other issues dominating the
ethical conversation, why focus this topic around something that seems
to affect far fewer people and might not even be such a big
deal. After all, when it does come up, flight crews can probably ask a
few people to shuffle seats and voila, problem solved.&lt;/p&gt;
&lt;p&gt;
The thing is, this was intentional and it was intentional on two
fronts.&lt;/p&gt;
&lt;p&gt;
First, who decides if an issue is major or minor? Our perceptions
change throughout our lives and through our experiences. Something
that might appear to be minor to us or minor right now could be major
to someone else. I remember my first week teaching at Seward Park HS
right after I left industry. Such an eye opener. Even though I went to
public schools and faced my share of challenges, I had no idea how
different my students lives were from mine. Things that might have
been a minor inconvenience to me were a brick wall to them. It&amp;#39;s also
not enough to just view &amp;#34;slam dunk&amp;#34; issues through an ethical lens. We
have to indeed walk the walk. I wanted a mundane problem that may have
resulted from Innocent intent to illustrate that it&amp;#39;s not about
teaching a lesson on the topic du jour but rather it&amp;#39;s about
everything. &lt;/p&gt;
&lt;p&gt;
I also wanted to pick a topic that wasn&amp;#39;t right out there in the
mainstream. If I had them work on a recommendation system or some
other issue that&amp;#39;s been all over the news these days, they would have
all guessed the punchline. I thought this would be low key enough so
that they&amp;#39;d discover the ethical issue by inadvertently creating it.&lt;/p&gt;
&lt;p&gt;
The other reason was that I wanted to keep the issue simple and
understandable. I already suspected that the code aspect would be a
challenge for some members of the class. I didn&amp;#39;t want a super deep
ethical issue to cloud that side of the equation. A simple problem
kept everything clean. They first seated the customers, realized that
kids could be separated from parents, decided that this should be
addressed, then tried to address it. Keeping problem simple is a tried
and true teaching strategy. There&amp;#39;s so much complexity in most ethical
issues and most programming problems and students can only cope with
so much at a time. This was an attempt to keep the load to a minimum.&lt;/p&gt;
&lt;p&gt;
As I said in the earlier post. I think the lesson needs tweaking -
particularly in order to make the coding level appropriate but I also
think it&amp;#39;s a lesson worth keeping.&lt;/p&gt;
&lt;p&gt;
This past week, the class has been working with regular expressions. I
get to deliver the punchline to that one tomorrow evening.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Airline Seats - An Ethics Lesson</title>
      <link>https://cestlaz.github.io/post/airline-seats/</link>
      <pubDate>Tue, 26 Oct 2021 14:43:28 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/airline-seats/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve held off on sharing any details on my Ethics in CS class because
I wanted to wait until some of it ran. I didn&amp;#39;t want to talk about a
topic and then find out that after we covered it I was all wrong.&lt;/p&gt;
&lt;p&gt;
Now that we&amp;#39;re well into the semester, I think it&amp;#39;s time to share a
few things.&lt;/p&gt;
&lt;p&gt;
One of my premises when I designed the course was that most ethics
courses are taken by either people who already have religion or people
who see it as the &amp;#34;easy course&amp;#34; without programming. The few courses I
saw out there were largely based on case studies and
discussion. Nothing wrong with that - we&amp;#39;ve got that as well but I
wanted to try something a little different.&lt;/p&gt;
&lt;p&gt;
I wanted to have the class play with some technical situation,
preferably with code, and then hopefully discover an ethical issue
after which we can discuss.&lt;/p&gt;
&lt;p&gt;
Here was my first attempt.&lt;/p&gt;
&lt;p&gt;
Overall I think the lesson has great potential but I also know it
needs tweaks. Most notably with teh level of comfort some of the
class had with Python. Next time around I want to address that issue
but I&amp;#39;ll talk about the specifics in the end.&lt;/p&gt;
&lt;p&gt;
I started by giving the class some code that provided a barebones
airline seating system.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an empty plane. I just made windows and interior seats figuring
that windows were more desirable and didn&amp;#39;t have to differentiate them
from aisles.&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
&lt;/pre&gt;
&lt;p&gt;
The code I provided also allowed for the purchase of an &amp;#34;economy plus&amp;#34;
ticket. An economy plus passenger could select their seat on
purchase. I had a function that with a 70% probability tried to select
a window seat and then it would just select a random seat.&lt;/p&gt;
&lt;p&gt;
You could also select a regular economy seat. For those, the airline
would assign a seat at some later point.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a plane where the economy plus seats have been sold and the
remaining seats are sold to economy but unassigned.&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
ep-4          avail          avail          ep-2           ep-5
ep-8          avail          ep-19          avail          ep-11
ep-3          avail          avail          avail          ep-6
ep-1          avail          avail          avail          ep-9
ep-14         avail          avail          avail          ep-16
ep-15         avail          ep-20          avail          ep-18
ep-10         avail          ep-17          ep-24          ep-21
ep-13         ep-22          avail          avail          win
ep-23         avail          avail          avail          win
ep-7          avail          avail          avail          ep-12
&lt;/pre&gt;
&lt;p&gt;
I asked the class to finish the routine that assigned the regular
economy seats. I also wrote a version that just assigned them
randomly. Here&amp;#39;s a sample result. Note that u-# represents a block of
purchased seats so you&amp;#39;ll notice u-1 appears multiple times
below. That passenger purchased multiple seats but they were assigned
all over the plane at the end.&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;

ep-13         u-6           u-1       ep-16      ep-24
ep-8          ep-15         u-9       u-3        ep-11
ep-22         ep-12         u-2       u-4        u-10
ep-9          ep-5          u-1       u-5        ep-25
ep-2          ep-21         ep-3      u-7        ep-17
ep-1          ep-23         u-8       u-8        ep-6
ep-14         u-12          ep-4      u-4        ep-26
ep-10         u-1           u-11      avail      ep-18
ep-20         u-6           u-11      u-9        u-2
ep-7          u-13          u-2       u-8        ep-19
&lt;/pre&gt;
&lt;p&gt;
The class was quick to notice that this could lead to families being
split apart and small children being seated away from parents. They
also noticed that this would affect poorer passengers more frequently
and to a greater extent than richer ones.&lt;/p&gt;
&lt;p&gt;
Great. Part 1 mission accomplished.&lt;/p&gt;
&lt;p&gt;
Now, the question became, should we do something about it and if so what.&lt;/p&gt;
&lt;p&gt;
That was the assignment.&lt;/p&gt;
&lt;p&gt;
The class noted that this was an unintended consequence of being
motivated purely by profit and airline convenience and that airlines
should do better. We also  noted that it&amp;#39;s not always so simple,
particularly if an airline is running on thin margins. Finally, we
discussed that this situation was real and in fact did result in
changes in regulations.&lt;/p&gt;
&lt;p&gt;
The following week, we discussed possible alternatives. How they might
work better and how they might affect an airlines bottom lines and if
that should really matter. We also discussed how similar ethical
scenarios might play out in other industries.&lt;/p&gt;
&lt;p&gt;
As a final piece, students had a long term assignment to code up an
updated algorithm that did better.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the long and short of it.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d like to think that by playing with the code, discovering the
dilemma and then trying to fix it led to a deeper appreciation of the
ethical issue and to be honest, the one big thing I want my teachers
to walk away with is more awareness of potential issues and that many
of them are not as obvious or simple as &amp;#34;stop doing that&amp;#34; even though
we&amp;#39;d like them to be.&lt;/p&gt;
&lt;p&gt;
That said, I&amp;#39;ve got to work on some things.&lt;/p&gt;
&lt;p&gt;
First and foremost my teachers came in with varying programming
backgrounds. They all completed a data structures in Java course over
the summer but a good number were not that comfortable with Python. I
covered Python over the first couple of weeks but I think I have to be
more structured with that in the future. More specific assignments
rather than giving them as much freedom as I did. I also think I&amp;#39;d
move this unit down in the syllabus - later after some smaller
programming assignments and then finally, I&amp;#39;d scaffold it
more.&lt;/p&gt;
&lt;p&gt;
Even so, I think it was worthwhile and a keeper. I think it could also
be a nice ethics assignment in any programming class that covers 2D
arrays or something similar.&lt;/p&gt;
&lt;p&gt;
There are a couple of other units that follow this do it and discover
theme. Once those happen I&amp;#39;ll report back on them as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 80 Vertico, Marginalia, Consult, and Embark</title>
      <link>https://cestlaz.github.io/post/using-emacs-80-vertico/</link>
      <pubDate>Mon, 25 Oct 2021 16:38:20 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-80-vertico/</guid>
      <description>&lt;p&gt;
In today&amp;#39;s video, we&amp;#39;ll take a look at a few new completion frameworks
for Emacs. For years I&amp;#39;ve been using &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Ivy&lt;/a&gt; and have been very happy with
it but since I decided to rebuild my Emacs config from scratch I
thought I&amp;#39;d try the new kids on the block, &lt;a href=&#34;https://github.com/raxod502/selectrum&#34;&gt;Selectrum&lt;/a&gt; and &lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt; along
with some support packages.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve liked Ivy from day one and still do. To be honest, from a day to day point of
view, I didn&amp;#39;t notice much difference between Ivy and the newcomers
but I do like their philosophies - they&amp;#39;re supposed to be simple and
minimalist and focus on the Emacs completion API without extending
it. You can read about their respective philosophies on their GitHub
pages. Conveniently, both have sections comparing themselves with the
other frameworks.&lt;/p&gt;
&lt;p&gt;
For configurations, I just cut and pasted the suggested configs.&lt;/p&gt;
&lt;p&gt;
Ultimately I settled on Vertico but both are worth a look.&lt;/p&gt;
&lt;p&gt;
The video shows off Vertico but arguably more importantly, it covers
some of the ancillary packages. First, although I don&amp;#39;t show much
about them are Prescient and Orderless - they let you control how your
selections pop up. I&amp;#39;m using Orderless which lets me search for
components by typing partial completions and using spaces to separate
but it lets you do it in any order. What I mean is that if I&amp;#39;m looking
for the command &amp;#34;vertico-mode&amp;#34; I can search by typing something like
&amp;#34;vert mode&amp;#34; which is what I&amp;#39;ve always done, but I can also do the
search for &amp;#34;mo vert&amp;#34; - typing the second part first. That&amp;#39;s pretty
slick.&lt;/p&gt;
&lt;p&gt;
Next is Marginalia which brings up extra context information when you
search for things. Things like command descriptions or file modes.&lt;/p&gt;
&lt;p&gt;
The third one we look at is Consult which is basically a collection of
useful commands using completions. Basically an answer to Ivy&amp;#39;s
Counsel commands.&lt;/p&gt;
&lt;p&gt;
Finally, and this is the show stopper, the video shows Embark. &lt;/p&gt;
&lt;p&gt;
Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-6-swiper/&#34;&gt;My post/video on Ivy/Swiper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/raxod502/prescient.el&#34;&gt;Prescient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;Orderless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/raxod502/selectrum&#34;&gt;Selectrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minad/marginalia/&#34;&gt;Marginalia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minad/consult&#34;&gt;Consult&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oantolin/embark/&#34;&gt;Embark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and of course, the video:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5ffb2at2d7w&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Turning 54</title>
      <link>https://cestlaz.github.io/post/turning-54/</link>
      <pubDate>Mon, 18 Oct 2021 13:59:51 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/turning-54/</guid>
      <description>&lt;p&gt;
So, tomorrow, October 19, is my birthday. The big 5 4. Okay, maybe it&amp;#39;s not a
traditionally big one. It doesn&amp;#39;t end in a zero or a five but I think
it rates.&lt;/p&gt;
&lt;p&gt;
Why? Because it&amp;#39;s one shy of 55.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the magic age when I can retire collect my pension should I
choose to do so. It&amp;#39;s what you get when start young and put in over
30 years of service.&lt;/p&gt;
&lt;p&gt;
Will I?&lt;/p&gt;
&lt;p&gt;
A few years ago I would have given an emphatic &amp;#34;no.&amp;#34; Now, I&amp;#39;m starting
to think &amp;#34;maybe.&amp;#34; I&amp;#39;ve written a few times here about feeling some
burnout and a lot less joy. Part of that&amp;#39;s covid and part of it&amp;#39;s doing
more than two full time jobs. Another factor is that by summer 2023,
actually, summer 2022, I&amp;#39;ll have pretty much accomplished everything
I&amp;#39;ve set out to do here. On top of this, Devorah will be able to
retire before I can so that also weighs in.&lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t get me wrong. There&amp;#39;s a lot I like about Hunter and a lot I
still enjoy about my job but there&amp;#39;s stuff that&amp;#39;s just wearing me
down.&lt;/p&gt;
&lt;p&gt;
Regardless of what happens, I plan to stay in the game in some
capacity. I want to figure out a situation where Devorah and I can
travel more - my one big regret, but I think I&amp;#39;ve still got something
to contribute to the CS Ed world.&lt;/p&gt;
&lt;p&gt;
If we can trim down my workload at Hunter and eliminate the things that
stress me out, I could be there a long time. If not, well, we&amp;#39;ll see.&lt;/p&gt;
&lt;p&gt;
For the time being, I&amp;#39;ll enjoy tomorrow. Nothing particularly
special - normal work day followed by a family dinner. Actually,
whole family dinner is always special, just not unusual for us.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Feeling like an English teacher</title>
      <link>https://cestlaz.github.io/post/english-teacher/</link>
      <pubDate>Thu, 14 Oct 2021 14:40:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/english-teacher/</guid>
      <description>&lt;p&gt;
So I&amp;#39;m teaching my Ethics and CS class for the first time. I
originally designed the course but didn&amp;#39;t teach it the first time
around. That honor went to my friend, Master Teacher Topher
Mykolyk. He of course did an amazing job - impossible to
follow. Fortunately, this is a different cohort so they don&amp;#39;t know how
great Topher was for the course :-).&lt;/p&gt;
&lt;p&gt;
Even though I have the syllabus and Topher&amp;#39;s notes from last time
around, first time through is very week to week but I think I&amp;#39;m
starting to get my legs under me. &lt;/p&gt;
&lt;p&gt;
This course is very different from what I&amp;#39;ve taught in the past. It&amp;#39;s
also  different from the ethics courses I&amp;#39;ve seen currently out
there. Specifically, I wanted a programming component in the
course. Still, there&amp;#39;s a lot more open ended discussion and opinion
based stuff going on.&lt;/p&gt;
&lt;p&gt;
I mean, when you do a class on an algorithm like mergesort or a
construct like a loop, it is what it is. You can motivate it in
different ways and engage the class but there&amp;#39;s only one punch line
and it&amp;#39;s set in advance. Here things are a lot looser. Most issues
have two sides and even when most of the class is on one like when we
talked about predictive policing, we can still
effectively play devil&amp;#39;s advocate for the other side. &lt;/p&gt;
&lt;p&gt;
It can also lead to the class going sideways. Yesterday we were
talking about basic web privacy. Tracking, cookies and the like. In my
mind I had the lesson mapped out. First, our &amp;#34;weekly ethicacy&amp;#34; student
presentation and then a short breakout, discussion on the info we
share, and then curated questions and resources  that we&amp;#39;d use in a
sequence of breakout room and whole class discussions. The trouble is,
after the first short breakout, the student conversation went directly
to what I had intended for our async work over the course of the
week. Oh well, time to &lt;a href=&#34;https://cestlaz.github.io/post/audible/&#34;&gt;call an audible&lt;/a&gt;. It wasn&amp;#39;t really a big deal,
the conversation moved in a different direction but it was still very
much in the wheelhouse of the day&amp;#39;s topic.&lt;/p&gt;
&lt;p&gt;
Must be what an English class can be like.&lt;/p&gt;
&lt;p&gt;
It was fun.&lt;/p&gt;
&lt;p&gt;
Overall I think the course is doing well but I won&amp;#39;t know for sure
until afterwards when I can debrief with the students. After all,
they&amp;#39;re the ones that ultimately determine if the class is successful. &lt;/p&gt;
&lt;p&gt;
Over the next few weeks I&amp;#39;ll share some specifics about the class. The
programming stuff in particular. Can&amp;#39;t do that now because we&amp;#39;re in
the middle and I don&amp;#39;t want any members of the class who might be
reading this to see the reveal before it&amp;#39;s time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 79 Project</title>
      <link>https://cestlaz.github.io/post/using-emacs-79-project/</link>
      <pubDate>Mon, 11 Oct 2021 11:24:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-79-project/</guid>
      <description>&lt;p&gt;
One of the comments on my last video talked about the new project
management support Emacs includes in it&amp;#39;s latest version -
project.el. I remembered reading about it when it rolled around but
then forgot and never checked it out.&lt;/p&gt;
&lt;p&gt;
Up until recently when working in projects I used &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;Projectile&lt;/a&gt;, a great
package by &lt;a href=&#34;https://twitter.com/bbatsov&#34;&gt;Bozhidar Batsov&lt;/a&gt;, also known as Bug. I only used it when
doing development work - that&amp;#39;s when I find myself jumping around
within a group of related files. At other times, I&amp;#39;m pretty much in
one file, do my thing, then move on.&lt;/p&gt;
&lt;p&gt;
I wrote a post and did a video on Projectile a while ago - you can
check it out [[&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/&#34;&gt;https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/&lt;/a&gt;
][here]].&lt;/p&gt;
&lt;p&gt;
As I mentioned in the last video, I decided to rebuild my Emacs config
from scratch and I&amp;#39;m trying to be a bit more minimalist so with that
reminder I got, I figure it&amp;#39;s time to check out the now built in
project.el. If it&amp;#39;s as good as projectile, or even, good enough, it
could be a nice alternative.&lt;/p&gt;
&lt;p&gt;
At it&amp;#39;s core, project.el works similarly to projectile. There&amp;#39;s a
prefix key an then an action which is restricted to your project. For
projectile, it was &lt;code&gt;C-c p&lt;/code&gt; and the default for project.el is &lt;code&gt;C-x
p&lt;/code&gt;. No big difference there. Projectile seems to have many many more
options but in general, I find that all I need is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Switch to a project - &lt;code&gt;C-x p p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find or open a file in a project - &lt;code&gt;C-x p f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Switch buffers in a project - &lt;code&gt;C-x p b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Delete all the project buffers - &lt;code&gt;C-x p k&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List the project buffers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Project.el has all except listing all the buffers. It also supports a
few other features that I think I&amp;#39;ll find useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;project dired - &lt;code&gt;C-x p d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;project shell (or eshell) &lt;code&gt;C-x p s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;project regex search and variants &lt;code&gt;C-x p g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#39;m not sure if projectile has these. It probably does and I could see
them being useful. I probable won&amp;#39;t use the regex searches much
because I&amp;#39;ll likely use other tools for those like consult-ripgrep.&lt;/p&gt;
&lt;p&gt;
So, it certainly seems like project.el has enough coverage for my
purposes. Another difference between the two projects is that
project.el only supports a couple of project definitions - things that
are supported by Emacs&amp;#39; VC system ad things supported by Emacs EDE
thing (which I&amp;#39;ve never really played with). I seem to recall
Projectile being more flexible.&lt;/p&gt;
&lt;p&gt;
In any event, project.el looks like it&amp;#39;s a nice simple alternative at
least for me. Check out the video for the runthrough:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/UagDCTjcifY&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>My project grading workflow</title>
      <link>https://cestlaz.github.io/post/using-emacs-78-grading/</link>
      <pubDate>Sun, 10 Oct 2021 10:44:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-78-grading/</guid>
      <description>&lt;p&gt;
Grading sucks. Even for a well crafted assignment it takes time and
rarely does it give you the same insights into your students as you
can get from just observing them and working with them, at least when
the environment supports you doing so. &lt;/p&gt;
&lt;p&gt;
This leads lots of teachers to go to auto graders. I can&amp;#39;t bring
myself going along with that. While assignments are imperfect and
tedious to grade, they do provide some insight to your students and
that&amp;#39;s an important part about being a teacher.&lt;/p&gt;
&lt;p&gt;
So, I always keep my eye out for ways to improve my project gradiing
workflow.&lt;/p&gt;
&lt;p&gt;
In the video below, I step through my process. It&amp;#39;s mostly Emacs but I
also use GitHub classroom and the terminal along the way.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re here as for the Emacs, I&amp;#39;d any thoughts on alternatives or
improvements.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re here as a teacher, I&amp;#39;d love to hear what your flow is like
and what tools you use.&lt;/p&gt;
&lt;p&gt;
Enjoy&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/7HLVcQi8GGk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Teaching non required topics - the command line</title>
      <link>https://cestlaz.github.io/post/non-required-topics/</link>
      <pubDate>Fri, 08 Oct 2021 08:56:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/non-required-topics/</guid>
      <description>&lt;p&gt;
The other day I saw Allen Holub lamenting on how students don&amp;#39;t learn
the command line.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;All my students this semester have gone through at least a year of programming classes, and some of them do not know how to do even basic stuff on the command-line. This strikes me as a huge flaw in the curriculum. Maybe the first CS class should be How Devs Use Computers 101.&lt;/p&gt;&amp;mdash; Allen Holub (@allenholub) &lt;a href=&#34;https://twitter.com/allenholub/status/1444393138492116992?ref_src=twsrc%5Etfw&#34;&gt;October 2, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
This reminded  me of the recent article and
discussion on how students &lt;a href=&#34;https://www.pcgamer.com/students-dont-know-what-files-and-folders-are-professors-say/&#34;&gt;don&amp;#39;t know what files and folders are&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Neither of these are surprising. Back in the day, computer science
classes were populated with self selecting stereotypes and in order to
get anything done you had to be familiar with your tools.&lt;/p&gt;
&lt;p&gt;
I wrote about this &lt;a href=&#34;https://cestlaz.github.io/posts/2015-01-15-kids-know-nuttin/&#34;&gt;years ago&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Nowadays, CS is trying to be more open and inviting and with more
modern tools you no longer need to know about files
and folders let alone a Unix command line.  Back in the day, even if
you used a program like Microsoft Word you&amp;#39;d have some idea of a file
folder structure but now with the cloud and tools like Google Docs you
just search for your documents.&lt;/p&gt;
&lt;p&gt;
The issue is that many CS teachers want students to know the command
line but it&amp;#39;s not part of the formal curriculum. What&amp;#39;s more, the
value of command line expertise is debatable and pretty hard to assess.&lt;/p&gt;
&lt;p&gt;
Personally, I&amp;#39;m a big command line wonk. I think you gain tremendous
power and flexibility if you use it but I also recognize that there
are many career tech professionals, particularly these days that will
never use it and arguably won&amp;#39;t really benefit from it. They live in
their IDE that supports their language. It integrates with their
build, test, and debugging tools and their company&amp;#39;s commuication
platform is also right there on the side. Now, many people in tech
could still benefit from command line expertise but try convincing a
first or second year undergrad where they not only don&amp;#39;t see added
value but also see that a large chunk of the text world also doesn&amp;#39;t
see the value.&lt;/p&gt;
&lt;p&gt;
So, if you do believe that the command line is important and want
students to learn it, how do you do it?&lt;/p&gt;
&lt;p&gt;
There are plenty of tutorials, videos and other learning material
including clever games like &lt;a href=&#34;https://gitlab.com/slackermedia/bashcrawl&#34;&gt;bashcrawl&lt;/a&gt; and I guess you could &amp;#34;force&amp;#34;
students to use the command line while in the classroom but nothing&amp;#39;s
going to stop them from using the file browser tool or an installed
IDE. Even if you severely limit the tools in lab machines, you have no
control over what they use at home and while the command line might be
more powerful, it&amp;#39;s not nearly as learner friendly.&lt;/p&gt;
&lt;p&gt;
Then there&amp;#39;s assessment. How do you do that? You could give
memorization type questions on exams but that&amp;#39;s a really bad
idea. Since the command line is process not product, this is a tough
nut to crack.&lt;/p&gt;
&lt;p&gt;
To be honest, I&amp;#39;ve struggled with this year after year and don&amp;#39;t have
a great solution. I try to encourage the command line and model how it
can be useful as much as I can but I know I&amp;#39;m only reaching a minority
of my students. In the end, I don&amp;#39;t really care if any of them
ultimately become hardcore CLI users but I really do want all of them
to gain enough exposure so that they can make an informed decision as
to its value and then make up their own minds.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coding For Problem Solving</title>
      <link>https://cestlaz.github.io/post/coding-for-problem-solving/</link>
      <pubDate>Fri, 01 Oct 2021 10:17:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/coding-for-problem-solving/</guid>
      <description>&lt;p&gt;
Like most CS educators I&amp;#39;m a regular reader of Alfred Thompson&amp;#39;s
blog. Alfred&amp;#39;s &lt;a href=&#34;https://blog.acthompson.net/2021/09/define-learn-to-code.html&#34;&gt;latest post&lt;/a&gt; is spot on but there was a line in it and a
particular Twitter response that reminded me that we so often forget
a big reason why people learn to code.&lt;/p&gt;
&lt;p&gt;
Alfred mentions, as did that Tweet about coding to solve
problems. What problem are you trying to solve. This is the mainstream
push - programming helps you solve problems. I&amp;#39;ve noticed a doubling
down on this with all the efforts (including mine) to integrate CS
into other subjects. While where and how much CS should be
integrated vs standalone is a topic for another day, integrating CS
into other fields is very much a &amp;#34;help solve the problems of that
field&amp;#34; approach.&lt;/p&gt;
&lt;p&gt;
Nothing wrong with all of this. It&amp;#39;s all good stuff but there&amp;#39;s
another side to the coin. It&amp;#39;s a side that I sometimes forget about
from in the trenches. In fact, a few years ago I was rambling on and
on about programming as problem solving and my friend and fellow CS
teacher Peter Brooks reminded me - the question doesn&amp;#39;t have to be
&amp;#34;what problem do you want to solve?&amp;#34; The question can be &amp;#34;what do you
want to create?&amp;#34;&lt;/p&gt;
&lt;p&gt;
Sometimes we forget that programming can be an amazingly creative
endeavor. You can use it to make something brand new and there doesn&amp;#39;t
necessarily have to be a problem to be solved.&lt;/p&gt;
&lt;p&gt;
Fred Brooks puts it nicely at the start of his classic work &amp;#34;The
Mythical Man Month:&amp;#34;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The programmer, like the poet, works only slightly removed from pure
thought-stuff. He builds his castles in the air, from air, creating by
exertion of the imagination. Few media of creation are so flexible, so
easy to polish and rework, so readily capable of realizing grand
conceptual structures….&lt;/p&gt;
&lt;p&gt;
– Fred Brooks, The Mythical Man Month &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I also saw elsewhere, maybe by Fred Brooks, maybe someone else talking
of a programmer being like a painter but whereas a painter has oils,
brushes, and pigments to create on a canvas, the programmer has
programming languages to create on the computer. &lt;/p&gt;
&lt;p&gt;
Maybe it&amp;#39;s the push for &amp;#34;practical&amp;#34; education, maybe the integration,
maybe the focus on testing. I have no idea but it seems that we
frequently forget about the creative side of the equation.&lt;/p&gt;
&lt;p&gt;
I mean, yes, the APCS-P specification does mention creativity in the
interestingly enough named &amp;#34;Create Task:&amp;#34;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Programming is a collaborative and creative process that brings ideas
to life through the development of software. In the Create performance
task, you will design and implement a program that might solve a
problem, enable innovation, explore personal interests, or express
creativity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
but it&amp;#39;s after &amp;#34;solve a problem&amp;#34; and &amp;#34;enable innovation.&amp;#34;&lt;/p&gt;
&lt;p&gt;
That creative side though shouldn&amp;#39;t be forgotten. Some of my students
most memorable projects didn&amp;#39;t solve a problem. I remember the
&amp;#34;Cheerleader Simulator&amp;#34; in NetLogo. No problem solved there but it was
a fun project. Another was Tamika&amp;#39;s stupid mouse dexterity game. A
simple game of her own design. I say stupid not becuase it was really
stupid - it was great. Rather, I say stupid becuase that game caused
me to waste so much time that end of year when I should have been
grading!!!!!!!!!&lt;/p&gt;
&lt;p&gt;
As we seek to engage a wider audience in CS we shouldn&amp;#39;t merely focus
on the problem solving nor the making money. The creative side is
really important as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Turning a good class into a bad lecture</title>
      <link>https://cestlaz.github.io/post/inperson-update/</link>
      <pubDate>Tue, 28 Sep 2021 08:11:34 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/inperson-update/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been teaching in person for about a month now so I thought I&amp;#39;d
give a quick update on how it&amp;#39;s going. I&amp;#39;ve written before about my
feelings on how Hunter started the semester (TL;DR - I was very
displeased) but that&amp;#39;s not the point of this post. As of today, I
believe every student has been required to be stabbed at least once
and on October 11, all students must be fully vaccinated to be on
campus.&lt;/p&gt;
&lt;p&gt;
So, off to the report. Going in person sounds great but now that I&amp;#39;m
doing it, I&amp;#39;m having second thoughts. Let&amp;#39;s leave safety precausions
out of it, I&amp;#39;m having second thoughts just in terms of how the current
situation and related restrictions have affected my teaching.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the low down. Students are supposed to wear masks at all
times and I wear mine as well. We&amp;#39;re supposed to socially distance but
that&amp;#39;s not possible given class and classroom sizes. Students are also
supposed to keep the same seed all the time, ostensibly for contact
tracing should anyone test positive.&lt;/p&gt;
&lt;p&gt;
To start, day one in person was important - I still haven&amp;#39;t met my
students from last year in person and I&amp;#39;d really like to. This years
students, at least I&amp;#39;ve seen all their foreheads.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s actually an issue. At least for me, the masks make it MUCH
harder to know my students. Can&amp;#39;t get to know a face when you can&amp;#39;t
see two thirds of it and names are going to be even harder for me.&lt;/p&gt;
&lt;p&gt;
Online, at least for those who put on cameras, we could at least see
each others full faces and expressions. Zoom doesn&amp;#39;t carry the same
nuance as in person but neither does a masked face.&lt;/p&gt;
&lt;p&gt;
The masks have another negative. You can&amp;#39;t hear anyone. I do my best
to actively project but students rarely do. This leads to me having
students repeat themselves multiple times and I also have to adopt a
conference speaker approach of repeating and projecting what the
student said so everyone can hear. This absolutely kills interactive
discussion and even question answer chains. It really pushes a lesson
more towards a lecture which, well, sucks.&lt;/p&gt;
&lt;p&gt;
The social distancing and keeping seats also negatively impact the
environment. I can&amp;#39;t get in with my students like I usually do. Even
when in lecture mode, I&amp;#39;ll move to different locations of the room for
a variety of reasons - that&amp;#39;s pretty much out. I also can&amp;#39;t just get
in close to support students. Likewise, group work can&amp;#39;t happen in the
same way. They can kind of sort of work with their direct neighbor but
I can&amp;#39;t have them work with each other as I&amp;#39;d do under normal
circumstances. &lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t get me wrong. I won&amp;#39;t compromise safety for convenience but the
safety protocols do a good job in turning a good class into a bad
lecture. &lt;/p&gt;
&lt;p&gt;
Online is also lousy in many ways but as long as the students are
willing you can all see each others faces and you can do all sorts of
interesting groupings and group work. I think my code review lesson
worked pretty much as well and maybe even better online last year than
it did in person the year before but I&amp;#39;m really at a loss on how to do
it as effectively in person in a few weeks with the safety
precautions.&lt;/p&gt;
&lt;p&gt;
Ideally, I&amp;#39;d like the freedom to mix and match. We were in person week
one, but let me decide when we&amp;#39;ll be in person and when we&amp;#39;ll be
remote. Let me use the best platform for any given lesson. This would
be a bit of a drag on the students depending on how their instructors
scheduled things but if students could use the rooms that they&amp;#39;d be in
person for as locations to work remote from it wouldn&amp;#39;t be too bad.&lt;/p&gt;
&lt;p&gt;
As usual, the ideal would be to trust the teacher and let them do
what&amp;#39;s best for their students but as we all know, that&amp;#39;s never the
way. Regardless, the interesting thing to me is that while I was
clamoring for a safe in person return, the truth is, given sensible
safety precautions, in person might just not be the best way to go. At
least not all the time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How The Hash Is Made</title>
      <link>https://cestlaz.github.io/post/how-the-hash-is-made/</link>
      <pubDate>Thu, 16 Sep 2021 17:08:19 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/how-the-hash-is-made/</guid>
      <description>&lt;p&gt;
Following up on my &lt;a href=&#34;https://cestlaz.github.io/post/what-they-used-to-know/&#34;&gt;last post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Soon after I read that tweet, I read Julia&amp;#39;s post on &lt;a href=&#34;https://jvns.ca/blog/2021/09/10/hashmaps-make-things-fast/&#34;&gt;hash tables&lt;/a&gt;. This
got me thinking more about what is and isn&amp;#39;t taught in school. Hash
tables were always taught in CS programs but back in the day you might
not have used them much after your data structures or algorithms
classes. Nowadays you&amp;#39;re much more likely to use them as they&amp;#39;re built
in to so many platforms.&lt;/p&gt;
&lt;p&gt;
Hash tables and related structures are great - I use them all the time
but they can also become a go to without thinking it through. This
actually came up in conversation with the same my high level SE friend
at that big bank from the last post. He also noticed that many interviewees would always
go right to the hash table even when there were red flags in the
question to warn away fro them.&lt;/p&gt;
&lt;p&gt;
For a hash table to get you that nice fast expected constant time
performance, it has to be sparse - few collisions. If you implement a
closed hash table (all the data is in a single array) and there&amp;#39;s not
a lot of spare space, it will fill up and all of a sudden that O(1)
insertion and retrieval time will go linear. I can&amp;#39;t say for certain
but I&amp;#39;m guessing the vast majority of Python programmers who use hash
tables (dictionaries) all the time don&amp;#39;t really know this or if they
do never think about it.&lt;/p&gt;
&lt;p&gt;
Is this a byproduct of using the built in implementations in college
combined with self taught programmers never seeing this at all? Maybe
but this was probably a deficiency even in my day.&lt;/p&gt;
&lt;p&gt;
This also came up when I accidentally interviewed for a position at
Google. There was a question about storing and accessing a bunch of
data. I don&amp;#39;t remember the question but there was a key line - &amp;#34;you
have unlimited storage&amp;#34; which is the trigger phrase for &amp;#34;use a hash
table.&amp;#34; I got a kick out of it but felt this was a you know it or you
don&amp;#39;t. I think I mentioned it to the interviewer.&lt;/p&gt;
&lt;p&gt;
This also brought to mind another example. Not mine - I read this in
John Bentley&amp;#39;s terrific book &lt;a href=&#34;https://tfetimes.com/wp-content/uploads/2015/04/ProgrammingPearls2nd.pdf&#34;&gt;&amp;#34;Programming Pearls.&amp;#34;&lt;/a&gt; The gist was that a
room full of very smart people were implementing a binary search. The
idea is that you have an array of data that is sorted and instead of
looking through every item one at a time, you calculate the middle of
the array, look there and then, if you haven&amp;#39;t found the item, you
throw away half the data and repeat the process with the remaining
half.&lt;/p&gt;
&lt;p&gt;
Every now and then, the implementations had a problem and nobody could
figure out why. As it turns out, in calculating the midpoint, they&amp;#39;d
add the lower value and the higher value and then divide the sum by
two.&lt;/p&gt;
&lt;p&gt;
Sounds reasonable.&lt;/p&gt;
&lt;p&gt;
The problem was that when low and high were at the upper end of the
data set the addition would go past the largest integer wrapping
around and causing wonky results.&lt;/p&gt;
&lt;p&gt;
Pretty subtle error but at least you&amp;#39;ve got a shot at figuring it out
if you understand integer sizes and how they work on your machine. &lt;/p&gt;
&lt;p&gt;
Having some solid low level knowledge won&amp;#39;t prevent this bug from
cropping up but it will give you a fighting chance at fixing it if it
does. &lt;/p&gt;
&lt;p&gt;
This particular problem probably won&amp;#39;t come up these days as integers
are MUCH larger than back in the day but I think it illustrates the
point.&lt;/p&gt;
&lt;p&gt;
Anyway, just more food for thought on how CS Education has changed
over the years, what we leave in, and what we leave out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What They Used To Know</title>
      <link>https://cestlaz.github.io/post/what-they-used-to-know/</link>
      <pubDate>Thu, 16 Sep 2021 10:42:05 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/what-they-used-to-know/</guid>
      <description>&lt;p&gt;
I saw this tweet by Julia Evans the other day.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;if you&amp;#39;ve
been working in computing for &amp;gt; 15 years -- are there fundamentals
that you learned &amp;quot;on the job&amp;quot; 15 years ago that you think
most people aren&amp;#39;t learning on the job today?&lt;br&gt;&lt;br&gt;(I&amp;#39;m
thinking about how for example nobody has ever paid me to write C
code)&lt;/p&gt;&amp;mdash; 🔎Julia Evans🔍 (@b0rk) &lt;a
href=&#34;https://twitter.com/b0rk/status/1435965181847343108?ref_src=twsrc%5Etfw&#34;&gt;September
9, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
I&amp;#39;ve never met Julia but have been following her on Twitter and
reading her &lt;a href=&#34;https://jvns.ca/&#34;&gt;blog&lt;/a&gt; for some time now.&lt;/p&gt;
&lt;p&gt;
The tweet got me thinking. Not so much about learning on the job but
rather on how colleges prepare their students. Recent boutique majors
and concentrations notwithstanding, a degree in CS seems to have
largely stayed the same from the early/mid 1980s when I got my BA to
today. There are variations but it was and still is largely&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;programming–&amp;gt;data structures–&amp;gt;algorithms&lt;/li&gt;
&lt;li&gt;some systems or OS stuff&lt;/li&gt;
&lt;li&gt;some theory &lt;/li&gt;
&lt;li&gt;math: calc 1, calc 2, discrete, linear, maybe stats&lt;/li&gt;
&lt;li&gt;another requirement or two which might differ based on institution&lt;/li&gt;
&lt;li&gt;electives&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sure, programs have changed over the years. At one point, computer
graphics was hot. Now, not so much. Courses like compilers also used
to be required more frequently but overall things look much the
same. That said, there have been some major changes - at least from my
perspective and those changes really affected how students were
prepared for professional careers. Now of course this is only my
perspective so who knows how accurate it is. Regardless, it should be
good food for thought.&lt;/p&gt;
&lt;p&gt;
I got my BA back in the mid 80s. That was the start of the PC
generation. Colleges were starting to get computer labs full of
IBM-PCs and then  later clones. MS-DOS ruled the day. &lt;/p&gt;
&lt;p&gt;
What did that mean?&lt;/p&gt;
&lt;p&gt;
It meant that while a few years prior, students used a time sharing
system for their programming classes now they were using  an
IBM-PC with Turbo Pascal. I can&amp;#39;t say for sure but looking back, it
seemed that people educated in PC heavy programs had a weaker sense of
all those issues that come with multiple people and multiple processes
happening on a machine at the same time.&lt;/p&gt;
&lt;p&gt;
On the other hand, having a relatively simple computer - one that you
had full control over may have led to an easier time in understanding
the low level ins and outs. You could learn about low level issues on
a PC and really understand everything. That doesn&amp;#39;t seem to happen as
much nowadays when even our personal computers and computing devices
run more like those multi user computers of old than the single
process no threads IBM-PC.&lt;/p&gt;
&lt;p&gt;
There was an opportunity to recapture this right before the Arduino
got big. The Arduino was based on an Atmel processer with a small
instruction set - a platform where a student could understand
everything from wire to application. For all the good that the Arduion
and related projects have led to, they&amp;#39;ve abstracted that low level
away.&lt;/p&gt;
&lt;p&gt;
A few years later Java became a popular college CS language followed
by Python. Both of these took memory management out of the core
programming-&amp;gt;data structures-&amp;gt;algorithms sequence. Sure, you probably got to
learn a bit about memory management and related issues in your systems
classes but I have to believe you didn&amp;#39;t really own that knowledge
like you would have had you had to manage memory throughout the core
courses.&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m not knocking the change. Moving to Java brought some
improvements and so does moving to Python. It&amp;#39;s just that as a
language or platform giveth it also taketh away.&lt;/p&gt;
&lt;p&gt;
The interesting things here is that the changes I noticed were not
directly intended but rather byproducts of changes made for other
reasons.&lt;/p&gt;
&lt;p&gt;
A final unintended consequence I noticed also seems to be a byproduct
of the Java revolution. Years ago after many programs had adopted
Java I was talking to a friend who was a high level SE at a big NY
bank. At the time finance was NY&amp;#39;s biggest tech employer. I think
Google might have recently moved to NY but wasn&amp;#39;t yet the player
they&amp;#39;d become - this was pre-IPO days and NY tech hadn&amp;#39;t yet
exploded. My friend was lamenting after a long day of interviews. None
of his interviewees - all from top rated CS colleges could handle what
he viewed as easy algorithm questions. Questions a that were
considered close to trivial by his interviewees from a few years
back.&lt;/p&gt;
&lt;p&gt;
After some discussion, we developed a theory. It might not be true but
looking around the landscape in the months and years following that
discussion, it might hold some water. With the acceptance of Java
students were now, more frequently using library calls. The .sort
method, the built in List, Tree, Map, and Set classes and more. This
is not to say that the students hadn&amp;#39;t learned about, say, the
mergesort in their data structures or algorithms classes but rather
they didn&amp;#39;t live it. Maybe  they did a quick implementation but then
it was gone from their memories.  Back in the day, most people in my
peer group started in Pascal and frequently moved to C. Even though C
had it&amp;#39;s built in sort, we coded our own more frequently. We also
didn&amp;#39;t have easy access to all the data structure and algorithm
libraries that Java had so we rolled our own and continued to use
them. When kids who did that interviewed, they could more easily see
how an interview problem related to an algorithm they coded and
tweaked half a dozen times. On the other hand, those that saw it once
and moved to a library didn&amp;#39;t have that in depth understanding.&lt;/p&gt;
&lt;p&gt;
Now, this is not to say that it was better in the old days. When they
removed memory management, they were able to add other
topics. Likewise when students didn&amp;#39;t need to implement their own
version of everything for their class projects, instructors could
steer students towards learning other new things.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not making a judgement call on better or worse but rather that
even without formal curricular changes the strengths and weaknesses of
our CS graduates have changed over the years quite possibly as a
result of unintended consequences of a variety of decisions.&lt;/p&gt;
&lt;p&gt;
I also don&amp;#39;t this only happens in CS. Take a look at math - the big
one would probably be bringing the calculator to the classroom. The in
your face change was the idea that on the one hand, students would
become weaker in arithmetic and manual calculation. On the other hand,
time could be spent on what might be considered richer topics due to
time saved. Lost in the shuffle were topics like linear
interpolation - a useful skill taught to navigate log and trig
tables. Those skills would be forever lost.&lt;/p&gt;
&lt;p&gt;
So, there&amp;#39;s my rant and ramble inspired by Julia&amp;#39;s post.&lt;/p&gt;
&lt;p&gt;
A day after I saw the tweet I saw &lt;a href=&#34;https://jvns.ca/blog/2021/09/10/hashmaps-make-things-fast/&#34;&gt;this post&lt;/a&gt; by Julia. Unless some
shiny object distracts me I think I want to look at how the unintended
consequences from some of the changes I mentioned directly relates to
it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Memorable Lesson (at least for one student)</title>
      <link>https://cestlaz.github.io/post/a-memorable-lesson/</link>
      <pubDate>Fri, 10 Sep 2021 13:31:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/a-memorable-lesson/</guid>
      <description>&lt;p&gt;
Back to calling an audible.&lt;/p&gt;
&lt;p&gt;
Around seven years ago I was visiting with some former students at
Google in Mountain View. One of them from way back in the late 90s,
Pawel, out of the blue said there was one lesson I taught that was
particularly memorable. Not memorable in the &amp;#34;that was fun&amp;#34; way like
maybe my Halloween adventures but memorable in that he felt he got a
lot more out of it than a normal lesson. Pawel mentioned a few of the
things he still remembered about a lesson he saw over two decades
earlier. &lt;/p&gt;
&lt;p&gt;
It was, in fact, one of the first big CS audibles that I can
remember calling. &lt;/p&gt;
&lt;p&gt;
It was second semester APCS - probably right after the AB exam. I
guess I&amp;#39;d been teaching around seven years so I&amp;#39;d classify myself as
an advanced beginner. I also hadn&amp;#39;t done any serious programming and
problem solving since I started teaching.&lt;/p&gt;
&lt;p&gt;
Was I a fraud?&lt;/p&gt;
&lt;p&gt;
Impostor syndrome was creeping in.&lt;/p&gt;
&lt;p&gt;
Back then I had a bunch of students who participated in the &lt;a href=&#34;http://usaco.org/&#34;&gt;USACO&lt;/a&gt; and
would discuss the programming from their competitions. While I talked
a good game, I started to wonder if I could back it up. Should I
really be telling these kids about best practices for problem solving
ad programming if I just talked the talk and couldn&amp;#39;t walk the walk?&lt;/p&gt;
&lt;p&gt;
To test myself, I decided to work through some of the competition problems. I figured
that I didn&amp;#39;t have to be able to solve the hardest of the hard ones
since only the best of the best solved in that stratosphere but if I
should be able to solve or at least approach most of the advanced
problems.&lt;/p&gt;
&lt;p&gt;
After some problem solving and coding I felt much better about
myself. I wasn&amp;#39;t living a lie.&lt;/p&gt;
&lt;p&gt;
I particularly liked the Digit Pals problem. Question 4 from the
1996-1997 &lt;a href=&#34;https://www.angelfire.com/ca2/lorddave/usa974.html&#34;&gt;National Championship&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Fast forward to class a few days later. Early in the period, for some
reason, I wasn&amp;#39;t happy with where things were going so I decided to
totally change directions. I decided I&amp;#39;d do a lesson that was
basically a walkthrough of my problem solving and coding process for
Digit Pals.&lt;/p&gt;
&lt;p&gt;
I started by looking at the problem, working through example and then
some of the things we discussed included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data representation (2D array)&lt;/li&gt;
&lt;li&gt;the high level logic of removing a digit pal (recursive flood fill)&lt;/li&gt;
&lt;li&gt;the high level logic of sliding down and over&lt;/li&gt;
&lt;li&gt;how to solve the whole thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the overall solver, I decided to go with a straightforward, blind,
recursive search. I figured it would be fast enough for two
reasons. First, I figured that since, if you remove the digit pal at
any location, it&amp;#39;s the same as removing that pal from any of it&amp;#39;s
locations so that there would likely be many many solutions and
second, there was a line in the problem statement saying that your
solution might not work on large cases. In any event, when all was
said and done and they released the test data, my solution worked
within time constraints.&lt;/p&gt;
&lt;p&gt;
After the design phase, I went to the live coding with a focus on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compiling and testing every concept. That is, a single loop, a
single if, a function etc.. This may sound excessive but I&amp;#39;ve been
doing this forever and it&amp;#39;s served me well as a hobbyist and as a
professional.&lt;/li&gt;
&lt;li&gt;Implementing the data structure first - a 2D array and then a way
to print it so that I could always tell the state of my program.&lt;/li&gt;
&lt;li&gt;incremental development - first remove a pal, then slide down, then
over, then the solver.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When it was all over the problem was solved. I&amp;#39;d like to think that
the students got something out of the audible. I learned years later
that at least one student did. As a teacher, I also got a lot out of
it. That day might not have been my first live coding lesson but it&amp;#39;s
the earliest one I remember. It was all impromptu but it got me
thinking more deeply about how I approach problem solving and
programming as well as how to teach both. Even all the little things
like my compulsive compiling and testing.&lt;/p&gt;
&lt;p&gt;
Funny - I have no idea what I was originally going to teach that day
but that audible turned into both a lesson I&amp;#39;ve repeated many times
as well as concrete techniques that I&amp;#39;ve used over and over through
the years.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Should every assignment be open ended?</title>
      <link>https://cestlaz.github.io/post/creative-projects/</link>
      <pubDate>Sun, 05 Sep 2021 06:43:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/creative-projects/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://blog.acthompson.net/2021/09/are-you-assigning-projects-or-recipes.html&#34;&gt;This post&lt;/a&gt; by my friend &lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred&lt;/a&gt; caught my eye yesterday. It&amp;#39;s a good
post - some good examples of inserting student creativity even into small
intro level assignments. While I like the post and agree with the
sentiment of open ended, student driven projects, I had to take issue
with the lead quote Alfred used: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“If you assign a project and get back 30 of the same thing, that’s not
a project, that is a recipe.”&lt;/p&gt;
&lt;p&gt;
– Chris Lehmann&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Open ended projects and student driven assignments are great and
important but so are ones with similar or identical solutions and
they&amp;#39;re also not recipes.&lt;/p&gt;
&lt;p&gt;
First, there&amp;#39;s a certain level of utility in a uniform assignment. If
the assignment is &amp;#34;write a program to convert Fahrenheit to Celsius&amp;#34;
you know that all the students know the conversion as you can provide
it and it also allows them to easily check their work, either through
an autograder or with each other. Yes, I know, some students students
could be tempted to cut corners and copy solutions but usually
attempts to control cheating do more to constrain students doing
things the right way than to prevent the cheaters from cheating.&lt;/p&gt;
&lt;p&gt;
Also, some student, particularly early on need the structure of a set
assignment and don&amp;#39;t do as well with a &amp;#34;do anything assignment.&amp;#34;
Saying &amp;#34;just make a converter&amp;#34; can be much more stressful and
difficult than convert from pounds to kilograms.&lt;/p&gt;
&lt;p&gt;
As to recipes? Not necessarily. Let&amp;#39;s take this small assignment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given two variables &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt;, write a code fragment that will swap
the values represented by &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt;. That is, if at the start, &lt;strong&gt;a&lt;/strong&gt;
represented &lt;strong&gt;5&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; represented &lt;strong&gt;10&lt;/strong&gt;, after your code, &lt;strong&gt;a&lt;/strong&gt; would
represent &lt;strong&gt;10&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; would represent &lt;strong&gt;5&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You could even add a hint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HINT:&lt;/strong&gt; Consider using an extra third variable in your solution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This isn&amp;#39;t a recipe, it&amp;#39;s an assignment. Even with the hint it doesn&amp;#39;t
tell the students exactly what to do, just the desired outcome. It&amp;#39;s
not a recipe but most or all of the solutions will look remarkably
similar.&lt;/p&gt;
&lt;p&gt;
By contrast, a swap &amp;#34;recipe&amp;#34; might read:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new variable named &lt;strong&gt;extraBucket&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Assign the value currently in &lt;strong&gt;b&lt;/strong&gt; to &lt;strong&gt;extraBucket&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Assign the value currently in &lt;strong&gt;a&lt;/strong&gt; to &lt;strong&gt;b&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Assign the value currently in &lt;strong&gt;extraBucket&lt;/strong&gt; to &lt;strong&gt;a&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a recipe. A student would literally just rewrite the steps
into the solution but even this might have it&amp;#39;s place in a class.&lt;/p&gt;
&lt;p&gt;
A more advanced assignment that leads students through building and
understanding something like a merge or quicksort could be set up
similarly. Not in any way a recipe but rather a valuable exercise
where all the students end up with very similar solutions. This is not
necessarily a bad thing, in fact it was all the rage a few years ago
as it could be set up as a discovery or experiential learning
experience. I also poo pooed that as being the silver bullet but as
with most teaching techniques, it has its place. &lt;/p&gt;
&lt;p&gt;
Then there are opportunities to introduce student creativity even when
the assignments are, at their core, all the same. I recall a session
at either SIGCSE or CSTA by &lt;a href=&#34;https://www.bootstrapworld.org/&#34;&gt;Bootstrapworld&lt;/a&gt;. They were describing one
of their classes major projects. It was a game. I forget the details
but at the core, all the student projects were the same. They differed
only in the graphics they used and the story around the game. That&amp;#39;s
where Boostrapworld interjected student creativity but the core CS and
math of the student projects were all the same. Did the fact that all
the assignments were essentially the same make this bad or a recipe?
Certainly not. Students go to express themselves uniquely but at the
same time the assignment was constrained and focused on what the
Bootstrapworld designers wanted.&lt;/p&gt;
&lt;p&gt;
So, there you have it. There&amp;#39;s nothing wrong with assignments where
the student results are largely the same. There&amp;#39;s also nothing wrong
with student projects that are 100% open ended. It&amp;#39;s all about the
teacher having multiple tools and using them as appropriate for their
students. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Calling an audible</title>
      <link>https://cestlaz.github.io/post/audible/</link>
      <pubDate>Thu, 02 Sep 2021 13:48:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/audible/</guid>
      <description>&lt;p&gt;
Be ready to call an audible.&lt;/p&gt;
&lt;p&gt;
This was advice I got during my third year teaching. I had just
transferred from Seward Park to Stuy and was being observed for the
first time by my former teacher and now supervisor Richie
Rothenberg. I forget exactly what the lesson was on - something with
coordinate geometry I think. The lesson was okay but it wasn&amp;#39;t going
over well with the class. I was teaching at too low a level for my
audience. I could feel it as I was teaching but as I was pretty
inexperienced I wasn&amp;#39;t confident in changing things up on the fly.&lt;/p&gt;
&lt;p&gt;
Afterwards, Richie and I debriefed. He said the lesson was
satisfactory - the magic word you need on any observation but that it
could have been much better. I had only been teaching at Stuy for a
few weeks and even though I was a Stuy grad I hadn&amp;#39;t had time to get
my head around where the students were at. Richie said that sometimes
you just have to call an audible. For a young teacher, easier said
than done. In addition to not having a great handle on my students yet
I also wasn&amp;#39;t confident in flying without a net. &lt;/p&gt;
&lt;p&gt;
This is why it&amp;#39;s so important for teachers to really know their
stuff - both the content and how to teach it. It&amp;#39;s why I&amp;#39;m concerned
when I see so many leaders in CS education pushing scripted curricula
and PD based training to fully &amp;#34;prepare&amp;#34; CS teachers in just a few PD
sessions.&lt;/p&gt;
&lt;p&gt;
First time through, particularly when you&amp;#39;re voluntold to teach a new
class you just want to survive. Follow that script, learn with your
kids and get through. You&amp;#39;ll grow and the kids will be richer than had
you not gone through the fire with them.&lt;/p&gt;
&lt;p&gt;
Two or three years down the road, however, if you&amp;#39;re still just
following the script you&amp;#39;re doing your students a disservice.&lt;/p&gt;
&lt;p&gt;
Of course, having subject knowledge doesn&amp;#39;t mean you have all the
answers but it lets you call that audible when a class needs something
that is not in the lesson plan or lets you talk about multiple
positions on subjects with no single best answer like coding style.&lt;/p&gt;
&lt;p&gt;
And then calling an audible isn&amp;#39;t always about making a lesson more
advanced. It can also be about sensing what a class needs at that
time. This is something I learned from Bruce Baskind at Seward
Park. I&amp;#39;ve lost touch with Bruce but he was a mentor and a friend when
I started this teaching thing and without the support I got from Bruce
and a handful of others back at Seward, I wouldn&amp;#39;t have made it.&lt;/p&gt;
&lt;p&gt;
Sometimes, you&amp;#39;ve got to turn off the academics. A class might need a
team building exercise or maybe just something fun. They might just
need to turn off school for part or all of the period. Sure, you burn
a lesson but sometimes that&amp;#39;s what the kids need and at the end of the
semester, they&amp;#39;ll be further along for it. I&amp;#39;d sometimes take a block
of class time and do Story Time - literally right out of grade
school - usually something from &lt;a href=&#34;https://www.personal.psu.edu/faculty/k/u/kuc14/sunny/Children%20Literature/The%20stinky%20cheese%20man/stinky%20cheese%20man.pdf&#34;&gt;The Stinky Cheese Man&lt;/a&gt; like &amp;#34;The Really
Ugly Duckling.&amp;#34; In some ways it&amp;#39;s related to the &lt;a href=&#34;https://www.youtube.com/playlist?list=PL9KxKa8NpFxJYgovyJhF4HZRsAqYKBLiG&#34;&gt;Halloween Stuff&lt;/a&gt; I
used to do at Stuy. Those were preplanned but that was all about
relationship building with the class - the non academic stuff that
supports the academics the rest of the year.&lt;/p&gt;
&lt;p&gt;
As this post is beginning to wander I think I&amp;#39;ll stop.&lt;/p&gt;
&lt;p&gt;
Next up - a specific audible I called that, at least for one student,
turned into a very memorable lesson.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day one back in person</title>
      <link>https://cestlaz.github.io/post/day-one-in-person/</link>
      <pubDate>Fri, 27 Aug 2021 06:46:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/day-one-in-person/</guid>
      <description>&lt;p&gt;
Yesterday was my first day of in person teaching since early
March 2020. It was,… interesting.&lt;/p&gt;
&lt;p&gt;
I was looking forward to actually seeing my  students in person but as
I mentioned in my &lt;a href=&#34;https://cestlaz.github.io/post/32-years/&#34;&gt;last post&lt;/a&gt;, i wasn&amp;#39;t comfortable given Hunter&amp;#39;s
current COVID policy and Delta.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll be happier come mid October when 100% of students on campus will
be vaccinated but at least for now, mask compliance is high. I only
had to talk to one student in a hallway to remind him to put his mask
back on and the only other non-masked person was a staff member (too
far away for me to address) who had it under her nose.&lt;/p&gt;
&lt;p&gt;
In class distancing was not possible at all and I wasn&amp;#39;t happy with
that and this will certainly cause me stress for the next couple of
months.&lt;/p&gt;
&lt;p&gt;
The positives? Actually meeting my students. I went through all of
last year not seeing any of them in person and in fact have only met
one face to face so far. That was just a couple of weeks ago at an
event we both attended. That was great. Even with cameras on there&amp;#39;s
no comparison with what you can pick up and communicate through body
language remote vs in person. Just not the same. A secondary positive
were the low-tech tools. I haven&amp;#39;t found a Zoom based whiteboard
solution that I like. There&amp;#39;s something to be said for a whiteboard
that&amp;#39;s up all period that can be modified not only by me but by other
members of the class along with the projected screen.&lt;/p&gt;
&lt;p&gt;
What about the negatives? In addition to the general health questions,
both physical and mental there were a few other things I noticed. Day
one for me is always more lecture oriented. I have to give them a lot
of material - policies and procedures, syllabus information,
etc.. That&amp;#39;s not to say that the students aren&amp;#39;t involved at all but
my first day classes are usually ones where I talk more and they talk
less. When I talk, I like to roam the room. Move to different
locations - get their eyes on different parts of the room with
different students. It&amp;#39;s a small thing but something that makes a
difference. I couldn&amp;#39;t comfortably do that. Similarly, when they were
working, I wasn&amp;#39;t comfortable with my traditional circulation
routine - given that we don&amp;#39;t know students vaccine status, I didn&amp;#39;t
want to get in close with them. This also reinforces my question from
my last post about student collaboration and group work. These are
things that actually work better remotely. Breakout rooms are flawed
but they&amp;#39;re something and you can&amp;#39;t really do groups in a small
classroom while keeping distant.&lt;/p&gt;
&lt;p&gt;
What&amp;#39;s next? As I said at the top, I&amp;#39;ll be more comfortable come mid
October when we&amp;#39;re all vaxxed. Until then, I&amp;#39;ll take it a day at a
time. I&amp;#39;ll probably schedule some of our classes to be remote
regardless of policy if I think that the remote tools make more sense
for a particular session.&lt;/p&gt;
&lt;p&gt;
Gonna take it one class at a time.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>