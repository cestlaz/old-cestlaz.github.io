<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sigcse on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/categories/sigcse/</link>
    <description>C&#39;est la Z (sigcse)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2022 11:12:13 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/categories/sigcse/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>SIGCSE 2022 APCS - Alternate Languages</title>
      <link>https://cestlaz.github.io/post/sigcse-2022-apcs-alt-langs/</link>
      <pubDate>Wed, 09 Mar 2022 11:12:13 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2022-apcs-alt-langs/</guid>
      <description>
&lt;p&gt;
I think I&amp;#39;ve hit on the big points on APCS-A language but a couple
more remain. This time, let&amp;#39;s look at alternative languages.&lt;/p&gt;
&lt;p&gt;
When APCS started in 1984, Pascal probably made sense - it was the
primary learning language at the time. It wasn&amp;#39;t really used in
industry but it was the language you cut your teeth on. A few years
later when I went from college to Goldman Sacks I found very few
companies using Pascal. C was big and there were more than a few
opportunities using PL/I and of course, lots of COBOL in the business
world but no Pascal to be found.&lt;/p&gt;
&lt;p&gt;
Of course there&amp;#39;s nothing wrong with that. A lot of people claim that
the language for APCS-A or college CS1 &lt;strong&gt;has&lt;/strong&gt; to be a mainstream
language used in industry. It really doesn&amp;#39;t. If someone is going to
continue through a multi-year sequence of classes for CS or a related
field it&amp;#39;s safe to say they will be exposed to many languages and
tools and the one you start with isn&amp;#39;t necessarily the one you end
with. Even if you insist on using an industry language, there are many
to choose from. Python is big in a number of areas but it isn&amp;#39;t the
only game in town. Java and C++ are still heavy hitters and will be
for a long time and many other languages have enough traction to be
considered commonly used in industry.&lt;/p&gt;
&lt;p&gt;
I thought here we could do some quick hits on some possible alternate
languages.&lt;/p&gt;
&lt;p&gt;
For all of these, I&amp;#39;ll be talking about the language as of the last
time I used it so in some cases, I could be &lt;strong&gt;years&lt;/strong&gt; out of date but I
think you&amp;#39;ll get the idea as to what I&amp;#39;m driving at.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Racket (nee Scheme).
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Really quick here. I designed Scheme into my CS0 course at Stuy. I
think it works very well in that context. That said, it would be a
tough sell today. Racket/Scheme are not widely used in industry even
though you will find LISP variants here and there.&lt;/p&gt;
&lt;p&gt;
I like it because the syntax is super simple. Just a handful of rules
and that&amp;#39;s it. I also liked that it&amp;#39;s syntax was different and new -
it leveled the playing field between people who thought they knew
something coming in and the rest. On the other hand it is esoteric and
some find it scary. Back when I created the course with it, MIT was
still using Scheme for their CS1 so that made it an easier sell as did
my reputation in the school.&lt;/p&gt;
&lt;p&gt;
That said, I don&amp;#39;t think I could start a new program easily with
Racket and the only place that I know that uses it big time is
Bootstrap World, a program that I&amp;#39;ve mentioned many times before and
like very much. It&amp;#39;s not that it&amp;#39;s bad - you can develop wonderful
courses that use it but rather, there are alternatives that would be
easier to sell to students, parents, and communities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Javascript
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
There&amp;#39;s a vocal contingent for JS as a language in both CS1 and CS0. I
like JS a lot. In fact I was using it as much as any other language
until I discovered Clojure and Clojurescript which are now my primary
personal languages.&lt;/p&gt;
&lt;p&gt;
JS fans point out that it&amp;#39;s ubiquitous. If you have a browser, you
have a JS interpreter. It&amp;#39;s also the front end language of the web
(although you can transpile other languages like Clojurescript to JS)
and via Node you can run it server side as well.&lt;/p&gt;
&lt;p&gt;
Although I love JS, I disagree with this contingent. First and
foremost, JS has a number of, well, let&amp;#39;s say, issues. If you haven&amp;#39;t
seen this video, take a few minutes:
&lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;&lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;https://www.destroyallsoftware.com/talks/wat&lt;/a&gt;&lt;/a&gt;.  The JS part starts at
about 1:20 in. JS has also had issues with types. Now admitedly some
of these things have been at least partly addressed like using &lt;code&gt;val&lt;/code&gt;
and &lt;code&gt;var&lt;/code&gt; but I don&amp;#39;t think this is strictly enforced which is
problematic in a learning language.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve also found the tooling lacking. If you&amp;#39;re doing front end work
and there&amp;#39;s a problem with your code, if you&amp;#39;re lucky you&amp;#39;ll get some
feedback but sometimes things just won&amp;#39;t run and won&amp;#39;t get a clue.&lt;/p&gt;
&lt;p&gt;
Languages like Typescript could address some of these issues but I&amp;#39;m
not familiar enough with Typescript to say.&lt;/p&gt;
&lt;p&gt;
A final issue wiht JS is the tooling. Sure, you can just inject some
code in a web page but doing the real deal requires diving into a
crazy complex ecosystem. Grunt, Gulp, Webpack, Parcel, Rollup, Yeoman and
these are just the ones I can come up with off the top of my head and
none of them are trivial to know or to use. Yes, you can kindof just
take a template and use it but to really understand what&amp;#39;s going on?
Not so much.&lt;/p&gt;
&lt;p&gt;
So, I&amp;#39;ll take a pass on JS as a CS0 or CS1 language. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Ada
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
This is the language that got me thinking about this post. Adacore has
been at SIGCSE every time I&amp;#39;ve attended and they push Ada as a
language. I stopped by to chat with them. Mostly because one of the
Adacore founders, Robert Dewar, who passed away a few years ago, was a
big time mentor to me. I just wanted to chat with the people in the
booth just really to say hi.&lt;/p&gt;
&lt;p&gt;
I hadn&amp;#39;t used Ada in decades and probably won&amp;#39;t in the near future but
the Ada I remember could be a very nice language for a CS1 class. &lt;/p&gt;
&lt;p&gt;
Ada&amp;#39;s industrial strength but I seem to recall required less magic to
get started than Java. It had all the typing you could want for people
who think that&amp;#39;s important. I also like how it did objects back when I
used it. Ada back then didn&amp;#39;t have inheritence but was what was called
Object Typed as opposed to Object Oriented (I think). You could
essentially use class type constructs for abstraction and to
encapsulate state but it didn&amp;#39;t have inheritance. To me this is
perfect. Inheritance is forced in CS1/CS2 and from what I&amp;#39;ve seen is
really something for tool and library builders and not nearly as  much
for most people doing day to day programming.&lt;/p&gt;
&lt;p&gt;
Ada&amp;#39;s also the first, and maybe only language that I was able to
consistently write large complex programs and have them work the first
time. Even with tons of dynamic memory management. This was due to the
language specification and the compiler. &lt;/p&gt;
&lt;p&gt;
Are students going to use Ada in the real world? Perhaps though it&amp;#39;s
far more likely that they&amp;#39;ll work in Java, C++, Python or JS but that
doesn&amp;#39;t mean that Ada can&amp;#39;t be a great starting point in CS1 to learn
important concepts and to develop good habits&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Go
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Next up, Go. One of the downsides of Go is it&amp;#39;s hard to search for
unless you specify golang. Other than that, Ada got me thinking of Go
since I think it shares some traits.&lt;/p&gt;
&lt;p&gt;
Go was created to address some of the perceived deficiencies in
C/C++. A small language with a clean design that could still be used
for low level tasks. I haven&amp;#39;t used it much, just some fiddling but I
could see the appeal.&lt;/p&gt;
&lt;p&gt;
The language is small and relatively simple so it should be easy to
learn. It also supports objects but no inheritance which is fine by
me. Actually, the object model is pretty different from Java or C++
and I like it a lot. Instead of declaring a Class with variables and
methods you define a struct with variables and associate methods
with it via interfaces.&lt;/p&gt;
&lt;p&gt;
Go also encourages consistent code. Python does this with
indentation. Go does it with &lt;code&gt;gofmt&lt;/code&gt; a program that takes Go source
code and formats it to the Go standard. Editors can hook into gofmt so
as to call it whenever your program is  saved.&lt;/p&gt;
&lt;p&gt;
Go also has a nice model for concurrency but that probably won&amp;#39;t come
up in a CS1 but then again, it&amp;#39;s so clean in Go, it might.&lt;/p&gt;
&lt;p&gt;
Two other features are a super fast compiler - yes this can make a
difference and a great set of libraries. A friend of mine once
described Go as a small, clean language with libraries designed by &amp;#34;a
bunch of really smart programmers with good taste.&amp;#34;&lt;/p&gt;
&lt;p&gt;
I could think of far worse choices for a CS1 class.&lt;/p&gt;
&lt;p&gt;
Interestingly enough, Go was created to replace C/C++ but most of the
adoption has come from the Python world. I personally know a number of
software engineers who ported their products from Python to Go. Maybe
Go could be a sensible alternative to Python as a Java replacement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Misc Languages 
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
There are few more languages that I want to briefly mention.&lt;/p&gt;
&lt;p&gt;
Java not only provides the language but also the Java Virtual Machine
and many languages run on the JVM. These include Scala, Kotlin,
Clojure (my favorite), Groovy and others. I don&amp;#39;t see Clojure as a
great CS1 choice in most cases and don&amp;#39;t know enough about the others
to comment other than they all have some level of interoperability.&lt;/p&gt;
&lt;p&gt;
Then, you have languages like Haskel or OCAML but I&amp;#39;m just not going
there.&lt;/p&gt;
&lt;p&gt;
Rust is another one to look at. It seems to have all the features but
is a little more imposing to the beginner - at least that&amp;#39;s what I&amp;#39;m
thinking from first glance but I want to dive in more sometime in the
future. &lt;/p&gt;
&lt;p&gt;
Finally, a word on Ruby - the other language mentioned in the Wat
video I linked above. Ruby came around a little after Python. Looking
at both I decided I was a Python guy and never really pursued Ruby. It
didn&amp;#39;t talk to me. Years later, Ruby on Rails hit and Ruby
exploded. Ruby and Rails were HUGE and everywhere in the startup
world. Bootcamps in fact started to appear left and right and all
focused on Ruby on Rails.&lt;/p&gt;
&lt;p&gt;
A few years later, I started to hear left and right &amp;#34;why don&amp;#39;t you
teach Ruby in high schools.&amp;#34; The answer was, of course &amp;#34;because in a
few years, you&amp;#39;ll be asking why we don&amp;#39;t teach some new thing.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Now, a decade later, Ruby has fallen to the wayside and nobody&amp;#39;s
demanding that we teach it in high schools.&lt;/p&gt;
&lt;p&gt;
Maybe that&amp;#39;s a cautionary tale. We shouldn&amp;#39;t be teaching something,
particularly in high schol because it&amp;#39;s the hot language or it&amp;#39;s big
in industry. We come back once again to what&amp;#39;s the goal of the
course. What do the students need and what&amp;#39;s the best tool to
accomplish that.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s it for this series. I&amp;#39;ll do one more adendum on AP vs non
Ap but it&amp;#39;s been six posts in six days - that&amp;#39;s a lot for me. I
hope it spurs some thought and good discussion.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2022 APCS-A Costs of changing the language</title>
      <link>https://cestlaz.github.io/post/sigcse-2022-apcs-costs/</link>
      <pubDate>Tue, 08 Mar 2022 07:28:46 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2022-apcs-costs/</guid>
      <description>&lt;p&gt;
One of the arguments for keeping APCS-A as is are the costs to
change. There are of course, many kinds of costs.&lt;/p&gt;
&lt;p&gt;
The first are the monetary costs. New text book, curricular materials
and possibly equipment. The College Board has their development costs
but I don&amp;#39;t care about those - they&amp;#39;re raking in money hand over fist
anyway. I don&amp;#39;t think these costs amount to much. Companies that sell
materials for classes are always trying to make sales and even when
subjects don&amp;#39;t change there are always new books and other
resources. So, these costs shouldn&amp;#39;t really figure into switching
languages.&lt;/p&gt;
&lt;p&gt;
Another cost relates to ancillary effects. Does changing the language
or changing the course have an effect on how well or how poorly
students are prepared for what&amp;#39;s to come. The argument here for
keeping Java is that CS2, data structures in most colleges is taught
in Java or C++ so switching APCS-A to Python wouldn&amp;#39;t prepare students
as effectively. This may or may not be the case. Students already have
to deal with the switch from Java to C++ if they go to a C++ school
adn get placement out of CS1 and some colleges do indeed teach CS1 in
Python and then switch.&lt;/p&gt;
&lt;p&gt;
So, changing languages won&amp;#39;t necessarily hamper students that take
data structures in a different language in college.&lt;/p&gt;
&lt;p&gt;
On the other hand, if the course content changes significantly -
changing from the A in APCS-A meaning Algorithm to API as Owen
Astrachan suggested at SIGCSE then that&amp;#39;s a different kettle of fish. &lt;/p&gt;
&lt;p&gt;
Digging a little deeper on this front is that when a college designs
their CS0, CS1, and CS2 classes they should look at the full
sequence - all three of these classes and beyond. If you change a
course, you really have to think about how it changes the future
ones. Hopefully colleges do this when changing curriculum but I did
talk about how Hunter didn&amp;#39;t when it rebooted their CS0 class. Now,
this really isn&amp;#39;t a reason to change or not to change since a high
school can&amp;#39;t really track and pay attention to every colleges CS0,
CS1, CS2 sequence so I guess it&amp;#39;s neither here nor there.&lt;/p&gt;
&lt;p&gt;
I guess the bottom line for this cost is that as long as APCS-A
remains fundamentally the same content wise it may not matter what the
language is and if the College Board clearly states that APCS-A is
&lt;strong&gt;not&lt;/strong&gt; going to be a college CS1 then any language is fair game.&lt;/p&gt;
&lt;p&gt;
The biggest cost that people bring up is teacher training. All the
teachers will have to learn the new language and possibly a new
paradigm. This one is &lt;strong&gt;huge&lt;/strong&gt;. I work with a lot of teachers who are
relatively new to CS and some of them are struggling their way through
APCS-A. These teachers are basically students in CS0 or maybe CS1 and
just finding there way to and through CS. Switching languages for them
is no easy feat and concepts in one language don&amp;#39;t necessarily
translate to another. I&amp;#39;ve seen teachers who claim proficiency with
Python or JS struggle to write the simplest of Java programs or after
spending a significant amount of time in Java they have similar
struggles switching to Python.&lt;/p&gt;
&lt;p&gt;
In spite of so many people saying CS is easy and anyone can do it,
learning new things is in fact hard and takes both time and effort.&lt;/p&gt;
&lt;p&gt;
As a side note, this cost flies in the face of every PD provider (I&amp;#39;m
looking at you code.org) that claims &amp;#34;we&amp;#39;ve trained XXX teachers to be
CS teachers in just YYY sessions!&amp;#34;&lt;/p&gt;
&lt;p&gt;
This is the state we&amp;#39;re in today but this is also a warning. We &lt;strong&gt;have&lt;/strong&gt;
to do better with respect to teacher training so as to make this cost
meaningless.&lt;/p&gt;
&lt;p&gt;
When I entered teaching, I had been doing C programming professionally
but knew Pascal along with other languages from college. Teaching APCS-A/B
in Pascal was easy. Well, the language was easy. I was a new teacher
so teaching overall was hard but teaching APCS-A/B wasn&amp;#39;t any harder
than say teaching Trig or Linear Algebra. Actually, maybe it was a
little easier since I was a CS guy at heart and not a math
person.&lt;/p&gt;
&lt;p&gt;
When the class switched to C++, I figured out C++. I had never done
OOP before but I figured it out. Switching to Java? Same deal. I also
taught myself Python, NetLogo and other languages that I had to or wanted
to teach with.&lt;/p&gt;
&lt;p&gt;
The point is, I had a strong CS background so picking up a new
language wasn&amp;#39;t really a major cost. It wasn&amp;#39;t free - I had to spend
some time and at times figure out new tooling but it wasn&amp;#39;t this
insurmountable thing.&lt;/p&gt;
&lt;p&gt;
Right now, we&amp;#39;re at a point where we can&amp;#39;t really ask this of our CS
teachers. Too many are too new but we have to make sure that our
pre-service training programs and state requirements are such that in
the future we will have CS teachers that know enough CS so that a
language switch in a course isn&amp;#39;t a big deal. Rather, a teacher will
be able to do an analysis of the new tool solely based on asking if
it&amp;#39;s right for their students.&lt;/p&gt;
&lt;p&gt;
So, those are the costs. Are they enough of a reason to keep Java? I
don&amp;#39;t think so. If you give enough lead time, as pre-service programs
are getting up to speed you can minimize the training costs. Just
give it 10 years instead of 5. Of course, you have to be confident
that Python will be the language that far into the future.&lt;/p&gt;
&lt;p&gt;
That said, I&amp;#39;m not advocating for a switch to Python. We still have to
go back to my first post on this - The College Board has to decide if
this will be a college CS1 class or something else and only then can
we do the language vs language analysis.&lt;/p&gt;
&lt;p&gt;
Are we done with this thread? Almost but I think it&amp;#39;s worth spending
some time looking at some possible alternatives to both Java and
Python.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s next time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2022 - APCS-A Language strengths and weaknesses</title>
      <link>https://cestlaz.github.io/post/sigcse-2022-apcs-languages/</link>
      <pubDate>Mon, 07 Mar 2022 13:54:58 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2022-apcs-languages/</guid>
      <description>&lt;p&gt;
Last time we talked about the &lt;a href=&#34;https://cestlaz.github.io/post/sigcse-2022-apcs-intent/&#34;&gt;intent of APCS-A&lt;/a&gt; and without deciding on
that we can&amp;#39;t really chose a language. Still, we can talk about
strengths and weaknesses of languages. Let&amp;#39;s do that by taking a walk
down history.&lt;/p&gt;
&lt;p&gt;
APCS started in Pascal. Back then it was a one year course that
included CS1 (programming) and CS2 (data structures). Later  they
offered two exams A (programming) and AB (programming plus data
structures). The AB exam was last administered in May 2009. In it&amp;#39;s
last year, only 3,881 students took the AB exam - about 10% of those
students were from Stuy.&lt;/p&gt;
&lt;p&gt;
The exam started in Pascal but switched to C++ in 1999. Why switch? I
can&amp;#39;t say for sure. I was a young teacher back then. Under 10 years in
and wasn&amp;#39;t involved in the greater AP scene. Pascal was a nice
learning language but it had a number of deficiencies. Pascal was
pretty straight forward, encouraged structured programming, required
memory management which I say as a plus since it allowed one to study
it and overall was a strong learning language. On the other hand, programs were
limited to a single file, there was no standard for graphics or I
think even file access, and it couldn&amp;#39;t do OOP which was becoming all
the rage. It also was rarely used in industry even though I did have a
nice job offer back then from Brown Brothers Harriman &amp;amp; Co. working in
Turbo Pascal.&lt;/p&gt;
&lt;p&gt;
C++ was a hot language, it supported OOP as well as multiple files. It
had much greater complexity but I guess that wasn&amp;#39;t a deal breaker for
the College Board. I also have no idea if the conversation was
switching from Pascal to C++ or if it was switching from Pascal to
something else and then C++ was chosen.&lt;/p&gt;
&lt;p&gt;
In 2004 the exam moved to Java. Again, something gained something
lost.&lt;/p&gt;
&lt;p&gt;
Java was the new hotness so no problem there. What about other
changes? Java was &lt;strong&gt;much&lt;/strong&gt; simpler. C++ had many ways to do things while
Java nudged you into the Java way. Java also forced Object Oriented
Programming which, at the time, I guess people felt was a good
thing. C++ was more multi-modal and at the time, heck even today, was
taught more like C with objects. Java also had a standard way to do
I/O and graphics which, I guess was also a plus.&lt;/p&gt;
&lt;p&gt;
What about the downside?&lt;/p&gt;
&lt;p&gt;
Personally, I found the forced OOP to be a problem Even though the
language forced all objects all the time, the nature of problems
attacked in a CS1 don&amp;#39;t necessarily lend themselves towards Object
Oriented solutions. This made OOP forced and this is a problem.&lt;/p&gt;
&lt;p&gt;
Java also required a lot of &amp;#34;magic:&amp;#34; - ignore the &lt;strong&gt;public static void
main&lt;/strong&gt; behind the curtain. You&amp;#39;ll understand it later.&lt;/p&gt;
&lt;p&gt;
The big loss to me and others pointed to this as a gain was that Java
took out memory management. I liked that you still had to allocate
memory using &lt;strong&gt;new&lt;/strong&gt; to create things like nodes for trees and linked
lists but you didn&amp;#39;t have to manage them yourself.&lt;/p&gt;
&lt;p&gt;
True, this is generally a good thing but the problem was that APCS-A/B
was a class, not the real world. If you were going to take out memory
management from CS1/CS2 in APCS-A/B then it had to go back in
somewhere or kids would never get it. This is where looking at a
course and not the full sequence can be a problem. If you take
something important out of APCS and then it&amp;#39;s not in the college
classes later on you&amp;#39;ve taken it out of the students overall
preparation.&lt;/p&gt;
&lt;p&gt;
Based on talking to my tech friends hiring after the switch, this was
a real problem.&lt;/p&gt;
&lt;p&gt;
In any event, the class chugged along, dropping the B part up through
today.&lt;/p&gt;
&lt;p&gt;
So, why consider Python?&lt;/p&gt;
&lt;p&gt;
Python goes back to multi-modal and takes away the magic. Hello World
is just one line. No classes necessary. Python is also, by most
measures simpler. Python also has tons of libraries. You can use Flask
to build a web server, NLTK to explore language, Pygame for games and
on and on. Python is also used by many other fields besides direct CS.&lt;/p&gt;
&lt;p&gt;
But there&amp;#39;s always a cost.&lt;/p&gt;
&lt;p&gt;
Python&amp;#39;s object model is, to put it kindly, ugly and ackward. Not as
bad a Perl but having to use self and no real private kind of kills it
from a teaching point of view. The libraries and use in other fields
are also less important if the intent is to mirror college CS1 content
as opposed to rolling a new non major, more general course.&lt;/p&gt;
&lt;p&gt;
Another cost is the use of lists rather than arrays. Lists give much
more power much more quickly but at the cost of teaching array style
indexed data structures. This isn&amp;#39;t a cost for everyone but it&amp;#39;s
something to consider. Related to this is that Python doesn&amp;#39;t really
have a counting loop. It has a &lt;strong&gt;while&lt;/strong&gt; and a &lt;strong&gt;for each&lt;/strong&gt; but not a
counting &lt;strong&gt;for&lt;/strong&gt;. This may or may not be an issue depending on how you
feel about traversing data.&lt;/p&gt;
&lt;p&gt;
The potential big cost comes down to typing. Sure, writing &lt;code&gt;int a&lt;/code&gt; is
a pain in statically typed Java vs Python&amp;#39;s dynamic typing but while
dyanmic is quicker and easier and makes sense given Python&amp;#39;s scripting
roots, static is safer and makes it easier to write larger more robust
systems.&lt;/p&gt;
&lt;p&gt;
Memory management, is of course still long gone :-(.&lt;/p&gt;
&lt;p&gt;
So, what to do? &lt;/p&gt;
&lt;p&gt;
Python is used in many fields and is a startup darling but Java is
still one of the kings, along with C++ in the industrial strength and
enterprise world. I have mixed feelings and might take a strong stance
but not yet.&lt;/p&gt;
&lt;p&gt;
We still have to look at more aspects of this question. Specifically
what about the costs of switching from one language to any other
language and also does the choice of language in CS1 matter with
respect to CS2.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll do at least one more post maybe more to address those but I think
that&amp;#39;s it for today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2022 - What language APCS-A part 1 - the intent</title>
      <link>https://cestlaz.github.io/post/sigcse-2022-apcs-intent/</link>
      <pubDate>Sun, 06 Mar 2022 16:00:07 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2022-apcs-intent/</guid>
      <description>&lt;p&gt;
One of the first sessions of SIGCSE2022 was a panel on the choice of
language for APCS-A. Should it continue to use Java or should it shift
to Python. This topic comes up from time to time. I didn&amp;#39;t attend this
particular session but discussed it at length with a few people who
did.&lt;/p&gt;
&lt;p&gt;
Truth be told, I wasn&amp;#39;t going to start writing about SIGCSE and APCS-A
until I finished a few other SIGCSE posts but my friend &lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred
Thompson&lt;/a&gt; said he was writing one and was planning on posting it
soon. I think it&amp;#39;s better when us CS Ed bloggers write about similar
things at similar times - fosters better discussion so I&amp;#39;m writing
this today (Sunday) and will post it as soon as I see Alfred&amp;#39;s post.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot to unpack when it comes to language choice for
APCS-A. Language strengths and weaknesses, ease of learning, tooling
and training costs and more. I&amp;#39;ll share my feelings on all of these
and maybe more but before we dig into those I think it&amp;#39;s worth
thinking about the intent of the course.&lt;/p&gt;
&lt;p&gt;
The AP program was originally created to allow advanced high school
students to get started on college work in their field of interest. An
AP class would either be the first course in a major or it would be a
requirement like calculus is for CS majors. There were fewer exams and
FAR fewer students taking them.&lt;/p&gt;
&lt;p&gt;
Over time, things evolved and today that&amp;#39;s not necessarily the
case. APCS-A, Calc and many others still fit the bill but then you
have classes like AP Euro - sometimes offered to HS sophomores and is
really a regurgitation course. Sorry but a class appropriate for HS
sophomores is not college level. Same for APCS-Principles. Might be
good, might be bad but it&amp;#39;s not college level.&lt;/p&gt;
&lt;p&gt;
So, before deciding on the language you really have to decide on
intent. If APCS-A is to be the first class in the CS major then the
college board has to really follow what colleges are doing. Some
people think that APCS-A should be a course for everybody or for non
CS majors but if the class is supposed to be a first in major course,
it &lt;strong&gt;has&lt;/strong&gt; to follow the college lead.&lt;/p&gt;
&lt;p&gt;
If colleges decide to make their CS1 a more general course, more about
APIs, less about either programming or, to it&amp;#39;s already limited extent
algorithms and data structures, then it&amp;#39;s fine to change but as long as the
college board is pushing CS1 as a first course in the CS major then
APCS-A has to follow the general CS1 outline.&lt;/p&gt;
&lt;p&gt;
So, assuming this stays the same, you might still argue a change to
Python. I&amp;#39;ll look at the pros and cons of doing this at a later post but one
argument against the change is that students having taken CS1 in
Python have a harder time transitioning to Java (or C++) in CS2.&lt;/p&gt;
&lt;p&gt;
Some people say this isn&amp;#39;t an issue but I think it is. APCS-A is
already frequently a watered down CS1 and students sometimes struggle
in CS2 even when it&amp;#39;s in the same language. Switching languages will
result in kids hitting a brick wall. This is an example of a problem
I&amp;#39;ve seen over and over again - people changing a class because they
feel there&amp;#39;s a need but not paying attention to the next class let
alone the full pipeline.&lt;/p&gt;
&lt;p&gt;
This happened at Hunter recently - I warned the department that it
would but nobody listened. Our CS0 course up until my first
year at Hunter was a pretty bad course It was a random assortment
of topics with a lot of cruft and it just didn&amp;#39;t serve anybody. In my
second semester the class was slated to change to a new course. The
new course was going to have more programming - all in Python - lots
of small programs. It was a much broader class and we all agreed that
it would be much better. It was except for one thing. Nobody was
paying attention to how well it prepared students for our CS1 and that
first CS1 class after the new CS0 was full of complaints, student
struggles, and student failures. On the one hand, the new course had
more programming than the earlier one but since it was only tiny
programs, students weren&amp;#39;t prepared for CS1 right out of the gate but
students thought they were prepared. Things have gotten better since then
but the problem was easily to predict.&lt;/p&gt;
&lt;p&gt;
If High Schools move to a less rigorous class with an &amp;#34;easier&amp;#34;
language like Python great care should be taken to make sure that it
prepares students to jump into a college CS2 which won&amp;#39;t have nearly
the supports that are present in high school.&lt;/p&gt;
&lt;p&gt;
So that&amp;#39;s it for this installment. Before you can even think about
language you have to think about class intent. Now that we&amp;#39;ve done
that we can start looking at language choice. That&amp;#39;s for next time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2022 - Conference format</title>
      <link>https://cestlaz.github.io/post/sigcse-2022-hybrid/</link>
      <pubDate>Sat, 05 Mar 2022 08:05:15 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2022-hybrid/</guid>
      <description>&lt;p&gt;
Before diving into the content I thought I&amp;#39;d share my thoughts about
SIGCSE as a hybrid conference. Prior to Covid, SIGCSE was pushing
2,000 in person participants. This time around ther were a little
under 800 in person and a number of hundreds more remote. The in
person numbers mirrored what CSTA has grown to. It&amp;#39;s a nice size. Not
overwhelming but manageable. It&amp;#39;s at the upper edge of possibly
feeling intimate. Once you get into the thousands things feel far less
personal. You can go the entire conference not finding people you want
to connect with. On the other hand you can also blend into the crowd
should you choose that route.&lt;/p&gt;
&lt;p&gt;
Things basically ran as usual. Opening announcements and keynote,
coffee break, sessions and so on but remote was interjected
throughout. There were also remote only sessions but I can&amp;#39;t speak to
those.&lt;/p&gt;
&lt;p&gt;
We started out with the opening keynote. Barbara Liskov Zoomed in from
her home. She gave a &lt;strong&gt;great&lt;/strong&gt; talk going through her history which in
many was is &lt;strong&gt;the&lt;/strong&gt; history of some key aspects of computer science,
programming languages, and programming.&lt;/p&gt;
&lt;p&gt;
There was zero downside to having a remote keynote speaker. Barbara
was intersting and engaging. I was blown away. The only thing I found
a bit weird was that I kept glancing over to the dias where the
speaker would normally stand and it was empty. That&amp;#39;s on me though.&lt;/p&gt;
&lt;p&gt;
At the end we had Q&amp;amp;A from both people in the live audience and people
on the remote platform. This was an all around win.&lt;/p&gt;
&lt;p&gt;
The first thing that somewhat irked me about virtual was at a paper
session. The second paper was presented as a video. This part was
fine, maybe even preferable since it allows the presented to make sure
the video is set up the way they want and it also keeps within time
limits. The problem was that there was no Q&amp;amp;A. If you&amp;#39;re going to do a
video presentation, the presenter should hop on some platform at the
end for Q&amp;amp;A. There is zero value added to just showing the video. I
could do that from home.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not criticizing SIGCSE here. They tried something. In my opinion
it didn&amp;#39;t work. In the future, I&amp;#39;d love to see video presentations but
with a live, in person or via some Zoom platform Q&amp;amp;A. In theory there
could be some &amp;#34;flipped sessions&amp;#34; (although I think a lot of the
flipped classroom concepts are bunk) where you could watch the video
or read the paper prior to the session and then have a meaty
discussion.&lt;/p&gt;
&lt;p&gt;
The second hybrid thing that I didn&amp;#39;t like was a hybrid BOF. I just
think it din&amp;#39;t work. It basically turned into a few small mini
presentations by the organizers. All the prior SIGCSE BOFs I&amp;#39;ve
attended had the hosts facilitating a room wide discussion. This was
similar but slightly more awkward in the few virtual group discussion
sessions I&amp;#39;ve taken part in. This was a case of hybrid not
working. With some people in the room and some people at home you just
couldn&amp;#39;t have meaningful discussion. The people in the room couldn&amp;#39;t
talk without excluding the remote people and remote conversation
wasn&amp;#39;t available easily to the in person crowd.&lt;/p&gt;
&lt;p&gt;
Birds of a feather just don&amp;#39;t fly mixed. Do them remote or do them in
person.&lt;/p&gt;
&lt;p&gt;
A third thing that didn&amp;#39;t really bother me but I found weird was one
panel where one person was in person and the rest were remote while I
knew that at least one of the remote people were attending in
person. The mix just didn&amp;#39;t flow as well for me. I&amp;#39;ve attende all in
person panels, all remote panels, and panels where all the panelists
were in a room together but presenting remotely. All of these formats
worked. It think the mix of in person and remote was just kindof
weird. In future, I&amp;#39;d say either have all the presenters in a room
together at a big table even if it&amp;#39;s remote or have them all &amp;#34;dial
in.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Overall the conference was great so these are really nitpicks.&lt;/p&gt;
&lt;p&gt;
With this post out of the way I can get to the content posts but I
feel it would be remiss if I didn&amp;#39;t mention a couple of non content
related highlights that the SIGCSE organizers provided.&lt;/p&gt;
&lt;p&gt;
First, the opening evening reception had a &lt;strong&gt;bacon bar&lt;/strong&gt;. All
receptions, coffee breaks, snack times, and I&amp;#39;d even say sessions
should provide bacon.&lt;/p&gt;
&lt;p&gt;
The other thing which I&amp;#39;m more serious about is that they provided
coffee and tea before the opening sessions rather than their usual
practice of withholding caffeine for the 10:00 break. I can&amp;#39;t imagine
it would cost much to just put out the urns early.&lt;/p&gt;
&lt;p&gt;
Overall, great conference and great job by the organizers.&lt;/p&gt;
&lt;p&gt;
Content related posts to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2019 - the keynotes</title>
      <link>https://cestlaz.github.io/post/sigcse-2019-keynotes/</link>
      <pubDate>Mon, 04 Mar 2019 15:25:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2019-keynotes/</guid>
      <description>
&lt;p&gt;
It&amp;#39;s that time of the year to write a series of blog posts about
SIGCSE. I thought I&amp;#39;d start with one on the keynotes. &lt;/p&gt;
&lt;p&gt;
There were four keynote speakers. Marie desJardins, Gloria Townsend,
Mark Guzdial, and Blair Taylor. I wasn&amp;#39;t at the first timer&amp;#39;s lunch
where Townsend spoke so I won&amp;#39;t talk at all about that keynote.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m also not going to summarize the talks. Andy Ko wrote up a terrific
summary of his &lt;a href=&#34;https://medium.com/bits-and-behavior/sigcse-2019-trip-report-celebrating-50-years-b3460835a09a&#34;&gt;SIGCSE experience&lt;/a&gt; and did a much better job giving
overviews to the keynotes than I ever could so I&amp;#39;ll just refer you to
Andy&amp;#39;s &lt;a href=&#34;https://medium.com/bits-and-behavior/sigcse-2019-trip-report-celebrating-50-years-b3460835a09a&#34;&gt;blog post&lt;/a&gt;. Rather, I&amp;#39;m just going to talk a bit about what they
left me thinking about. It might be something that&amp;#39;s pretty tangential
to the actual talk but hey, it&amp;#39;s the direction that the speaker sent
my brain to follow.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Marie des Jardin - the pinch hitter
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Marie desJardins wasn&amp;#39;t supposed to be the keynote. She was filling in
for a flu ridden &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Freeman_A._Hrabowski_III&#34;&gt;Freeman Hrabowski&lt;/a&gt; at the last minute and she did a
more than admirable job.&lt;/p&gt;
&lt;p&gt;
The big line for me was her plea for us not to create &amp;#34;weed out&amp;#34;
courses but rather to create &amp;#34;launch&amp;#34; courses. I think this resonated
with many in the audience. It got me thinking about something that&amp;#39;s
been a concern of mine for a while. We see a lot of examples of making
student&amp;#39;s first CS experience more gentle and more varied. Probably
the biggest example is APCS-P but you can also find it in many college
CS0 classes. Hunter&amp;#39;s no exception - we&amp;#39;re now in the second year of a
more varied CS0 class (although truth be told, our problem
wasn&amp;#39;t so much that our old CS0 was a gatekeeper but more that
students hardly did any programming). &lt;/p&gt;
&lt;p&gt;
I started to become aware of the problem as I would hear stories of
kids who did Girls Who Code programs who then dropped out of CS
classes that were too hard and then later when my former students at
Harvard told me that many kids &amp;#34;dropped like flies&amp;#34; in the class after
CS50. I&amp;#39;ve also seen these problems at Hunter but at least here I know
we&amp;#39;re working on it. Having a more accessible entry point is terrific
but not if you just set the kids up to fail one step down the line. It
seems that not enough people are looking at the complete path: from
first course to last and the transitions in between. This is a hidden
danger. We can proudly say that diversity and enrollments are up based
on those first experiences and no one&amp;#39;s the wiser that we&amp;#39;re killing
the kids later on. We have to do better.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Mark Guzdial - the outstanding contributer
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Mark was this year&amp;#39;s winner of SIGCSE&amp;#39;s Award for Outstanding
Contribution to CS Education. A well deserved award. Mark&amp;#39;s talk was
terrific and similar to the one he gave at the Code and Beyond
conference in NY which I wrote about &lt;a href=&#34;https://cestlaz.github.io/post/thoughts-on-code-and-beyond-ct/&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
As with the previous keynote you can get a great summary if you read
Andy&amp;#39;s post linked above.&lt;/p&gt;
&lt;p&gt;
One point Mark made was that he felt that all students should learn
programming but if I remember the talk correctly he didn&amp;#39;t make a
strong statement about all students learning CS. He also said that
first course our CS majors take shouldn&amp;#39;t be the same as the first
course for non majors. I see where Mark&amp;#39;s coming from I&amp;#39;m not sure I
agree. Well, I do agree given what a first CS course for a major
typically looks like versus what a never-CS major might need for life but
the few CS0 for non major courses I&amp;#39;ve seen don&amp;#39;t leave their students
with enough to continue on to the CS major or a minor (which could be
valuable to a HUGE swath of students) so they end up taking the CS0
for CS majors anyway. This means one more course and one more
semester. More cost and more time spent. I&amp;#39;ll say that I do agree with
Mark UNLESS you can design a course that can address the needs of both
parties and the truth is I think you can. We did it at Stuy. Students
come back with that having been their only course and talk of its
usefulness and utility and students come back having used it to launch
a tech career in later high school, college, and beyond. What we built
isn&amp;#39;t perfect and is for a particular population but as proof of
concept it&amp;#39;s convinced me that a single course for both can be done&lt;/p&gt;
&lt;p&gt;
Another one of Mark&amp;#39;s big points was taking CS into other subject
areas. I love this and I love when he said (apologies if the quote&amp;#39;s a
little off) &amp;#34;They need things and we can build stuff&amp;#34; as a call to
action to partner with and to develop the languages and tools needed
to support a new vision of CS embedded in other subject areas.&lt;/p&gt;
&lt;p&gt;
My thoughts here are that as a community we are ignoring the realities
of K12 education. Mark mentioned Bootstrap World, a sprogram both he
and I like very much. It is embedded in Algebra classes and uses CS in
Racket (nee Scheme) to support learning said algebra. Mark noted that
Racket looks like Algebra and that&amp;#39;s one of the reasons Bootstrap
works. Another fact often left out is that algebra is frequently
taught either over two years or with a double period allocated to
it. It is given more time than most classes and that allows teachers to experiment
a bit more with instruction. Even if we develop more tools like
Bootstrap that align themselves to teaching other subjects those
subject teachers might not have the time to dedicate to the new
tool. Why not? That&amp;#39;s another thing Mark indirectly mentioned. At one
point he said that we might have to &amp;#34;take a step back&amp;#34; first in terms
of results and quite frankly, K12 teachers sometimes can&amp;#39;t take that
chance. In addition to not wanting to give their current students a
worse experience even with the promise that future classes would get a
better one they have to face the specter of high stakes testing. If
I&amp;#39;m using a new CS tool in a history class and my student&amp;#39;s test
results go down, they might have to repeat the class and the teacher
could put their license in jeopardy.&lt;/p&gt;
&lt;p&gt;
In the end I loved just about everything Mark had to say but it still
got me thinking about a lot and to me that&amp;#39;s one of the hallmarks of a
great talk. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Blair Taylor - the controversy
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Blair Taylor gave the final keynote and this one had some controversy
around it. Andy&amp;#39;s blog post again summarizes things well. &lt;/p&gt;
&lt;p&gt;
My only take on the content is that the talk was more about
Dr. Taylor&amp;#39;s journey and less about Cyber Security (I hate it that
it&amp;#39;s now just being called &amp;#34;cyber&amp;#34;) but that was fine. &lt;/p&gt;
&lt;p&gt;
What I want to talk about here is not so much the controversy over how
some people took parts of Dr. Taylor&amp;#39;s talk and the Q&amp;amp;A at the end but
rather the fact that more and more recently I&amp;#39;ve felt that as a
community we can&amp;#39;t talk about difficult issues concerning gender,
race, and the like. &lt;/p&gt;
&lt;p&gt;
I consider myself an ally to under represented and under served groups
but have found myself in situations recently where unless I 100%
parrot one side&amp;#39;s extreme view I&amp;#39;m accused of sexism or racism at
which point ANYTHING I say is treated as such. One is not allowed to
see any nuance in what is a very complex topic. &lt;/p&gt;
&lt;p&gt;
At one point, the speaker made a joke. She prefaced it with something
like &amp;#34;I&amp;#39;m going to tell this offensive joke&amp;#34; and that she could,
presumably because she is a women. The joke fell flat (although I&amp;#39;ve
told the story of the keynote to a few women in tech and they chuckled
and said they actually kind of liked the joke). My take was that the
speaker was setting the stage to maybe dive into a difficult
conversation. My take was also that some members of the audience right
then and there decided that the speaker was wrong about all things. &lt;/p&gt;
&lt;p&gt;
After the talk I was a bit more convinced that this was the case as I
read a tweet stream explaining what happened that included the joke
but none of the context for the reader to make an informed decision. &lt;/p&gt;
&lt;p&gt;
In the end, I felt that Dr. Taylor has honestly worked for under
represented groups and while this might be unpopular, her pragmatism of
sometimes swallowing an insult and &amp;#34;having a sense of humor&amp;#34; is the
right thing to do. Unfortunately, Dr. Taylor misread the audience and that
some people decided somewhere in her talk that even though she was
working to empower women in her own way, it wasn&amp;#39;t &amp;#34;my way&amp;#34; so it was
wrong. &lt;/p&gt;
&lt;p&gt;
The situation was unfortunate and my big fear is that as a community
we still have a long way to go before we can have these conversations
and personally, as someone who considers themselves an ally of the
undeserved I&amp;#39;m becoming more gun shy of partaking in discussions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
That&amp;#39;s all for now.
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
So, that&amp;#39;s my take on the keynotes. Much more to come on the
conference in future posts. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>