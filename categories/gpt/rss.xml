<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GPT on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/categories/gpt/</link>
    <description>C&#39;est la Z (GPT)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Jan 2023 08:57:09 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/categories/gpt/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>CS GPT</title>
      <link>https://cestlaz.github.io/post/chatgpt-in-cs-class/</link>
      <pubDate>Fri, 20 Jan 2023 08:57:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/chatgpt-in-cs-class/</guid>
      <description>&lt;p&gt;
This should be my last post about chatGPT.&lt;/p&gt;
&lt;p&gt;
The GPT in chatGPT stands for Generative Pretrained
Transformer. Not something that you&amp;#39;re going to cover in an early
college CS class. I wanted to get my head around it and the
technologies are typically covered in an advanced machine learning
undergraduate elective so something you take &lt;strong&gt;after&lt;/strong&gt; you take that 400
level machine learning class. Looks like I&amp;#39;m going to have to do some
review first since I haven&amp;#39;t looked at any of the prerequisite
material in around a dozen years.&lt;/p&gt;
&lt;p&gt;
So, your K12 students won&amp;#39;t be building their own GPT but that doesn&amp;#39;t
mean that there&amp;#39;s nothing worth talking about.&lt;/p&gt;
&lt;p&gt;
There are technical things that you can teach that will help lead the
way to understanding today&amp;#39;s AI systems and also a lot of surrounding
issues.&lt;/p&gt;
&lt;p&gt;
On the surrounding stuff one can certainly talk about how chatGPT
works in a general sense. How it breaks down the input, the basic
ideas behind a neural net, how it&amp;#39;s trained on a data set etc.. Of
course, that lets us talk about the data set. Where did it come from?
This came up with a similar technology - GitHub&amp;#39;s Copilot. You pose a
programming question in a comment and it fills in the code. Where did
it get the code? From all the GitHub users. The training set consists
of basically all the code on GitHub. What about for other systems?
Well, Google has all their users email + docs + photos + everything
else and we all signed off on giving them the okay to use it way back
when. Same thing for all those other &amp;#34;free&amp;#34; services. This raises some
big questions that some of us were asking years ago. As they say &amp;#34;If
you are not paying for the product, then you are the product.&amp;#34; Lots of
good fodder for discussion here and perhaps we&amp;#39;ll raise the next
generation to be more aware of what they&amp;#39;re giving away.&lt;/p&gt;
&lt;p&gt;
Another issue is a systems reliability. We&amp;#39;ve seen many examples where
chatGPT produces incorrect answers. What about Copilot? What if code
generated by Copilot seems to work but leads to catastrophic failure
later on? Who&amp;#39;s to blame?&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t remember the details but was told by an older computer
scientist years ago about an expert system - that is, a much more
primitive AI question answering system that performed medical
diagnoses. Apparently it did better than residents and as well as
doctors but it was never used. Why not? I was told due to liability
issues. A computer program can&amp;#39;t hold malpractice insurance.&lt;/p&gt;
&lt;p&gt;
This leads to a whole set of ethical questions&lt;/p&gt;
&lt;p&gt;
Another is ownership. If chatGPT generates a story or a song, who owns
the rights? What about AI generated art? &lt;/p&gt;
&lt;p&gt;
One more on the ethical front, how about the Micrsoft AI that was let lose in
the wild and was quickly trained to spew racist garbage?&lt;/p&gt;
&lt;p&gt;
The ethical and societal issue abound.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s so much rich discussion to be had with students of all ages
here but there&amp;#39;s also a technical side that can be introduced. As I
said, you&amp;#39;re not writing your own GPT system in a CS class prior to an
advanced undergraduate elective but there are things you can introduce
to pave the way and give students an inking of what&amp;#39;s possible and
what&amp;#39;s to come if they continue to study CS.&lt;/p&gt;
&lt;p&gt;
One of my favorites is word chain or Markov chain text generation (see
this &lt;a href=&#34;https://cestlaz.github.io/post/word-chains/&#34;&gt;older post&lt;/a&gt;). It&amp;#39;s not the same but it is text generation and if
you play around with it, use flowery text like poetry of the Book of
Psalms you can get some fun results. It also lets you talk about
concepts similar to overfitting which they&amp;#39;ll learn all about when
they do machine learning.&lt;/p&gt;
&lt;p&gt;
You can also do a bunch of introductory &lt;a href=&#34;https://cestlaz.github.io/post/bag-of-words/&#34;&gt;bag of words&lt;/a&gt; based natural
language processing topics. Again, these are in no way in the
neighborhood of a GPT but it&amp;#39;s really good CS and it sets the stage.&lt;/p&gt;
&lt;p&gt;
Clustering is another topic that can be approached early that has some
similar base concepts.&lt;/p&gt;
&lt;p&gt;
There are many more.&lt;/p&gt;
&lt;p&gt;
Just because you&amp;#39;re not going to do a Transformer Neural Net in K12
doesn&amp;#39;t mean you can&amp;#39;t do cool things that get the kids both ready and
thinking about important issues. One of my favorite topic to cover in
CS0 or CS1 is a &lt;a href=&#34;https://cestlaz.github.io/posts/2014-01-07-rot13-gateway/&#34;&gt;Caesar Cipher Decoder&lt;/a&gt;. It&amp;#39;s not smart or even a
necessary program but it&amp;#39;s a cool unit that starts to scratch the
surface of how more advanced systems work. It sets the stage.&lt;/p&gt;
&lt;p&gt;
So I think this is it for chatGPT posts for a while. Hope you all
found these useful, interesting, or in some way positive.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>