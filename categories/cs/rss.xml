<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/categories/cs/</link>
    <description>C&#39;est la Z (CS)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Nov 2021 07:15:47 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/categories/cs/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Seats on a plane - addendum</title>
      <link>https://cestlaz.github.io/post/airline-seats-2/</link>
      <pubDate>Tue, 02 Nov 2021 07:15:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/airline-seats-2/</guid>
      <description>&lt;p&gt;
While my &lt;a href=&#34;https://cestlaz.github.io/post/airline-seats/&#34;&gt;last post&lt;/a&gt; was well received, I did have a few conversations
where people asked why I did this with such a seemingly minor ethical
issue. They wondered that with issues the Facebook algorithm, bail and
sentencing algorithms, gerrymandering and other issues dominating the
ethical conversation, why focus this topic around something that seems
to affect far fewer people and might not even be such a big
deal. After all, when it does come up, flight crews can probably ask a
few people to shuffle seats and voila, problem solved.&lt;/p&gt;
&lt;p&gt;
The thing is, this was intentional and it was intentional on two
fronts.&lt;/p&gt;
&lt;p&gt;
First, who decides if an issue is major or minor? Our perceptions
change throughout our lives and through our experiences. Something
that might appear to be minor to us or minor right now could be major
to someone else. I remember my first week teaching at Seward Park HS
right after I left industry. Such an eye opener. Even though I went to
public schools and faced my share of challenges, I had no idea how
different my students lives were from mine. Things that might have
been a minor inconvenience to me were a brick wall to them. It&amp;#39;s also
not enough to just view &amp;#34;slam dunk&amp;#34; issues through an ethical lens. We
have to indeed walk the walk. I wanted a mundane problem that may have
resulted from Innocent intent to illustrate that it&amp;#39;s not about
teaching a lesson on the topic du jour but rather it&amp;#39;s about
everything. &lt;/p&gt;
&lt;p&gt;
I also wanted to pick a topic that wasn&amp;#39;t right out there in the
mainstream. If I had them work on a recommendation system or some
other issue that&amp;#39;s been all over the news these days, they would have
all guessed the punchline. I thought this would be low key enough so
that they&amp;#39;d discover the ethical issue by inadvertently creating it.&lt;/p&gt;
&lt;p&gt;
The other reason was that I wanted to keep the issue simple and
understandable. I already suspected that the code aspect would be a
challenge for some members of the class. I didn&amp;#39;t want a super deep
ethical issue to cloud that side of the equation. A simple problem
kept everything clean. They first seated the customers, realized that
kids could be separated from parents, decided that this should be
addressed, then tried to address it. Keeping problem simple is a tried
and true teaching strategy. There&amp;#39;s so much complexity in most ethical
issues and most programming problems and students can only cope with
so much at a time. This was an attempt to keep the load to a minimum.&lt;/p&gt;
&lt;p&gt;
As I said in the earlier post. I think the lesson needs tweaking -
particularly in order to make the coding level appropriate but I also
think it&amp;#39;s a lesson worth keeping.&lt;/p&gt;
&lt;p&gt;
This past week, the class has been working with regular expressions. I
get to deliver the punchline to that one tomorrow evening.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Airline Seats - An Ethics Lesson</title>
      <link>https://cestlaz.github.io/post/airline-seats/</link>
      <pubDate>Tue, 26 Oct 2021 14:43:28 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/airline-seats/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve held off on sharing any details on my Ethics in CS class because
I wanted to wait until some of it ran. I didn&amp;#39;t want to talk about a
topic and then find out that after we covered it I was all wrong.&lt;/p&gt;
&lt;p&gt;
Now that we&amp;#39;re well into the semester, I think it&amp;#39;s time to share a
few things.&lt;/p&gt;
&lt;p&gt;
One of my premises when I designed the course was that most ethics
courses are taken by either people who already have religion or people
who see it as the &amp;#34;easy course&amp;#34; without programming. The few courses I
saw out there were largely based on case studies and
discussion. Nothing wrong with that - we&amp;#39;ve got that as well but I
wanted to try something a little different.&lt;/p&gt;
&lt;p&gt;
I wanted to have the class play with some technical situation,
preferably with code, and then hopefully discover an ethical issue
after which we can discuss.&lt;/p&gt;
&lt;p&gt;
Here was my first attempt.&lt;/p&gt;
&lt;p&gt;
Overall I think the lesson has great potential but I also know it
needs tweaks. Most notably with teh level of comfort some of the
class had with Python. Next time around I want to address that issue
but I&amp;#39;ll talk about the specifics in the end.&lt;/p&gt;
&lt;p&gt;
I started by giving the class some code that provided a barebones
airline seating system.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an empty plane. I just made windows and interior seats figuring
that windows were more desirable and didn&amp;#39;t have to differentiate them
from aisles.&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
  win          avail          avail          avail            win
&lt;/pre&gt;
&lt;p&gt;
The code I provided also allowed for the purchase of an &amp;#34;economy plus&amp;#34;
ticket. An economy plus passenger could select their seat on
purchase. I had a function that with a 70% probability tried to select
a window seat and then it would just select a random seat.&lt;/p&gt;
&lt;p&gt;
You could also select a regular economy seat. For those, the airline
would assign a seat at some later point.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a plane where the economy plus seats have been sold and the
remaining seats are sold to economy but unassigned.&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
ep-4          avail          avail          ep-2           ep-5
ep-8          avail          ep-19          avail          ep-11
ep-3          avail          avail          avail          ep-6
ep-1          avail          avail          avail          ep-9
ep-14         avail          avail          avail          ep-16
ep-15         avail          ep-20          avail          ep-18
ep-10         avail          ep-17          ep-24          ep-21
ep-13         ep-22          avail          avail          win
ep-23         avail          avail          avail          win
ep-7          avail          avail          avail          ep-12
&lt;/pre&gt;
&lt;p&gt;
I asked the class to finish the routine that assigned the regular
economy seats. I also wrote a version that just assigned them
randomly. Here&amp;#39;s a sample result. Note that u-# represents a block of
purchased seats so you&amp;#39;ll notice u-1 appears multiple times
below. That passenger purchased multiple seats but they were assigned
all over the plane at the end.&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;

ep-13         u-6           u-1       ep-16      ep-24
ep-8          ep-15         u-9       u-3        ep-11
ep-22         ep-12         u-2       u-4        u-10
ep-9          ep-5          u-1       u-5        ep-25
ep-2          ep-21         ep-3      u-7        ep-17
ep-1          ep-23         u-8       u-8        ep-6
ep-14         u-12          ep-4      u-4        ep-26
ep-10         u-1           u-11      avail      ep-18
ep-20         u-6           u-11      u-9        u-2
ep-7          u-13          u-2       u-8        ep-19
&lt;/pre&gt;
&lt;p&gt;
The class was quick to notice that this could lead to families being
split apart and small children being seated away from parents. They
also noticed that this would affect poorer passengers more frequently
and to a greater extent than richer ones.&lt;/p&gt;
&lt;p&gt;
Great. Part 1 mission accomplished.&lt;/p&gt;
&lt;p&gt;
Now, the question became, should we do something about it and if so what.&lt;/p&gt;
&lt;p&gt;
That was the assignment.&lt;/p&gt;
&lt;p&gt;
The class noted that this was an unintended consequence of being
motivated purely by profit and airline convenience and that airlines
should do better. We also  noted that it&amp;#39;s not always so simple,
particularly if an airline is running on thin margins. Finally, we
discussed that this situation was real and in fact did result in
changes in regulations.&lt;/p&gt;
&lt;p&gt;
The following week, we discussed possible alternatives. How they might
work better and how they might affect an airlines bottom lines and if
that should really matter. We also discussed how similar ethical
scenarios might play out in other industries.&lt;/p&gt;
&lt;p&gt;
As a final piece, students had a long term assignment to code up an
updated algorithm that did better.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the long and short of it.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d like to think that by playing with the code, discovering the
dilemma and then trying to fix it led to a deeper appreciation of the
ethical issue and to be honest, the one big thing I want my teachers
to walk away with is more awareness of potential issues and that many
of them are not as obvious or simple as &amp;#34;stop doing that&amp;#34; even though
we&amp;#39;d like them to be.&lt;/p&gt;
&lt;p&gt;
That said, I&amp;#39;ve got to work on some things.&lt;/p&gt;
&lt;p&gt;
First and foremost my teachers came in with varying programming
backgrounds. They all completed a data structures in Java course over
the summer but a good number were not that comfortable with Python. I
covered Python over the first couple of weeks but I think I have to be
more structured with that in the future. More specific assignments
rather than giving them as much freedom as I did. I also think I&amp;#39;d
move this unit down in the syllabus - later after some smaller
programming assignments and then finally, I&amp;#39;d scaffold it
more.&lt;/p&gt;
&lt;p&gt;
Even so, I think it was worthwhile and a keeper. I think it could also
be a nice ethics assignment in any programming class that covers 2D
arrays or something similar.&lt;/p&gt;
&lt;p&gt;
There are a couple of other units that follow this do it and discover
theme. Once those happen I&amp;#39;ll report back on them as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick Sort over Zoom</title>
      <link>https://cestlaz.github.io/post/qsort-over-zoom/</link>
      <pubDate>Thu, 18 Mar 2021 12:10:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/qsort-over-zoom/</guid>
      <description>&lt;p&gt;
I haven&amp;#39;t been blogging much this year. Not sure why - probably pandemic
fatigue. It&amp;#39;s also affected my blog reading - more scanning, less deep
reading. I&amp;#39;ve also been trying to spend mode time off screen learning
how to paint (with,let&amp;#39;s say  mixed results :-) ) leaving less time
and energy to blog. Hopefully I&amp;#39;ll pick up on both ends as more people
get vaccinated and we can get to a more normal life. &lt;/p&gt;
&lt;p&gt;
In any event, I tried a new motivation for Quicksort today so I
thought I&amp;#39;d share.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve approached teaching the Quicksort in a variety of ways (&lt;a href=&#34;https://cestlaz.github.io/post/try-something-new/&#34;&gt;here&lt;/a&gt;,
&lt;a href=&#34;https://cestlaz.github.io/posts/quick-sort-starting/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/posts/2014-03-12-select-to-sort/&#34;&gt;here&lt;/a&gt;) but never had a great lead in activity. Merge sort
was easy in person since you can &amp;#34;Tom Sawyer&amp;#34; &lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-27-dumbass/&#34;&gt;shuffling a deck of
cards&lt;/a&gt; in class. We adapted this activity pretty well to &lt;a href=&#34;https://cestlaz.github.io/post/merge-over-zoom/&#34;&gt;work over Zoom&lt;/a&gt;
this past summer in our teacher certification program. Quicksort
however, haven&amp;#39;t found a good one. &lt;/p&gt;
&lt;p&gt;
Thinking about how to leverage remote, I had an idea to try - use
polls. I use &lt;a href=&#34;https://zulip.com/&#34;&gt;Zulip&lt;/a&gt; for class discussions. It&amp;#39;s like Slack but is open
source, can be self hosted, you can post from email,  and has much
better threading. I wrote a small bot to quickly create emoji
polls. &lt;/p&gt;
&lt;p&gt;
First I asked for the students to share their birtdays - just month
and day in the form MMDD so if you were born on March 12th you would
write 0312 in the chat. &lt;/p&gt;
&lt;p&gt;
Then, I picked one birthday at random, let&amp;#39;s say 0515. &lt;/p&gt;
&lt;p&gt;
I then created a poll: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐶 My birthday is earlier in the year than 0515&lt;/p&gt;
&lt;p&gt;
🐱 My birthday is later in the year than 0515&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The bot tags the post with the emoji and the class can click on their
choice. &lt;/p&gt;
&lt;p&gt;
We then talk about what we now know - &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We now know the exact location of 0515 with respect to all the
dates&lt;/li&gt;
&lt;li&gt;The data set is now partially ordered (everything less than 0515 to
the left, greater to the right).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also drew out some diagrams showing what was happening &lt;/p&gt;
&lt;p&gt;
This is also one iteration of the Quicksort. &lt;/p&gt;
&lt;p&gt;
We do this again on one side and continue to discuss. &lt;/p&gt;
&lt;p&gt;
From here we finish developing the algorithm and we&amp;#39;re off to the
races.&lt;/p&gt;
&lt;p&gt;
As usual, I won&amp;#39;t know for a while how well this worked or if it did
at all but the students seemed to be engaged and so far I think it
helped get a good feel for how the algorithm worked. &lt;/p&gt;
&lt;p&gt;
Using Zulip or other chat polls in this case made the motivating
activity easy and seamless. I&amp;#39;m not sure that this particular activity
would be as easy to implement in person unless you used some
technology like clickers. &lt;/p&gt;
&lt;p&gt;
We finished off the class discussing how we should test our
implementations. They&amp;#39;re going to test the sorts on a variety of data
sets including sets where all values are the same or are already
sorted. Given our naive pivot selection this should lead to some
pretty bad runtimes – fodder to motivate the next class.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On Teaching Recursion</title>
      <link>https://cestlaz.github.io/post/recursion/</link>
      <pubDate>Sun, 03 Jan 2021 13:49:00 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/recursion/</guid>
      <description>
&lt;p&gt;
Yesterday I read three posts on teaching recursion. &lt;a href=&#34;https://parentheticallyspeaking.org/articles/how-not-to-teach-recursion/&#34;&gt;First&lt;/a&gt; by Shriram
Krishnamurthi discussing his thoughts on how recursion is taught
incorrectly. This prompted Adam Michlin to &lt;a href=&#34;https://blog.ceos.io/2021/01/02/why-you-shouldnt-teach-recursion-yet/&#34;&gt;write about&lt;/a&gt; teaching
recursion later with some commentary on APCS and then finally, Alfred
Thompson added &lt;a href=&#34;https://blog.acthompson.net/2021/01/recursionhow-and-when-to-teach.html&#34;&gt;his thoughts&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Much like everything else in education there is no single right way to
do things. To say as an absolute that you should or shouldn&amp;#39;t teach in
a certain way is wrong - too many variable.s In my experience you can
teach recursion early or late but the structure of your program and
your choice of tools can influence how successful you&amp;#39;ll be. If you&amp;#39;re
teaching a programming course in a language like Python or Java and
are teaching control structures first you&amp;#39;re going to have a hard time
doing recursion early. They&amp;#39;ll get looping structures before they know
the constructs that support recursion - either for control or for
representing data. On the other hand, if you teach objects first you
might have more success.&lt;/p&gt;
&lt;p&gt;
On the other hand, if you&amp;#39;re using a language like Scheme where lists
and recursion are right in the forefront you&amp;#39;ll likely have more
success with recursion early rather than late. I wrote a bit about
this &lt;a href=&#34;https://cestlaz.github.io/posts/recursion-early/&#34;&gt;a couple of years ago&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll leave the &amp;#34;how important is recursion&amp;#34; question for annother time
but I want to address one more thing here. In yesterday&amp;#39;s posts four
traditional recursion problems received a solid bashing and I don&amp;#39;t
think it was fair. As I said up top, &lt;del&gt;only a Sith deals in absolutes&lt;/del&gt;
in teaching, there are no absolutes. Is factorial a wonderful
motivation for recursion - particularly for a student who knows loops?
Probably not but can it have some value? Let&amp;#39;s see…&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Factorial
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
While this might not be a terrific motivator it does have some
niceties. Most students will know factorial but will only be able
describe it informally - &amp;#34;multiply all the numbers between 1 and n.&amp;#34;
The recursive definition is more, precise, for lack of a better word.&lt;/p&gt;
&lt;p&gt;
Then, there&amp;#39;s a direct translation between the recursive definition
and the code. &lt;/p&gt;
&lt;p&gt;
Finally, it&amp;#39;s about as bare bones as you get - no data structures or
undue complexity. &lt;/p&gt;
&lt;p&gt;
Is this going to motivate a student to learn recursion? No.&lt;/p&gt;
&lt;p&gt;
Can it be used to help paint a more complete picture? Probably.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Fibonacci 
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Also got a bad rap in the above linked posts. It shares the benefit of
the recursive definition directly translating to a coded solution with
factorial. &lt;/p&gt;
&lt;p&gt;
Fibonacci is also a problem where they originally learned it via the
recurssive rule &amp;#34;the next Fibonacci number is the sum of the two
previous fibonacci numbers.&amp;#34;&lt;/p&gt;
&lt;p&gt;
It also seems that when students find the Fibonacci number problem
challenging to solve as beginners without recursion. The whole a
becomes b. b becomes c thing can be tricky for beginners. In  my
experience, they find the recursive solution to be more natural. This
is also interesting because they usually don&amp;#39;t find recursive
factorial more natural than a loop (assuming they learned loops
first).&lt;/p&gt;
&lt;p&gt;
Next, the slowness of the solution is feature, not a bug. It&amp;#39;s a
platform to talk about how recursion isn&amp;#39;t always the answer but you
can think about a problem recursively and if the solution isn&amp;#39;t right
it might lead you to a better solution. This comes up later with
dynamic programming. Just last year (he he) during Advent of Code I
ended up solving one of the problems via dynamic programming. How did
I get there? Thinking about the problem recursively. &lt;/p&gt;
&lt;p&gt;
Here you get a great platform for now comparing solutions - iterative,
recursive, tail recursive, memoization - take it as far as you want.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Euclid&amp;#39;s algorithm 
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I can&amp;#39;t comment on Euclid&amp;#39;s algorithm since I can&amp;#39;t recall ever
teaching it as part of recursion so I&amp;#39;ll substitute Newton&amp;#39;s method
for square root approximation. &lt;/p&gt;
&lt;p&gt;
The thing is that here, the goal isn&amp;#39;t really recursion. It&amp;#39;s just a
problem that can be tackled with either recursion or iteration. The
reason it&amp;#39;s a neat problem is because you can talk about floating
point accuracy issues along with how close of an approximation you
might want or need. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Towers of Hanoi
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Finally we get the Towers of Hanoi. Sure it&amp;#39;s contrived but it can
also be fun and by being a new and different problem students can try
to use any strategies that might lead to a solution, recursive or
otherwise:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try some small examples&lt;/li&gt;
&lt;li&gt;see if examples relate to each other&lt;/li&gt;
&lt;li&gt;base case?&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The big deal though is that Towers of Hanoi isn&amp;#39;t really about Towers
of Hanoi - it&amp;#39;s really a platform to talk about all sorts of good
stuff. I wrote all about it &lt;a href=&#34;https://cestlaz.github.io/posts/2010-01-10-towers-of-hanoi/&#34;&gt;a decade ago&lt;/a&gt;. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Other stuff
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Now, of course you can introduce recursion in other ways particularly
if you use a language like Scheme. &lt;/p&gt;
&lt;p&gt;
Bottom line is that without taking into considerations lots of other
factors - student backgrounds, teacher comfort. Time, experience,
facilities, goals and desired aoutcomes, and more you can&amp;#39;t really say
one way is right or one way is wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Working with texts part 3 - word chains</title>
      <link>https://cestlaz.github.io/post/word-chains/</link>
      <pubDate>Mon, 25 Nov 2019 05:45:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/word-chains/</guid>
      <description>&lt;p&gt;
At this point, we&amp;#39;ve done a fair amount of playing with text so it&amp;#39;s
time for a fun little project. We&amp;#39;re going to generate some text &amp;#34;in
the style&amp;#34; of a source text. The technique we&amp;#39;re going to use is
usually called a Markov Chain text generator. Basically a model where
the next state or word is based entirely on the current state. I don&amp;#39;t
dwell on the math under the hood but in case you&amp;#39;re interested, here
are a few links: &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Markov_chain&#34;&gt;Wikipedia&lt;/a&gt;, &lt;a href=&#34;http://setosa.io/ev/markov-chains/&#34;&gt;Explained Visually&lt;/a&gt;, &lt;a href=&#34;https://www.math.ucdavis.edu/~daddel/linear_algebra_appl/Applications/MarkovChain/MarkovChain_9_18/MarkovChain_9_18.html&#34;&gt;UC Davis Math&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
You can motivate this lesson in a number of ways. One is to start by
showing some generated text - for this, a flowery, poetic text like
the Book of Psalms works well. You can generate text a bunch of times
until you get a good result. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the start of the Book of Psalms:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Blessed is the man that walketh not in the counsel of the
ungodly, nor standeth in the way of sinners, nor sitteth in
the seat of the scornful.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;
and here&amp;#39;s some generated text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Blessed is the people that delight in war. Princes shall come out of
Zion,  the perfection of beauty god hath shined our god shall come and
shall declare thy mighty acts. I will speak of the glory of the lord
surely i will not lie unto David.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I added the punctuation as our generator strips it all and converts
the text to lower case.&lt;/p&gt;
&lt;p&gt;
The generated text looks reasonable in some ways but is clearly wrong
in others.&lt;/p&gt;
&lt;p&gt;
This leads to the conversation.&lt;/p&gt;
&lt;p&gt;
If we look at the original text, it starts with &amp;#34;blessed&amp;#34; but if we
look at our bag of words we also can see that &amp;#34;blessed&amp;#34; appears 49
times. What&amp;#39;s interesting for generating text are the words the follow
&amp;#34;blessed&amp;#34; and the number of times they follow it. Here they are
(sorted for convenience):&lt;/p&gt;
&lt;blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Word&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;How many times it follows the word &amp;#34;blessed&amp;#34;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;are&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;art&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;be&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;blessed&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;depart&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;for&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;his&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;of&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;that&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thee&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thy&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;upon&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wealth&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;you&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;
So we&amp;#39;ll have a lot of things like &amp;#34;blessed be the&amp;#34; &amp;#34;blessed be he&amp;#34;
etc. but only one occurrence of &amp;#34;blessed upon….&amp;#34; To generate text, we
can build a dictionary where the keys are the words and the values are
all the words that follow the key. We can build this with a variation
on our bag of words builder:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note that we need a counting loop rather than just iterating over the
list since we need both the current item and the one after it in each
iteration.&lt;/p&gt;
&lt;p&gt;
The (partial) value for the wordlists for the Book of Psalms would be:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
At this point, generating text is easy. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start with a word&lt;/li&gt;
&lt;li&gt;Add the word to yoru story.&lt;/li&gt;
&lt;li&gt;Look  it up in your wordlists dictionary.&lt;/li&gt;
&lt;li&gt;select a random word from that words dictionary entry (it&amp;#39;s list).&lt;/li&gt;
&lt;li&gt;That becomes the word for the next iteration&lt;/li&gt;
&lt;li&gt;Repeat until you have enough words.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This won&amp;#39;t add any punctuation and it will crash when it gets to the
last word in the original text (as it can&amp;#39;t find any &amp;#34;next words&amp;#34; but
basically it will work. Here&amp;#39;s the code:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The &lt;code&gt;random.choice()&lt;/code&gt; randomly selects a word from a list. This is
perfect for us since words that follow our key more frequently will
have more entries in the list and thus appear more often. I decided to
build a list of words and then use the &lt;code&gt;&amp;#34; &amp;#34;.join()&lt;/code&gt; to turn it all
into a space separated string.&lt;/p&gt;
&lt;p&gt;
This is pretty fun but the students will note that it really doesn&amp;#39;t
work that well. This can lead to increasing our sample. Instead of
using a single word as our key and having chain links based on two
words (key, random choice from value), we can use three word
links. Use a two word tuple for the key and the same list of words as
the value.&lt;/p&gt;
&lt;p&gt;
For example, a partial dictionary based on this idea from Macbeth Act
1 Scene 1 could be:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This takes a bit more work to build and also a bit more work to
generate text but it&amp;#39;s eminently doable and the result is
better. What about three word keys? Four? These aren&amp;#39;t hard to write
and ambitious students can write a generic dicitonary builder and
story generator routine so as to be able to use any key lenght.&lt;/p&gt;
&lt;p&gt;
Students will find that the longer the key, the better the resultant
story. They&amp;#39;ll also notice that at some point, all you&amp;#39;ll ever
generate is the original back again. This is a great time to talk
about over-training.&lt;/p&gt;
&lt;p&gt;
This can be a fun unit and / or assignment. I used source materials
that I like but any text will work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with texts part 2 - bag of words</title>
      <link>https://cestlaz.github.io/post/bag-of-words/</link>
      <pubDate>Wed, 20 Nov 2019 08:15:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/bag-of-words/</guid>
      <description>&lt;p&gt;
Following up on a &lt;a href=&#34;https://cestlaz.github.io/post/cleaning-textx/&#34;&gt;previous post&lt;/a&gt;, we&amp;#39;re going to continue to talk about
playing with text. This time, building and working with a bag of words
from a text. &lt;/p&gt;
&lt;p&gt;
A bag of words is a simple language processing model where you just
consider individual words in a text. What they are and how many times
they occur. This is a pretty simple model but you can still have a
good bit of fun with your students with it.&lt;/p&gt;
&lt;p&gt;
For example, if you take a text like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This land is your land
this land is my land&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Once you clean the a data as per the previous post you get the
following bag:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;word&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;is&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;land&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;my&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;this&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;your&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Not too interesting but it gets more interesting on a larger text. We
used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Act 1 Scene 1 from Macbeth (for testing - it&amp;#39;s only 13 lines)&lt;/li&gt;
&lt;li&gt;Cyrano de Bergerac (because it&amp;#39;s my favorite play)&lt;/li&gt;
&lt;li&gt;Moby Dick (chapter 1)&lt;/li&gt;
&lt;li&gt;Moby Dick (full text)&lt;/li&gt;
&lt;li&gt;The Book of Psalms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assuming a cleaned string with all the text, building the bag is
pretty easy:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;cleaned_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a string with all the cleaned text&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;bag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cleaned_text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;  bag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setdefault(word,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;  bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;setdefault&lt;/code&gt; in line three says that if &lt;code&gt;word&lt;/code&gt; isn&amp;#39;t a key in the
dictionary then insert it with a value of 0, otherwise, if &lt;code&gt;word&lt;/code&gt; &lt;strong&gt;is&lt;/strong&gt;
already a key in the dictionary do nothing. This saves us from
constructs like:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bag:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;      bag[word]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;      bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Once we have our bag we can do some explorations. Take out all the
values using &lt;code&gt;bag.values()&lt;/code&gt; and sort them. Ask &amp;#34;what words are going
to occur most frequently?&amp;#34; It&amp;#39;s easy to guess that it will be words
like &lt;strong&gt;the&lt;/strong&gt;, &lt;strong&gt;of&lt;/strong&gt;, &lt;strong&gt;and&lt;/strong&gt; etc.. Words that don&amp;#39;t really tell us anything
about the text. It&amp;#39;s a fun puzzle to figure out where the
&amp;#34;interesting&amp;#34; words start and even the question of what might make a
word in a text &amp;#34;interesting.&amp;#34; Words like &lt;strong&gt;the&lt;/strong&gt;, *and&amp;#34;, etc. are known
as &lt;a href=&#34;http://xpo6.com/list-of-english-stop-words/&#34;&gt;stop words&lt;/a&gt;. Depending on the application, you might want ot remove
them. Then again, you might not.&lt;/p&gt;
&lt;p&gt;
Usually we take a bit of time just to play with the bag, looking at
the types of words in various count ranges. Sometimes we&amp;#39;ll make bags
for different chapters of books and compare them. This is also when I
cover Python list comprehensions which make experimenting on bags of
words much cleaner. Say, for instance you want to find all the words
that occur between 50 and 100 times. Without list comprehensions you
might write:&lt;/p&gt;
&lt;p&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bag:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;          result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(word) &lt;span style=&#34;color:#75715e&#34;&gt;# or (word,count) or whatever&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
While with the comprehension it&amp;#39;s:&lt;/p&gt;
&lt;p&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ word &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bag &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;]
  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Besides basic exploring, what else can you do? You can make word
vectors, that is a list or vector where an element is 1 if the word is
present and 0 otherwise. Then you can do simple document
comparisons. You can kick this up a notch if you calculate word
frequencies based on the bag counts and use these. &lt;/p&gt;
&lt;p&gt;
You can also do basic sentiment analysis. Download a list of
&amp;#34;positive&amp;#34; and &amp;#34;negative&amp;#34; words and then check bags against them. You
can check to see how many negative or positive words are in a bag or
you can work with frequencies. You can also use other categories. &lt;/p&gt;
&lt;p&gt;
While we were discussing this at our PD, some teachers thought that
their classes might ahve a hard time doing all of this  from scratch
but thought that they could provide either the cleaning code or the
bag building code and have the students build experiments off of the
base. I thought it was a great idea.&lt;/p&gt;
&lt;p&gt;
At the end of our session we all agreed to think about how we might
build a lesson or unit out of this bag of words idea. I&amp;#39;ll leave you
all with some web sites that use these ideas in what I think are
interesting ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://davidamackenzie.com/tmbg_lyrics/&#34;&gt;They Might Be Giants Lyrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.sap.com/2014/01/07/measuring-word-use-frequency-in-rap-song-lyrics/&#34;&gt;Word use in rap lyrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://genius.com/Sameoldshawn-rap-stats-breaking-down-the-words-in-rap-lyrics-over-time-annotated&#34;&gt;Another analysis of rap lyrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/text-analysis-of-successful-song-lyrics-e41a4ccb26f5&#34;&gt;Analysis of succesful song lyrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Review Revisited or research - the teacher version</title>
      <link>https://cestlaz.github.io/post/code-review-2/</link>
      <pubDate>Tue, 16 Apr 2019 11:36:27 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/code-review-2/</guid>
      <description>&lt;p&gt;
Last semester I wrote about how I was introducing my students to &lt;a href=&#34;https://cestlaz.github.io/post/code-review/&#34;&gt;code
review&lt;/a&gt;. I thought it worked pretty well and was anxious to try it
again.&lt;/p&gt;
&lt;p&gt;
Well, I did the lesson(s) again this past week and it looks like it&amp;#39;s
a keeper. The setup was pretty much the same with some hiccups due to
using a new platform. Last semester I used plain GitHub public
repos. This time, I&amp;#39;ve been using GitHub classroom which I like very
much but I forgot that I made this assignment use private repos which
turned out to be a hassle.&lt;/p&gt;
&lt;p&gt;
If you didn&amp;#39;t read the previous post the short version was:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;group the kids in two&amp;#39;s&lt;/li&gt;
&lt;li&gt;Each does a written (no talking) code review on the others previous
lab. Very little guidance was given as to what the review should
look like.&lt;/li&gt;
&lt;li&gt;We then did two parings where one person talked through a live code
review with the other.&lt;/li&gt;
&lt;li&gt;Finally, we did one more written session. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This left person with three reviews. &lt;/p&gt;
&lt;p&gt;
This took the whole class since we had to finish some other material
before starting the reviews.&lt;/p&gt;
&lt;p&gt;
During the next class we discussed the review, what was important,
what wasn&amp;#39;t etc. We also talked about coding standards and things like
&lt;a href=&#34;https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines&#34;&gt;The C++ Core Guidelines&lt;/a&gt; and Google&amp;#39;s &lt;a href=&#34;https://google.github.io/styleguide/cppguide.html&#34;&gt;C++ Style Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
As a follow up assignment, they&amp;#39;re going to add a feature to another
student&amp;#39;s solution to the lab they reviewed.&lt;/p&gt;
&lt;p&gt;
It seems that the class was effective when I taught it last
semester. I&amp;#39;ve come to that conclusion because I&amp;#39;m teaching that group
again in their Data Structures class and they seem to do better with
Pair Programming (which I related to a live, real-time code review)
and it does seem that they&amp;#39;re paying at least a bit more attention to
the issues we highlighted in the code review lesson. &lt;/p&gt;
&lt;p&gt;
I won&amp;#39;t get the same chance to follow up with this group but I can at
least see in the next few weeks if it had any positive affect. One of
the things I&amp;#39;m curious about has to do with the student&amp;#39;s backgrounds.
Last semester&amp;#39;s students all had a year of APCS-A under their belts
before coming to Hunter. This semester&amp;#39;s students had a range from
APCS-P to a summer or after school program to nothing and their last
semester class with me was in my opinion a much lighter programming
class than a year of APCS-A. I&amp;#39;m wondering if the current crop, having
written fewer large programs will have a different appreciation for
the topics we discussed during the code reviews. &lt;/p&gt;
&lt;p&gt;
All of this got me to thinking about some of the things I saw both at
SIGCSE and on some of the posts that followed. Specifically about
teacher vs researchers and also, although not mentioned, K12 teachers,
teachers at the college level and researchers.&lt;/p&gt;
&lt;p&gt;
I was thinking about the fact that this is one of the ways I work to
improve at my craft. I try something, evaluate and reflect on the
results, then repeat, tweak etc. Not everything I try is a winner but
overall I think I&amp;#39;ve made a pretty steady progression as a
teacher. &lt;/p&gt;
&lt;p&gt;
I was also thinking that had I done this while in High School I would
have taught the lessons two to five times to similar but different
groups of students within a short period of days. I would also have
been able to iterate, possibly with variations, each semester. It
might not be instant but that&amp;#39;s a lot of potential feedback. At
college, I&amp;#39;m only teaching one section of each class and I&amp;#39;m guessing
that most full time faculty members might only teach two of a
particular class (although I could be very wrong - I just based this
on looking up a few schedules). I also don&amp;#39;t see my kids every
day. This makes for a slower, less effective feedback loop. On the
other hand, I&amp;#39;m not running pillar to post every day so can actually
take the time to evaluate what&amp;#39;s been happening in each class in
arguably a more meaningful way.&lt;/p&gt;
&lt;p&gt;
All of this is to say that most teachers I know trust other teacher&amp;#39;s
experiences rather than &amp;#34;the research&amp;#34; and that was also what was born
out in this University of Colorado &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3287420&#34;&gt;survey&lt;/a&gt;. While there are plenty of
bad teachers who know that &amp;#34;it&amp;#39;s always been done this way and it&amp;#39;s
worked well enough&amp;#34; I&amp;#39;ll always consider my most trusted education
resource to be a thoughtful, reflective, experienced teacher who
actively works on improving at their craft.  &lt;/p&gt;
&lt;p&gt;
This is not to say that there isn&amp;#39;t merit in research. I saw
presentations at SIGCSE and on the one had said to myself &amp;#34;ok, so he
discovered something that any moderately experienced K12 teacher
already knows&amp;#34; and at the same time thinking &amp;#34;but it&amp;#39;s great that
they&amp;#39;re now formalizing and documenting it.&amp;#34; There are also things
that can be researched that a single classroom teacher just can&amp;#39;t
approach and finally, to paraphrase a line from Mark Guzdial&amp;#39;s talk
where he specifically addressed other CS Ed researchers - we can build
things and they need things built - a teacher / researcher partnership
can open a lot of yet unexplored  doors for educators.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s all a reminder that we&amp;#39;re all playing different
roles. Researchers aren&amp;#39;t teachers, college teachers aren&amp;#39;t K12
teachers, K12 teachers subdivide further and of course the same holds
for the reverse direction. Sure there are similarities in our goals
and our roles but there are some important differences.&lt;/p&gt;
&lt;p&gt;
With that in mind, I&amp;#39;ll leave this with a quote form one of the all
time great screwball comedies:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/Hl9OzCY9fVE?start=116&#34;
frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media;
gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Solve A To Solve B</title>
      <link>https://cestlaz.github.io/post/solve-a-to-solve-b/</link>
      <pubDate>Fri, 18 Jan 2019 19:36:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/solve-a-to-solve-b/</guid>
      <description>&lt;p&gt;
So many programming assignments involve a direct solution. Write a
program to do this or write a problem to solve that. It&amp;#39;s pretty
typical. There&amp;#39;s nothing wrong with assignments like these. They allow
students to practice what they&amp;#39;ve been learning and it gives them the
opportunity to create some cool programs. All the same, I like it when
there&amp;#39;s an indirect problem. You&amp;#39;re faced with a problem but in order
to solve it you first have to solve some other problem&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s why I liked &lt;a href=&#34;https://adventofcode.com/2018/day/10&#34;&gt;day 10&lt;/a&gt; from this year&amp;#39;s Advent of Code. &lt;/p&gt;
&lt;p&gt;
At it&amp;#39;s core the question presents you with a collection of points
along with velocities in this form::&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
position=&amp;lt; 9,  1&amp;gt; velocity=&amp;lt; 0,  2&amp;gt;
position=&amp;lt; 7,  0&amp;gt; velocity=&amp;lt;-1,  0&amp;gt;
position=&amp;lt; 3, -2&amp;gt; velocity=&amp;lt;-1,  1&amp;gt;
position=&amp;lt; 6, 10&amp;gt; velocity=&amp;lt;-2, -1&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
Each point moves by adding the x and y components if its velocity each
second. For example, the last two points listed above - points (3,-2)
nad (6,10) would be transformed overtime as follows:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Point&lt;/th&gt;
&lt;th&gt;Velocity&lt;/th&gt;
&lt;th&gt;Second 0&lt;/th&gt;
&lt;th&gt;Second 1&lt;/th&gt;
&lt;th&gt;Second 2&lt;/th&gt;
&lt;th&gt;Second 3&lt;/th&gt;
&lt;th&gt;Second 4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3, -2&lt;/td&gt;
&lt;td&gt;-1,1&lt;/td&gt;
&lt;td&gt;3,-2&lt;/td&gt;
&lt;td&gt;2,-1&lt;/td&gt;
&lt;td&gt;1,0&lt;/td&gt;
&lt;td&gt;0,1&lt;/td&gt;
&lt;td&gt;-1,2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6,10&lt;/td&gt;
&lt;td&gt;-2,-1&lt;/td&gt;
&lt;td&gt;6,10&lt;/td&gt;
&lt;td&gt;4,9&lt;/td&gt;
&lt;td&gt;2,8&lt;/td&gt;
&lt;td&gt;0,7&lt;/td&gt;
&lt;td&gt;-2 6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
At some point in time, if you look at the points on a grid they will
spell out a message or at least a sequence of letters. The question
asks you to figure out that message. There&amp;#39;s a complete example and a
nice story around the problem on the &lt;a href=&#34;https://adventofcode.com/2018/day/10&#34;&gt;Advent of Code site&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
The first thought is probably to run this as a simulation. Set up a
loop, update the point locations, visualize and see if you have an
answer. This isn&amp;#39;t trivial for a beginner but it&amp;#39;s certainly
approachable. It also has a big problem. Unless you happen to have
some optical character recognition libaray handy you have to draw and
look at the output on every change. Given that it could take thousands
of iterations, this is not practical at all. &lt;/p&gt;
&lt;p&gt;
We can do better by solving another problem first. The key insight is
that each point travels along a line. In fact, this problem is a great
time to talk about a parametric representation of a line like &lt;/p&gt;
&lt;p&gt;
&amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;&lt;a href=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&lt;/a&gt;&amp;#34;&amp;gt;
&amp;lt;/script&amp;gt;&lt;/p&gt;
&lt;p&gt;
\(L=P+tV\) &lt;/p&gt;
&lt;p&gt;
Where \(P\)represents an \((x,y)\) point and \(V\) a direction vector
\((dx,dy)\).&lt;/p&gt;
&lt;p&gt;
Regardless of where the points start, at some point all of them will
be contained within your field of view after which they will continue
along their paths outside of that field of view. We can look at a
bounding box for all of the points and when that bounding box is
smallest we should be at or close to our message.&lt;/p&gt;
&lt;p&gt;
This is readily accomplished. We can find a bounding box by finding the
smallest and largest x and y coordinates for all the current points
and using \((X_{min},Y_{min})\) and \((X_{max},Y_{max})\) as the
diagonals of a bounding rectangle and then compare areas of these
rectangles. They should decrease at first and then eventually
increase. &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,some_large_value,stepsize):
      new_pts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; transform(pts,time) 
      bbox &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bounding_box(new_pts)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (area(bbox) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; area(previous_bbox)):
          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re close to or at the smallest bounding box&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
We can start with a big &lt;code&gt;stepsize&lt;/code&gt; and then refine it down until we
hone in on the smallest bounding box.&lt;/p&gt;
&lt;p&gt;
From there, we can transform all the points using the time that
resulted in the smallest bounding box and then display the points to
see our message. We might have to go through a small window of times
since the actual message might just be close to the configuration
yielded from the smallest bounding box. Of course that visualization
takes some doing - the actual viewing window might not align with your
screeen coordinates, they could all, for example, be negative so
you&amp;#39;ll probably have to do one last transformation to translate and
possibly scale the final points to make it all viewable.&lt;/p&gt;
&lt;p&gt;
When I first solved the problem, I just dumped the coordinates into a
2 dimentional array and printed it but afterwards I wrote a little
clojurescript html5 canvas visualization:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cestlaz.github.io/img/advent-2018-10.gif&#34; width=&#34;200px&#34; height=&#34;20px&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;
So there it is. It&amp;#39;s not a trivial problem for beginners but it is doable. There&amp;#39;s a
lot to deal with:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;parse the data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
This isn&amp;#39;t too bad. You could cover regular expressions but even
without it isn&amp;#39;t too big of a deal. You could also just use an editor
to extract the important data or preprocess this for the kids.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Figure out how to transform the points.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This also isn&amp;#39;t too bad. Just loop over all the points with &lt;code&gt;newpoint
= oldpoint + t * velocity&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Figure out the bounding boxes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also not too bad. Loop over all the points to find the smallest and
largest x and y coordinates&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set up a loop to find the smallest bounding box and hence the time
that the message will appear.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;and then finally:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;draw the points to visually inspect the answer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This might be the most persnickety part. When I first coded it my
output was upside down and backwards but good enough.&lt;/p&gt;
&lt;p&gt;
I can&amp;#39;t fully put my finger on it but I really enjoyed this problem. I
hope you enjoyed my writeup. If you want to check out my solution for
this (minus the clojurescript visualization) along with the other
Advent of Code problems I finished this year you can find them &lt;a href=&#34;https://github.com/zamansky/advent2018&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An experiment with code review</title>
      <link>https://cestlaz.github.io/post/code-review/</link>
      <pubDate>Thu, 15 Nov 2018 17:09:58 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/code-review/</guid>
      <description>&lt;p&gt;
Sometimes professional practices don&amp;#39;t work well in the classroom and
sometimes they do. One professional practice that does work well is
code review - reading and reflecting on other peoples code.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve had my students do code reviews in the past but this time I did
things differently. Here&amp;#39;s what I did and here&amp;#39;s how it went&lt;/p&gt;
&lt;p&gt;
Two weeks ago my students completed a lab. The lab involved reading
in a poorly indented C++ program and spit out a properly indented
one. This was the platform for the reviews.&lt;/p&gt;
&lt;p&gt;
First we paired everyone off. They forked each others labs and then
did a code review on each others assignment. Each student would read
their partner&amp;#39;s code, decide what to focus on - the whole thing, a
single function or something in between, and write up a code
review. They couldn&amp;#39;t talk during this process. &lt;/p&gt;
&lt;p&gt;
I was intentionally a little vague in the details of the assignment.&lt;/p&gt;
&lt;p&gt;
Afterwards, each student got a new partner and we did the review again
but this time one student would review the other&amp;#39;s code and they would
talk through the process while they took notes. &lt;/p&gt;
&lt;p&gt;
Next, we changed pairs a third time and this time the student that did
the talking review last time got their code reviewed in the same way.&lt;/p&gt;
&lt;p&gt;
Finally, we repeated the whole thing again.&lt;/p&gt;
&lt;p&gt;
This left each student with four code reviews. Two done in silence and
two that were interactive.&lt;/p&gt;
&lt;p&gt;
This took the entire hour fifteen of class so we didn&amp;#39;t get to discuss
the review until the following week.&lt;/p&gt;
&lt;p&gt;
The first thing I asked when we debriefed was which review was more
valuable? The written or the interactive one. They universally liked the
latter. This led to a spin-off discussion on pair programming. I love
pair programming as a pedagogical tool but students don&amp;#39;t always buy
all in. Some don&amp;#39;t communicate as much as the should and don&amp;#39;t get as
much value out of the process as they could. On the other hand, they
all seemed to see the value in the interactive code review but if you
think about it, pair programming is really a real time interactive
code review. I&amp;#39;m hoping this process helps with pair programming buy
in. I think it will.&lt;/p&gt;
&lt;p&gt;
Next we talked about takeaways from all their reviews. There were good
comments on, well, commenting, also on function length. This led to
talk about self commenting code, good variable and function names,
style guides, function header comments and all sorts
of good coding stuff.&lt;/p&gt;
&lt;p&gt;
All this was great but I think more than the recap, the reviews
themselves might have had the greatest impact.&lt;/p&gt;
&lt;p&gt;
One student commented that he found the code he reviewed much easier
to read and understand that his own code because it did indeed use
better function and variable names and was better laid out and
commented. &lt;/p&gt;
&lt;p&gt;
Another student noted that for a couple of programs he reviewed he had
a hard time understanding what the programmer was doing. During the
interactive review it was apparent that the author also no longer
understood their own code. I think that, at least for these students,
it really drove home the idea of writing good code. We talked about
how the real world would be different. In class they work on a project
in a concentrated short period of time. In the real world, they&amp;#39;ll be
working on multiple projects or at least multiple segments of projects
on and off over a long period of time. Remembering your own code is
super critical.&lt;/p&gt;
&lt;p&gt;
Overall, I&amp;#39;m very happy with the way these lessons played out. I
already thought that the actual code reviews had value but doing it
this way led to more student discovery some great discussions and
reflections. I think it was a big win.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who Played Spiderman - part 3</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman-3/</link>
      <pubDate>Tue, 16 Oct 2018 17:25:33 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman-3/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Parts 1 and 2
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-2/&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Part 3
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
In the first two parts of this set of posts I wrote about the
motivation and design a question answering system that can answer
&amp;#34;who&amp;#34; queries like &amp;#34;who played Spiderman&amp;#34; or &amp;#34;who shot John Lennon?&amp;#34;
It&amp;#39;s not perfect. When doing the Spiderman query, chances are the
desired answer will be at or near the top of the list of most
frequently appearing names but so will &amp;#34;Peter Parker.&amp;#34; How do you
distinguish between a real answer and a fictional name? Likewise, if
you ask &amp;#34;Who shot John Lennon?&amp;#34; You&amp;#39;ll probably get Mark David (if you
search for two word names) or if you&amp;#39;re more inclusive, Mark David
Chapman, but you&amp;#39;ll also find John Lennon at or near the top of your
results.&lt;/p&gt;
&lt;p&gt;
This system may not be perfect but then again, it can be written by one or a
small group of students relatively new to CS in a few periods as
opposed to a team of full time Google Software Engineers. I also truly
 &lt;strong&gt;like&lt;/strong&gt; the fact that it isn&amp;#39;t perfect. Too many student experiences involve
perfect questions with predetermined perfect answers. I love the fact
that they see false positives and true negatives in this. I love that
they can get pretty good but not perfect results. This makes the
experience more interesting, more fun, and more authentic.&lt;/p&gt;
&lt;p&gt;
This lesson can also easily be extended beyond &amp;#34;who&amp;#34; queries. &amp;#34;When&amp;#34;
queries are also pretty straightforward. Things like &amp;#34;When was D-Day&amp;#34;
or &amp;#34;When did Elvis die?&amp;#34; For a &amp;#34;when&amp;#34; query, you start the same way as
for a &amp;#34;who&amp;#34; query. Use the search API to get a bunch of documents that
mention the query terms. Then you look for dates. Dates can be even
easier to search for than names. Particularly if your students know
regular expressions. Dates could be things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;two digits / two digits / two digits&lt;/li&gt;
&lt;li&gt;Month name number, number&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or in regular expressions, something like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0-9]{2}/[0-9]{2}/[0-9]{2}/&lt;/li&gt;
&lt;li&gt;(Jan|Feb|Mar…)[0-9]{2}, {0-9]{4}}&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just as with &amp;#34;who&amp;#34; queries there are issues to deal with - searching
for &amp;#34;when did Elvis die&amp;#34; might give you when Elvis was born instead
but again, these are great motivators for further exploration and
discussion.&lt;/p&gt;
&lt;p&gt;
So, there&amp;#39;s the project. What level of students can do this? It
depends. I first did this in my Software Devepment class. That class
was offered to student who had completed APCS-A. The class covered
using APIs and setting up a web application using Python and Flask so
they were able to do the entire project, soup to nuts. An APCS class
could also do the project without the web application just so long as
they have access to the search API. In fact, an intro programming
class could also have success with this project.&lt;/p&gt;
&lt;p&gt;
This was actually one of the lessons I&amp;#39;ve missed since I haven&amp;#39;t been
able to work it into my Hunter courses so I was really happy when the
class discussion led me to call and audible and talk about it.&lt;/p&gt;
&lt;p&gt;
I hope some of you out there experiment with it and if you do, I&amp;#39;d
love to hear about your tweaks, implementations and successes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Parts 1 and 2
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-2/&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Who Played Spiderman part 2</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman-2/</link>
      <pubDate>Sat, 13 Oct 2018 16:04:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman-2/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Parts 1 and 3
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-3/&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Part 2
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
When we left off &lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;last time&lt;/a&gt; we used a search engine API to gather a
whole bunch of documents with the term &amp;#34;played Spiderman&amp;#34; or &amp;#34;who
played Spiderman.&amp;#34; Now we have to process these documents to answer
the question. Fortunately, the documents are basically just big
strings of text.&lt;/p&gt;
&lt;p&gt;
Since we&amp;#39;re doing a &amp;#34;who&amp;#34; query  we want to find all the names in all
the documents. This leads to a class discussion on how to find names
in a large string. They&amp;#39;ll come up with rules like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;two adjacent words each with a capital first letter.&lt;/li&gt;
&lt;li&gt;an honorific (Mr, Ms, etc.) followed by a capitalized word&lt;/li&gt;
&lt;li&gt;A word that matches a name from a &amp;#34;popular name&amp;#34; list followed by a
capitalized word.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The class might come up with different or additional rules. Actually
writing the code to pull out the names is an nice little assignment
that can be done with classes at many different levels. A beginning
class might just use string operations while an intermediate one could
use regular expressions. &lt;/p&gt;
&lt;p&gt;
Will the students write code that always finds all the names? Probably
not. Will their code incorrectly identify some word sets as names?
Most likely. It doesn&amp;#39;t really matter. Actually, this is a good
thing. You now have a great platform to talk about false positives and
true negatives.&lt;/p&gt;
&lt;p&gt;
Now the moment of truth - what&amp;#39;s the most common name? To answer that
you have to decide on the meaning of &amp;#34;most common.&amp;#34; Is it the name
that appeared the most times? How about the name that appeared in the
most documents? Does it matter? Whichever way you do it, chances are
the correct answer will be near the top of your list.&lt;/p&gt;
&lt;p&gt;
Next up in part 3 - other types of queries and why I love this sequence of
lessons so much.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Parts 1 and 3
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-3/&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Who Played Spiderman part 1 or my Nifty Assignment (that was rejected)</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman/</link>
      <pubDate>Thu, 11 Oct 2018 17:16:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Parts 2 and 3
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;[[/post/who-played-spiderman-2/][Part 2]&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-2/&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wasn&amp;#39;t going to teach this lesson today. I was planning on starting
a multi day project starting with an exercise in specification writing
and design.&lt;/p&gt;
&lt;p&gt;
Beforehand though, we had to talk about classes. One of my students
asked if probability and/or statistics were really important for CS. I
started to cite a few examples and then decided to segue into
this. Normally, I do this as a couple of lessons which leads to a
project, we just did the first part. I might do it as a project with
my class later on.&lt;/p&gt;
&lt;p&gt;
I also submitted this as a &amp;#34;Nifty Assignment&amp;#34; for SIGCSE a couple of
years ago but it wasn&amp;#39;t accepted. I was going to share the lesson at
some point so, well, here goes.&lt;/p&gt;
&lt;p&gt;
It starts with a question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Who played Spiderman?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That&amp;#39;s it. Every student writes down their answer. No talking, no
Googling or other searching, just write something down.&lt;/p&gt;
&lt;p&gt;
We then go around the room an tally up the answers. I got something
like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Toby Maguire&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tom Holland&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Andrew Garfield&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Peter Parker&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I don&amp;#39;t know&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
So as a class, we think that Toby MAguire played Spiderman with Tom
Holland also being a good choice. &lt;/p&gt;
&lt;p&gt;
After painstakingly explaining that Peter Parker couldn&amp;#39;t play
Spiderman because he &lt;strong&gt;IS&lt;/strong&gt; Spiderman I also shared some of the more
interesting answers I&amp;#39;ve gotten over the years.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve gotten &amp;#34;the lady playing the song on the violin in the movie in
front of the subway&amp;#34; which is technically correct and I also get
Willem Dafoe because as the Green Goblin / Norman Osborn he &lt;strong&gt;PLAYED&lt;/strong&gt; Spiderman.&lt;/p&gt;
&lt;p&gt;
In any event, it appears that if we get a lot of data on who &amp;#34;played
Spiderman&amp;#34; it&amp;#39;s likely that the most popular result is the right
answer or at least the right answer will be among the most popular
results. Of course, this is &lt;a href=&#34;https://www.nbc.com/saturday-night-live/video/common-knowledge/n9612&#34;&gt;not always the case&lt;/a&gt; but with reliable
data sources. &lt;/p&gt;
&lt;p&gt;
So, the basic idea is that if we have a question to answer like &amp;#34;Who
played spiderman?&amp;#34; we can start by collecting a whole bunch of
documents from the web with terms like &amp;#34;played Spiderman&amp;#34; in them.&lt;/p&gt;
&lt;p&gt;
When I first taught this lesson, we used the Google API to search for
web pages with the search terms in them but more recently I&amp;#39;ve used
the Bing API instead.&lt;/p&gt;
&lt;p&gt;
This leaves us with a large number of documents that could potentially
answer a search for &amp;#34;who played Spiderman?&amp;#34; &lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll leave it at this for now. Next time, we&amp;#39;ll talk about how we can
go from this collection of documents to a likely answer to our query. &lt;/p&gt;
&lt;p&gt;
Tune in again tomorrow, same bat Time, same bat channel.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Parts 2 and 3
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;[[/post/who-played-spiderman-2/][Part 2]&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-2/&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Compile Each Concept</title>
      <link>https://cestlaz.github.io/post/compile-each-concept/</link>
      <pubDate>Tue, 09 Oct 2018 14:46:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/compile-each-concept/</guid>
      <description>
&lt;p&gt;
We&amp;#39;ve all been there:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Student: Teacher, I need help
Teacher (comes over)
Student (shows screen listing three bazillion errors)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The student has just written pages of code and finally decided to try
to run it only to end up with pages of errors.&lt;/p&gt;
&lt;p&gt;
Error messages can at times be hard to read for beginners but to see
and truth be told, they frequently don&amp;#39;t even read them but over the
years I&amp;#39;ve developed a practice that I&amp;#39;ve found helpful as a software
developer and if students adopt the same practice it can save them a
lot of time and effort.&lt;/p&gt;
&lt;p&gt;
The idea is very simple. &lt;/p&gt;
&lt;p&gt;
Compile and test one concept at a time.&lt;/p&gt;
&lt;p&gt;
It might seem silly, but if I&amp;#39;m writing a a program, my first compile
might be code that looks like this:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  using std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout;
  using std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
  {
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
or &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

      &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
	
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
This might seem silly but it really doesn&amp;#39;t take any effort. I have a
key sequence to do this under Emacs and if I&amp;#39;m using an interactive
language like Python or Clojure I just have to hit &lt;code&gt;c-c c-c&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;
This might seem silly but I do it out of muscle memory and it
immediately tells me I don&amp;#39;t have any syntax errors and my build system
works.&lt;/p&gt;
&lt;p&gt;
Going further, I compile and test every time I code up what I call a
concept. What&amp;#39;s a concept? Let&amp;#39;s look at some code. A student might
write something like this to find prime number up to n:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            print(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot going on there. To me, a concept is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A loop&lt;/li&gt;
&lt;li&gt;A complex calculation&lt;/li&gt;
&lt;li&gt;a conditional&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these can have other concepts within.&lt;/p&gt;
&lt;p&gt;
In the above code, I&amp;#39;d probable write it as follows, adding in tests
and print statements throughout the process:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Step 1:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        print(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Step 2
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            print(i,j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Step 3
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                print(i,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is not prime&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            print(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Step 4 
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        print(i,i_isPrime)
  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Step 5
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            print(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
It might not play out exactly this way but if not it would be something
similar. The idea is that if you test every time you add one concept
or construct there are fewer places where you can introduce an error.&lt;/p&gt;
&lt;p&gt;
If you enter 100 lines before you test there are 100 places where
things can go wrong. If you type 10, there are only 10. On top of
that, if you&amp;#39;ve added 100 lines, conecptually you&amp;#39;ve probably added a
lot and the error can be anywhere. While it&amp;#39;s not always the case,
most of the time, if you just added an &lt;strong&gt;if&lt;/strong&gt;, the problem will be in the
&lt;strong&gt;if&lt;/strong&gt; or as a result of the if. Same with a &lt;strong&gt;loop&lt;/strong&gt; or any other construct.&lt;/p&gt;
&lt;p&gt;
Once you get in the habit, it&amp;#39;s easy and doesn&amp;#39;t really take any
time. A couple of keystrokes to compile and a couple more to run. &lt;/p&gt;
&lt;p&gt;
All too often students try to write everything at once and it&amp;#39;s so
rare that it works. If we can get them to develop incrementally
they&amp;#39;ll be able to write much more complex systems and write them with
much less frustration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>