<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/categories/programming/</link>
    <description>C&#39;est la Z (Programming)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Sep 2022 15:05:19 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/categories/programming/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Subtle Errors</title>
      <link>https://cestlaz.github.io/post/subtle-errors/</link>
      <pubDate>Fri, 02 Sep 2022 15:05:19 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/subtle-errors/</guid>
      <description>&lt;p&gt;
The semesters back up in full swing again - teaching 2 undergrad
classes in person - CS0 in Python and CS1 in C++ along with my teacher
certification class - Ethics via Zoom. Grand total of about 125
students. An error came up in the CS0 class the other day that
reminded me how tough it is not only to prepare students to deal with
all the things that can go wrong when learning to program but even for
a teacher to realize what&amp;#39;s going on.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code. It looks pretty straightforward and should work to
draw a square.&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; turtle

wn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; turtle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Screen()

crush &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; turtle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Turtle()

crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forward(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left(&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)
crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forward(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right(&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)
crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forward(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right(&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)
crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forward(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right(&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)

wn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exitonclick()
wn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mainloop()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Problem is, it didn&amp;#39;t. Now, algorithmicaly this is correct and in fact
the actual code looks correct as well but the student couldn&amp;#39;t get it
to run.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an actual screenshot that resulted in the error. Can you spot
the problem?&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/thonny-error.png&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;
I spotted it pretty quickly. Not because I&amp;#39;m any good at this but
because I&amp;#39;ve seen the error before. It turns out the student had named
their program file &lt;strong&gt;turtle.py&lt;/strong&gt; and so when line 1 tried to &lt;strong&gt;import
turtle&lt;/strong&gt; we ended up with a circular reference. Instead of loading the
turtle graphics module, it would try to load itself. Had the actual
error message remained on the screen it would have said something
about &amp;#34;circular reference&amp;#34; but that wouldn&amp;#39;t help a student and truth
be told it probably wouldn&amp;#39;t help most CS teachers in diagnosing the
problem. Now, the student wasn&amp;#39;t faultless here - I had explicitly
stated that they should name their program file &lt;strong&gt;t1.py&lt;/strong&gt; but we all
know how well students follow directions ;-).&lt;/p&gt;
&lt;p&gt;
This is just one example of the myriad issues that arise when teaching
programming. One could try to minimize these issue by working in
sandboxed environments but then when students leave class and the
sandbox. The sandbox makes life easier for the teacher but it&amp;#39;s really
only kicking the can down to someone else.&lt;/p&gt;
&lt;p&gt;
I remember this being a big deal when codecademy wa the big thing
around a decade ago. Everyone went to their site and &amp;#34;learned&amp;#34; how to
program. So many of them realized after finishing the course that they
couldn&amp;#39;t do anything outside of the little codecademy programming
window. This isn&amp;#39;t to say that Codecadmey wasn&amp;#39;t a good product or
service but students learning about how to deal with platform and
implementation issues is a real one.&lt;/p&gt;
&lt;p&gt;
This particular issue left some hints - the error mentioned the import
and said that it was circular but there are plenty of weird errors
like this - dealing with versions, file and module locations, build
systems and even things like disk quotas and file permissions that can
make learning to program much more of a minefield than it should be. &lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t have any real answer as to how and when these issues should be
dealt with - how much we should shield our students at first and how
we should expose them to real world issues but it&amp;#39;s probably something
teachers should be talking about more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Transparent Origami - Advent 2021 Day 13</title>
      <link>https://cestlaz.github.io/post/advent-2021-day13/</link>
      <pubDate>Mon, 13 Dec 2021 13:28:28 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day13/</guid>
      <description>&lt;p&gt;
No post so far on &lt;a href=&#34;https://adventofcode.com/2021/day/12&#34;&gt;day 12&lt;/a&gt;. I finished part 1 but my code was pretty
messy which turned part 2 into a mess. I still have to go back to get
that second star so just like day 10, my day 12 write up is on hold.&lt;/p&gt;
&lt;p&gt;
That said, I really enjoyed [[&lt;a href=&#34;https://adventofcode.com/2021/day/13&#34;&gt;https://adventofcode.com/2021/day/13&lt;/a&gt;
][today&amp;#39;s]] challenge. Paper foldind. You&amp;#39;re given transparent paper with
a bunch of marks on it. You have to fold the paper over horizontal or
vertical lines and examine the results.&lt;/p&gt;
&lt;p&gt;
Input was in the form of lines x,y pairs followed by lines specifying
the folds.&lt;/p&gt;
&lt;p&gt;
First decision - data representation. Since we&amp;#39;ve got a grid,
temptation would be to use a 2D structure like a 2D array but there
are two problems. One is that each fold will make the paper smaller
and smaller which makes a 2D array wasteful if not clumsy. The other
issue is that we don&amp;#39;t know the ranges for our coordiates. We know
that all the values will be positive but we have no idea where they
start and end.&lt;/p&gt;
&lt;p&gt;
Just like with the cellular automaton, I decided to use a dictionary
where the key was  the x,y pair and the entry was the mark. I could
have used a plain list for the points but the dictionary gave me quick
lookup. Also, if part 2 had us change the marks based on if they
overlap after a fold, I&amp;#39;d be prepared.&lt;/p&gt;
&lt;p&gt;
For convenience (and as I learned later, part 2) I also wanted a
routine that could print the board. Here&amp;#39;s that routine in case you
want to see some clojure.&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;board-&amp;gt;string [board]
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[maxx (apply max (map first (keys board))) &lt;span style=&#34;color:#75715e&#34;&gt;;; find the largest x&lt;/span&gt;
          maxy (apply max (map second (keys board))) &lt;span style=&#34;color:#75715e&#34;&gt;;; find the largest y&lt;/span&gt;
          k (keys board)

          &lt;span style=&#34;color:#75715e&#34;&gt;;; The next line makes a vector of maxy vectors&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;;; each of which has maxx spaces&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;;; basically a vector of vectors or 2D matrix if you would&lt;/span&gt;
          grid (into [] (repeat (inc maxy) (into [] (repeat (inc maxx) &lt;span style=&#34;color:#e6db74&#34;&gt;\ &lt;/span&gt;))))

          &lt;span style=&#34;color:#75715e&#34;&gt;;; go through the keys to our board (which is a hash table&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;;; and mark those squares with a #&lt;/span&gt;
          filled-grid (reduce (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[b [y x]] (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc-in&lt;/span&gt; b [x y] &lt;span style=&#34;color:#e6db74&#34;&gt;\#&lt;/span&gt;)) grid k)

          &lt;span style=&#34;color:#75715e&#34;&gt;;; change each line from a vector to a string&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;;; but leave the overall thing a vector since&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;;; it looks fine when I print it.&lt;/span&gt;
          string-grid (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(apply str %) filled-grid)
          ]
      string-grid
      ))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Once we have our &amp;#34;board&amp;#34; we can then deal with folding. Folds had to
be over a horizontal (ex: y=7) or vertical (ex: x=5).&lt;/p&gt;
&lt;p&gt;
It was important to note that since we&amp;#39;re folding we only want to take
the points with coordinates greater than the folding line and
transform those and not just transform all the points.&lt;/p&gt;
&lt;p&gt;
The actual transformation is pretty straightforward. Given the line&amp;#39;s
coordinate L the new point value can be calculated using:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
newcoord = oldcoord - 2 * abs(oldcoord-L)
&lt;/pre&gt;
&lt;p&gt;
We just go through the points and if they have to be transformed,
update them.&lt;/p&gt;
&lt;p&gt;
Part 1 solved.&lt;/p&gt;
&lt;p&gt;
Part 2 turned out to be far easier than I expected. Part 1 had us just
do the first fold. Part 2 had us do all of them at which point, if we
printed our board it would show us the 8 secret letters that formed
our anwer. Since the example on the problem page was a y fold and the
first fold of my data was an x fold I knew both my folds worked. I
just ran through all the folds and voila.&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m not complaining about an easy problem. If it were harder I
might not finish and then no write up but I was expecting something
more.&lt;/p&gt;
&lt;p&gt;
There were ways to make part two a bit more complex. I could see maybe
placing the data so far off the end so that you had to translate them
down closer to the origin so that your result would print or maybe do
something with overlapping marks when you fold as I mentioned up top.&lt;/p&gt;
&lt;p&gt;
Still, nothing wrong with an easy day mixed in and I still think it&amp;#39;s
a great problem. This could be done by a CS0 or CS1 class. What I
particularly love about problems like this is that when you
ultimately solve it you &amp;#34;decode&amp;#34; a secret message. Much cooler than
just getting some number.&lt;/p&gt;
&lt;p&gt;
So, over half way done. I still have that part 2 of day 12 to finish
but still captured half the total stars for the event. That&amp;#39;s my
starting goal each year.&lt;/p&gt;
&lt;p&gt;
If you want to see my full solution, you can check it out &lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day13.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dumbo Octopus and the Game of Life - AOC 2011 Day 11</title>
      <link>https://cestlaz.github.io/post/advent-2021-day11/</link>
      <pubDate>Sat, 11 Dec 2021 11:31:32 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day11/</guid>
      <description>&lt;p&gt;
I wasn&amp;#39;t particularly motivated to start &lt;a href=&#34;https://adventofcode.com/2021/day/11 &#34;&gt;day 11&lt;/a&gt; but took a look over
coffee. A grid of points where on each turn or step the points are
modified by some rule. Hey, this sounds familiar - cellular automata
like Conway&amp;#39;s Game of Life.&lt;/p&gt;
&lt;p&gt;
You set up your grid and then on each turn just follow the rules. In a
traditional Cellular Automaton like &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&#34;&gt;Conway&amp;#39;s Game of Life&lt;/a&gt;, on each
turn each cell looks at its six neighbors and makes a decision as to
its next state based on the neighbors and a rule.&lt;/p&gt;
&lt;p&gt;
For &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&#34;&gt;Conway&amp;#39;s Game of Life&lt;/a&gt;, a cell is either alive or dead. On each
turn, it counts all it&amp;#39;s neighbors and then decides if it will be
alive or dead next turn based on its current state and how many
neithbors are currently alive.&lt;/p&gt;
&lt;p&gt;
I love talking about Cellular Automata in class although I haven&amp;#39;t
done it since my Stuy days. One of my favorite topics is using CS to
solve a maze in NetLogo. I wrote about that &lt;a href=&#34;https://cestlaz.github.io/posts/2016-01-17-maze-ca/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Cellular Automata is also not a stranger to Advent of Code with three
problems being CS problems in 2020 and I think there were more in
earlier years.&lt;/p&gt;
&lt;p&gt;
This year the twist was that the rule for each step had two stages and
the second stage could repeat over and over again.&lt;/p&gt;
&lt;p&gt;
The first stage was just to increment the value of each cell. The
second involved &amp;#34;flashing.&amp;#34; This would happen if a cell&amp;#39;s value
exceeded nine. If a cell flashed, it would increment the value of each
of its neighbors. This could cause a cascade by having a neighbor&amp;#39;s
value exceed nine. This kept going until the board stabalized. You
also had to account for the fact that a cell should only flip at most
once per step.&lt;/p&gt;
&lt;p&gt;
Part one had you calculate the number of flashes over the course of
100 steps.&lt;/p&gt;
&lt;p&gt;
When I do CA in a class like APCS-A we usually use a 2D array to
represent our world. In NetLogo, the world is already a grid. Since
I&amp;#39;m using Clojure, I though a hash table would be easier. The keys are
x,y coordinates and the values are the state of the cell (the integer
value). To set things up I stole the code from my code from last year,
also coincidentally &lt;a href=&#34;https://github.com/zamansky/advent2020/blob/main/src/day11.clj&#34;&gt;day 11&lt;/a&gt;. My &lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day11/&#34;&gt;write up&lt;/a&gt; also talke about using a hash
table or dictionary instead of a 2D array.&lt;/p&gt;
&lt;p&gt;
The first stage of each step was easy. Just map the increment function
across the entire board.&lt;/p&gt;
&lt;p&gt;
The second step took more thought. First, I went through the board and
for any cell that was greater than 9 I incremented all its
neighbors. Then to make sure I don&amp;#39;t flash a cell more than once a
turn, I marked the current cell as being flashed. I did this by making
it a large negative number.&lt;/p&gt;
&lt;p&gt;
I repeated that second step over and over until it stabilized. That
is, you went through an iteration where the board didn&amp;#39;t change - no
new flashes.&lt;/p&gt;
&lt;p&gt;
Finally, I set all the negative cells, which indicated they flashed to
zero in preparation for the next step.&lt;/p&gt;
&lt;p&gt;
In the loop I counted and added up how many flashes we had and that
was part 1.&lt;/p&gt;
&lt;p&gt;
For part 2 you were looking for a step where every cell flashed at the
same time. This was pretty easy because we were able to essentially
use the same engine. The only difference was that instead of doing 100
steps, you kept going until every cell flashed in one turn. That
turned out to be easy to check. You know that happened when all of the
cells at the start of a turn are 0.&lt;/p&gt;
&lt;p&gt;
As usual, the full solution can be found on &lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day11.clj&#34;&gt;GitHub.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Wasn&amp;#39;t motivated to start today but it turned out to be a fun little
challenge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bracket Bonanza (AOC 2021 day 10)</title>
      <link>https://cestlaz.github.io/post/advent-2021-day10/</link>
      <pubDate>Fri, 10 Dec 2021 12:15:34 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day10/</guid>
      <description>&lt;p&gt;
I know, where&amp;#39;s day 9? Thursdays (and Mondays) are already tight for
me - I teach all morning and it&amp;#39;s been a rough week. I just had very
little energy and focus all day yesterday. I snuck some time in to
finish part 1 but couldn&amp;#39;t focus on part 2.&lt;/p&gt;
&lt;p&gt;
Today, however, my body gave me an extra half hour of sleep (til
4:30am) so I had extra time and energy. I was fortunate in that
today&amp;#39;s problem was essentially one that I&amp;#39;ve assigned time and time
again so I was able to wrap it up quickly and then go back to finish
day 9.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s pretty likely that there&amp;#39;ll be a day I can&amp;#39;t solve in the near
future so maybe I&amp;#39;ll write up day 9 then.&lt;/p&gt;
&lt;p&gt;
But for now, &lt;a href=&#34;https://adventofcode.com/2021/day/10&#34;&gt;day 10 - Syntax Scoring&lt;/a&gt; or as I like to say a bracket
bonanza. Inputs were lines of brackets like this:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
[({(&amp;lt;(())[]&amp;gt;[[{[]{&amp;lt;()&amp;lt;&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
Both parts of the problem involve figuring out if the line is valid,
that is, if each open bracket has a matching close bracket without
overlap. For example (([])) is valid but (([)]) is not becaue the
inner () and the [] overlap.&lt;/p&gt;
&lt;p&gt;
I could be like a kid doing a technical interview and pretend I hadn&amp;#39;t
solved the problem before the interview but the truth is, I&amp;#39;ve
done problems very similar to this most times I teach data structures.&lt;/p&gt;
&lt;p&gt;
As you process through the input, whenever you see a closing bracket,
it &lt;strong&gt;has&lt;/strong&gt; to match up with the last seen open bracket otherwise the
expression is invalid. This means you have to maintain a data
structure in such a way that the last open bracket you see is the
first one you check whenever you see a closing brace.&lt;/p&gt;
&lt;p&gt;
This is, by definition, a stack. A stack is a data structure where the
last item you put in is the first item you take out.&lt;/p&gt;
&lt;p&gt;
So, the algorithm is pretty simple.&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;make an empty stack
For each character in the input:
  1. If it&amp;#39;s an open bracket put it on the stack
  2. If it&amp;#39;s a close bracket, check the top of the stack.
     1. If the stack is empty you&amp;#39;ve got an invalid expression - exit
     2. If top of the stack doesn&amp;#39;t match your bracket - invalid -exit
     3. If top of the stack does match your braket, pop it off the stack and keep going&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
That&amp;#39;s basically it. The only remaining task is to figure out the
specifics to answer the problem.&lt;/p&gt;
&lt;p&gt;
For part 1 you had to run the above algorithm on each line of input
and for each invalid expression look up the invalid character&amp;#39;s value
(provide in the problem text) and add them all up.&lt;/p&gt;
&lt;p&gt;
For part two you had to take the remaining characters in the lines
once you hit an invalid brace and figure out a slightly more complex
score.&lt;/p&gt;
&lt;p&gt;
So, given that I had basically done this problem it wasn&amp;#39;t hard but it
was fun. This could be directly assigned to any data structures class.&lt;/p&gt;
&lt;p&gt;
As usual, my code can be found here:
&lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day10.clj&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day10.clj&#34;&gt;https://github.com/zamansky/advent2021/blob/main/src/day10.clj&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seven Segment Silliness - Advent 2021 Day08</title>
      <link>https://cestlaz.github.io/post/advent-2021-day08/</link>
      <pubDate>Wed, 08 Dec 2021 13:20:49 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day08/</guid>
      <description>&lt;p&gt;
Day 8 took a lot longer than the other days. Not all that much code
and not too complex, at least after getting through a scary sounding
lead up but going from problem statement to solution took both time
and thought.&lt;/p&gt;
&lt;p&gt;
As I started to read the problem, I wasn&amp;#39;t sure I&amp;#39;d finish it let
alone have time to write it up.&lt;/p&gt;
&lt;p&gt;
Take a minute to read over the problem. You can find it [[&lt;a href=&#34;https://adventofcode.com/2021/day/8&#34;&gt;https://adventofcode.com/2021/day/8&lt;/a&gt;
][here.]]&lt;/p&gt;
&lt;p&gt;
A pretty intimidating wall of text. &lt;/p&gt;
&lt;p&gt;
You&amp;#39;ve got a bunch of lines, each looking like this:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe
&lt;/pre&gt;
&lt;p&gt;
Each &amp;#34;word&amp;#34; represents a seven segment display. The side to the left
of the | is the input for that line and the stuff on the right, the
output.&lt;/p&gt;
&lt;p&gt;
The problem is that each line has the inputs scrambled. We jave to
figure out which letter maps to the top segment, which the bottom,
etc.&lt;/p&gt;
&lt;p&gt;
Oh boy.&lt;/p&gt;
&lt;p&gt;
It turns out that part one really wasn&amp;#39;t hard at all. In fact, it
could make a nice early CS assignment. If you look at the display for
a &lt;strong&gt;1&lt;/strong&gt;, it has two segment on the right hand side. It&amp;#39;s the only number
that uses 2 and only 2 of the seven segments. Likewise a &lt;strong&gt;4&lt;/strong&gt; is the
only four segment letter, &lt;strong&gt;7&lt;/strong&gt; is the only one that uses 3 segments,
and &lt;strong&gt;8&lt;/strong&gt; is the only one that uses all seven segments.&lt;/p&gt;
&lt;p&gt;
For part 1 you just had to look at all the outputs  - that is, the
stuff on each line after the | and add up the number of items that
are either a 1, 4, 7, or 8. That&amp;#39;s easily accomplished by going over
each of those items and checking if they have the correct number of
characters and then figuring out the total number of these items.&lt;/p&gt;
&lt;p&gt;
I had already parsed my data into the a two item list where the left
item is a list of inputs and the right a list of outputs:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;[ [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cg&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cdbga&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bcg&amp;#34;&lt;/span&gt; ...] [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;geac&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ceag&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;faedcb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cg&amp;#34;&lt;/span&gt;]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
So all I had to do go through all the output sides, count the characters in
each item and then add up the number of them.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;myfilter [x]
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;takes a list of numbers and returns only those that are 2,4,3, or 7&amp;#34;&lt;/span&gt;
    (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(contains? &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;} %) x))


  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;part1 [  data]
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[results (map second data) &lt;span style=&#34;color:#75715e&#34;&gt;;; pull out all the outputs&lt;/span&gt;
          counted (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(map count %) results) &lt;span style=&#34;color:#75715e&#34;&gt;;; turn the &amp;#34;words&amp;#34; into counts of their lengths&lt;/span&gt;
          f (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;myfilter&lt;/span&gt; %) counted) &lt;span style=&#34;color:#75715e&#34;&gt;;; only keep the ones that are the right lengths&lt;/span&gt;
          total (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(count %) f) &lt;span style=&#34;color:#75715e&#34;&gt;;; count how many are in each line&lt;/span&gt;
          ]
      (apply +  total))) &lt;span style=&#34;color:#75715e&#34;&gt;;; add them all up &lt;/span&gt;

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt; data)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For part 2 we had to decode all the output lines and then turn them
into numbers and add them up.&lt;/p&gt;
&lt;p&gt;
Sounded really daunting. It required some thought but it wasn&amp;#39;t that
bad.&lt;/p&gt;
&lt;p&gt;
I wanted to build a dictionary where the keys were the digits and the
values would be the segments for that particular input line that
represent  that digit.&lt;/p&gt;
&lt;p&gt;
For a given line, we can do it pretty easily for the unique numbers 2,
4,3, and 7 so we just loop through all the items in a line  and when
we see an item with the appropriate length, we store the number in our
dictionary.&lt;/p&gt;
&lt;p&gt;
We might have something like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;align-right&#34;&gt;key&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;td&gt;b e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;td&gt;b c e g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;7&lt;/td&gt;
&lt;td&gt;b d e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;8&lt;/td&gt;
&lt;td&gt;a b c d e f g&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
These were the values from the first line of the example data. Also, I
used a Clojure set  to store the values since that makes the rest of
the solution easier.&lt;/p&gt;
&lt;p&gt;
I then took this dictionary and tried to add to it by figuring out the
5 segment numbers - specifically, 2, 3 and 5. It turns out that of the
5 segment numbers, the &lt;strong&gt;3&lt;/strong&gt; is the only one that ovelaps with the two
segments from the &lt;strong&gt;1&lt;/strong&gt; so we can find that one pretty easily. If the
five segment number wasn&amp;#39;t a 3, I looked to see if it was a 5. For
this, I looked to see if it had the left and middle segments that the
4 had. Finally, if it wasn&amp;#39;t a &lt;strong&gt;3&lt;/strong&gt; or a &lt;strong&gt;5&lt;/strong&gt; then it had to be a &lt;strong&gt;2&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
Next, I did the same for the remaining segments which were all 6
segments. You can look at my full code (linked below) for specifics.&lt;/p&gt;
&lt;p&gt;
Once we had the complet dictionary I flipped it - keys became values
and values became keys so we could look up the output numbers. From
there, it was easy to convert them to numbers and find the final
answer.&lt;/p&gt;
&lt;p&gt;
The part of this problem that was both fun and challenging was trying
to figure out how to decode a given letter given what you already
figured out. That took some time but getting the final answers for
problems like this are somehow more satisfying than just a straight up
&amp;#34;code it&amp;#34; problem.&lt;/p&gt;
&lt;p&gt;
You can find my full solution &lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day08.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
I was worried I wasn&amp;#39;t going to finished this one when I first read it
but I think it&amp;#39;s my favorite of the year so far.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How you look at a problem can make it easier - AOC 2021 Day 7</title>
      <link>https://cestlaz.github.io/post/advent-2021-day07/</link>
      <pubDate>Tue, 07 Dec 2021 09:04:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day07/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2021/day/7&#34;&gt;Today&amp;#39;s problem&lt;/a&gt; was similar to &lt;a href=&#34;https://cestlaz.github.io/post/advent-2021-day06/&#34;&gt;yesterday&amp;#39;s&lt;/a&gt; in that it&amp;#39;s ease or
difficulty really depended on how you looked at the question.&lt;/p&gt;
&lt;p&gt;
For yesterday, the problem was hard if you approached it by modeling
each and every lanternfish but it was much easier if you modeled the 8
days of the reproduction cycle. Sure, there was still work to be done
but looking at the problem the right way made things much easier.&lt;/p&gt;
&lt;p&gt;
Same thing for today, at least for me.&lt;/p&gt;
&lt;p&gt;
We were given a list of crabs and their locations and the challenge
was getting them all to the same spot. Fortunately, crabs in their
submarines can only move in one dimension - they can only move
horizontally. This gives us an input that&amp;#39;s just a list of integers,
each representing a crab location.&lt;/p&gt;
&lt;p&gt;
We want to move all the crabs to the same location and we want to do
it as efficiently as possible. The crab submarines use one unit of
fuel for each step taken so we want to minimize the overall amount of
fuel used.&lt;/p&gt;
&lt;p&gt;
If we look at this from the crab point of view this could seem
daunting - do we move the crabs one at a time? Do we have them
converge? Will we have to do some crazy recursive movement thing?&lt;/p&gt;
&lt;p&gt;
It turns out, none of the above. As soon as we realize that we don&amp;#39;t
have to figure out actual moves or actually move the crabs the problem
becomes much easier. It isn&amp;#39;t about the crabs but rather about the
locations. We want to figure out the minimal cost of moving all the
crabs to each location and then we can pick the lowest overall cost.&lt;/p&gt;
&lt;p&gt;
This turns out to be rather simple.&lt;/p&gt;
&lt;p&gt;
For each possible location (looping from smallest crab location to
larges):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;calculate the distance from each crab to this location.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add up all those distances.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We then just need to take the smallest distance and we&amp;#39;re done.&lt;/p&gt;
&lt;p&gt;
On to part two.&lt;/p&gt;
&lt;p&gt;
For part two, there was a change to the fuel cost. Instead of just
being the distance between the two locations, the cost of the fuel
increased by one for each step. So, for moving 1 step the cost would
be one. Two steps, 1+2, three 1+2+3 etc..&lt;/p&gt;
&lt;p&gt;
This was easy enough to model. I just changed the function that
calculated the old cost with one that calculated the new cost. To do
that, I took the difference between the two endpoints and calculated
the sum from 1 up to and including that number.&lt;/p&gt;
&lt;p&gt;
This added an additional loop but I figured might as well try it. It
was noticeably slower than part 1 - about 11 seconds as opposed to
around 90 msec but fast enough to get an answer and finish the problem
for the day. That said, it was easy enough to improve the solution if
you know that you can calculate the sum from 1 to n using the formula
(n*(n+1))/2. This got the speed back to just over 100 msec.&lt;/p&gt;
&lt;p&gt;
Looking over the adventofcode subreddit people were talking about
using the median to more quickly solve the problem but what I did was
good enough for me.&lt;/p&gt;
&lt;p&gt;
As always, the clojure code can be found &lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day07.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lanternfish and lots of data (AOC 2021 Day 6)</title>
      <link>https://cestlaz.github.io/post/advent-2021-day06/</link>
      <pubDate>Mon, 06 Dec 2021 16:25:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day06/</guid>
      <description>&lt;p&gt;
Today we had to model the growth of the lanternfish population
(&lt;a href=&#34;https://adventofcode.com/2021/day/6&#34;&gt;problem here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;
Lanternfish spawn new lanternfish every seven days. The trick is that
the original starting population consists of fish at different points
in the cycle. For instance, if your input data was 3,2,4 then each fish
would spawn a new fish in three, two, and four days respectively. The
new fish would set their timers to 8 and start counting down to their
spawn date on the next day and the original fish would reset it&amp;#39;s
timer to 6.&lt;/p&gt;
&lt;p&gt;
Of course, lanternfish never die so the population is going to get
quite large.&lt;/p&gt;
&lt;p&gt;
At first glance this seems to be an easy problem to model. Read the
fish into a list or array and start processing them a day at a
time. Add fish to the end as needed.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m guessing this would work for part 1 but doubt it would work for
part 2. Even before I started solving this just seemed like a problem
where part 2 would blow away our data set getting much to large much
too fast.&lt;/p&gt;
&lt;p&gt;
So, what to do? It turns out the problem is cyclical. Instead of
looking at fish, we can look at days. We have an 8 day cycle. Instead
of storing the fish, store the number of fish that will spawn on any
given day.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the insight.&lt;/p&gt;
&lt;p&gt;
I started by playing around with mod and trying to figure out how to
walk around the list while summing up fish but after a while my brain
started to hurt. Instead, I just did things in the most
straightforward way I could.&lt;/p&gt;
&lt;p&gt;
Fist, I made a list with my initial state. The example problem had a
data set of &lt;code&gt;&amp;#34;3,4,3,1 2&amp;#34;&lt;/code&gt; which led to this list:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Notice that I have 9  not 8 slots (indexed 0 - 8). That extra one at
the end is where I move the fish that are spawning today (day 0) so
they can start the cycle again.&lt;/p&gt;
&lt;p&gt;
From there, it&amp;#39;s just following the rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Grab the number of fish to spawn today.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move all the fish down a day - that is, the fish in day 1 go to day
0, day 2 to day 1 etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the new fish to slot 6 (as per the specification).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the number that spawned today to the end.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Repeat this for the requisite number of days and then add them all up.&lt;/p&gt;
&lt;p&gt;
The Clojure code for the complete solution is:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;      (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;solve [data days]
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[start-state (&lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;
                           (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[sofar next]
                             (&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt; sofar next inc))
                           [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ] data )]
          (apply + (&lt;span style=&#34;color:#66d9ef&#34;&gt;loop &lt;/span&gt;[i &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                          gens start-state]
                     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;lt; i days)
                       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[last (first gens)
                             gens  (into []  ( drop &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; gens))
                             gens  (assoc gens &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; (+ (nth gens &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) last))
                             gens  (conj gens last)
                             ]
                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;recur&lt;/span&gt; (inc i) gens)
                         )
                       gens)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For those of you not familiar with Clojure, that &lt;code&gt;reduce&lt;/code&gt; in the let on the second line is how we take the data
and build our starting state. For those of you who DO know clojure, I
could probably have made it cleaner with a threading macro instead of
the three step assignment to gens in the bottom let.&lt;/p&gt;
&lt;p&gt;
In any event, we walk away with a memory efficient time efficient
solution.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s probably some recurrence that could be set up and solved to do
this all with math but since the mod stuff made my head hurt working
on a recurrence equation would probably make it explode.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s usually at least one problem like this in advent of code each
year. Something where it looks like you&amp;#39;ll have to calculate forever
but it turns out you can set up a short repeating cycle to get the job
done. Unfortunately, they&amp;#39;re all too advanced for my average intro CS
students. Sure, I could go over the problem and they&amp;#39;d kindof get it
but I don&amp;#39;t think the majority would really grok it. Alternatively
they could just follow the rules given and led in class to setting up
the cycle but I&amp;#39;d love to come up with one where they can really
discover the magic.&lt;/p&gt;
&lt;p&gt;
I should spend some time thinking about this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>One man&#39;s complex is another man&#39;s simple (AOC 2021 Day 5)</title>
      <link>https://cestlaz.github.io/post/advent-2021-day05/</link>
      <pubDate>Sun, 05 Dec 2021 10:40:21 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day05/</guid>
      <description>&lt;p&gt;
Yesterday I wrote about the virtues of a simple straightforward
solution as opposed to a super &amp;#34;clever&amp;#34; one. Today reminded me that
what seems simple to one person might be clever to another.&lt;/p&gt;
&lt;p&gt;
Having successfully survived bingo with a giant squid, Today&amp;#39;s
&lt;a href=&#34;https://adventofcode.com/2021/day/5&#34;&gt;challenge&lt;/a&gt; had us navigating our sub so as to avoid dangerous parts of
the ocean. We were given a bunch of lines represented by endpoints as
input. If we graphed all the lines, some of them would overlap. The
more the overlap, the more dangerous. Given all the points on the
graph that are covered by a line, we had to determine how many points
were covered by two or more lines.&lt;/p&gt;
&lt;p&gt;
For example, if we have the following 10x10 grid with 1,1 being the
upper left adn 10,10 the lower right and the following lines:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
1,2 --&amp;gt; 8,2
3,1 --&amp;gt; 3,7
2,4 --&amp;gt; 7,4
6,1 --&amp;gt; 6,8
&lt;/pre&gt;
&lt;p&gt;
we&amp;#39;d have the following lines:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
..X..X....
XXXXXXXX..
..X..X....
.XXXXXX...
..X..X....
..X..X....
.....X....
.....X....
..........
..........
&lt;/pre&gt;
&lt;p&gt;
If instead of X we marked each square with the number of times it was
drawn on we&amp;#39;d have&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
..1..1....
11211211..
..1..1....
.121121...
..1..1....
..1..1....
.....1....
.....1....
..........
..........
&lt;/pre&gt;
&lt;p&gt;
In the above example, the answer to part 1 would be 4 since 4 squares
have more than one line on them&lt;/p&gt;
&lt;p&gt;
Here our lines are all vertical and horizontal. For part 1 we only had
ton consider horizontal and vertical even though the input might
specify diagonals.&lt;/p&gt;
&lt;p&gt;
Part 2 required we also deal with diagonals but only the ones with a
45 degree angle.&lt;/p&gt;
&lt;p&gt;
For a relatively new programmer the obvious solution would be to
create a 2D array. Then you just have to scan through the data and
fill the array. Finally, go over the array and count the cells that
were hit more than once.&lt;/p&gt;
&lt;p&gt;
This approach presents three problems. The first, which is minor is
that you&amp;#39;d first have to scan the input to determine the required
array size. The second problem is that you could have negative values
in your input so you&amp;#39;d have to somehow compensate for that
possibility. Finally, you could have spares input. What if there were
only two lines but one was from -1000000,-1000000 –&amp;gt; -999999,999999
and the other from 1000000,1000000 –&amp;gt; 1000001,1000001. You have two
tiny lines but you&amp;#39;d need a HUGE array.&lt;/p&gt;
&lt;p&gt;
For me, an easier, simpler solution was to use a dictionary (also
called hash table, or map depending on language). My grid would start
as an empty map and then I&amp;#39;d add points by walking the line segments. For
example if I had a line from 0,0 –&amp;gt; 2,0, I&amp;#39;d add three entries to the
map. The keys would be (0,0), (1,0), and (2,0), and the values would
be all 1 since each location was hit once.&lt;/p&gt;
&lt;p&gt;
If I then added the line (1,0) –&amp;gt; (1,2), I&amp;#39;d end up with this final
map:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  {(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) : &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
   (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note that the (1,0) entry now has a two since it was hit twice.&lt;/p&gt;
&lt;p&gt;
Once we added all the lines, pull out the values and count how many
are greater or equal to two.&lt;/p&gt;
&lt;p&gt;
Once armed with this approach it was easy enough to solve the
problem. You can check out the code &lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day05.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll maintain that I used a simple, clear, and maintainable approach
but it&amp;#39;s also worth noting that if I presented this problem to
relative beginners, depending on what tools they&amp;#39;ve used, they might
very well lean heavily on an array representation. This would
certainly be true when I was a beginner - we never saw maps or
dictionaries until we built them in our data structures courses. Now,
with students cutting their teeth in languages like Python where
dictionaries come up much earlier, perhaps today&amp;#39;s beginners would
also opt for the map / dictionary solution.&lt;/p&gt;
&lt;p&gt;
In any event, I always like problems like this where there are
multiple ways of representing the data in the solution which leads to
some nice food for thought.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working code is better than clever code (AOC 2021 day 4)</title>
      <link>https://cestlaz.github.io/post/advent-2021-day04/</link>
      <pubDate>Sat, 04 Dec 2021 12:17:30 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day04/</guid>
      <description>&lt;p&gt;
I always tell my students that the cleverest program is
worthless if it doesn&amp;#39;t actually work.&lt;/p&gt;
&lt;p&gt;
There are always some kids in class that all too often try to write
the fanciest solutions.&lt;/p&gt;
&lt;p&gt;
They&amp;#39;re the ones that write&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s){&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!*&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;(l(&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;s)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
instead of something like:&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string_length&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s){
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (s[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
    i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
to calculate the length of a string.&lt;/p&gt;
&lt;p&gt;
They try to code in a way they envision a master programmer coding
which invariably leads them to hours of heartache and misery as they
try to fix a poorly and complexly designed system. When I was a kid I
did this as well but learned better early on. One thing I was pretty
proud of as a young professional programmer were the number of
comments I&amp;#39;d get from peers and superiors on the readability of my
work.&lt;/p&gt;
&lt;p&gt;
Of course, my view isn&amp;#39;t unique. Much more famously, Donald Knuth said
the same when he quipped that &amp;#34;premature optimization is the root of
all evil.&amp;#34;&lt;/p&gt;
&lt;p&gt;
So while today&amp;#39;s advent of code problem presented a number of design
choices, I decided to go lazy and simple. Sure, my solution&amp;#39;s probably
slower than others but it&amp;#39;s easy and understandable.&lt;/p&gt;
&lt;p&gt;
Today&amp;#39;s problem had you playing bingo against a giant squid (full
problem &lt;a href=&#34;https://adventofcode.com/2021/day/4&#34;&gt;here&lt;/a&gt;). The core was that after a number of numbers were drawn,
each time you crossing that number off your boards, you had to figure
out if a board was a winner.&lt;/p&gt;
&lt;p&gt;
First the input. It was easy enough to read in the file. The first
line were the bingo balls in the order they were to be drawn and then
you had a bunch of 5 line blocks, each line with 5 numbers
representing a 5x5 board. Each board was separated by a space.&lt;/p&gt;
&lt;p&gt;
My strategy was to read in all the boards into a list, then as I draw
each bingo ball, replace all occurrences of the number drawn in on the
boards with an X. Then, check to see if we have 5 X&amp;#39;s in a row either
vertically or horizontally.&lt;/p&gt;
&lt;p&gt;
Reading was easy but there were some decisions to be made. I was going
to have a list of boards but what should a board look like? I didn&amp;#39;t
want to use a 2D array since that&amp;#39;s not Clojure&amp;#39;s strong suit but I
could easily use a list of lists (or vector of vectors).&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
((22 13 17 11  0)
 ( 8  2 23  4 24)
 (21  9 14 16  7)
 (6 10  3 18  5)
 (1 12 20 15 19))
&lt;/pre&gt;
&lt;p&gt;
If I were coding in Python, I could do this as well using a list of lists.&lt;/p&gt;
&lt;p&gt;
This representation makes it &lt;strong&gt;very&lt;/strong&gt; easy to check to see if we have a winner
going across but checking vertically is a little annoying and doing
the substitutions is also annoying.&lt;/p&gt;
&lt;p&gt;
On the other hand, I could represent the board as a list of 25 items
and use a mapping function to get to a specific row,col location such
as &lt;code&gt;index = board[row*5+col]&lt;/code&gt; . This representation makes checking the
board for winners a little onerous but marking squares with an X
becomes trivial - just replace all occurrences of the number in
question with an X. This can be done in Clojure using map:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;add-mark [board mark]
  (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= % mark) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt; %) board))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Thinking about it, it was really easy to switch from the list of 25
items to the list of list representations. We can do this with the
Clojure partition function.&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;))

    &lt;span style=&#34;color:#75715e&#34;&gt;;; results in:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;((0 1 2 3 4)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;; (5 6 7 8 9 )&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;; (10 11 12 13 14)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;; (15 16 17 18 19)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;; (20 21 22 23 24))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
So, we can use the 25 element list representation to mark the boxes
and then switch to the list of lists to check for a winner. What&amp;#39;s
better, we can transpose the list of lists, that is switch the rows
and columns so as to make the vertical check into a horizontal one.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my code to do all the checking:&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;has-five? [board]
  (&amp;gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; board
           (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(filter (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[x] (= x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;))%)  ) &lt;span style=&#34;color:#75715e&#34;&gt;;; keep only the Xs&lt;/span&gt;
           (map count) &lt;span style=&#34;color:#75715e&#34;&gt;;; how many are there in each row&lt;/span&gt;
           (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(= &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; % )) &lt;span style=&#34;color:#75715e&#34;&gt;;; keep the winners (5 in a row)&lt;/span&gt;
           count) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;;; return true if we have any winners&lt;/span&gt;



(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;check-board [board]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[horiz (&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; board) &lt;span style=&#34;color:#75715e&#34;&gt;;; convert 1D board to a 2D one&lt;/span&gt;
        vert  (apply mapv vector horiz)] &lt;span style=&#34;color:#75715e&#34;&gt;;; transpose &lt;/span&gt;
    (or  (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-five?&lt;/span&gt; horiz)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-five?&lt;/span&gt; vert))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now, solving part 1 was easy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;take the next ball&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mark all the locations with the ball&amp;#39;s number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;see if there&amp;#39;s a winner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If not, go back to step 1.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Sure, we&amp;#39;re doing more transformations on the data than needed but
it&amp;#39;s clean and easy and at least from my point of view, made the whole
exercise much less error prone.&lt;/p&gt;
&lt;p&gt;
On to part 2.&lt;/p&gt;
&lt;p&gt;
Turns out that was also pretty simple. Instead of stopping at the
first winning board we had to find the last winning board.&lt;/p&gt;
&lt;p&gt;
Pretty easy. We just had to modify the above procedure to the
following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;take the next ball&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mark all the locations wiht the ball&amp;#39;s number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;remove any board that&amp;#39;s a winner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we&amp;#39;re down to one board remaining we&amp;#39;ve found the board&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If not, back to step 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I did this but first got a wrong answer. After looking at my results I
realized that I stopped when I got down to 1 board but it hadn&amp;#39;t
necessarily won yet. I had to then continue drawing balls and marking
squares until that final board was solved.&lt;/p&gt;
&lt;p&gt;
That was it.&lt;/p&gt;
&lt;p&gt;
Upon later reflection, I realized my solution wasn&amp;#39;t perfect. It would
fail if there were some boards that were never solvable. This though
is an easy fix.&lt;/p&gt;
&lt;p&gt;
So, maybe not a super clever super fast solution but a clean one that
works and is easy to understand and modify. To me that&amp;#39;s the
definition of a great solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Work through the example!!!!!</title>
      <link>https://cestlaz.github.io/post/advent-2021-day03/</link>
      <pubDate>Fri, 03 Dec 2021 17:10:50 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2021-day03/</guid>
      <description>&lt;p&gt;
It&amp;#39;s that time of year again. Yep, you got it. Time for &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of
Code&lt;/a&gt;. I&amp;#39;m not feeling nearly as motivated as in past years but so far
so good. Finished the first three days.&lt;/p&gt;
&lt;p&gt;
Today I got a good reminder - work through your examples. You can find
today&amp;#39;s problem &lt;a href=&#34;https://adventofcode.com/2021/day/3&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
For part 1 you got a list of binary numbers and had to figure out how
many ones and zeros there were in any given digit.&lt;/p&gt;
&lt;p&gt;
For example, if we had these numbers:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
0010
0111 
1001
1010
1111
&lt;/pre&gt;
&lt;p&gt;
The ones digit has 3 total ones and 2 zeros. The  2s digit has 4
ones and 1 zero. You then had to do some calculations based on if
there were more ones in a given column or more zeros.&lt;/p&gt;
&lt;p&gt;
Pretty straight forward. As usual, I&amp;#39;m working in Clojure so I used
map and reduce to figure out the number of ones in each column and
then did the required calculation. If you want to see the code, you
can find it &lt;a href=&#34;https://github.com/zamansky/advent2021/blob/main/src/day03.clj&#34;&gt;here&lt;/a&gt;. Later in the day I looked at other people&amp;#39;s
solutions and it was interesting in that a lot of people approached it
differently - they basically looked at the list of numbers and rotated
it so that columns became rows and rows became columns which then make
counting ones and zeros easier,  but I digress.&lt;/p&gt;
&lt;p&gt;
I then had to rush through part 2 because I had to leave for the
ophthalmologist. I didn&amp;#39;t know if my eyes were going to be dilated and
if they were, I wasn&amp;#39;t going to be able to come back to the problem
until late in the evening.&lt;/p&gt;
&lt;p&gt;
I got something done but unfortunately, didn&amp;#39;t quite
finish. Fortunately, my eyes weren&amp;#39;t dilated so after getting home I
set to finish the problem.&lt;/p&gt;
&lt;p&gt;
Part 2 involved taking your list of numbers, calculating some values
using the part 1 code and then using those values to eliminate some of
the numbers. You then repeated this process until you were left with a
single number. See the problem statement and if you want my solution
for details.&lt;/p&gt;
&lt;p&gt;
I got something working but my answer was incorrect. I spent, well,
frankly, too much time trying to figure out why. I was
stumped. Finally I went back to the example in the question and
actually worked through it (as opposed to glancing over it). I quickly
saw my error. I had calculated the part 1 values based on the original
data then kept applying those to the data list until it reduced to a
single number. I was supposed to recalculate the part 1 values on the
reduced data set each time instead. Once I realized this, it was a
pretty quick solution.&lt;/p&gt;
&lt;p&gt;
This isn&amp;#39;t the first time my carelessness cost me time. Back in 2016 I
spent way too long trying to fix an Advent of Code problem where the
problem was that I had the wrong parameters in a function (&lt;a href=&#34;https://cestlaz.github.io/posts/2015-12-17-im-an-idiot/&#34;&gt;link&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;
In this case, the moral of the story is &lt;strong&gt;work through the provided
examples!!!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s it for today. If you haven&amp;#39;t checked out Advent of Code, I
highly recommend it and if you want to see my solutions, however far I
get, you can find them &lt;a href=&#34;https://github.com/zamansky/advent2021&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Finally, in the spirit of the season, Natan composed a new Chanukah
song.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re so inclined, you can check it out below:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/fatTWGfXO_o&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Coding For Problem Solving</title>
      <link>https://cestlaz.github.io/post/coding-for-problem-solving/</link>
      <pubDate>Fri, 01 Oct 2021 10:17:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/coding-for-problem-solving/</guid>
      <description>&lt;p&gt;
Like most CS educators I&amp;#39;m a regular reader of Alfred Thompson&amp;#39;s
blog. Alfred&amp;#39;s &lt;a href=&#34;https://blog.acthompson.net/2021/09/define-learn-to-code.html&#34;&gt;latest post&lt;/a&gt; is spot on but there was a line in it and a
particular Twitter response that reminded me that we so often forget
a big reason why people learn to code.&lt;/p&gt;
&lt;p&gt;
Alfred mentions, as did that Tweet about coding to solve
problems. What problem are you trying to solve. This is the mainstream
push - programming helps you solve problems. I&amp;#39;ve noticed a doubling
down on this with all the efforts (including mine) to integrate CS
into other subjects. While where and how much CS should be
integrated vs standalone is a topic for another day, integrating CS
into other fields is very much a &amp;#34;help solve the problems of that
field&amp;#34; approach.&lt;/p&gt;
&lt;p&gt;
Nothing wrong with all of this. It&amp;#39;s all good stuff but there&amp;#39;s
another side to the coin. It&amp;#39;s a side that I sometimes forget about
from in the trenches. In fact, a few years ago I was rambling on and
on about programming as problem solving and my friend and fellow CS
teacher Peter Brooks reminded me - the question doesn&amp;#39;t have to be
&amp;#34;what problem do you want to solve?&amp;#34; The question can be &amp;#34;what do you
want to create?&amp;#34;&lt;/p&gt;
&lt;p&gt;
Sometimes we forget that programming can be an amazingly creative
endeavor. You can use it to make something brand new and there doesn&amp;#39;t
necessarily have to be a problem to be solved.&lt;/p&gt;
&lt;p&gt;
Fred Brooks puts it nicely at the start of his classic work &amp;#34;The
Mythical Man Month:&amp;#34;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The programmer, like the poet, works only slightly removed from pure
thought-stuff. He builds his castles in the air, from air, creating by
exertion of the imagination. Few media of creation are so flexible, so
easy to polish and rework, so readily capable of realizing grand
conceptual structures….&lt;/p&gt;
&lt;p&gt;
– Fred Brooks, The Mythical Man Month &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I also saw elsewhere, maybe by Fred Brooks, maybe someone else talking
of a programmer being like a painter but whereas a painter has oils,
brushes, and pigments to create on a canvas, the programmer has
programming languages to create on the computer. &lt;/p&gt;
&lt;p&gt;
Maybe it&amp;#39;s the push for &amp;#34;practical&amp;#34; education, maybe the integration,
maybe the focus on testing. I have no idea but it seems that we
frequently forget about the creative side of the equation.&lt;/p&gt;
&lt;p&gt;
I mean, yes, the APCS-P specification does mention creativity in the
interestingly enough named &amp;#34;Create Task:&amp;#34;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Programming is a collaborative and creative process that brings ideas
to life through the development of software. In the Create performance
task, you will design and implement a program that might solve a
problem, enable innovation, explore personal interests, or express
creativity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
but it&amp;#39;s after &amp;#34;solve a problem&amp;#34; and &amp;#34;enable innovation.&amp;#34;&lt;/p&gt;
&lt;p&gt;
That creative side though shouldn&amp;#39;t be forgotten. Some of my students
most memorable projects didn&amp;#39;t solve a problem. I remember the
&amp;#34;Cheerleader Simulator&amp;#34; in NetLogo. No problem solved there but it was
a fun project. Another was Tamika&amp;#39;s stupid mouse dexterity game. A
simple game of her own design. I say stupid not becuase it was really
stupid - it was great. Rather, I say stupid becuase that game caused
me to waste so much time that end of year when I should have been
grading!!!!!!!!!&lt;/p&gt;
&lt;p&gt;
As we seek to engage a wider audience in CS we shouldn&amp;#39;t merely focus
on the problem solving nor the making money. The creative side is
really important as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Back To Python</title>
      <link>https://cestlaz.github.io/post/back-to-python/</link>
      <pubDate>Fri, 14 Jun 2019 15:53:54 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/back-to-python/</guid>
      <description>&lt;p&gt;
With summer right around the corner I&amp;#39;m hoping to spend at least a
little time on some personal coding projects. There are a few work
related tools I&amp;#39;d love to develop and just some random areas of CS I&amp;#39;d
like to explore. If I finish them, the work projects will be web
based.&lt;/p&gt;
&lt;p&gt;
I was thinking about using this as an opportunity to do a deeper dive
into Clojure having used it for some experiments and competitions like
&lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt; but at the end of the day I decided not
to. It&amp;#39;s not that Clojure wouldn&amp;#39;t be a good language for web apps. It
looks like it would be great. Rather, I&amp;#39;m finding the ecosystem and
build systems in particular to be more trouble than they&amp;#39;re worth for
a side project - particularly when I want to accomplish more than
becoming comfortable with the Clojure ecosystem. &lt;/p&gt;
&lt;p&gt;
Things were so much simpler in the old days. Way back when I was a
software engineer at Goldman Sachs I worked on a couple of large,
complex systems. All I had were a bunch of C files in a bunch of
directories and a Makefile to build everything. Simple and
straightforward. &lt;/p&gt;
&lt;p&gt;
If I&amp;#39;m working in C or C++ I can still do the same. &lt;/p&gt;
&lt;p&gt;
In Java I was always able to do the same since Make seemed to be
accepted in the community. Now there seems to be many more
options - Ant, Maven, and Gradle to name just three.&lt;/p&gt;
&lt;p&gt;
Python was even easier - just set up your directory structure
and &lt;code&gt;__init__.py&lt;/code&gt; files and your good to go and by using a virtual
environment, which is pretty easy, you can keep the entire development
environment clean.&lt;/p&gt;
&lt;p&gt;
Nowadays things are much more complex. Sure, I can create a simple
Clojure program and run it but anything bigger and you need a build
system. For a long time the tool was &lt;a href=&#34;https://leiningen.org/&#34;&gt;Leiningen&lt;/a&gt;. You define a project
file using it&amp;#39;s particular syntax and it can download dependencies,
manage builds etc.. It actually doesn&amp;#39;t look so bad if you&amp;#39;re living
in Clojure all the time but for a hobbyist like me I found myself
looking for other peoples templates and hoping for the best. Whenever
I needed my project to do things outside the norm I was pretty much
out of luck. &lt;/p&gt;
&lt;p&gt;
Then came &lt;a href=&#34;https://boot-clj.com/&#34;&gt;Boot&lt;/a&gt; as an alternative. Where Leiningen used a descriptive
configuration file, Boot used a configuration file that was basically
Clojure code. It was different but to me, it had the same problems -
documentation was lacking and too much magic going on behind the
scenes. Finally, Clojure started to come with &lt;a href=&#34;https://clojure.org/guides/deps_and_cli&#34;&gt;build system&lt;/a&gt;. I want to
like it but the documentation is even sparser and with three competing
build systems with varying levels of use and documentation it&amp;#39;s less
than ideal for a guy like me.&lt;/p&gt;
&lt;p&gt;
Things get messier when you add in Clojurescript - Clojurescript
basically compiles Clojure code to Javascript. It has a great
development environment and handles state really nicely but for a
novice like me getting any of the build systems set up for Clojure and
Clojurescript in a way that makes sense is more than I want to
deal with right now.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t mean to be unfair to Clojure and its ecosystem. I still really
like the language and if I lived in it I&amp;#39;m sure I&amp;#39;d figure it all out
and be happy with it. It&amp;#39;s also no worse and arguably better than
ecosystems for other languages. &lt;/p&gt;
&lt;p&gt;
Javascript, for example makes you chose between gulp, grunt, webpack,
browserfity, parcel and maybe more. I think I finally got my head
aroudn webpack and parcel but it&amp;#39;s really the wild west. Of course
those are just the Javsacript build systems you then have to make
choices like VueJS or React or something else. &lt;/p&gt;
&lt;p&gt;
There&amp;#39;s really no easy answer. &lt;/p&gt;
&lt;p&gt;
Putting my teacher hat on for a second this is also an issue that our
students will have to deal with at some point. Are we helping them by
keeping them in web based language silos and simple IDEs or hurting
them? At what point do we transition them or do we leave it for them
to do on their own? I&amp;#39;m not taking any position on this here and now
but it&amp;#39;s something worth thinking about.&lt;/p&gt;
&lt;p&gt;
Back to my side projects. &lt;/p&gt;
&lt;p&gt;
So, for the sake of getting things done I think I&amp;#39;m going to fall back
to Python. I don&amp;#39;t need to deal with any complex build systems, I can
write my web applications with Flask and it&amp;#39;s also a nice platform for
the other things I&amp;#39;d like to do.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll still probably play with Clojurescript for the web frontend ut if
that turns out to be proiblematics I&amp;#39;ll just go back to VueJS.&lt;/p&gt;
&lt;p&gt;
Time to get to work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Give me a break (and a continue)</title>
      <link>https://cestlaz.github.io/post/break-continue/</link>
      <pubDate>Wed, 01 May 2019 08:39:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/break-continue/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;What can I do to discourage my students from using the &amp;#34;break&amp;#34;
statement?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That was more or less the gist of the comment and it elicited some
good responses. This time the conversation was on Facebook but I&amp;#39;ve
seen this one and participated in it many times before. I never liked
the question when presented as a &amp;#34;how can I stop them&amp;#34; one.  I equally
dislike when the offered advice is basically &amp;#34;never use break no
matter what&amp;#34; or something similar. When writing code the best advice
is rarely to never or always do something. The question should really
be &amp;#34;when is it appropriate for my students to use a break statement
and how can I steer them  towards using it correctly.&amp;#34; The answer, of
course is &amp;#34;it depends.&amp;#34;&lt;/p&gt;
&lt;p&gt;
For those unfamiliar with the statements, &lt;code&gt;break&lt;/code&gt; jumps to the end and
exits the loop or switch statement that encloses it. The &lt;code&gt;continue&lt;/code&gt;
statement jumps up to the next iteration of its enclosing loop. I&amp;#39;ll
show some examples below.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s true that you never &lt;strong&gt;need&lt;/strong&gt; to use break but in my opinion, if
used correctly it can create clearer code. Let&amp;#39;s look at a related
situation. Suppose you write a function to find and return some item
from  a data set (in pseudocode):&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You could tighten it up a bit but there are two things that I don&amp;#39;t
like about the above solution. First, it goes through the entire data
set even if the item you&amp;#39;re searching for is near the beginning. You
could fix that by putting in a more complex loop boolean:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; numitems &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;found &lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Second. you&amp;#39;ve got the conditional after the loop. I find the
following much clearer:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To me this is perfectly clear. Look for an item, if and when we find
it, we&amp;#39;re done so let&amp;#39;s get out of here. If not, the loop finishes and
we return the not found stuff at the end. It&amp;#39;s clean, easy to
understand, and potentially a little faster.&lt;/p&gt;
&lt;p&gt;
You have a similar situation with &lt;code&gt;break&lt;/code&gt;. Without it you might have
code like this:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And with:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Not significantly different. &lt;/p&gt;
&lt;p&gt;
People who don&amp;#39;t like the break statement usually adhere to a very
strict interpretation of structured programming - one entry point, one
exit point but I&amp;#39;d argue that break (and continue) are not like
arbitrary jumps. They&amp;#39;re well defined and don&amp;#39;t introduce spaghetti
code. They either specifically exit a bounding language construct or
jump to the next iteration. Actually, now that I think about it,
&lt;code&gt;exceptions&lt;/code&gt; can be used in a way that mucks with clear code in a much
more dangerous way than break and continue can.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an example with continue:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
as opposed to:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Which is better? It&amp;#39;s purely subjective. Nothing wrong with either.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll share a final example. This one lifted from an &lt;a href=&#34;https://cestlaz.github.io/post/globals-breaks-and-returns/&#34;&gt;older post&lt;/a&gt; on
&amp;#34;best practices.&amp;#34; If you&amp;#39;re writing an event handler, you could put
the exit event in the loop boolean but I find including it
as a case using a &lt;code&gt;break&lt;/code&gt; to be cleaner:&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
At the end of the day, &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;, like most langauge
constructs can be used for either good or evil. There have been times
when they&amp;#39;ve led me to cleaner code so I&amp;#39;ve used them. At other times,
using them would have been forced.&lt;/p&gt;
&lt;p&gt;
If we agree that &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; can be appropriate, the other
question is when to introduce them. One comment from the most recent
Facebook thread on this (name withheld since that&amp;#39;s a semi-private
forum) was that it shouldn&amp;#39;t be right off the bat but rather after
they&amp;#39;re comfortable with loops, conditionals and booleans so that they
can use the new constructs when they make sense and not willy-nilly. I
tend to agree with this.&lt;/p&gt;
&lt;p&gt;
Personally, I think it&amp;#39;s important to show our kids constructs like
&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; and it&amp;#39;s also important for us to talk about
good code and &lt;a href=&#34;https://cestlaz.github.io/posts/best-practices-cli/&#34;&gt;best practices&lt;/a&gt; but the important thing is that we don&amp;#39;t
have our kids blindly follow any practice but empower them to make good
decisions based on their situations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Globals Breaks And Returns, oh my</title>
      <link>https://cestlaz.github.io/post/globals-breaks-and-returns/</link>
      <pubDate>Sat, 06 Oct 2018 15:48:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/globals-breaks-and-returns/</guid>
      <description>
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Never use global variables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never break out of a loop&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are two &amp;#34;best practices&amp;#34; that are frequently touted in early CS
classes both at the high school and college level.&lt;/p&gt;
&lt;p&gt;
They came up a couple of times yesterday. Once in the Facebook APCS-A
teachers group and once on &lt;a href=&#34;http://blog.acthompson.net/2018/10/if-you-are-using-global-variables-you.html&#34;&gt;Alfred Thompson&lt;/a&gt;&amp;#39;s blog.&lt;/p&gt;
&lt;p&gt;
Alfred post was topically on global variables. Actually it was deeper than just global
variables. It&amp;#39;s also about how students progress - what they can figure
out at various stages of progress and how what seems like a good idea
early on the path to computer science doesn&amp;#39;t seem so great later on.&lt;/p&gt;
&lt;p&gt;
The discussion on the APCS-A group started with a discussion of this
code and its &lt;code&gt;break&lt;/code&gt; statement as opposed to having the loop&amp;#39;s exit
condition in the boolean up top:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color:#75715e&#34;&gt;// do stuff
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;condition&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
These two &amp;#34;best practices&amp;#34; - not using globals and not breaking out of
loops are frequently taught to students at a point when reasons for
the best practice aren&amp;#39;t always clear. &lt;/p&gt;
&lt;p&gt;
Actually, these aren&amp;#39;t even universally best practices.&lt;/p&gt;
&lt;p&gt;
Looking at the while loop, You might have event driven code with a
while loop acting as a dispatcher:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;// do stuff
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;some event&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; that event&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;some other event&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; that event&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

      &lt;span style=&#34;color:#75715e&#34;&gt;// etc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;exit event&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Nothing wrong with that structure. It&amp;#39;s clean, easy to read and easy
to reason about. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen loops that use extra variables and crazy boolean expressions
so as to avoid using a &lt;code&gt;break&lt;/code&gt; statement so that they follow the &amp;#34;best
practice&amp;#34; but end up with much messier code.&lt;/p&gt;
&lt;p&gt;
This is not to say that you should always use &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; for that matter but rather that the best practice should be to
consider if it makes the code cleaner, easier to read, and more
maintainable or not. &lt;/p&gt;
&lt;p&gt;
On the global front things are also not so clear. Sure, storing
information in globals  and then using them indiscriminantly in
assorted methods or functions is both bad form and dangerous but there
are times when using globals make sense. &lt;/p&gt;
&lt;p&gt;
Back in &amp;#34;the day&amp;#34; I was a C programmer. I used single C source files
along with their matching .h include files to enable &lt;strong&gt;object typed&lt;/strong&gt;
programming. Each file was a singleton object. Functions in the file
were methods using some naming convention to demarcate public vs
private, and variables that were global to the file as class variables
(or instance variables but there was only ever one instance of any
given class). Technically I broke the rules but the technique was very
effective and allowed me to write large maintainable systems. &lt;/p&gt;
&lt;p&gt;
More recently I&amp;#39;ve been playing with &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; for front end
development. Vue uses a central data store - Vuex to maintain
state. Basically a place for global variables to manage the state of
your application. Again, technically global but with rules and
protocols to make things work without the usual danger associated with
globals.&lt;/p&gt;
&lt;p&gt;
A great comment on the Facebook thread &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; included this Hal
Ableson quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#34;Programs must be written for people to read, and only incidentally for machines to execute.&amp;#34; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
and noted that this is particularly true on the AP Exam and after all,
the original question was posed on a forum about APCS-A. With this in
mind, you shouldn&amp;#39;t &lt;strong&gt;try&lt;/strong&gt; to use globals or cleverly or creatively 
use &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; but they do have their places.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve used globals in both professional and personal work when
appropriate and I don&amp;#39;t shy away from &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; and use
them regularly. The real &lt;strong&gt;best practice&lt;/strong&gt; is that you consider why you
are or aren&amp;#39;t using these constructs and make a choice that makes
sense for you, your group, or your team. &lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Footnotes
&lt;/h2&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr class=&#34;footnotes-separatator&#34;&gt;
&lt;div class=&#34;footnote-definitions&#34;&gt;
&lt;div class=&#34;footnote-definition&#34;&gt;
&lt;sup id=&#34;footnote-1&#34;&gt;&lt;a href=&#34;#footnote-reference-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;div class=&#34;footnote-body&#34;&gt;
&lt;p&gt;While I will identify sources when they publish content publicly on ablog or Twitter, since
the Facebook group is semi-private, I don&amp;#39;t feel it&amp;#39;s appropriate to
state the names of commenters without asking]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>