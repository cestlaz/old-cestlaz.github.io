<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/post/</link>
    <description>C&#39;est la Z (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Feb 2023 14:50:07 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/post/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Copilot and similar types of AI in learning CS</title>
      <link>https://cestlaz.github.io/post/ai-in-learning-cs/</link>
      <pubDate>Tue, 28 Feb 2023 14:50:07 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/ai-in-learning-cs/</guid>
      <description>&lt;p&gt;
So it seems like Copilot and similar will be beneficial to programmers
but the question remains as to how beneficial. Will it be incremental
change or will it be a game changer?&lt;/p&gt;
&lt;p&gt;
Today we&amp;#39;ll look at how it will affect teaching and learning CS.&lt;/p&gt;
&lt;p&gt;
It seems pretty clear that one group of learners will benefit from
things like copilot - people who are already strong programmers who
are learning something new. Like autocomplete on steroids it will free
those programmers of having to look everything up all the time. I
guess a second group that will benefit will be autodidacts but they&amp;#39;ll
thrive no matter what and when we&amp;#39;re talking about opportunity and
equity we&amp;#39;ve got to focus on everyone else.&lt;/p&gt;
&lt;p&gt;
For everyone else, particularly those learning in classes using
copilot will have certain benefits but the real question isn&amp;#39;t &amp;#34;is
there an advantage&amp;#34; but rather a costs benefits analysis.&lt;/p&gt;
&lt;p&gt;
Since copilot can be thought of as autocomplete on steroids we can
compare the discord that goes on when discussing IDEs with
autocomplete. &lt;/p&gt;
&lt;p&gt;
Some teachers think autocomplete is great and don&amp;#39;t see any downside
to students using editors that support it. Others feel that it&amp;#39;s
important for students to type everything out.&lt;/p&gt;
&lt;p&gt;
On the one hand, you can have autocomplete for things like
&lt;strong&gt;system.out.writeln&lt;/strong&gt; - type &lt;strong&gt;writeln&lt;/strong&gt; and hit tab and you&amp;#39;re done. One
could argue that if you&amp;#39;re ever in an environment without autocomplete
you&amp;#39;d be screwed but if you think about it, there&amp;#39;s no deeper
understanding if you type &lt;strong&gt;system.out.writeln&lt;/strong&gt; vs &lt;strong&gt;writeln&lt;/strong&gt;
particularly for beginners where the system.out is boilerplate.&lt;/p&gt;
&lt;p&gt;
On the other hand typing &lt;strong&gt;for&lt;/strong&gt; and having that complete to a for loop
is different than actually typing out the complete loop. One could
argue that typing for and then tab is just a higher level of
abstraction but I&amp;#39;d argue that it&amp;#39;s important to understand what&amp;#39;s
going on with the loop first. This is where I&amp;#39;m not sure if the
autocompletion is the right way to go.&lt;/p&gt;
&lt;p&gt;
Ideally, I&amp;#39;d love to see students &amp;#34;level up&amp;#34; - after typing out for
loops for a bit they can unlock the for loop autocomplete feature -
hey - now that&amp;#39;s an idea for a student ide!!!&lt;/p&gt;
&lt;p&gt;
I know that some people also feel that hand writing things is an aide
to learning. If that&amp;#39;s so, is typing as well? Is writing a for loop by
hand then then typing better? Is typing it all out better than just
drag and dropping a block? I don&amp;#39;t know the answer to any of these but
I think they&amp;#39;re interesting questions.&lt;/p&gt;
&lt;p&gt;
The question, or at least one of the questions about using copilot in
teaching and learning is the same but copilot takes it to the next
level. Instead of typing &lt;strong&gt;for&lt;/strong&gt; tab and getting a for loop you can type
&lt;strong&gt;// sum the values of an integer array ar&lt;/strong&gt; - you can use it to
complete programming &lt;a href=&#34;https://cestlaz.github.io/posts/programming-idioms/&#34;&gt;idioms&lt;/a&gt; or even complete functions.&lt;/p&gt;
&lt;p&gt;
Bigger time concepts but the same basic ideas.&lt;/p&gt;
&lt;p&gt;
There is another question that I think is going to get lost in the
shuffle though. Even if we decide that using copilot like technologies
is an absolute win, will there be unintended consequences. Will other
things be lost.&lt;/p&gt;
&lt;p&gt;
This has happen time and again.&lt;/p&gt;
&lt;p&gt;
In CS, when APCS-A/B went from C++ to Java we lost memory
management. This was good in certain ways but memory management is an
important concept for computer science students to understand. Take it
out of CS1 and CS2 and you have to put it back somewhere else. From
what the people doing the hiring in tech in the years following 5
years after the switch, it wasn&amp;#39;t always put back or put back
effectively. This isn&amp;#39;t a surprise since every college does things
their own way and if a student places out of one or more courses with
AP credit, well, they might miss something critical or be less well
prepared for it when it does appear.&lt;/p&gt;
&lt;p&gt;
The other big example I always use is from math. Calculators. No, I&amp;#39;m
not going to say that having students work out hard arithmetic by hand
was a good and important thing. I&amp;#39;m talking about interpolation.&lt;/p&gt;
&lt;p&gt;
Prior to calculators, when our students learned about logs or trig
functions they had log and trig tables. The tables only had so many
entries so students had to find values between the entries and they
invariable did have to, they learned and used linear interpolation.&lt;/p&gt;
&lt;p&gt;
If you think about it, that might have been the most useful real life
math skill taught in high school math at the time. Certainly it was up
there.&lt;/p&gt;
&lt;p&gt;
Hello calculators, goodbye trig and log tables. Goodbye learning
interpolation. That&amp;#39;s a skill that&amp;#39;s been lost to students for now
almost a quarter of a century. Sure, students can and have been
functioning with knowing interpolation but when you look at the math
that has and hasn&amp;#39;t been taught I&amp;#39;m fairly confident in saying that
when we stopped teaching interpolation something was lost.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s my fear of copilot type technologies.&lt;/p&gt;
&lt;p&gt;
When we teach mergesort we&amp;#39;re not just teaching mergesort. We&amp;#39;re
teaching the concept of divide and conquer algorithms. We&amp;#39;re
discussing run time. We&amp;#39;re looking at sorting in place or not. We also
have a platform to discuss solving problems that make use of different
but similar algorithms.&lt;/p&gt;
&lt;p&gt;
When we solve a dynamic programming problem we&amp;#39;re not solving a
specific problem but we&amp;#39;re teaching a general method of problem
solving.&lt;/p&gt;
&lt;p&gt;
At a smaller scale level, when beginners program they make errors. Now
error messages aren&amp;#39;t particularly helpful but learning how to read
them and fix ones errors is yet another manner of problem solving
we&amp;#39;re teaching. Some may argue that error messages will get better in
the future. Well, I&amp;#39;ve been programming for decades and while they&amp;#39;re
a little better than from way back, they&amp;#39;ve got a way to go. Besides
the problem sometimes isnot so much that the error is bad but that
students don&amp;#39;t take the time to read through the (admittedly overly
complex) wall of text. Solving unexpected errors, reading
documentation, searching for solutions. These are all things we&amp;#39;re
teaching beyond just the coding. &lt;/p&gt;
&lt;p&gt;
Copilot might make for faster coding but how much of our ability to
teach that more important problem solving will be lost?&lt;/p&gt;
&lt;p&gt;
Of course the answer might be none or it might be that the benefits
might outweigh the costs but educators should pay close attention not
to the superficial but very cool way that copilot replaces a short
prompt with a long coded solution but rather to what we&amp;#39;re really
trying to teach our kids beyond grunt coding and how will copilot
affect that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AI as a programmers aide</title>
      <link>https://cestlaz.github.io/post/ai-in-programming/</link>
      <pubDate>Tue, 28 Feb 2023 11:33:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/ai-in-programming/</guid>
      <description>&lt;p&gt;
ChatGPT in education has been all the rage but there&amp;#39;s another twist
on AI that was getting some buzz even earlier - AI based code
completions. GitHub&amp;#39;s Copilot has gotten the most air time but there
are others out there as well.&lt;/p&gt;
&lt;p&gt;
When you code with Copilot, you type in a function name and maybe a
comment above it and the AI system will fill in the function.&lt;/p&gt;
&lt;p&gt;
A canonical example seems to be Mergesort. Type in mergesort, hit the
magic key, and the function appears.&lt;/p&gt;
&lt;p&gt;
I was asked by a friend how this might affect teaching programming and
I&amp;#39;ve been thinking about it for a while.&lt;/p&gt;
&lt;p&gt;
I was going to share my thoughts today but realized that first, we
have to talk about products like Copilot as a programmers aid and then
we can talk about it as a learning tool. Today, we&amp;#39;ll cover the former
and next post the latter.&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m not a professional programmer - at least I haven&amp;#39;t been one since
before I started teaching. I&amp;#39;ve done personal projects, some one off
contracts and a few applications for work but I haven&amp;#39;t written one of
those since I wrote a resume/interview managing system when Hunter won
the CUNY2X grant.&lt;/p&gt;
&lt;p&gt;
Even so, I think I&amp;#39;ve got a few thoughts worth sharing.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s first consider what these tools can do right now.&lt;/p&gt;
&lt;p&gt;
I started by playing with the mergesort exampe. I asked for it and the
AI&amp;#39;s obliged. This could be seen as a time saver but is it? It turned
out every time I tried I got a good basic mergesort but the merge part
was always another function call - still had to write or generate
that so it&amp;#39;s not just specify and move on. It&amp;#39;s specify, verify, and
then either tweak or move on. It also wasn&amp;#39;t optimized in any way. You
can decide for yourself if that&amp;#39;s good or bad. &lt;/p&gt;
&lt;p&gt;
A pro can tell me if using Copilot in this sense is a
time saver but I&amp;#39;m not so sure. Even if it is, wouldn&amp;#39;t most
programmers just use the built in sort function? It seems like in this
sense, tools like Copilot are like using a library but with inline
expansion and without verification. A mixed bag at best.&lt;/p&gt;
&lt;p&gt;
Even if the AI always got it right and was clear I wonder how much
time would really be saved. Most of my time programming is spent
thinking and editing and Copilot is about the generating. I don&amp;#39;t
doubt that it can be useful but in it&amp;#39;s current state, maybe not so
much.&lt;/p&gt;
&lt;p&gt;
The big benefit using it this way is if you ask it to write something
that you don&amp;#39;t know how to write but is that really a good idea given
that the code still has to be verified?&lt;/p&gt;
&lt;p&gt;
The other sense I&amp;#39;ve seen these tools used in is more like how Gmail
autocompletes sentences in your email. Again, very cool but I&amp;#39;m not
sure how useful. For the Gmail stuff, I always see the completions but
almost always just continue typing. I guess it&amp;#39;s similar to how a fast
typist frequently won&amp;#39;t fix errors, they&amp;#39;ll retype them. For example,
if you accidentally type Froderick instead of Frederick, a fast typist
probably wouldn&amp;#39;t fix the o. They&amp;#39;d probably delete the word backwards
and retype it. More keystrokes but they stay in the flow. &lt;/p&gt;
&lt;p&gt;
So, right now these tools seem cool but maybe not all that useful. I
could see benefit today by having them generate language idioms like
&amp;#34;sum a list&amp;#34; - things that templates and current autocomplete can&amp;#39;t
quite do but can be verified on the fly in no time but that&amp;#39;s about it.&lt;/p&gt;
&lt;p&gt;
In the future, however things could change.&lt;/p&gt;
&lt;p&gt;
The idea that at some point one could generate code from a description
is pretty appealing. Of course, that brings a challenge that many
beginner programmers have to deal with - specification. I tell my
students all the time &amp;#34;Computers are lousy at doing what you want them
to do but great at doing what you tell them to do.&amp;#34; Writing a program
for these not-yet-existing AIs will be all about writing
specifications and the specification will turn into our program. This
really isn&amp;#39;t too different than what goes on today. A for loop is a
higher level specification for some gotos and conditionals. A foreach,
a higher level specification of a for and when you add in Lisp like
higher level functions like map and filter that&amp;#39;s higher level
still. An AI like a future generation of Copilot can be just that.&lt;/p&gt;
&lt;p&gt;
My verdict? Are they cool? Yes. An aid to productivity? I&amp;#39;m not
sure. Will they get there? Probably but I don&amp;#39;t know when.&lt;/p&gt;
&lt;p&gt;
Next time, we&amp;#39;ll talk about how these tools can change the landscape
of teaching and learning programming.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Motivating Students in CS Class</title>
      <link>https://cestlaz.github.io/post/motivating-students/</link>
      <pubDate>Fri, 17 Feb 2023 10:00:05 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/motivating-students/</guid>
      <description>&lt;p&gt;
A teacher in one of my networks posted a question earlier today -
&amp;#34;have you had any challenges or trouble with motivating kids in your
classes?&amp;#34;&lt;/p&gt;
&lt;p&gt;
Not a new question and  I&amp;#39;m sure for any teacher with any level of
experience the answer is a resounding &lt;strong&gt;yes&lt;/strong&gt;. I don&amp;#39;t care who you
are. Not all of your students are motivated all the time.&lt;/p&gt;
&lt;p&gt;
This can particularly be a problem when a teacher switches over from
teaching an elective or selective to a required class but it might not
be. I had to deal with this when I was able to get Stuy to require the
intro course I designed. It was an adjustment but not really too big a
deal. If anything, more students ended up getting turned on to CS than
turned off and since even as an elective, there were always some
unmotivated students. The adjustment was overcoming the reticence of
students being &amp;#34;forced&amp;#34; to be there as opposed to students who might
have taken an elective for the wrong reasons.&lt;/p&gt;
&lt;p&gt;
Anyway, back to the problem.&lt;/p&gt;
&lt;p&gt;
CS can be many things but in K12 it frequently involves programming
and since that was what the initial question was referring to, we&amp;#39;ll
stick to that.&lt;/p&gt;
&lt;p&gt;
Some students will be motivated by programming in and of
itself. They might see it as a creative art. That&amp;#39;s great but they&amp;#39;re
the easy ones.&lt;/p&gt;
&lt;p&gt;
Beyond that, programming is usually used for one of two
things. Solving problems and/or building things. You could also add
for telling stories or communicating ideas but you might put those
under building things.&lt;/p&gt;
&lt;p&gt;
Looking at programming through those lenses can also motivate more
students.&lt;/p&gt;
&lt;p&gt;
From there, we get to the fine tuning.&lt;/p&gt;
&lt;p&gt;
What will scratch a student&amp;#39;s itch. They might not care for coding but
they might have some problem they want to solve of thing they want to
build. When I was very young and just teaching myself to program I was
of an age when a favored pastime was making fun of your friend&amp;#39;s
mother. So, what did my clique do? We wrote &amp;#34;The Mother Game&amp;#34; - a
stupid little program to insult each others moms. True, we were
already motivated since we were teaching ourselves but we went much
farther doing that silly game than if we were solving some textbook
problem.&lt;/p&gt;
&lt;p&gt;
Sometimes collaboration can help. Of friends and I who wroet &amp;#34;The
Mother Game,&amp;#34; two of us were techies but one wasn&amp;#39;t but the third got
caught up in the group activity.&lt;/p&gt;
&lt;p&gt;
Of course we still have to remember that one size will not fit
all. Something that motivates student A might not motivate student B
and what motivates the teacher will almost certainly not motivate
everyone in class (I&amp;#39;m looking at you, gamification people). Sure,
games are fun for some but not everyone. Same with sports, current
events, fashion and any other topic. As a teacher you can mix it up
and give individual choice when possible and all of that can help.&lt;/p&gt;
&lt;p&gt;
One thing to remember though is that even when we&amp;#39;re having trouble
motivating all of our students we still have it much easier in that
regard than many other subject teachers. A language teacher is
limited by their class level&amp;#39;s vocabulary. In math, you can solve
problems but only with the math they&amp;#39;ve learned so far which we know
rarely translates to natural motivation. I love history but many
students don&amp;#39;t and history classes are frequently very strictly
constrained so teachers might not have the freedom they want to
motivate as many students as they could otherwise.&lt;/p&gt;
&lt;p&gt;
And of course, public school teachers with large classes will have a
&lt;strong&gt;much&lt;/strong&gt; harder time than private school teachers who only meet with a
handful at a time.&lt;/p&gt;
&lt;p&gt;
Before closing, I should also mention that some teachers will have an
easier time than others due to their own personalities. Some teachers
are charismatic or otherwise succeed by &amp;#34;force of personality.&amp;#34; It
seems that students more want to please some teachers than others and
that is also a form of motivation. I&amp;#39;m not saying it&amp;#39;s a great long
term one but I do want to acknowledge it.&lt;/p&gt;
&lt;p&gt;
So, to close I also want to remind teachers that no matter what you do
you are &lt;strong&gt;not&lt;/strong&gt; going to motivate all students and &lt;strong&gt;not&lt;/strong&gt; all the
time. You might read facebook posts by miracle teachers who only share
successes or &amp;#34;thought leaders&amp;#34; who talk the talk but don&amp;#39;t walk the
walk but the truth is nobody bats 1000. In baseball, you can fail at
the plate two third of the time and you&amp;#39;re a hall of famer. Good
teachers will do better than that but as I said, nobody bats 1000. Win
as much as you can but don&amp;#39;t beat yourself up because you can&amp;#39;t reach
everyone all the time. Strive to do better throughout your career and
when the dust settles you&amp;#39;ll see that your successes far outweigh the
times when you weren&amp;#39;t as happy with your results.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A poor craftsman blames his tools</title>
      <link>https://cestlaz.github.io/post/ides-tools/</link>
      <pubDate>Mon, 13 Feb 2023 06:48:49 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/ides-tools/</guid>
      <description>&lt;p&gt;
Yesterday, Alfred Thompson posted on students &lt;a href=&#34;https://blog.acthompson.net/2023/02/cs-studentslearn-your-ide.html&#34;&gt;knowing their
development environments&lt;/a&gt;. Alfred&amp;#39;s post was inspired by a related post
by &lt;a href=&#34;https://www.cs.uni.edu/~wallingf/blog/archives/monthly/2023-02.html&#34;&gt;Eugene Wallingford&lt;/a&gt;. Eugene&amp;#39;s post was about more than development
environments and both his and Alfred&amp;#39;s posts are worth a read.&lt;/p&gt;
&lt;p&gt;
Being a tool wonk I thought I&amp;#39;d add my two cents.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve always been a tool wonk. Use the right tool for the job and if
you need to buy one, don&amp;#39;t cheap out - get the best value right
tool. This got me in trouble with Devorah when I spent $309 around
thirty years ago at Bridge Kitchenware for a K5SS - 5 quart Kitchenaid
mixer when we were first living together. Back then $309 was a
lot of money for us and to spend on a mixer…. Over the years, after
countless loaves of bread, cakes and more, the mixer has proven its
worth.&lt;/p&gt;
&lt;p&gt;
Likewise my Cuisinart. Nothing fancy, just a motor in a box. Both are
older than our two children. I also love my F Dick 9 inch chefs
knife although that was a bit of a luxury purchase. I also, equally
love my much less expensive Victorinox boning knife.&lt;/p&gt;
&lt;p&gt;
Of course, the right tool for me - the home cook, is not necessarily
the right tool for the professional. A restaurant kitchen or butcher
shop is much more likely to have inexpensive Dexter Russel knives
rather than pricey Wusthof ones and they&amp;#39;ll use a regular
sharpening/exchange service. Makes sense - in a restaurant the knives
will be used more frequently by more people who on the one hand, know
how to use the tools better, but on the other might take less
individual care of them.&lt;/p&gt;
&lt;p&gt;
Everything that is true about home vs professional tooling can also
inform our CS classroom tooling but it&amp;#39;s not quite as simple.&lt;/p&gt;
&lt;p&gt;
True, students should know their tools and know them well but this
should be tempered by what a teacher is trying to do with the class at
any given time. When encouraging students to really learn a
development environment you have to balance the short term benefit,
the long term benefit, and the cost. that cost is usually up front
time. This is also true for professional developers.&lt;/p&gt;
&lt;p&gt;
I remember talking to a friend who got a little logic puzzle from a
street fair. It involved rearranging colored lines of blocks. He wanted
to write a program to solve it. So, he started to set up and tweak his
programming environment. He ended up spending so long setting things
up just right that in the meantime, his wife and kids all individually
solved the puzzle by hand.&lt;/p&gt;
&lt;p&gt;
One can argue that for future related development, my friend ended up
ahead but since there wouldn&amp;#39;t likely be related development the time
was lost and it would have been much faster just to solve the problem
at hand. &lt;/p&gt;
&lt;p&gt;
The other rub is that professional tools can sometimes be too complex
or can do too much for students. I love autocomplete when using
obscure libraries but I don&amp;#39;t think it helps students when they&amp;#39;re
first learning basic language constructs. Same for large provided
template code.&lt;/p&gt;
&lt;p&gt;
The thing with IDEs is that you have to find the right one that
supports the way you teach.&lt;/p&gt;
&lt;p&gt;
I know teachers that want to do everything on the command line. They
want the students to walk through the process from source code -&amp;gt;
class file -&amp;gt; running on the jvm and the command line gives them that
option. They also might want to teach command line tools. The command
line also, is in some ways the simplest approach. One place to input
commands, one place to see results.&lt;/p&gt;
&lt;p&gt;
On the other hand, it can be intimidating and it doesn&amp;#39;t benefit from
all the supports an IDE can give. Personally, I have mixed feelings on this
approach. Sometimes it&amp;#39;s been the right choice for my students, other
times, not so much. &lt;/p&gt;
&lt;p&gt;
I know other teachers who love BlueJ - a graphical IDE that focuses
on objects. It really seems to shine in helping to clarify OOP but it
never worked for me. Probably because I&amp;#39;m not a huge OOP fan. That
said, for some teachers it&amp;#39;s the sweet spot IDE.&lt;/p&gt;
&lt;p&gt;
Others dump their students into professional IDES like Eclipse or
nowadays VSCode. I feel these give too much and have too much
complexity. Others disagree and that&amp;#39;s fine. What&amp;#39;s right for me and my
students might not be right for another teacher and class.&lt;/p&gt;
&lt;p&gt;
For me the sweet spot IDE for new learners are things like DrJava,
DrRacket, or Thonny. Very simple lerning IDEs. They&amp;#39;re not made for
professionals so they don&amp;#39;t integrate with complex build systems. they
give students some structure and support but not too much.&lt;/p&gt;
&lt;p&gt;
Most recently, I&amp;#39;ve started students on Thonny for Python then
transitioned them to other tools. I encourage them to do a deep dive
between semesters or over the summer and discover what really works
for them. Through my classes, though, I try to demonstrate how knowing
your tools benefits you as a developer or even just a user. If I can
show how I leverage the Unix shell, I do, if there&amp;#39;s something in
Emacs that makes me more productive, I&amp;#39;ll show it. I&amp;#39;ll also mention
that in most cases, whatever tools they&amp;#39;re using will have an
equivalent and they should explore it.&lt;/p&gt;
&lt;p&gt;
While it&amp;#39;s true that a poor craftsman blames his tools, a good
craftsman knows their tools and leverages them to great effect. While
we&amp;#39;re teaching CS, programming, and languages, it&amp;#39;s worth discussing
tooling as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Organizing a topics course</title>
      <link>https://cestlaz.github.io/post/organizing-topics/</link>
      <pubDate>Tue, 07 Feb 2023 12:18:10 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/organizing-topics/</guid>
      <description>&lt;p&gt;
I&amp;#39;m team teaching the CS Topics course this semester with my buddy
JonAlf. It&amp;#39;s the final course in our Advanced Certificate and Masters
programs in CS Education.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a fun course. The theory is that a K12 CS teacher doesn&amp;#39;t need to
know everything but should know a little about a lot. It&amp;#39;s a survey -
think of it as an intro unit in ten to twelve different topics in CS.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s also something of a catchall. After this cohort, students
completing our program and in fact any NY state CS teacher
certification program will have to sit for and pass a new Content
Specialty Exam (CST) and while the exam hasn&amp;#39;t been released, best bet
is that it will cover draw from the NY State CS and digital fluency
standards. Between all our other courses we cover most of the
standards and &lt;strong&gt;far&lt;/strong&gt; more in many areas but there are a few topics that
just don&amp;#39;t fit. Also, some items from the standards are already covered in
courses like our Ethics course, but we can look at them from a
more technical point of view in topics.&lt;/p&gt;
&lt;p&gt;
The way I set up the course last year was that I taught the first
couple of topics - covering networks and networking and also
pragmatically generating web sites/applications with Flask. After
that, the students teach the topics and I support them in the
background. I cover the first topics to give them all the time and
support necessary to develop their lessons and I cover networking there
because there are a number of nit picky standards items I want to make
sure are covered.&lt;/p&gt;
&lt;p&gt;
When setting up and supporting the student groups the important thing
is to make sure that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The topics collectively cover everything I feel is important to be
covered.&lt;/li&gt;
&lt;li&gt;They deliver their topic at the right level as this is a CS class
not an education class. It&amp;#39;s got to be rigorous enough from the CS
point of view but at the same time accessible.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
With our first cohort, the class was integrated into the summer
program but last year was also a standalone during the Spring. It
worked pretty well but JonAlf and I decided to change a few things
this year. Part of this was in the hope that things run more smoothly
and the students learn and retain more and partly because I&amp;#39;m handing
off the program when I leave Hunter after the Spring and I want to try
these changes so we can give some specific recommendations for the
next program leader.&lt;/p&gt;
&lt;p&gt;
Overall the plan is the same but the big change is how we&amp;#39;re going to
overlap the topcis. Last year each week was self contained, this year,
we&amp;#39;re overlapping things.&lt;/p&gt;
&lt;p&gt;
On any given week there will be a synchronous class delivered by a
student team. The week prior, that team will give an async
assignment - watch some videos, read some tutorials, work through some
exercises, whatever, that will lead in to the synchronous class. At the
end of the class, the group will give a homework assignment for the
next week. Also at the end of the class, the next group will assign
its prework async assignment.&lt;/p&gt;
&lt;p&gt;
This means that between the synchronous sessions, each week the
students are working on two things. The prior week topic&amp;#39;s homework
and the forthcoming week topics prework. This should effectively
stretch each topic out to two weeks rather than a more intense one
week at a time. We&amp;#39;re hoping this leads to better weekly discussion
and better retention.&lt;/p&gt;
&lt;p&gt;
The other change we&amp;#39;re making is that the student teams have to grade
the homework they assign and also fill out a comment form about their
teammates.&lt;/p&gt;
&lt;p&gt;
The peer evaluation form is needed because groups are much larger this
time around. Having the groups grade the homeworks should serve two
purposes. First, some teams missed the mark last time around. Many
assignments were great but a few were either too onerous  and a few
too trivial. The other reason is selfish - some of last years
assignments were a bear to grade and with 55 students, I don&amp;#39;t need
that. Of course, after they grade the homeworks, JonAlf and I also
have to go over them.&lt;/p&gt;
&lt;p&gt;
These aren&amp;#39;t radical changes but I&amp;#39;m hoping they make for a smoother
class from a teachers point of view and a better experience from the
students point of view. If so, it&amp;#39;ll be all packaged for my
replacement. If not, well, things still worked pretty well last year
and shouldn&amp;#39;t be worse so that&amp;#39;s fine too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The College Board wasn&#39;t cowardly</title>
      <link>https://cestlaz.github.io/post/college-board-ap-aastudies/</link>
      <pubDate>Fri, 03 Feb 2023 08:52:49 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/college-board-ap-aastudies/</guid>
      <description>&lt;p&gt;
As I&amp;#39;m sure you&amp;#39;re aware, recently, in his latest racist, fascist
proclamation, Ron DeSantis threatened to stop offering AP African
American Studies (APAAS) in Florida because, well, we can&amp;#39;t actually teach our
children anything resembling our actual rather checkered history.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m sure you&amp;#39;re also aware that the College Board just announced
changes to APAAS which basically removed everything DeSantis found
objectionable.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been seeing articles, blog posts, Tweets and more all calling the
College Boards act a cowardly one. I disagree.&lt;/p&gt;
&lt;p&gt;
To be cowardly, the College Board would have had to have wanted to do
the right thing - stick to their current course but ultimately cave
under pressure. I don&amp;#39;t think the college board cared enough. If you
really look at the college board and its history. It&amp;#39;s not about
education and student opportunity. It&amp;#39;s always been about money and brand.&lt;/p&gt;
&lt;p&gt;
If I remember correctly, the Florida government pays for AP exams (at
least it used to). This is a tremendous cash cow for the CB. For
them, the calculus isn&amp;#39;t &amp;#34;what should students study in APAAS.&amp;#34; The
calculus is &amp;#34;how much money do we stand to lose.&amp;#34; To them, this way
they get to keep Florida and other red state money and they&amp;#39;re
figuring that even the schools and districts who are claiming outrage
will still offer APAAS and other AP exams. The schools will vent but
ultimately say that they can teach a superset of the AP class.&lt;/p&gt;
&lt;p&gt;
The College Board wins. DeSantis and the far right nuts win and only
the students lose.&lt;/p&gt;
&lt;p&gt;
I have no doubt that some (many?) will disagree with my stance. Mostly
people who have bought in to the college board for years, and in some
cases worked for or with them.&lt;/p&gt;
&lt;p&gt;
One can try to rationalize and say that the capitulation was so soon
after DeSantis&amp;#39; proclamation that they had to have these changes in
the works already. True but does anyone really believe that DeSantis&amp;#39;
public statement was the first time the CB got wind that this was
going to be a PR issue they&amp;#39;d have to deal with?&lt;/p&gt;
&lt;p&gt;
At the end of the day, the College Board offers two things - high
stakes exams and branding. That&amp;#39;s it. The more tests they sell and the
better perceived their brand, the better it is for the college
board. It&amp;#39;s no about education. If it were, then it wouldn&amp;#39;t be all
about a single test per subject. If it were, they wouldn&amp;#39;t have create
the PSAT 8 9. If it were, we wouldn&amp;#39;t see the pivot from being about
college level courses to APCS-P.&lt;/p&gt;
&lt;p&gt;
Now, people will say that APCS-P was all about increasing exposure,
diversity, and equity but you can&amp;#39;t deny that creating an easy AP and
keeping the same branding as college level classes all with a tech
boom going on was going to sell a lot of exams. Particularly when
schools, not students paid and more exams given means higher ratings
for schools.&lt;/p&gt;
&lt;p&gt;
Besides, a broken clock is still right twice a day. CB can be all
about CB and not about students but still from time to time do right
by them.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m also reminded of a report I saw decades ago where the then leader
of the CB claimed that the only thing the SAT was a predictor of was
how you would do on future SAT exams. Somewhere down the line, that
changed to it was a college predictor. That&amp;#39;s now being put to the
test as more colleges are dropping the exam.&lt;/p&gt;
&lt;p&gt;
Truth be told, while having SAT scores on an applicants packet has
been useful as for baseline comparisons. Now that I&amp;#39;m on my second SAT
free cohort I can say that the SAT really isn&amp;#39;t important.&lt;/p&gt;
&lt;p&gt;
While some of us have pushed back, the CS Ed community has been far
too accepting of the College Board as they&amp;#39;ve become more and more
influential in the K12 Ed Space. &lt;/p&gt;
&lt;p&gt;
In any event, we should remember that the CB is a business and the
business is in selling exams. They&amp;#39;re not teachers. They might hire
teachers but they&amp;#39;re test makers and have their own agenda.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s no reason to believe they care about justice or equity over
selling exams. They didn&amp;#39;t act cowardly. They acted in their own self
interest. As teachers, we work in our students best interests.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a difference and we have to remember that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tech Layoffs and Workers Rights</title>
      <link>https://cestlaz.github.io/post/tech-layoffs/</link>
      <pubDate>Mon, 30 Jan 2023 10:59:20 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/tech-layoffs/</guid>
      <description>&lt;p&gt;
Lots of layoffs in big tech recently. Overall lousy but I am
encouraged by the number of people trying to organize the local
community to be supportive in helping those affected.&lt;/p&gt;
&lt;p&gt;
Clearly this &amp;#34;correction&amp;#34; can turn current employees worlds upside
down and place individuals and families in precarious financial
situations but the effects also affect the incoming workforce. In
addition to layoffs, internships and offers have been canceled left
and right.&lt;/p&gt;
&lt;p&gt;
Things are bad but are they bad enough to convince not only those
directly affected but also those who could be to make things better? I
hope so but I&amp;#39;m skeptical.&lt;/p&gt;
&lt;p&gt;
I say those affected rather than the tech industry because I&amp;#39;ve been
thinking a lot about the state of labor recently and changes, just like
during the heyday of the labor movement, changes will only
come when demanded by the masses. &lt;/p&gt;
&lt;p&gt;
I get it that when a market contracts, an economy turns down or there
are unforeseen shifts like a global pandemic, money doesn&amp;#39;t flow and
people lose jobs. I get it but that&amp;#39;s not really what I&amp;#39;m seeing.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m seeing left and right that &amp;#34;profits are down.&amp;#34; Read that
carefully. &amp;#34;Profits are Down,&amp;#34; not losses are up. When you say profits
are down, you&amp;#39;re not saying you&amp;#39;re losing money. You&amp;#39;re saying you&amp;#39;re
making money, just not as much. It&amp;#39;s like the Wall Street mindset that
turned me off so many years ago. If you buy a stock, it goes
up, yo sell, you make money. If it then goes up more, the Wall Street
mind thinks you&amp;#39;ve lost money. That&amp;#39;s not healthy.&lt;/p&gt;
&lt;p&gt;
If companies were just trimming the fat, that would be one thing but
that wouldn&amp;#39;t result in mass layoffs - that would happen over time
when a hire was found to be a bad fit. Sure. Some non-productive
employees are being let go but so are many really good people. If
a company is letting go of good people then that&amp;#39;s bad planning on the
companies part.&lt;/p&gt;
&lt;p&gt;
The truth is that even though tech employees are relatively well
paid, they&amp;#39;re still cogs in the machine and ultimately, at will
employees. Maybe people will start to realize with all the perks
more often than not, they&amp;#39;re still just there to make money for the
corporation. At the end of the day, the company doesn&amp;#39;t care about
them. Even when we see the top execs taking cuts, we don&amp;#39;t see it
affecting their lifestyles. It&amp;#39;s a token gesture to ameliorate the
masses - make them feel like the top of the ladder is feeling the
pain. They&amp;#39;re not. They&amp;#39;ll say &amp;#34;I take responsibility&amp;#34; and then go on
in their bubble.&lt;/p&gt;
&lt;p&gt;
Combine the recent corporate welfare (turned frequently into stock
buybacks), the layoffs, price gauging and still profits across
industries and maybe, just maybe, people will start to realize that
we&amp;#39;ve got to get back strengthening the worker. That the hard fought
gains of our parents and grandparents have been given back to the
rich. This goes back as far as I can remember with Reagan firing the
Air Traffic controllers even though their demands were not only
reasonable but in fact just about all are now in affect to Republican
led &amp;#34;Right to work&amp;#34; laws. Of course the Democrats only put up token
resistance if any at all.&lt;/p&gt;
&lt;p&gt;
If tech workers, and workers in general, had reasonable rights and
protections. The kinds that, dare I say it, a modern form of union
could provide then when times got bad, the pain would be shared
equally between ownership and worker. Workers wouldn&amp;#39;t be thrown on to
the street willy nilly but there would be a framework to provide a
safety net. &lt;/p&gt;
&lt;p&gt;
Will the tech workers community act in any way not only to protect
themselves in the future but other workers in general? We&amp;#39;ll see. As I
said, I&amp;#39;m skeptical but there are some trying. I won&amp;#39;t mention names
but a handful of my former students have been active and vocal in
fighting for workers rights and equity in tech, sometimes at great
personal cost, and I couldn&amp;#39;t be prouder of them. I hope they prevail.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Day Final Semester</title>
      <link>https://cestlaz.github.io/post/first-day-last-semester/</link>
      <pubDate>Fri, 27 Jan 2023 09:49:07 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/first-day-last-semester/</guid>
      <description>&lt;p&gt;
So, yesterday was the first day of the semester. Since I&amp;#39;m retiring,
it&amp;#39;s my last first day at Hunter.&lt;/p&gt;
&lt;p&gt;
Felt pretty good. I think knowing that I&amp;#39;ll get a break after the term
has alleviated some of the burnout for now.&lt;/p&gt;
&lt;p&gt;
What will I be focusing on in class this last time around?&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m teaching three classes.&lt;/p&gt;
&lt;p&gt;
First up is my undergraduate data structures. To be honest, I&amp;#39;m not
looking at anything special there - just business as usual. I enjoyed
working with this group last semester in their CS1 class so this is
just a continuation. I&amp;#39;ll try to bring the usual extras I bring to DS
classes - interesting applications of the data structures and
algorithms and work on prepping for the technical interview but I
don&amp;#39;t think I&amp;#39;ll be paying attention to anything different than any
other semester.&lt;/p&gt;
&lt;p&gt;
My CS1 recitation though, is going to take more thought. Of the three
undergraduate classes I cycle through, CS0 in Python, this CS1
lab/recitation, and Data Structures, this class is the one where I
have and exercise the most freedom. I do a good deal of work with the
class on practical programming and software engineering as well as
looking at some more advanced topics than the regular
sections. Passing off my data structures class to the &amp;#34;next guy&amp;#34; will
be pretty straightforward but this class has been customized enough
that I have to really thin about and document what should be kept
regardless of the new instructor and what&amp;#39;s really extraneous. &lt;/p&gt;
&lt;p&gt;
We can probably drop the CS extras I do - as much as I like them, the
truth is that another CS instructor might prefer other advanced
topics.&lt;/p&gt;
&lt;p&gt;
The Software Engineering stuff, though, I think I&amp;#39;ve been doing
particularly well and should probably be kept as is. I&amp;#39;ve really got
to document all of this and prepare for the hand off.&lt;/p&gt;
&lt;p&gt;
My third class is a topics class for the Masters students and working
teachers in my certification program. That should be fun. Last year, I
enjoyed all the student presentations and got some great new ideas
should I teach any of the topics in the future. this time around
should be the same.&lt;/p&gt;
&lt;p&gt;
The thing I have to focus on is that I have to make sure to document
the aspects of the class that will potentially be tested on the
forthcoming CST. That&amp;#39;s the states Content Specialty Test. This group
will probably be exempt since they&amp;#39;ll finish off before the exam is
released but future cohorts will have to sit for the exam in order to
earn their state CS certification. I&amp;#39;ll have to document all the
little annoying things that could be on the exam for future reference
so that the next person running the program makes sure they&amp;#39;re all
covered when next this class runs.&lt;/p&gt;
&lt;p&gt;
So that&amp;#39;s pretty much it.&lt;/p&gt;
&lt;p&gt;
First week down and twelve more to go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>chatGPT TOC</title>
      <link>https://cestlaz.github.io/post/chatgpt-summary/</link>
      <pubDate>Mon, 23 Jan 2023 14:29:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/chatgpt-summary/</guid>
      <description>&lt;p&gt;
I know I said that I was done with chatGPT but since I&amp;#39;ve ended up
sharing my posts with a few people I though a quick table of contents
post would be appropriate.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Post 1 - &lt;a href=&#34;https://cestlaz.github.io/post/cheating&#34;&gt;Some general thoughts on cheating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 2 - &lt;a href=&#34;https://cestlaz.github.io/post/cheatgpt/&#34;&gt;Cheating with chatGPT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 3 - &lt;a href=&#34;https://cestlaz.github.io/post/teachgpt/&#34;&gt;Teaching with chatGPT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 4 - &lt;a href=&#34;https://cestlaz.github.io/post/chatgpt-good-bad-ugly/&#34;&gt;More teaching with chatGPT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 5 - &lt;a href=&#34;https://cestlaz.github.io/post/chatgpt-in-cs-class/&#34;&gt;chatGPT in a CS class&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Back to new content soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS GPT</title>
      <link>https://cestlaz.github.io/post/chatgpt-in-cs-class/</link>
      <pubDate>Fri, 20 Jan 2023 08:57:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/chatgpt-in-cs-class/</guid>
      <description>&lt;p&gt;
This should be my last post about chatGPT.&lt;/p&gt;
&lt;p&gt;
The GPT in chatGPT stands for Generative Pretrained
Transformer. Not something that you&amp;#39;re going to cover in an early
college CS class. I wanted to get my head around it and the
technologies are typically covered in an advanced machine learning
undergraduate elective so something you take &lt;strong&gt;after&lt;/strong&gt; you take that 400
level machine learning class. Looks like I&amp;#39;m going to have to do some
review first since I haven&amp;#39;t looked at any of the prerequisite
material in around a dozen years.&lt;/p&gt;
&lt;p&gt;
So, your K12 students won&amp;#39;t be building their own GPT but that doesn&amp;#39;t
mean that there&amp;#39;s nothing worth talking about.&lt;/p&gt;
&lt;p&gt;
There are technical things that you can teach that will help lead the
way to understanding today&amp;#39;s AI systems and also a lot of surrounding
issues.&lt;/p&gt;
&lt;p&gt;
On the surrounding stuff one can certainly talk about how chatGPT
works in a general sense. How it breaks down the input, the basic
ideas behind a neural net, how it&amp;#39;s trained on a data set etc.. Of
course, that lets us talk about the data set. Where did it come from?
This came up with a similar technology - GitHub&amp;#39;s Copilot. You pose a
programming question in a comment and it fills in the code. Where did
it get the code? From all the GitHub users. The training set consists
of basically all the code on GitHub. What about for other systems?
Well, Google has all their users email + docs + photos + everything
else and we all signed off on giving them the okay to use it way back
when. Same thing for all those other &amp;#34;free&amp;#34; services. This raises some
big questions that some of us were asking years ago. As they say &amp;#34;If
you are not paying for the product, then you are the product.&amp;#34; Lots of
good fodder for discussion here and perhaps we&amp;#39;ll raise the next
generation to be more aware of what they&amp;#39;re giving away.&lt;/p&gt;
&lt;p&gt;
Another issue is a systems reliability. We&amp;#39;ve seen many examples where
chatGPT produces incorrect answers. What about Copilot? What if code
generated by Copilot seems to work but leads to catastrophic failure
later on? Who&amp;#39;s to blame?&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t remember the details but was told by an older computer
scientist years ago about an expert system - that is, a much more
primitive AI question answering system that performed medical
diagnoses. Apparently it did better than residents and as well as
doctors but it was never used. Why not? I was told due to liability
issues. A computer program can&amp;#39;t hold malpractice insurance.&lt;/p&gt;
&lt;p&gt;
This leads to a whole set of ethical questions&lt;/p&gt;
&lt;p&gt;
Another is ownership. If chatGPT generates a story or a song, who owns
the rights? What about AI generated art? &lt;/p&gt;
&lt;p&gt;
One more on the ethical front, how about the Microsoft AI that was let lose in
the wild and was quickly trained to spew racist garbage?&lt;/p&gt;
&lt;p&gt;
The ethical and societal issue abound.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s so much rich discussion to be had with students of all ages
here but there&amp;#39;s also a technical side that can be introduced. As I
said, you&amp;#39;re not writing your own GPT system in a CS class prior to an
advanced undergraduate elective but there are things you can introduce
to pave the way and give students an inking of what&amp;#39;s possible and
what&amp;#39;s to come if they continue to study CS.&lt;/p&gt;
&lt;p&gt;
One of my favorites is word chain or Markov chain text generation (see
this &lt;a href=&#34;https://cestlaz.github.io/post/word-chains/&#34;&gt;older post&lt;/a&gt;). It&amp;#39;s not the same but it is text generation and if
you play around with it, use flowery text like poetry of the Book of
Psalms you can get some fun results. It also lets you talk about
concepts similar to overfitting which they&amp;#39;ll learn all about when
they do machine learning.&lt;/p&gt;
&lt;p&gt;
You can also do a bunch of introductory &lt;a href=&#34;https://cestlaz.github.io/post/bag-of-words/&#34;&gt;bag of words&lt;/a&gt; based natural
language processing topics. Again, these are in no way in the
neighborhood of a GPT but it&amp;#39;s really good CS and it sets the stage.&lt;/p&gt;
&lt;p&gt;
Clustering is another topic that can be approached early that has some
similar base concepts.&lt;/p&gt;
&lt;p&gt;
There are many more.&lt;/p&gt;
&lt;p&gt;
Just because you&amp;#39;re not going to do a Transformer Neural Net in K12
doesn&amp;#39;t mean you can&amp;#39;t do cool things that get the kids both ready and
thinking about important issues. One of my favorite topic to cover in
CS0 or CS1 is a &lt;a href=&#34;https://cestlaz.github.io/posts/2014-01-07-rot13-gateway/&#34;&gt;Caesar Cipher Decoder&lt;/a&gt;. It&amp;#39;s not smart or even a
necessary program but it&amp;#39;s a cool unit that starts to scratch the
surface of how more advanced systems work. It sets the stage.&lt;/p&gt;
&lt;p&gt;
So I think this is it for chatGPT posts for a while. Hope you all
found these useful, interesting, or in some way positive.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching with chatGPT - The Good, The Bad, and The Ugly</title>
      <link>https://cestlaz.github.io/post/chatgpt-good-bad-ugly/</link>
      <pubDate>Sun, 15 Jan 2023 11:03:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/chatgpt-good-bad-ugly/</guid>
      <description>&lt;p&gt;
The plan was to talk about what we can and should do in CS classes
with respect to chatGPT type technologies but after seeing so much
discussion on how to and not to use chatGPT I thought I&amp;#39;d insert this
additional post on classroom use.&lt;/p&gt;
&lt;p&gt;
We already talked about &lt;a href=&#34;https://cestlaz.github.io/po%60st/teachgpt/&#34;&gt;the good&lt;/a&gt;. I love the idea of making an essay
with errors for proof reading and it can be a great search resource,
albeit one that needs to be error checked and I&amp;#39;m sure many other
productive teaching and teaching support applications will turn up.&lt;/p&gt;
&lt;p&gt;
We also talked about &lt;a href=&#34;https://cestlaz.github.io/post/cheatgpt/&#34;&gt;the bad&lt;/a&gt;. The big one being potential cheating -
crossing the line from research or understanding aid to using it as an
inappropriate shortcut. It also just plain out fails at times to do
what you wnat it to do but that&amp;#39;s really reasonable given what it is.&lt;/p&gt;
&lt;p&gt;
What about the ugly?&lt;/p&gt;
&lt;p&gt;
Ugly is probably the wrong word. I&amp;#39;m talking about using chatGPT or
any technology because it&amp;#39;s new and cool and not because it&amp;#39;s actually
the right tool in the right place at the right time.&lt;/p&gt;
&lt;p&gt;
This is nothing new and not restricted to education. Years ago, my
parent&amp;#39;s taxes were audited. The auditor has one of those new fangled
electronic calculators and he was so enthralled  with it that he kept
showing it off and all it could to do my parents throughout the
audit. My parents were pretty sharp overall and my dad was very good
with numbers. At the end of the day the auditor determined that my
parents didn&amp;#39;t owe taxes but actually were due a sizable refund. When
all was said and done, my dad pointed out all the times that the
auditor messed up with the calculator which resulted in the
refund. The truth was that the taxes were filed correctly to begin
with but my folks weren&amp;#39;t going to turn away free money. The auditor
should have just gone old school.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen some examples already of &amp;#34;the ugly&amp;#34; and I&amp;#39;m sure there will be
more to come. Also, I want to emphasize that &amp;#34;the ugly&amp;#34; doesn&amp;#39;t
necessarily mean bad,  I just wanted to use that turn of phrase.&lt;/p&gt;
&lt;p&gt;
A friend of mine suggested using chatGPT to evaluate  essays for when
students aren&amp;#39;t comfortable with other people viewing their
work. Assuming that we&amp;#39;re confident that chatGPT will do a good job
this could work but I&amp;#39;d have some concerns. True, this could alleviate
a student&amp;#39;s fear of peer grading but building a supportive community
of peers that &lt;strong&gt;can&lt;/strong&gt; support you is important and I&amp;#39;m leery of using
technology too much as a crutch. Also that while this might offload
work from the teacher, it also removes an opportunity for the teacher
to build more of a relationship with the student through the
interaction and through their work.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not enough of an expert on language/english classes to really
judget that bt here&amp;#39;s a similar CS related example that I saw
suggested online. Have students enter programs in into chatGPT and ask
the system to add comments. &lt;/p&gt;
&lt;p&gt;
I tried this with a couple of small intro type programs and each time
I got the same style of comments. Things like a comment on top of a
loop saying &amp;#34;loop from 1 to n&amp;#34; or on top of a line like &lt;code&gt;sum = 0&lt;/code&gt;
saying &amp;#34;initialize the sum  to 0.&amp;#34; Not good comments at all.&lt;/p&gt;
&lt;p&gt;
This, I&amp;#39;d describe as ugly. If chatGPT consistently gives these types
of comments then it&amp;#39;s pretty worthless as an activity if the goal is
to help students understand commenting and writing good code. On the
other hand, if chatGPT sometimes gives these ridiculous comments and
at other times gives good comments, well, that&amp;#39;s pretty bad as well.&lt;/p&gt;
&lt;p&gt;
Now, if it always gives bad answers it could be a fun activity. Solve
the problem in class, have chatGPT comment it, and then you can
discuss good and bad coding styles and the limits of programs like
chatGPT.&lt;/p&gt;
&lt;p&gt;
Generating lessons plans also counts to me as ugly, unless you use it
to add standards to your plans to fulfill requirements from
above. Yeah, it&amp;#39;s cool that this program can make a bare bones bullet
point lesson but you then have to read it, evaluate it, check it for
errors and then still add all the meat to the bones and customize it
for your students. I&amp;#39;d argue that if a teacher knows their stuff it&amp;#39;ll
slow them down.&lt;/p&gt;
&lt;p&gt;
Normally, when using a new technology an educator should ask
themselves if it saves time and/or effort and does it improve
instruction/learning and make sure that there&amp;#39;s some real benefit to
the use. It&amp;#39;s fine if that benefit comes later and requires some dues
to be paid now but if it&amp;#39;s just a cool new technology, the new shiny
if you would, I&amp;#39;ll pass.&lt;/p&gt;
&lt;p&gt;
As a final note, even when the ugly doesn&amp;#39;t save time or improve
instruction it&amp;#39;s not necessarily bad. A good teacher knows when a
class needs a break and also when they themselves need one. It&amp;#39;s fine
to burn some time on a fun but not productive activity either for
mental health, community building or other positive reasons. It&amp;#39;s not
healthy to be 100% on task 100% of the time and a good teacher gets
this. What&amp;#39;s important to also understand is when a new technology or
tool can be used productively and when it&amp;#39;s just a diversion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>teachGPT</title>
      <link>https://cestlaz.github.io/post/teachgpt/</link>
      <pubDate>Thu, 12 Jan 2023 07:45:56 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teachgpt/</guid>
      <description>
&lt;p&gt;
So, since we discussed &lt;a href=&#34;https://cestlaz.github.io/post/cheatgpt/&#34;&gt;cheating and chatGPT&lt;/a&gt; and decided that there
shouldn&amp;#39;t be a ban, how can it or similar tools be used productively?&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
General use
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;The first go to seems to be as an alternative search engine. It hasn&amp;#39;t
been uncommon seeing people say they use chatGPT instead of searching
StackOverflow. This makes sense. ChatGPT gives answers and the natural
language interface can make it easier to form some questions or ask
for results in a particular format. Interesting though is that it
seems, and I have no evidence for this, that people will more accept a
&amp;#34;written text&amp;#34; answer from chatGPT as factual as opposed to a listed
search result. This is worth thinking about since chatGPT doesn&amp;#39;t
always give correct answers to questions so buyer beware.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
In non CS classes
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
For more interesting ideas, I&amp;#39;ll start outside of my comfort zone -
non CS classes. One of the big fears of chatGPT is that it will write
student essays. Why not leverage that as a feature, not a bug. As
chatGPT to write an essay and then have students analyze and critique
it.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ve all seen stories on how chatGPT sometimes gets the facts
wrong. How about leveraging that? Do some fact checking.&lt;/p&gt;
&lt;p&gt;
I asked chatGPT to write an essay and to include at least three
errors. It created a reasonable essays and at the bottom listed the
errors. Of cousre, there could always be more. Take those essays and
have the students not only critique but fact check. Better, don&amp;#39;t
initially fact check but have students build arguments based on the
documents you give them and let them learn to be critical of resources
when they discover they&amp;#39;re not always correct.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m sure there are many more creative ways one can leverage generative
systems like chatGPT in educational settings but now let&amp;#39;s move to CS
classes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
In CS classes
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I wondered if chatGPT could help create problems. I asked it to create
a parsons problem. That was an epic fail. It gave me a Java program in
order. I guess I could then scramble the lines but that wasn&amp;#39;t the
point.&lt;/p&gt;
&lt;p&gt;
On the other hand, the answers it gave could be used as code tracing
examples so there may be some value there.&lt;/p&gt;
&lt;p&gt;
I also asked it to generate test questions and small programming
assignments but I didn&amp;#39;t find the output useful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
What else?
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
There&amp;#39;s also been talk about creating lessons to either support or one
day replace teachers and with this, we&amp;#39;re a &lt;strong&gt;long&lt;/strong&gt; ways off.&lt;/p&gt;
&lt;p&gt;
I asked chatGPT to write lesson plans on a number CS and non CS topics
and each time the result was the same.&lt;/p&gt;
&lt;p&gt;
I got a formulaic lesson plan that technically covered the material
but I found them less than worthless. Yes, technically one could kind
of sort of work off the lesson plan but they were bare bones - no
interesting motivations, questions, possible tangents, or examples. No
potential segues or pitfalls and certainly nothing specific for any
teacher&amp;#39;s actual students.&lt;/p&gt;
&lt;p&gt;
To a non teacher the lesson plans might look alright but to any decent
teacher, they&amp;#39;re worthless. If you&amp;#39;re a teacher, you already know the
bare bones outline of any given lesson and if you don&amp;#39;t you shouldn&amp;#39;t
be teaching that subject. What makes the lesson work is everything on
top of the bare bones skeleton - the motivations, the examples, the
activities and here, chatGPT is of no help.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
The killer app
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
So far, it looks like chatGPT can be useful but it certainly has
limitations. I did find, however, the chatGPT killer app for
education. By find, I mean I saw someone else tweet out the
idea. Sorry I can&amp;#39;t give credit but I didn&amp;#39;t end up saving the link.&lt;/p&gt;
&lt;p&gt;
ChatGPT can be used to create all the garbage that administrators and
politicians insist are important in education but are crap.&lt;/p&gt;
&lt;p&gt;
Hey, chatGPT: &amp;#34;Write me a lesson plan introducing loops that aligns to
the New York State Computer Science and Digital Literacy Standards.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Hey, chatGPT: &amp;#34;Write me a sub lesson plan on conditional statements in
Java.&amp;#34;&lt;/p&gt;
&lt;p&gt;
These are great. Sure, they&amp;#39;re lousy lesson plans but they&amp;#39;ll have the
references to the standards that administrators and other education
reformers love and now teachers don&amp;#39;t have to waste their time on it.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the killer app!!!!!!!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Final thoughts
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
So there it is. A few thoughts on how we can productively use tools
like chatGPT. I&amp;#39;m sure there are more and better ones out there and
I&amp;#39;d love to hear about them so feel free to share yours.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>CheatGPT</title>
      <link>https://cestlaz.github.io/post/cheatgpt/</link>
      <pubDate>Tue, 10 Jan 2023 06:42:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cheatgpt/</guid>
      <description>&lt;p&gt;
Just got back from a few much needed days away so it&amp;#39;s time to get to
those chatGPT posts.&lt;/p&gt;
&lt;p&gt;
Last time, &lt;a href=&#34;https://cestlaz.github.io/post/cheating/&#34;&gt;I wrote on&lt;/a&gt; cheating in general. That seems to be one of the
hot points for chatGPT, in fact, the NYC DOE just last week decided to
ban chatGPT outright, presumably for that reason. We&amp;#39;ll talk about the
student side, both negative and postitive today and the teacher side
next time.&lt;/p&gt;
&lt;p&gt;
To start, while on vacation I saw this tweet:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Any educator who is saying “ChatGPT won’t affect MY classroom” better get humble really quickly. &lt;br&gt;&lt;br&gt;As a friend said, “This is like when my AP called me into his office &amp;amp; asked ‘Have you seen this thing called Google?’”&lt;br&gt;&lt;br&gt;It’s going to change the way we think about writing forever.&lt;/p&gt;&amp;mdash; Chris Lehmann (@chrislehmann) &lt;a href=&#34;https://twitter.com/chrislehmann/status/1611777320745828360?ref_src=twsrc%5Etfw&#34;&gt;January 7, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
Sure, it&amp;#39;s going to change our classrooms but it&amp;#39;s not like this is
the first time. We went from nothing to calculators to graphing
calculators to programs like Wolfram Alpha. I&amp;#39;ve been telling my
students for decades that Emacs Calc mode could not only solve all
their math assignments symbolically but it could also typeset them
directly in TeX so their homeworks would look professional.&lt;/p&gt;
&lt;p&gt;
On the non-math side we&amp;#39;ve added word processors to spell checkers to
grammar aides not to mention collaborative environments.&lt;/p&gt;
&lt;p&gt;
And we haven&amp;#39;t even mentioned search engines, wikipedia, youtube and
the scores of other resources available today that didn&amp;#39;t exist years
ago.&lt;/p&gt;
&lt;p&gt;
New technologies come in to play over and over again and teachers
adapt. Unfortunately, instead of giving teachers the resources they
need to adapt efficiently, districts normally opt for a hammer and
then blame teachers regardless.&lt;/p&gt;
&lt;p&gt;
So, now we have a new tool - will students use it to cheat? Sure -
some will but this is nothing new.  I&amp;#39;d like to believe that the
majority of students will use the new tool productively but to do so,
many will need guidance.&lt;/p&gt;
&lt;p&gt;
Should the NYC DOE have banned chatGPT? I&amp;#39;d say no. Well, actually,
I&amp;#39;d say yes but with a caveat and we&amp;#39;ll get to that below.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been playing with chatGPT a bit now and it certainly seems to be
able to generate student quality essays on a variety of topics. It
100% can solve introductory CS programming problems, frequently just
by pasting the teachers prompt in the chat box.&lt;/p&gt;
&lt;p&gt;
This can, of course, lead to cheating but shutting down the technology
in school won&amp;#39;t change a thing. As usual, draconian measures will do
little to deter bad behavior and will merely make things more
difficult for kids who want to do things the right way.&lt;/p&gt;
&lt;p&gt;
Let me use GitHub as an example. I&amp;#39;ve had &lt;strong&gt;many&lt;/strong&gt; professors tell me
that they&amp;#39;ll have students use GitHub but &lt;strong&gt;only&lt;/strong&gt; if repos are private
so as to prevent cheating. Right - making a repo private is really
going to prevent some kid from sharing their code. Sure, it&amp;#39;ll prevent
a random student from stumbling on their work but it&amp;#39;s going to do
nothing to prevent a bad actor from acting badly.&lt;/p&gt;
&lt;p&gt;
At the same time, it sows distrust and prevents students who want to
productively share and help each other (with proper attribution) from
doing so.&lt;/p&gt;
&lt;p&gt;
Banning a tool in school only serves to limit students who want to do
things the right way anyway. Cheating happened prior to chatGPT and
prior to older technologies. Some students have always cut corners
either by crossing the line with friends or even paying for essays
online. Now with chatGPT, I can type in &amp;#34;write a program to do…&amp;#34;
rather than search StackOverflow or ask a friend or pay a service but
it doesn&amp;#39;t change the fact that no matter what, some students will
cheat. On the other hand, if you cultivate a classroom where support
and sharing is encouraged, don&amp;#39;t overwork students, provide the needed
resources and allow for failure and growth, you&amp;#39;ll minimize the
problems. Of course I just described a panacea that can rarely be
created in a public school given large class sizes, emphasis on
standardized testing, and all the baggage dumped on teachers.&lt;/p&gt;
&lt;p&gt;
In a programming class, a solution could be to allow chatGPT but to
include lab time in the class. During that time, the teacher can
observe students and really get to know what they know - their
strengths and weaknesses. I always was able to include lab time at
Stuy and before that at Seward Park and by the end of the term, I knew
my students, what they could do, and where they had challenges. To be
honest, I could assign letter grades from that info alone and the
grades would pretty much match the test results.&lt;/p&gt;
&lt;p&gt;
This can be done but it&amp;#39;s getting more and more challenging given the
weight placed upon teachers.&lt;/p&gt;
&lt;p&gt;
Given this, in my class, I don&amp;#39;t want to ban chatGPT but want to
take the time to figure out how to use it productively. &lt;/p&gt;
&lt;p&gt;
Why then did I say earlier that districts &lt;strong&gt;should&lt;/strong&gt; ban it? Because at
the end of the day, schools and teachers should set these policies but
these policies need to be supported by the district. The district has
to have the principal&amp;#39;s back and the principal, their teachers.&lt;/p&gt;
&lt;p&gt;
A district should say &amp;#34;here&amp;#39;s the boilerplate policy to ban chatGPT so
if in your school or class it&amp;#39;s inappropriate, you can ban it and we&amp;#39;ve
got your back. On the other hand, a principle can implement a looser
policy and that&amp;#39;s fine and we encourage schools to implement policies
where chatGPT can be used effectively as a learning tool&amp;#34; and then
provide some boilerplate language for that.&lt;/p&gt;
&lt;p&gt;
The district has to have the hardest line because in some cases, that
hard line will be either appropriate or necessary and then schools can
loosen the restrictions as appropriate.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s my take.&lt;/p&gt;
&lt;p&gt;
Next time - chatGPT as a teacher aide.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cheating</title>
      <link>https://cestlaz.github.io/post/cheating/</link>
      <pubDate>Tue, 03 Jan 2023 14:30:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cheating/</guid>
      <description>&lt;p&gt;
I said in my last post that I wanted to write about chatGPT. The way I
see it, chatGPT is affecting teachers in four areas. First, students
using it to cheat, second the possibility of students using it as a
constructive tool. Third, teachers using it as a resource for lesson
planning or similar, and fourth, down the road, another tool to
replace teachers.&lt;/p&gt;
&lt;p&gt;
Before I dive into any of those, I thought I&amp;#39;d spend a post talking
about cheating in general. I&amp;#39;ve written about cheating &lt;a href=&#34;https://cestlaz.github.io/post/cheating-on-projects/&#34;&gt;before&lt;/a&gt; but
that was a few years ago so I thought I&amp;#39;d revisit things in light of
chatGPT and other resources students can use to cut corners.&lt;/p&gt;
&lt;p&gt;
Cheating has always been a big topic in education. Some teachers let
it slide, some are hardliners but it&amp;#39;s a front and center topic. It&amp;#39;s
also a topic that&amp;#39;s difficult to address. One reason is that our
society tolerates and even celebrates cheating at many levels. Time
and again we see that the rules are only for the little people. Not a
great basis if you want to encourage rule following in the classroom.&lt;/p&gt;
&lt;p&gt;
In my opinion, cheating is going to happen and usually it&amp;#39;s not worth
stressing about but more on that later.&lt;/p&gt;
&lt;p&gt;
Why do student cheat?&lt;/p&gt;
&lt;p&gt;
Some cheat because they don&amp;#39;t care about the class and find it as an
easy way out but I&amp;#39;d like to think that most students don&amp;#39;t follow
this path. Many cheaters do it out of desperation - they &lt;strong&gt;need&lt;/strong&gt; to get
a good grade because of their parents, college applications,
expectations or otherwise. The system they&amp;#39;re in dictates that it is
unacceptable to get a low grade and so they&amp;#39;re backed into a
corner. Similarly, students are at times so overburdened that they
can&amp;#39;t complete all the work or adequately prepare for assessments -
this can also lead to cheating.&lt;/p&gt;
&lt;p&gt;
Another case is that students in some cultures view what some would
call cheating as collaboration and this one can be tricky as to a many
people it&amp;#39;s a matter of degree and in my opinion, collaboration should
be encouraged.&lt;/p&gt;
&lt;p&gt;
I do have to admit that there is another category that I played a part
in back in high school - in my group, if we respected a teacher, we
never cheated - we&amp;#39;d just take our lumps. If we didn&amp;#39;t we might cheat,
usually to see how far we could go and what we could get away with -
in all cases, to be honest, we worked hard to learn the material and
the cheating part was just a game - not so much trying to get answers
we needed on tests but more, can we communicate information undetected
during an exam.&lt;/p&gt;
&lt;p&gt;
So, what do we do?&lt;/p&gt;
&lt;p&gt;
Some teachers take a hard line but I&amp;#39;m not comfortable with
this. Repercussions for cheating are harsh and can range from a slap
on the wrist which isn&amp;#39;t worth it to failing a course or even
expulsion. Those last two are pretty big and I&amp;#39;ve known in my life a
number of people who were falsely accused of academic dishonesty. I&amp;#39;d
rather miss a few of the cheats rather than punish the innocent.&lt;/p&gt;
&lt;p&gt;
I usually will let it slide unless I know 100%. I&amp;#39;ll take certain
measures to limit cheating as outlined in my earlier linked post but
more of my efforts are to create a positive environment - encourage
collaboration with attribution - try not to overburden students with
gratuitous work - make it okay to &amp;#34;fail&amp;#34; so long as you eventually get
to where you need to go and so on. Of course, it&amp;#39;s not perfect. I&amp;#39;m
still in a system that gives letter or number grades and everything
has to settle down to a grade by end of term. I&amp;#39;d like to think that
the culture I push minimizes cheating but you can&amp;#39;t really know.&lt;/p&gt;
&lt;p&gt;
In any event, there really is some truth the old line &amp;#34;you&amp;#39;re only
cheating yourself.&amp;#34; At least in CS. If a student cheats through a
class, they&amp;#39;ll likely not take the next one. So what, they got one
undeserved A grade. In the greater scheme of things it&amp;#39;s not going to
make a difference. If they don&amp;#39;t learn the material, they&amp;#39;re not going
to get the job and even if they do, they won&amp;#39;t be able to do the job
and, well, if they can do the job, then maybe what they cheated on
wasn&amp;#39;t so important after all.&lt;/p&gt;
&lt;p&gt;
Now, it&amp;#39;s true that we do have to try to minimize cheating - hopefully
by creating a positive culture because the majority of students DO
have to learn the basics and we can&amp;#39;t have everyone cheating through
everything but I really don&amp;#39;t think that&amp;#39;s an issue. For me, it&amp;#39;s try
to make the environment conducive to not cheating and then not worry
about it too much.&lt;/p&gt;
&lt;p&gt;
One last note is that while I try to do this, I do get irked when a
student cheats and I really get irked when students try to &amp;#34;work the
system&amp;#34; to get grades they don&amp;#39;t deserve. I try to remind myself that,
as the saying goes &amp;#34;it&amp;#39;s not personal, it&amp;#39;s just business&amp;#34; and I think
that&amp;#39;s a good thing for all of us to remember. To fix this, we have to
fix root causes and while movements like ungrading, if not taken to
far, can really help, I&amp;#39;m not sure that things will improve much in
the short term.&lt;/p&gt;
&lt;p&gt;
With all this said, stay tuned for related thoughts on chatGPT.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kicking off 2023</title>
      <link>https://cestlaz.github.io/post/2023/</link>
      <pubDate>Sun, 01 Jan 2023 10:47:39 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/2023/</guid>
      <description>&lt;p&gt;
I never do much on New Years Eve. I can&amp;#39;t remember the last time I
stayed up until Midnight. It&amp;#39;s just not really a big deal with
me. Yesterday, thanks to Natan rushing tickets, I did close out the
year seeing the Metropolitan Opera&amp;#39;s new production of Fedora which
was very enjoyable.&lt;/p&gt;
&lt;p&gt;
Woke up late today - around 5:00, went for my first run of the year
and did the puzzle over coffee. My usual routine.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m still on a school calendar so my year goes from September to
September but since so much of the world uses January first, I thought
I&amp;#39;d share a couple of thoughts on education and tech in 2022 and 2023.&lt;/p&gt;
&lt;p&gt;
On the tech side, 2022 brought a rocky road. We had the cryptocurrency crash
and NFTs came and (hopefully) went and all the big players had massive
layoffs. The Crypto stuff is interesting and I&amp;#39;m curious where it
goes. I haven&amp;#39;t had the time to really get my head around all of it. I
read the &lt;a href=&#34;https://www.bitcoin.com/satoshi-archive/whitepaper/&#34;&gt;original whitepaper&lt;/a&gt;, and played with some code but haven&amp;#39;t
delved into web3 yet. I&amp;#39;ve always felt that NFTs were a scam and I
think that this whole web3 thing is still a technology looking for an
application but it does provide smart contracts and distributed
identity and authentication and that should eventually lead to
something. One of my post retirement side projects is to try to create
something on/for web3 to really see what it&amp;#39;s all about.&lt;/p&gt;
&lt;p&gt;
One thing I do wonder about with web3 looking forward is that a big
deal about it is that it&amp;#39;s distributed. That sounds great, but we&amp;#39;ve
been there before. Whenever we&amp;#39;ve built a distributed platform, the
next thing we do is centralize it. Thin about it:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Distributed&lt;/th&gt;
&lt;th&gt;Centralized&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IRC&lt;/td&gt;
&lt;td&gt;Slack&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Usenet News&lt;/td&gt;
&lt;td&gt;Reddit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Napster&lt;/td&gt;
&lt;td&gt;Spotify&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Git&lt;/td&gt;
&lt;td&gt;GitHub&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
So, even if Web3 finds its legs and presents us with an amazing
distributed platform, will it be fated to be a distributed platform
controlled by one centralized player.&lt;/p&gt;
&lt;p&gt;
On the tech downturn, it was bound to happen. Interesting enough is
that I&amp;#39;m hearing from friends desperately trying to hire while others
were recently laid off. Messy and unfortunate but I think things will
get better on the company side.&lt;/p&gt;
&lt;p&gt;
On the candidate size, I think we&amp;#39;re going to need a correction
there. CS enrollments have and continue to explode and while hopefully
this will help bring along underrepresented groups, I&amp;#39;m guessing that
there are many new CS majors who are along for the ride and are really
meant for other things. Just like the law school boom and MBA booms
in the late 80s, the hot major becomes oversubscribed frequently for
the wrong reasons.&lt;/p&gt;
&lt;p&gt;
Moving forward both K12 CS and college CS has to do a better job in
communicating what CS and tech majors are for and preparing students
for all careers with the correct amount of CS. I don&amp;#39;t think that&amp;#39;ll
happen much though in 2023.&lt;/p&gt;
&lt;p&gt;
On the CS Ed front, for the most part, things have been chugging
along. At least in NY people are starting to recognize that while the
PD based model was essential to start CS4All things have to pivot to
pre-service programs. In general there also seems to be movement in
understanding that not every CS major wants to be a software engineer
(or a PhD candidate, which has long been the focus of most CS
programs) and we&amp;#39;re starting to see people waking to the fact that the
CS that&amp;#39;s appropriate and needed by the CS major is not the same as
that for the software engineer, other tech sector roles and possibly
most importantly everyone else. &lt;/p&gt;
&lt;p&gt;
The big negative in NY for CS Ed is that the state came out saying
that if you taught at least 1 CS class you can get grandfathered in
and won&amp;#39;t need CS certification for 10 years. This means we&amp;#39;re going
to have a lot of under-prepared CS teachers in the state for a long
time.&lt;/p&gt;
&lt;p&gt;
Looking forward in CS Education, I hope to see more preservice
programs come online in New York state and I hope that discussion of
CS for non-CS majors, non PhD candidates, and non software engineers
continues to expand.&lt;/p&gt;
&lt;p&gt;
It looks like web3 will take a bit of a back seat though and the big
topic in the next few months will be chatGPT and other AI systems.&lt;/p&gt;
&lt;p&gt;
I say AI systems, but as far as I can tell, chatGPT is really just
pattern matching on a more massive scale. Pretty impressive but not
closer to &amp;#34;intelligence.&amp;#34; There&amp;#39;s been talk about using it to solve
programming problems and write essays and this morning, I saw
something about asking it to lesson plan.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve played with it a bit and it is impressive but I&amp;#39;m predicting that
hype will fade as teachers will adjust. ChatGPT and related projects
also bring into question the rights on the training materials and that
it might threaten companies like Google. I&amp;#39;m not betting on that last
one as I&amp;#39;m guessing that Google&amp;#39;s got plenty of people working on
similar technologies internally.&lt;/p&gt;
&lt;p&gt;
So, we&amp;#39;ll see what 2023 brings in tech and education. I do plan to
write more on chatGPT in the coming months but we&amp;#39;ll see what other
themes emerge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finally some down time</title>
      <link>https://cestlaz.github.io/post/down-time/</link>
      <pubDate>Fri, 30 Dec 2022 11:56:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/down-time/</guid>
      <description>&lt;p&gt;
Since entering end of term grades I&amp;#39;ve finally had a few days of legit
down time. It&amp;#39;s been a long time. In the past few years, I went right
from Fall finals int dealing with whatever issues arose around
planning the next teacher ed cohort.&lt;/p&gt;
&lt;p&gt;
Not so this year. The three classes I&amp;#39;m teaching are the same as last
year so while I&amp;#39;ll be doing a lot of tweaking, planning, and updating
once we get started, there&amp;#39;s not much to do now. For the teacher ed
cohort, I&amp;#39;m advocating starting our next one in the Fall so again,
nothing to do for a while.&lt;/p&gt;
&lt;p&gt;
So, what have I been doing with this newly freed time? One thing I&amp;#39;ve
gotten to do is a bit more painting - something I decided to pick up
during the pandemic - something to get me off computer screens for a
while. I&amp;#39;m just a beginner but I&amp;#39;m enjoying it and making progress.&lt;/p&gt;

&lt;img  width=&#34;200&#34; height=&#34;200&#34; src=&#34;https://cestlaz.github.io/img/down-time/one.jpg&#34;/&gt;
&lt;img  width=&#34;400 height=&#34;400&#34; src=&#34;https://cestlaz.github.io/img/down-time/two.jpg&#34;/&gt;
&lt;img  width=&#34;200 height=&#34;200&#34; src=&#34;https://cestlaz.github.io/img/down-time/three.jpg&#34;/&gt;
&lt;p&gt;
Another thing I&amp;#39;ve been doing is getting back to some
programming. Nothing huge but it&amp;#39;s something I haven&amp;#39;t done in a
while. Last December (2021) I did a few &lt;a href=&#34;http://adventofode.com&#34;&gt;Advent of Code&lt;/a&gt; problems -
basically the easier ones at the start of the month that I could knock
out quickly. I stopped when the end of semester crush got bad. Same
thing this year. In between, I didn&amp;#39;t write a line of code. That&amp;#39;s not
entirely true - I wrote some small snippets for my classes but I don&amp;#39;t
really count that sinces it was all variations on things I&amp;#39;ve written
a hundred times already.&lt;/p&gt;
&lt;p&gt;
Since the semester ended, I&amp;#39;ve been able to go back and finish off a
couple of &amp;#34;harder&amp;#34; problems and also dive in to a couple of of other
small projects. One, a tool to automate some GitHub work and another a
Slack bot to make emoji polls. This got me back to dealing with web
code, working through OAuth and a few more little things. I did all of
that in Clojure but also got back to playing a bit with Rust.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t think it&amp;#39;s absolutely necessary for CS teachers to write
programs in their spare time but for many CS teachers, and certainly
for me, there are a lot of benefits. On the practical side, it helps
me keep up with current technologies. When I started teaching, there
was no web. Then HTML. Soon after Perl was king along with CGI. Later,
Javascript brought us Ajax. Fast forward and we&amp;#39;re using things like
React. All very different technologies and all require different
approaches. Even if I&amp;#39;m not teaching web development, keeping current
also keeps me current in good development practices, architecting
projects and other aspects of coding through which I can help my
students.&lt;/p&gt;
&lt;p&gt;
If I&amp;#39;m exploring with contest problems like Advent of Code, I&amp;#39;ll learn
new algorithms and experiment with data structures - also something
that helps me as a teacher.&lt;/p&gt;
&lt;p&gt;
Of course these are pretty obvious and on the surface. Another HUGE
benefit is it helps place me in to the students mindset. When working
on new projects, one has to find resources and information on the
web. Learn new libraries, tools, and techniques, and of course
DEBUGGING!!!!!!!&lt;/p&gt;
&lt;p&gt;
Since I&amp;#39;m retiring from Hunter at the end of the Spring, I fully
expect to continue to be able to dedicate some time to
programming. After all, even though I plan to work to help transition
Hunter to the next guy I expect that to be less taxing than if I were
to continue to be the guy.&lt;/p&gt;
&lt;p&gt;
Programming, reading, and other personal professional development is
really important to teachers. I lost that time over the past couple of
years, but prior, at Hunter I had it. The real shame is that K12
teachers are rarely given the time and I think their students are worse
off as a result.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Things they remember that we forgot</title>
      <link>https://cestlaz.github.io/post/forgot/</link>
      <pubDate>Sat, 17 Dec 2022 06:43:31 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/forgot/</guid>
      <description>&lt;p&gt;
Some time ago I wrote about some of the things our students remember
(&lt;a href=&#34;https://cestlaz.github.io/oldblog/blight-move/&#34;&gt;link&lt;/a&gt; - sorry for the bad formatting). Lessons, concepts, stories, or
even small jokes I remember telling but had no idea that they left a
lasting impression on any students.&lt;/p&gt;
&lt;p&gt;
Fast forward to yesterday. I spent some time yesterday at a friend, a
former student&amp;#39;s company for their holiday get together. My friend was
telling a story about how I helped get him started - I won&amp;#39;t get into
details but while I do remember the overall impression of including
and encouraging him, I don&amp;#39;t remember the detailed specifics. Another
sign of getting old. &lt;/p&gt;
&lt;p&gt;
It made me think of not only the things they remember that we remember
but also what most surely be many things that as older teachers we no
longer remember yet may have stuck with our students.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve spoken to former students a few times and they&amp;#39;d tell me about
something they&amp;#39;ll &amp;#34;always remember&amp;#34; and usually it&amp;#39;s a pretty cool but
ultimately, just a small CS technique or work approach fact. Other
times, like the story that was told yesterday, it&amp;#39;s a reminder that at
times we can have a tremendous positive impact and sometimes we don&amp;#39;t
have to do much more than be decent human beings. Over the last few
years, I&amp;#39;ve been told a few times by older alums, just as a throwaway
comment how I created a &amp;#34;safe place&amp;#34; for them. Funny, I may have done
that by some throwaway comment or action by me and it meant a lot to
them. Now yeas later, I&amp;#39;m the one who&amp;#39;s greatly moved by their
throwaway comments.&lt;/p&gt;
&lt;p&gt;
Unfortunately, there are probably things I&amp;#39;ve inadvertently said or
done in my career that have adversely affected some students but for
better or worse, we rarely get feedback on that.&lt;/p&gt;
&lt;p&gt;
It goes to show the tremendous impact teachers can have even with
small gestures. &lt;/p&gt;
&lt;p&gt;
Even the good stuff, many teachers never hear about it. This is one
area that I feel both truly fortunate and humbled. Being in touch with
so many former students and with so many now friends, I&amp;#39;ve been given
the gift of hearing and seeing what I&amp;#39;ve done. I can&amp;#39;t say why, but I
think those of us who teach CS seem to get this opportunity more than
other teachers, even when our students go into totally unrelated
fields.&lt;/p&gt;
&lt;p&gt;
I think about my old teacher, mentor, and friend &lt;a href=&#34;https://cestlaz.github.io/posts/2012-05-09-my-favorite-year-teacher/&#34;&gt;Herb Greenhut&lt;/a&gt; - a
history teacher who made such an impact that he was frequently
included in his former students life events - weddings. receiving
birth announcements and so on and even got a Mayoral Citation in his
later years. I&amp;#39;ve been fortunate to get to enjoy some of these &amp;#34;gifts&amp;#34;
but I also know that many teachers, better than I and very well
regarded have not. I blame that on circumstance.&lt;/p&gt;
&lt;p&gt;
Why am I writing about this? Beyond yesterday&amp;#39;s reminder, I&amp;#39;ve been
reflecting more about my career as I prepare to leave the classroom
full time. It&amp;#39;s also important to point out to other teachers out
there that yes, our profession is in many ways thankless but there are
some rewards that money can&amp;#39;t buy and even if you&amp;#39;re not hearing about
the impact you&amp;#39;ve had, you&amp;#39;ve probably still had it.&lt;/p&gt;
&lt;p&gt;
For the younger teachers, it&amp;#39;s there, you just have to stick with it
long enough for your current students to go out in to the world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>In Education, What&#39;s New is Old</title>
      <link>https://cestlaz.github.io/post/old-is-new/</link>
      <pubDate>Wed, 07 Dec 2022 12:44:43 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/old-is-new/</guid>
      <description>
&lt;p&gt;
I noticed a tweet the other day talking about gamification of
education. It got me thinking.&lt;/p&gt;
&lt;p&gt;
Gamification isn&amp;#39;t specifically the hot trend right now, at least not
as &amp;#34;the one true way&amp;#34; to teach but every few years it surges as this
great new idea to fix education.&lt;/p&gt;
&lt;p&gt;
When it surges, it&amp;#39;s always the hot new thing but it never really is.&lt;/p&gt;
&lt;p&gt;
Gamification has been around at least since I was in grade school and
it was never a magic bullet. It might not have been called
gamification but it was there.&lt;/p&gt;
&lt;p&gt;
Back in grade school, those stickers you got - gamification. Earn a
pizza party for the class gamification. Even those leveled readers
were gamified. I mean, you literally leveled up.&lt;/p&gt;
&lt;p&gt;
I remember early in my career I had to take a number of education
classes and gamifying was a big strategy that the professors all
taught to engage all the students. Contrast that with the advice I got
in schools by pretty much every experienced teacher who took me under
their wings - some kids are motivated by stickers but many
aren&amp;#39;t. It&amp;#39;s a superficial trick and you&amp;#39;ll only get so much mileage
out of it. It&amp;#39;s not the be all and end all.&lt;/p&gt;
&lt;p&gt;
Of course, ed tech companies can thrive on gamification because
they&amp;#39;re specifically catering to customers who thrive on it but it&amp;#39;s
not a magic bullet by any means. On the other hand, it can also be low
effort to implement so there are plenty of times when it&amp;#39;s worth a
shot.&lt;/p&gt;
&lt;p&gt;
This got me thinking about other teaching techniques that were the new
hot thing but were in fact around back in the day and more often than
not, nothing special.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s take a look at a few:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
The Flipped Classroom
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
This is a big one the big way to fix education. Have the kids watch
videos before class and then do other things in class.&lt;/p&gt;
&lt;p&gt;
New idea?&lt;/p&gt;
&lt;p&gt;
Not so much.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s called homework.&lt;/p&gt;
&lt;p&gt;
Homework can be used to review past concepts and also to introduce new
ones.&lt;/p&gt;
&lt;p&gt;
So, not a new idea at all but does it work?&lt;/p&gt;
&lt;p&gt;
Not really. Sure, anything that moves from college style lecturing to
active learning during class time is good but &amp;#34;flipping the classroom&amp;#34;
has the same issues as homework.&lt;/p&gt;
&lt;p&gt;
Not all kids do or understand the homework and if you&amp;#39;re class
activities depend on what&amp;#39;s done the night before, you&amp;#39;re in trouble.&lt;/p&gt;
&lt;p&gt;
On top of that, there&amp;#39;s been a recent movement against homework that&amp;#39;s
also been gaining traction an that&amp;#39;s certainly contrary to flipping
the classroom.&lt;/p&gt;
&lt;p&gt;
So, flipping the classroom - new? Not so much. Effective? Sometimes
but like anything else, it&amp;#39;s not a magic bullet just a tool that can
be usefully or poorly deployed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Code Tracing
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Another practice I&amp;#39;ve seen hyped more is Code Tracing. This one&amp;#39;s
easy  - it&amp;#39;s a good practice. It&amp;#39;s not new though. Code tracing - you
write out a table of variable values and you play computer, going
through the code line by line.&lt;/p&gt;
&lt;p&gt;
This is actually very similar to how students learned to graph linear
and quadratic equations. Make a table for x, and y, trace through the
algorithm, and chart the results.&lt;/p&gt;
&lt;p&gt;
Good practice but not new.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Subgoal Labeling
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Another good practice that&amp;#39;s cropped up in the past few years. Once
again, not new.&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t call it subgoal labelling but I was writing code that way
back in the 1980s.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Discovery Learning
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Back when I started teaching, cooperative learning was the true way,
more recently discovery learning took the mantel. Fortunately we&amp;#39;re
swinging back to more generic active learning which can incorporate
discovery learning and other techniques so maybe where actually
getting somewhere.&lt;/p&gt;
&lt;p&gt;
The thing about discovery learning is that even when I was a kid, we
were in classes where some of our teachers developed experiential
units where student groups worked at their own pace through activities
that led them through learning a topic - discovery learning.&lt;/p&gt;
&lt;p&gt;
Now, this practice can be good but it&amp;#39;s also not &amp;#34;the way.&amp;#34; I read
posts and articles from acclaimed schools and teachers about how they
do everything using discovery learning. Then you look further. They&amp;#39;re
almost always in rich private schools with small classes and almost
unlimited resources. Yeah - try that every day in an overcrowded
under resourced public school.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Parsons Problems
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Let&amp;#39;s close with one more. Parsons problems - scrambled lines of code &lt;/p&gt;
&lt;p&gt;
Like code tracing and subgoal labeling, Parsons Problems appear to be
a useful teaching technique and like the former two, nobody has
claimed them to be the be all and end all - all are just tools in the
tool box for a teacher to use as appropraite.&lt;/p&gt;
&lt;p&gt;
Parsons problems though are also not new - they&amp;#39;re a CS take on
scrambled paragraphs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Final thoughts
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Now, just because these new ideas aren&amp;#39;t new doesn&amp;#39;t mean they&amp;#39;re
bad. My big complaint about the ones I don&amp;#39;t like is that they&amp;#39;re
mis-applied as a cure all not that they can&amp;#39;t be effective when used
appropriately.&lt;/p&gt;
&lt;p&gt;
The point is that these new ideas that you&amp;#39;ll hear about from your ed
professors or read in the research aren&amp;#39;t necessarily new.&lt;/p&gt;
&lt;p&gt;
To be honest, most teachers will get their best tools from their peer
group - fellow teachers, frequently more experienced ones or if
they&amp;#39;re lucky, In service or pre-service instructors who are in fact
experienced K12 teachers who are sharing their practices. This is as
opposed to when those teachers are employed to teach someone elses
canned curriculum.&lt;/p&gt;
&lt;p&gt;
In any event, I always get a kick out of seeing a &amp;#34;new&amp;#34; practice and
then thinking about how old it actually is - if you&amp;#39;ve got some to
share, please do.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Advent 2022 - day 3 - sets</title>
      <link>https://cestlaz.github.io/post/advent-2022-day03/</link>
      <pubDate>Sat, 03 Dec 2022 10:13:56 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2022-day03/</guid>
      <description>
&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2022/day/3&#34;&gt;Day 3&lt;/a&gt; ended up being a quick one. That is, as long as your language
supports set operations. You can do it without set operations but it&amp;#39;s
easier if you&amp;#39;ve got them.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Part 1
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Input is a file of text where each line is an input.&lt;/p&gt;
&lt;p&gt;
You have to read each line, split it in half  and then find the common
letter between the left and right halves and then apply their scoring
rules on that letter.&lt;/p&gt;
&lt;p&gt;
For scoring, lower case letters are valued a=1, b=2 etc. and for upper
case, A=27, B=28 and so on.&lt;/p&gt;
&lt;p&gt;
For scoring, this is a nice opportunity to talk about ASCII values and
the relationship between characters and integers. For lower case
letters you can use the formula &lt;strong&gt;int(letter) - 97 + 1&lt;/strong&gt; where int(x)
returns the ASCII code for letter &lt;code&gt;x&lt;/code&gt;. The 97 is the value for &amp;#39;a&amp;#39; so
that will map the lower case letter to a value of  0 for &amp;#39;a,&amp;#39; 1 for &amp;#39;b,&amp;#39;
etc.. We add one becuase the question says to start with 1 for &amp;#39;a.&amp;#39;&lt;/p&gt;
&lt;p&gt;
For the upper case letters, we can use &lt;strong&gt;int(letter)-65 + 27&lt;/strong&gt; where 65
is the value for &amp;#39;A.&amp;#39; In this case, we add an offset of 27 since
that&amp;#39;s are lowest upper case score.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the clojure code but it would be similar in Python or other
languages:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;score [letter]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Character/isUpperCase&lt;/span&gt; letter)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; (-  (int letter) (int &lt;span style=&#34;color:#e6db74&#34;&gt;\A&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (inc (-  (int letter) (int &lt;span style=&#34;color:#e6db74&#34;&gt;\a&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The processing of the data is also pretty straight forward. Here&amp;#39;s a
Clojure solution:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;parse-part1 [line]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[size (/  (count line) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          left (take size line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          right (drop size line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          common (&lt;span style=&#34;color:#a6e22e&#34;&gt;set/intersection&lt;/span&gt; (set left) (set right))]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;score&lt;/span&gt; (first common))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Line 2&amp;#39;s Python equivalent would be &lt;code&gt;size = len(line)/2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
Line 3 takes the first half and stores it in left and line 4 drops the
first half and keeps the right hand side.&lt;/p&gt;
&lt;p&gt;
Line 5 uses Clojure&amp;#39;s set operations to find the letter in common.&lt;/p&gt;
&lt;p&gt;
To solve part 1 we just split the data, which starts as a long
string, split on newlines and then run the parse-part1 function
defined above on each line. We then use reduce to add up all the results.&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;part1 [data]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;str/split&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (map  parse-part1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (reduce +)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Full code can be found &lt;a href=&#34;https://github.com/zamansky/advent2022/blob/main/src/day03.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
A Python solution would look pretty similar. Java would be tricker for
beginners because they wouldn&amp;#39;t know about sets and using them
requires more overhead than either Clojure or Python. The problem can
still be solved by beginners. An easy, if inefficient way of finding
the intersection would be looping over all the characters in one
string and looking for it in the other.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Part two
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Part two was very similar. Instead of splitting each line in half, we
had to group entire lines by three.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the clojure code:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;part2 [data]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;str/split&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (map set)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (map  &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(reduce set/intersection %))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (map first)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (map score)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (reduce +)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Instead of munging the data and then turning strings into sets, we
first use line 2 to transform the list of strings into a list of sets.&lt;/p&gt;
&lt;p&gt;
Then, we use (partition 3) in line 4. This groups the list 3 at a
time. Then, going through the rest of the lines&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;line 5 - find the intersection within the group fo 3&lt;/li&gt;
&lt;li&gt;line 6 - there will be one letter in the result, but we have to use
&lt;strong&gt;first&lt;/strong&gt; to extract the value since the result is a set.&lt;/li&gt;
&lt;li&gt;line 7 - score all the letters&lt;/li&gt;
&lt;li&gt;line 8 - add them up&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
A nice little problem. With beginners, you get to talk about the ASCII
character relationship and if your language supports it, you can play
with sets.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2022 - Days 1 and 2</title>
      <link>https://cestlaz.github.io/post/advent-2022-day01-01/</link>
      <pubDate>Fri, 02 Dec 2022 13:59:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2022-day01-01/</guid>
      <description>
&lt;p&gt;
It&amp;#39;s &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt; season again. Every day a new two part programming
challenge and once again I&amp;#39;m taking part. At least until grading and
other end of term obligations end up eating my lunch.&lt;/p&gt;
&lt;p&gt;
I wasn&amp;#39;t planning on writing anything up but the first two days looked
like nice problems for CS1 or even CS0 students and since my friend
Steve was &lt;a href=&#34;https://github.com/scerruti/AoC2022&#34;&gt;writing up&lt;/a&gt; his take, I thought I&amp;#39;d at least comment on the
first two.&lt;/p&gt;
&lt;p&gt;
I also recorded a code through in Clojure which you can find at the
bottom of this post.&lt;/p&gt;
&lt;p&gt;
Even though I&amp;#39;m using Clojure, a similar approach can be taken in
languages like Python or Javascript. If you enjoy this type of
analysis please read Steve&amp;#39;s &lt;a href=&#34;https://github.com/scerruti/AoC2022&#34;&gt;posts&lt;/a&gt;. His approach is usually different
from mine as he&amp;#39;s working in Java and so is more OOP centric. I love
it when you can think about problems in different ways.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Day 1 - Calorie Counting
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Problem link: &lt;a href=&#34;https://adventofcode.com/2022/day/1&#34;&gt;&lt;a href=&#34;https://adventofcode.com/2022/day/1&#34;&gt;https://adventofcode.com/2022/day/1&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Here the input was lines of numbers with an extra blank linke
separating sets of inputs:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
1000
2000
3000

4000

5000
6000

7000
8000
9000

10000
&lt;/pre&gt;
&lt;p&gt;
Here, the first three numbers (1000,2000,3000) represent what the
first elf is carrying, 4000 the second elf, 5000, and 6000 the third,
etc..&lt;/p&gt;
&lt;p&gt;
The challenge was to figure out which elf carried the most.&lt;/p&gt;
&lt;p&gt;
A first year student might read a line at a time building a
sum. Whenever you see a blank line, see if that&amp;#39;s your largest sum so farand
if so, make a not of it.&lt;/p&gt;
&lt;p&gt;
In Python:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sum = 0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bigsum  = 0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;for line in open(&amp;#34;../data/day01.dat&amp;#34;).readlines():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    if line == &amp;#34;\n&amp;#34;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        if sum &amp;gt; bigsum:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            bigsum = sum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum = 0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        continue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum = sum + int(line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(bigsum)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Another approach, the one I used, was to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Convert the input lines into a list by splitting on double newlines&lt;/li&gt;
&lt;li&gt;Convert each list item into a list of numbers&lt;/li&gt;
&lt;li&gt;Sum each list&lt;/li&gt;
&lt;li&gt;Find the largest&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The video below shows this in Clojure, but in Python it might look
like this:   &lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input = open(&amp;#34;../data/day01.dat&amp;#34;).read().strip().split(&amp;#34;\n\n&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input = [x.split(&amp;#34;\n&amp;#34;) for x in input]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;int_input = [ [int(x) for x in sublist] for sublist in input]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sums = [ sum(x) for x in int_input]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;max(sums)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The nice thing here from the teaching point of view is that these
represent two very different approaches and there are probably more.&lt;/p&gt;
&lt;p&gt;
For part 2 you just had to add up the three largest elf loads. If you
used the second approach, instead of finding the largest number, you
can just sort the list and add up the biggest three.&lt;/p&gt;
&lt;p&gt;
The code for all of this in Clojure can be found &lt;a href=&#34;https://github.com/zamansky/advent2022/blob/main/src/day01.clj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Day 2 - Rock Paper Scissors
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Day 2 was a rock paper scissors problem. Input was a list of &amp;#34;moves:&amp;#34;&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
A Y
B X
C Z
&lt;/pre&gt;
&lt;p&gt;
The above says that in move 1, your opponent played &amp;#34;A&amp;#34; and you played
&amp;#34;Y,&amp;#34; in move two, your opponent &amp;#34;B&amp;#34; and you &amp;#34;X,&amp;#34; etc.&lt;/p&gt;
&lt;p&gt;
The moves meant:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Opponent Letter&lt;/th&gt;
&lt;th&gt;Your letter&lt;/th&gt;
&lt;th&gt;Means&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Rock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Paper&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Scissors&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Each turned was scored as follows:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;Points&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;You win&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You tie&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You lose&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Your score for a turn was the results points plus a 1 if you played
Rock, 2 if you played Paper, and 3 if you played Scissors.&lt;/p&gt;
&lt;p&gt;
The part 1 solution had you tracing through a game and figuring out
the score.&lt;/p&gt;
&lt;p&gt;
What&amp;#39;s nice about this problem is that it can be solved by a very raw
beginner with a not too long set of if statements.&lt;/p&gt;
&lt;p&gt;
You can also, however, look at more interesting approaches. &lt;/p&gt;
&lt;p&gt;
First, a student might notice that the moves are &amp;#34;in order&amp;#34; in that
each letter, or move, loses to the one after it. That is, Rock loses
to Paper, Paper loses to scissors, and wrapping around, scissors loses
to rock.&lt;/p&gt;
&lt;p&gt;
Then, they might see that they can assign a numeric value to each
move:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Opponent Letter&lt;/th&gt;
&lt;th&gt;Your letter&lt;/th&gt;
&lt;th&gt;Means&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Rock&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Paper&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Scissors&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Finally, they might notice that if they find the difference between
your move and your opponent&amp;#39;s move, you&amp;#39;ll get:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;align-right&#34;&gt;Difference&lt;/th&gt;
&lt;th&gt;result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;td&gt;tie - same move&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;td&gt;You win - you&amp;#39;re the &amp;#34;next&amp;#34; move&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;td&gt;You lose&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
You can also either deal with mod to wrap around or you can put in a
couple of negative values for the difference on your chart.&lt;/p&gt;
&lt;p&gt;
For part 1, my solution basically did what I just described. Make a
look up table to map the letters to values, find the difference, then
look up the points awarded from another look up table.&lt;/p&gt;
&lt;p&gt;
The Clojure code can be found &lt;a href=&#34;https://github.com/zamansky/advent2022/blob/main/src/day02.clj&#34;&gt;here&lt;/a&gt; and the video is embedded below.&lt;/p&gt;
&lt;p&gt;
For part 2, things were a bit tricker but also more interesting. Now,
your &amp;#34;move&amp;#34; of X,Y, or Z didn&amp;#39;t mean Rock, Paper or Scissors. The
letters now said that depending on your letter you had to select a
move so that you would either win, lose or draw based on this table:&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Your letter&lt;/td&gt;
&lt;td&gt;Choose a move that results in&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;You losing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;A tie&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;You win&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
This part was a reduction - look at your letter and figure out what to
replace it with - A, B, or C based on the above chart and then just do
what you did in part 1.&lt;/p&gt;
&lt;p&gt;
Here, we notice that we tie if we choose the same move as our
opponent, we win if we choose the &amp;#34;next&amp;#34; move and we loose if we
choose the move that&amp;#39;s two away (mod 3 to deal with the wraparound).&lt;/p&gt;
&lt;p&gt;
The clojure code also &lt;a href=&#34;https://github.com/zamansky/advent2022/blob/main/src/day02.clj&#34;&gt;here&lt;/a&gt; and the walkthrough below.&lt;/p&gt;
&lt;p&gt;
Hope you all enjoyed this.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/80so4H3mSCM&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning a new language - part 2 - Rust</title>
      <link>https://cestlaz.github.io/post/learn-new-language-2/</link>
      <pubDate>Tue, 29 Nov 2022 08:59:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learn-new-language-2/</guid>
      <description>&lt;p&gt;
Last time, I wrote about frustrations in trying to &lt;a href=&#34;https://cestlaz.github.io/post/learn-new-language/&#34;&gt;motivate myself to
learn ocaml&lt;/a&gt;. I could see the strong points but given that I&amp;#39;ve been
using Clojure now for a while, it didn&amp;#39;t really hold any value added
for me in my current situation.&lt;/p&gt;
&lt;p&gt;
Next, I thought I&amp;#39;d explore Rust. On the non-functional style, my go to
languages have always been Python for scripting and small things and C
professionally. I also used and taught C++ and Java. I always loved
C&amp;#39;s minimalism but it was pretty bare bones and Java and C++ while
more modern both also have their warts so it made sense to see if
there was a language I&amp;#39;d like to use instead of any of those three.&lt;/p&gt;
&lt;p&gt;
A number of years ago, I decided to explore Go for this. Go had some
nice features. It didn&amp;#39;t do a full blown object oriented thing but
rather a more lightweight way of defining structures and binding
functionality to structures. I guess like interfaces. Since I&amp;#39;m not a
big OOP person but did like the occasional object abstraction this was
great. I also loved goroutines for concurrency. On the other hand, I
didn&amp;#39;t like the lack of functional goodness so ultimately I stopped
pursuing Go.&lt;/p&gt;
&lt;p&gt;
This time, it was Rust&amp;#39;s turn. Here&amp;#39;s a list of a few of the things
that drew me to Rust:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good learning resources&lt;/li&gt;
&lt;li&gt;Good dev experience under Emacs&lt;/li&gt;
&lt;li&gt;Static typing&lt;/li&gt;
&lt;li&gt;immutable by default&lt;/li&gt;
&lt;li&gt;Supports the other functional goodness that I like&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I just started playing and so far I like it. In addition to the above
I&amp;#39;m also seeing some other positives. It has pattern matching which I
mentioned in my previous post and the object model looks more like Go
than like C++ or Java so that&amp;#39;s a plus.&lt;/p&gt;
&lt;p&gt;
Another big potential positive is Rust&amp;#39;s concept of ownership. An
informal way of thinking about it is that it&amp;#39;s how Rust deifnes what
can access memory. In Rust,  if you have code like this (lifted from
the Rust Book):&lt;/p&gt;
&lt;div class=&#34;src src-rust&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}, world!&amp;#34;&lt;/span&gt;, s1);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
you&amp;#39;ll get an error. Once you assign s1 to s2 then s2 owns the memory
with the string &amp;#34;hello&amp;#34; so when you try to access it, you get an
error. Of course, Rust has ways of dealing with this including 
explicitly declared mutability and references and maybe other things I
haven&amp;#39;t gotten to yet so it isn&amp;#39;t really a problem. I can also see it
as being a really strong way of encouraging the writing of safe
programs.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m pretty early on in the journey - I though I might try Advent of
code this year in Rust but I don&amp;#39;t think I&amp;#39;ll be sufficiently up to
speed on it yet but we&amp;#39;ll see. In any event, it seems to be a very
cool language and a strong C++ or Java alternative.&lt;/p&gt;
&lt;p&gt;
A strong alternative at least in terms of using. For teaching, that&amp;#39;s
another story. For me, learning hasn&amp;#39;t been a problem since I&amp;#39;ve been
around the block a few times but I could see the language being a
challenge for beginners. Lot&amp;#39;s of cognitive overhead for the ownership
thing as well as general scope rules and the way mutability works. I
think all these features are great for the language but I suspect that
it wouldn&amp;#39;t fly very well in a CS0 course.&lt;/p&gt;
&lt;p&gt;
So, I&amp;#39;m feeling that Rust&amp;#39;s a go and I look forward to continuing to
explore the language. If you want to check it out, start here:
&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;https://www.rust-lang.org/&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning a new language - part 1 - functional</title>
      <link>https://cestlaz.github.io/post/learn-new-language/</link>
      <pubDate>Mon, 21 Nov 2022 17:34:28 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/learn-new-language/</guid>
      <description>&lt;p&gt;
Now that I&amp;#39;ve done posting about &lt;a href=&#34;https://cestlaz.github.io/post/retiring-1-why/&#34;&gt;why I&amp;#39;m retiring&lt;/a&gt; we can get back to
our usual blogging.&lt;/p&gt;
&lt;p&gt;
I haven&amp;#39;t really done anything technical over the past couple of
year. The most programming I did in the past 18 months was a
halfhearted effort at the Advent of Code 2021 event last December. I
thought I&amp;#39;d see about picking up a new language to change that. In
doing so, I was reminded of some of my resistances to learning a new
language and how I&amp;#39;ve seen similar from self taught students coming
into my classes.&lt;/p&gt;
&lt;p&gt;
Of course my situation is different - I&amp;#39;m doing this wholly by choice
and once a student is in a class they&amp;#39;ve got to use the prescribed
tool.&lt;/p&gt;
&lt;p&gt;
The contenders on the functional side were Haskell and OCaml and on the
other side, mostly Rust.&lt;/p&gt;
&lt;p&gt;
Today, we&amp;#39;ll talk about the functional side. I decided to look at
OCaml. I had briefly looked at it well over a decade ago but barely
scratched the surface. Haskell I played with a little more deeply but
not much. I decided on OCaml because it was supposed to be more real
world and, to be honest, I get turned off by some of the holier than
though purely functional talk that sometimes occurs.&lt;/p&gt;
&lt;p&gt;
Funny thing is that I&amp;#39;ve had a really hard time getting going - so
much so that I decided that for now I&amp;#39;d explore Rust.&lt;/p&gt;
&lt;p&gt;
So, what&amp;#39;s going on?&lt;/p&gt;
&lt;p&gt;
OCaml looks to have some nice features. It&amp;#39;s functional and I&amp;#39;m a fan
there and it&amp;#39;s also supposed to be pragmatic - you can get real world
stuff done with it. It&amp;#39;s also statically typed which overall I think
is a good thing and it has cool features like pattern matching.&lt;/p&gt;
&lt;p&gt;
For pattern matching, I&amp;#39;m not talking about things like regex or
matching characters in a string but rather something like a really
cool and powerful case or switch statement. Even that description,
though is not doing it justice.&lt;/p&gt;
&lt;p&gt;
I think my problem is that I already am comfortable and enjoy
programming in Clojure. Clojure is functional and pragmatic but while
Clojure doesn&amp;#39;t have pattern matching built in but there is a library
that basically accomplishes the same thing. As to the type system,
Clojure is dynamically typed and while that would be an issue if I
were working on large real projects and/or on a team, I&amp;#39;m just writing
little toys by myself. If I want stronger typing, there are ways of
doing that in Clojure. True, it&amp;#39;s not required but working by myself,
I have that option, should I choose. It&amp;#39;s not the same - I know but as
I said, I&amp;#39;m not doing anything big, important or with other people
right now.&lt;/p&gt;
&lt;p&gt;
So, basically, every time I try to dive in to OCaml, I end up feeling
that &amp;#34;I can already do that and do it better in Clojure.&amp;#34; I&amp;#39;m guessing
I&amp;#39;d feel the reverse had I started on the OCaml side. &lt;/p&gt;
&lt;p&gt;
This has happened to me before. I was an early Python adopter feeling
that it was a huge improvement over Perl. A while later, Ruby came out
and shortly after that, Ruby on Rails became a thing. Every time I
looked into Ruby I had to stop - I could already do and do better in
Python. By then, there were enough tools to compete with Rails even
though they weren&amp;#39;t as mainstream and overall I preferred Python. I
never did end up learning Ruby.&lt;/p&gt;
&lt;p&gt;
I felt a similar sluggishness when I went from C++ to Java - something
I had to do because of the AP Exam change but I pushed through since I
had to teach it and ultimately, I&amp;#39;ve learned to appreciate the good
and curse the bad of both languages.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen similar blocks or resistance from who&amp;#39;ve had prior
programming experiences over the years. From students who seemed
to be taught more &amp;#34;the language&amp;#34; rather than CS using the language. I
know that&amp;#39;s a nebulous thing to say but I think some of you will catch
my drift. It&amp;#39;s subtleties like saying &amp;#34;okay, we&amp;#39;re repeating this
process, here&amp;#39;s how we do it in language such and such&amp;#34; vs &amp;#34;here&amp;#39;s how
we repeat this process period&amp;#34; and show the language construct.&lt;/p&gt;
&lt;p&gt;
My former math chairman at Stuy said he once, back in the 80s asked Marvin
Minsky what they should be teaching for CS in High School. Minsky
said, and I paraphrase, &amp;#34;nothing, you&amp;#39;ll only mess them up. At most
teach them to type.&amp;#34; Of course that was a different time and I
&lt;strong&gt;strongly&lt;/strong&gt; disagree with that statement but I do think we have to look
at how students entering our classes are or are not prepared and
adjust accordingly. &lt;/p&gt;
&lt;p&gt;
So, in the end, it&amp;#39;s back to Clojure for me on the functional side and
I&amp;#39;ll try to do an OCaml dive sometime in the future.&lt;/p&gt;
&lt;p&gt;
Fortunately, I&amp;#39;m having an easier time getting in to Rust. More about
that next time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retiring part 3 - What&#39;s Next</title>
      <link>https://cestlaz.github.io/post/retiring-3-whats-next/</link>
      <pubDate>Wed, 09 Nov 2022 19:40:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/retiring-3-whats-next/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Links to the three posts in this series:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;If you&amp;#39;re seeing this before the previous two posts, I&amp;#39;d encourage you
to read post 1 and 2 first.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Post 1: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-1-why/&#34;&gt;Why I&amp;#39;m retiring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 2: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-2-accomplishments/&#34;&gt;What was accomplished at Hunter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 3: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-3-whats-next/&#34;&gt;This post&lt;/a&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
As I said at the start of these three posts, I do want to stay in the
game. Maybe take a break and definately slow down but I still think
I&amp;#39;ve got something to contribute.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m writing this so that you can have it in the back of your mind in
case a great match appears either soon or somewhere down the road.&lt;/p&gt;
&lt;p&gt;
I think I posses a somewhat unique set of skills and experiences. A
thirty year teacher with a strong CS/Tech background, I&amp;#39;ve taken students
from blank slate to industry, created entire programs, and worked with
educators from early grades through college level.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve also worked as a software engineer and have remained in touch and
connected with the tech industry.&lt;/p&gt;
&lt;p&gt;
What might be appealing?&lt;/p&gt;
&lt;p&gt;
Not sure.&lt;/p&gt;
&lt;p&gt;
Probably not full time and since I&amp;#39;ll be collecting my pension it&amp;#39;ll
be about fit much more than money. Still, I&amp;#39;d never say never on the
right opportunity.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d love the opportunity to travel more - even if just in the
region. I think that&amp;#39;s my biggest regret is that Devorah and I really
never had the opportunity or took the time to see the country or
world.&lt;/p&gt;
&lt;p&gt;
Maybe if a company wants someone as a rep at conferences like all
those Ed Conference sponsors or who knows what else.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d also be open to longer gigs elsewhere - a month, a semester, or
even a year on an interesting project where we can get to know a new
community.&lt;/p&gt;
&lt;p&gt;
I know the big tech companies work with colleges to try to help them
do what I did with Daedalus at Hunter. Given that none of them have
people with the range of educational experiences and successes I
have, they could do far worse than engaging me to help with these
programs.&lt;/p&gt;
&lt;p&gt;
Maybe some colleges, universities, or governments have a side project
and they could use someone like me.&lt;/p&gt;
&lt;p&gt;
To be honest, I don&amp;#39;t know but figured this was a good way to get the
word out.&lt;/p&gt;
&lt;p&gt;
So, thanks for reading and keeping me in mind.&lt;/p&gt;
&lt;p&gt;
Now, back to our regular blogging program.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Links to the three posts in this series:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Post 1: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-1-why/&#34;&gt;Why I&amp;#39;m retiring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 2: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-2-accomplishments/&#34;&gt;What was accomplished at Hunter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 3: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-3-whats-next/&#34;&gt;This post&lt;/a&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Retiring part 2 - Accomplishments</title>
      <link>https://cestlaz.github.io/post/retiring-2-accomplishments/</link>
      <pubDate>Wed, 09 Nov 2022 15:35:50 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/retiring-2-accomplishments/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Links to the posts in this series
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;If you&amp;#39;re reading this before the previous post, I&amp;#39;d recommend going
back and reading that one first. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Post 1: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-1-why/&#34;&gt;Why I&amp;#39;m retiring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 2: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-2-accomplishments/&#34;&gt;This post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 3: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-3-whats-next/&#34;&gt;What I think I&amp;#39;ll be looking for next&lt;/a&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I think I&amp;#39;ve carved out a somewhat unique career. Never set out to be
a teacher and a couple of different turns here or there and things
could have been very different. When I started teaching, I thought I&amp;#39;d
probably, if anything  become a math chair and that was actually the
plan at Stuy until Richie Rothenberg, the math chair at the time
unexpectedly passed away in the late nineties. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Pre Hunter recap
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Just a quick recap. I started my career as a Programmer Analyst at
Goldman Sachs back in the day. I&amp;#39;d say Software Engineer but that
title didn&amp;#39;t exist back then. From there I went into teaching for two
decades, mostly at Stuyvesant.&lt;/p&gt;
&lt;p&gt;
At Stuyvesant I built the CS program, created classes, trained teachers and
shepherded hundreds, perhaps thousands of students towards tech
careers. My continued relationships with these former students left me
in a unique position as someone with strong CS chops, strong teaching
and education chops along with professional programming experience and strong ties
to the tech industry.&lt;/p&gt;
&lt;p&gt;
During this time, I played my part in getting the
ball rolling for K12 CS Ed. Certainly at Stuy but I&amp;#39;d like to think
beyond it as well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
The Hunter chapter
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Almost seven years ago, I came over to Hunter to work on two major
projects. One was to develop and run an undergraduate honors computer
science program at the college and the other as to create and run
computer science teacher certification programs.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Undergraduate CS Honors
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Prior to my joining Hunter, they already had a long established CS
department and program. It was (and is) both as good as any other
program out there and as bad. There were though, a few particular
issues. First, Hunter&amp;#39;s program was either unknown to high school
students or had a poor reputation due to the misconception that a
liberal arts school can&amp;#39;t do good CS and, at the tech company end,
Hunter was a total unknown. &lt;/p&gt;
&lt;p&gt;
Hunter&amp;#39;s program was a typical college CS program in that it did a
great job preparing strong applicants for grad school but did nothing
to prepare them for tech careers and there was no connection with the
NY Tech industry.&lt;/p&gt;
&lt;p&gt;
When I started, top tech companies never recruited at Hunter and most
Hunter students never even applied for internships prior to
graduating - they didn&amp;#39;t know they were supposed to.&lt;/p&gt;
&lt;p&gt;
Over the past 7 years there have been tremendous changes.&lt;/p&gt;
&lt;p&gt;
My first cohort had 8 students. My latest has 64. My honors program and Hunter CS in general is
now a known CS destination in many NY high schools. Applications have
grown from around 50 to many hundreds and each year I field more and
more calls of students trying to decide between my program and other
top CS programs - I win some, I lose some.&lt;/p&gt;
&lt;p&gt;
On the exit side, my Daedalus students regularly end up at top tech
companies and the overall profile of Hunter CS is much greater and
more positive in the tech world.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve created new classes that integrate software engineering practices
with traditional CS and built many unique partnerships and programs over
the past 7 years.&lt;/p&gt;
&lt;p&gt;
My trouble is that the Daedalus program is in full swing. It has to be
maintained but the job is basically done. At the same time, I don&amp;#39;t
have the ability to get the reforms I&amp;#39;ve brought to my program to the
greater Hunter CS population. Sure, I&amp;#39;ve gotten some initiatives
started that are available to all Hunter students but a lot of the
core stuff that I&amp;#39;ve worked into my courses are only available to the
Daedalus students and I don&amp;#39;t have a way of changing that.&lt;/p&gt;
&lt;p&gt;
So, I think I&amp;#39;ve done what I can do. The original goal was to create
this honors program and I think we&amp;#39;ve gone well beyond. Hunter, and
Daedalus in particular, has a higher profile with high schools and
employers and Daedalus students get the best of CS, the practical
software engineering skills they&amp;#39;ll need and unique partnerships with
the tech community.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Teacher Certification
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
My other major hat was on the K12 CS teacher side. First we had to
lobby the state to create the certification. I visited Albany a number
of times and spoke to my share of Regents but the real heavy lifting
went to Hunter&amp;#39;s President and the Dean of the Ed school.&lt;/p&gt;
&lt;p&gt;
Meanwhile, I created our masters and certificate programs while
doing my part in the whole K12 CS effort. I created new classes and
worked with some of my old teaching pals from Stuy to get ready to run
the program once the state approved everything. &lt;/p&gt;
&lt;p&gt;
Three years ago everything got really rolling. Hunter had the first active
certificate and masters programs in the state. Thanks to the generous
support of Gotham Gives, we were able to start a cohort of 21 working
teachers towards CS certification. They were joined by 2 masters
students.&lt;/p&gt;
&lt;p&gt;
A year later, New York State had its first certified CS teachers. &lt;/p&gt;
&lt;p&gt;
The following year, again with support from Gotham Gives, this time
joined by Google, we started another 24 working teachers along with 5
more masters students.&lt;/p&gt;
&lt;p&gt;
Now in our third cohort we&amp;#39;ve got another 56 working through the
programs.&lt;/p&gt;
&lt;p&gt;
By the time our third year ends, we&amp;#39;ll have around 100 certified CS
teachers in New York City.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m equally proud of the fact that we&amp;#39;ve got five teachers from the
Fingerlakes region in our program.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been pretty vocal over the years as to what I think a good CS
teacher looks like and I&amp;#39;m super proud that our brand of CS teaching
can now be found across the city and in fact across the state.&lt;/p&gt;
&lt;p&gt;
If you
think about the number of students these teachers reach each year,
that&amp;#39;s pretty amazing.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m equally proud of the fact that these cohorts are still in touch
and forming a new community of CS teachers in the city and state.&lt;/p&gt;
&lt;p&gt;
Now that we&amp;#39;re rolling, what&amp;#39;s next? The program needs to continue to
run but I don&amp;#39;t see major changes. There are more things to get done
at Hunter and in the state. Things like getting the state to separate
HS from early grades in terms of certification and integrating some CS
teacher prep in our elementary school programs but, right now, I don&amp;#39;t
see a path for the former and don&amp;#39;t have the energy for the latter.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Other hats
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I&amp;#39;ve also done a number of other one offs or side projects while at
Hunter. Some of them have been:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I was on the executive committe and a lead author in creating the
NY State K12 CS standards. Something I find ironic since I&amp;#39;m not a
fan of &amp;#34;state standards.&amp;#34;&lt;/li&gt;
&lt;li&gt;I mentioned earlier that I was a big part of Hunter winning and
administering the CUNY2X grant. Got to work with some great people
and that whole grant was huge in helping move the needle on Hunter
CS.&lt;/li&gt;
&lt;li&gt;I was also fortunate enough to work on a project funded by the
Robin Hood foundation on CS in the primary grades. It also allowed
me to work with some great people while dipping my toes in CS Ed
research and early grade work. &lt;/li&gt;
&lt;li&gt;Prior to Covid we were also well on our way in developing a nice
little K12 CS teacher community hosting monthxly meetups at tech
companies like Google and Digital Ocean.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
So, there it is, the major initiatives I&amp;#39;ve been working on at Hunter
and what I think I&amp;#39;ve accomplished. I&amp;#39;m proud of the work and in all
cases I think we went farther than we originally set out for.&lt;/p&gt;
&lt;p&gt;
What&amp;#39;s next? I&amp;#39;m not entirely sure. I&amp;#39;ll share some thoughts in my
next post. I hope all my friends read it and keep an ear open if the
right opportunity presents itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
Links to the posts in this series
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Post 1: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-1-why/&#34;&gt;Why I&amp;#39;m retiring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 2: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-2-accomplishments/&#34;&gt;This post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 3: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-3-whats-next/&#34;&gt;What I think I&amp;#39;ll be looking for next&lt;/a&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>After 7 years at Hunter College and 33 in NYC public schools, time for a change.</title>
      <link>https://cestlaz.github.io/post/retiring-1-why/</link>
      <pubDate>Wed, 09 Nov 2022 06:43:04 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/retiring-1-why/</guid>
      <description>
&lt;p&gt;
I&amp;#39;ve been dropping mentions of this here and there for a while now but
I think it&amp;#39;s time to come out more formally -&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m planning on retiring from Hunter at the end of this Spring.&lt;/p&gt;
&lt;p&gt;
This doesn&amp;#39;t mean getting out of the CS or CS Ed game entirely - I
could stay on in a part time capacity and, after some decompression I
think I still have things to offer but the plan is retire, collect my
pension, and then see where I can continue to be contribute to the
Ed/CS Ed scene. &lt;/p&gt;
&lt;p&gt;
Why now? Largely burnout but there are a number of reasons. I&amp;#39;ll talk
about them below.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m also posting this with two other posts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One talking about what I feel I&amp;#39;ve accomplished here at Hunter (&lt;a href=&#34;https://cestlaz.github.io/post/retiring-2-accomplishments/&#34;&gt;link&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Another talking about the types of opportunities I think I&amp;#39;ll be
looking for next (&lt;a href=&#34;https://cestlaz.github.io/post/retiring-3-whats-next/&#34;&gt;link&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;#39;d love it if people could read those - particularly the last one.&lt;/p&gt;
&lt;p&gt;
For the rest of this post, why it&amp;#39;s time.&lt;/p&gt;
&lt;p&gt;
As I said, burnout is at the top of the list. What from? Largely from
having too much on my plate. When I started at Hunter, neither of my
programs existed. We started undergraduate CS honors (the Daedalus
program) the following fall and that grew at a consistent pace until
it was a full time job. The CS Ed program took longer to get running
since we needed to get the state to create the license and get our
programs through governance but once they started, that was another
full time job. Add to that the assorted other responsibilities that
ended up on my plate and I&amp;#39;ve been doing two to three full time jobs
for the past three or so years - not sustainable. For the burnout,
Covid and the state of the world certainly hasn&amp;#39;t helped.&lt;/p&gt;
&lt;p&gt;
What does burnout mean? Well, I&amp;#39;m not enjoying my classes. Sure, there
are fun times but I don&amp;#39;t get up in the morning looking forward to it
and in class, I&amp;#39;m as likely to get annoyed by something as not. Part
of this is that I have students who refuse to mask - something I see
as a direct sign of disrespect but there&amp;#39;s more. All in all, this is a
good sign that it&amp;#39;s time to get out or at least take a break.&lt;/p&gt;
&lt;p&gt;
Another factor, and a big one is that I&amp;#39;ve accomplished everything
I&amp;#39;ve set out to accomplish at Hunter and then some. I&amp;#39;m normally not a
&amp;#34;goal guy,&amp;#34; I&amp;#39;m more about process and journey but in the case of
Hunter, I also had a set of goals and I&amp;#39;ve gotten there and
beyond. There are new challenges at Hunter but not challenges that I&amp;#39;m
as excited about. More on this in my accomplishment post.&lt;/p&gt;
&lt;p&gt;
Finally, I&amp;#39;ve got health and family reasons. Health isn&amp;#39;t anything
immediate but I do have indications of heart disease. Combine that
with the fact that my mom died when she was 72 and my dad at 44 and
well, now that I&amp;#39;m 55, if we can financially handle it, maybe it&amp;#39;s
time to give more time to myself and my family.&lt;/p&gt;
&lt;p&gt;
Finally, Devorah&amp;#39;s also retiring - she put in the paperwork the other day.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s why.&lt;/p&gt;
&lt;p&gt;
For those of you who read this blog, I&amp;#39;d love for you to keep your
ears open for potential next steps so I&amp;#39;d love for you to read my next
post on what I think I&amp;#39;ve accomplished at Hunter and what I bring to
the table and the one after that where I&amp;#39;ll muse about what I think I
might be able to get excited about and where I think I might be able
to contribute.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Links to this post  and the other two posts:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Post 1: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-1-why/&#34;&gt;This post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 2: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-2-accomplishments/&#34;&gt;Recap of what was accomplished at Hunter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post 3: &lt;a href=&#34;https://cestlaz.github.io/post/retiring-3-whats-next/&#34;&gt;What I think I&amp;#39;ll be looking for next&lt;/a&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Should college be career prep</title>
      <link>https://cestlaz.github.io/post/should-cs-be-practical/</link>
      <pubDate>Mon, 07 Nov 2022 11:47:50 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/should-cs-be-practical/</guid>
      <description>&lt;p&gt;
So, in some of the social platform discussion on my &lt;a href=&#34;https://cestlaz.github.io/post/new-major/&#34;&gt;last post&lt;/a&gt;, the
issue of the practicality of a college education came up. Should
college teach practical job skills or should it be for some more
abstract purpose - learning for learning sake or if one would be a bit
presumptions learning how to think.&lt;/p&gt;
&lt;p&gt;
Way back when going to college was not the norm. Most went from HS to
workforce and even in HS you might have the &amp;#34;academic&amp;#34; track that
prepared you for college, &amp;#34;vocational&amp;#34; that was job prep like
automotive or regular which was neither extreme. Sure, that system had
a host of problems but since the end goal wasn&amp;#39;t college for most, it
freed college from the need for being practical. College could just be
about learning non-useful stuff.&lt;/p&gt;
&lt;p&gt;
Nowadays kids don&amp;#39;t have the luxury of not going to college. It&amp;#39;s
expected in our society. Spend 4 years and oodles of dollars to get
the piece of paper and you can get a job that years ago only required
the HS version of the paper.&lt;/p&gt;
&lt;p&gt;
This, of course, leads to many rather large and hairy questions none
of which I will address here.&lt;/p&gt;
&lt;p&gt;
What I will address concerns my little CS corner of the world.&lt;/p&gt;
&lt;p&gt;
In commenting on my post, some people talked about college faculty
they know and how those faculty members refuse to teach or use
anything that might remotely be useful to kids in terms of
career. They feel it&amp;#39;s beneath them and that they serve a higher
academic purpose. I don&amp;#39;t doubt those comments - I know plenty of
college faculty who feel this very way.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll agree that college shouldn&amp;#39;t strictly be a jobs program but the
nice thing about CS is that you &lt;strong&gt;can&lt;/strong&gt; teach practical skills and job
skills within the context of a traditional academic CS degree. Add in
the reality that most CS majors don&amp;#39;t want to go to grad school and
you can redesign the major to do even more for the majority of
students.&lt;/p&gt;
&lt;p&gt;
How about programming languages and tools. Why not use a couple of
practical ones. This is not to say that the first language has to be
C++, Java, Python or similar but there&amp;#39;s no reason why a couple practical
languages shouldn&amp;#39;t be used. Sure, feel free  to use an esoteric
language or some professors pet project in a particular class and by
all means use the intro language that makes the most sense for your
situation but for a 4 year major, there&amp;#39;s no reason why students
shouldn&amp;#39;t walk away with a couple of languages that are widely used in
industry. Same for build tools and things like testing frameworks. I
use git and &lt;a href=&#34;https://github.com/doctest/doctest&#34;&gt;doctest&lt;/a&gt;. I&amp;#39;m not teaching a class in git or doctest, I&amp;#39;m
teaching software engineering techniques and testing as part of my CS1
classes. I have to use some tool as the platform on which to teach
these things so why not tools that they can also use outside of
school. It just makes sense. Sure, in terms of language, most colleges
seem to cover at least one of C++, Python, and Java but lag in terms
of the support concepts and tooling.&lt;/p&gt;
&lt;p&gt;
It reminds me about what I said in my earlier post about Intel
Assembly. At Stuy back in the 90s I taught a systems elective. It
wasn&amp;#39;t a programming course about Intel assembly. If it was, I&amp;#39;d just
do a bunch of random programming assignments in it. It was rather a
course about how the computer worked at a low level and we &lt;strong&gt;used&lt;/strong&gt;
Intel assembly as the tool.&lt;/p&gt;
&lt;p&gt;
You can&amp;#39;t do this everywhere in a CS curriculum but there are plenty
of places where you can. Do this, make sure there are some required
large project courses where students can learn to work in a group and
integrate technologies, introduce a couple of new electives, and all
of a sudden you can have a strong academic CS program that also does a
great job preparing students for the tech world beyond academia.&lt;/p&gt;
&lt;p&gt;
Some places are already doing this and others are trying but too many
are still caught in the past.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crafting a new major for tech</title>
      <link>https://cestlaz.github.io/post/new-major/</link>
      <pubDate>Fri, 04 Nov 2022 09:42:40 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/new-major/</guid>
      <description>&lt;p&gt;
Hunter College, like most colleges and universities is facing
unprecedented demand for CS. It&amp;#39;s the hot major. Being a public
college, we have an obligation to provide the best education possible
to as many students as we can in our locality. This means we can&amp;#39;t
just put a GPA requirement or other cap on the major and we can&amp;#39;t do
things I&amp;#39;ve heard &amp;#34;elite&amp;#34; schools do like essentially making
applicants apply to the major direct from HS.&lt;/p&gt;
&lt;p&gt;
This had led to the usual problems - more large lectures, fewer
electives offered, challenges for space etc.. This is nothing unique
to Hunter.&lt;/p&gt;
&lt;p&gt;
Another problem, though is that Hunter offers a traditional CS major -
similar to the majority of institutions across the USA and the
traditional CS major is not really servicing many of our students.&lt;/p&gt;
&lt;p&gt;
Unlike many other majors, the students in CS by and large want to work
in Tech. Unfortunately, most CS programs aren&amp;#39;t set up for this. Rather
they are set up with the assumption that all CS majors want to go on
to PhD programs which is most certainly not the case. Sure, CS
students learn programming and some other career useful things but
they also learn a lot that most ever use. Theory is important but not
as much as many have to study. Far too much proof, How about calc 2
and sometimes 3? Sure these topics can be useful and even important to
some but I&amp;#39;ve talked to countless tech people in the business world
ranging from entry level programmers to top executives and everyone in
between and by and large the CS major is poorly set up for the CS
career. What&amp;#39;s more, the only career that many CS majors only somewhat
prepares students for is programming and even then just to a certain
extent and there are many non-programming heavy tech opportunities out
there waiting for our students.&lt;/p&gt;
&lt;p&gt;
I think many in academia acknowledge this as well. I&amp;#39;ve spoken to some
high up people at some of our most prestigious institutions and, at
least, privately, they&amp;#39;ve agreed with me on this.&lt;/p&gt;
&lt;p&gt;
As it stands, not all Hunter CS students can get through the major and
for those that do, they&amp;#39;re just as well set up for career as graduates
of the &amp;#34;elite&amp;#34; programs but truth be told, it&amp;#39;s not the institutions
that are setting them up well.&lt;/p&gt;
&lt;p&gt;
Hunter&amp;#39;s trying to do something about this. At recent department
meetings there&amp;#39;s been discussion of creating a new major - something
that maybe dumps the unnecessary stuff and replaces it with material
that is both more relevant to the students career while also providing
additional support in areas that the students need. The challenge is
to also keep the academic rigor at the same time and not just become a
jobs program for the flavor of the month.&lt;/p&gt;
&lt;p&gt;
There was a lot of talk asking &amp;#34;what do other colleges do and what are
they planning?&amp;#34; but I didn&amp;#39;t like that talk. Who cares what other
colleges are doing? Who says they&amp;#39;re doing it right. Every institution
has a unique situation. Hunter - a liberal arts college in the heart
of NYC which is part of the CUNY system should be figuring out what&amp;#39;s
best for itself, not what may or may not work for others.&lt;/p&gt;
&lt;p&gt;
I suggested talking to the tech community, particularly in NYC - what
jobs are out there now and what will be out there in the next decade
and how can we structure a program to inform students as to the
possibilities and to prepare them on their paths?&lt;/p&gt;
&lt;p&gt;
Fortunately, I&amp;#39;ve got tons of former students in all areas of tech and
we&amp;#39;ve been talking for the past few weeks and trying to figure this
out.&lt;/p&gt;
&lt;p&gt;
Originally, some of the Hunter faculty were considering things like
network admin / sys admin type roles and thought to explore there but
that&amp;#39;s not what I&amp;#39;ve been getting from my network.&lt;/p&gt;
&lt;p&gt;
A big obvious one was software engineering. This could be great for
those meant to follow the programming path but not for tech minded
people who don&amp;#39;t want to spend their days in code. Project management
kept coming up but there were more than a few concerns that to be a
great PM you really have to have some real world experience so a PM
major wouldn&amp;#39;t be serving students.&lt;/p&gt;
&lt;p&gt;
Another thing that came up was the idea that developers in many cases
do have more control over their infrastructure which would lead to
requiring knowledge in administering their own systems, some network
wherewithal as well as some knowledge of container technologies and
the like.&lt;/p&gt;
&lt;p&gt;
There was also a lot of talk about which current major classes were
useful and which really weren&amp;#39;t and there was discussion of a lot of
other things like software architecture (something never taught but
much needed), technology integration, and things like soft skills
(presentations/writing) ethics and so on.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m also glad &amp;#34;the family&amp;#34; got the idea that we wanted to teach
academic classes and not just how to use tools. I was heartened this
morning when one of my former students recalled:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Back in the 90s when I was in your systems class I remember you
saying that you weren&amp;#39;t teaching us Intel Assembly. We were learning
how computers worked and that we were &lt;strong&gt;using&lt;/strong&gt; Intel Assembly as a tool
to explore to accomplish that learning&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Made me feel good.&lt;/p&gt;
&lt;p&gt;
All in all, I&amp;#39;m really grateful for my StuyCS Family (or as some say,
the StuyCS Mafia) - got all the info I needed from which I think I&amp;#39;ll
be able to craft a very strong and useful new proposed major. I don&amp;#39;t
think it&amp;#39;ll focus on just one possible career but I think it should
get a student ready for a variety of entry level tech jobs including
programming related ones. What&amp;#39;s more, it will educate them as to the
possibilities - something else current majors don&amp;#39;t usually do. &lt;/p&gt;
&lt;p&gt;
Will the CS department like it? Who knows but I&amp;#39;m convinced that it
will be a great option for Hunter students if they do.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>College Recommendation Season</title>
      <link>https://cestlaz.github.io/post/college-recs/</link>
      <pubDate>Tue, 01 Nov 2022 20:42:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/college-recs/</guid>
      <description>&lt;p&gt;
It&amp;#39;s fall so for HS teachers who taught juniors last year it&amp;#39;s
recommendation writing season. For many of those teachers, they&amp;#39;re
already well into the season with early decision deadlines being as
early as November 1.&lt;/p&gt;
&lt;p&gt;
Writing recs is one thing I don&amp;#39;t miss now that I&amp;#39;m working at the
college level. Sure, it was always an honor to be asked but it was a
lot of work. Now I&amp;#39;m on the other side and reading the recs. On one
hand, much easier but on the other hand, getting worthwhile
information from a college rec as an application reader can be its own
challenge.&lt;/p&gt;
&lt;p&gt;
When reading recs, I see the same things that I knew were going on as
when I was on the writing side. Some teachers do a crap job and some
teachers put their all into it.&lt;/p&gt;
&lt;p&gt;
On the bad side, you get the generic rec - pretty much the same thing
for every kid. We all know some teachers do this. From the reader
point of view, you see these a mile away and when a lot of kids apply
with the same teacher writing, it&amp;#39;s even worse. Sometimes this is
indeed lazy rec writing but other times it&amp;#39;s because the teacher&amp;#39;s
doing their best but just doesn&amp;#39;t have the material - I used to get
asked for recs all the time from that quiet kid who basically did a
good job but was quiet, and to be honest, somewhat generic in terms of
application portfolio. Nice enough kid but within the context of
class, not a lot to write. You know as a teacher that this is a good
kid who deserves to be represented and you&amp;#39;re porbably their best or
only option but there&amp;#39;s not a lot to write. It&amp;#39;s hard. Combine that
when, like me, you&amp;#39;re not a great natural writer and you can get a
generic rec even it you&amp;#39;re not trying to.&lt;/p&gt;
&lt;p&gt;
On the good side, you get writers who really write something unique and
descriptive for each kid. In order to try to do
right by my kids, I&amp;#39;d insist on having multiple weeks to write the
recs since I&amp;#39;d have to space them out - I couldn&amp;#39;t do more than one or
two at a sitting for fear of them becoming generic.&lt;/p&gt;
&lt;p&gt;
In any case, good recs take work.&lt;/p&gt;
&lt;p&gt;
For me, I would always be very clear to my students. I&amp;#39;d tell them
&lt;strong&gt;&amp;#34;I&amp;#39;m making no effort at all to get you into any particular school.&amp;#34;&lt;/strong&gt;
I never saw that as the purpose of the rec. I&amp;#39;d tell them that my job
was &lt;strong&gt;&amp;#34;to paint a picture of them&amp;#34;&lt;/strong&gt; in the hope that the reader would
be able to determine if they were a good fit for a school. Afterall,
fit is what it&amp;#39;s all about. If an applicant or rec writer &amp;#34;fool&amp;#34; an
admission office into offering a bad fit, it won&amp;#39;t work out for
anyone. The majority of kids, in my experience end up in good places
and get good educations but the key is not getting in to the dream
school, the key is getting in to the right fit.&lt;/p&gt;
&lt;p&gt;
My son, in spite of an amazingly stellar application portfolio,
didn&amp;#39;t get into any of his first choice schools and went grudgingly to
Michigan - it turned out to be the best possible place for him. I
didn&amp;#39;t get in to my dream school back in the day and ended up at NYU
but that was indeed, the right place for me at that time.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s about fit and a rec can help paint a picture to see if there&amp;#39;s a
fit.&lt;/p&gt;
&lt;p&gt;
Now that I&amp;#39;ve been on the reading side for a number of years, that&amp;#39;s
what I look for. If I get a generic rec I don&amp;#39;t count it against a
student and if a rec isn&amp;#39;t well written I likewise try to look past
that. As I said before, I don&amp;#39;t consider myself to be a strong writer
so I understand the challenge. I do look for a rec to paint a
picture. Will this student be a good fit for my program. Will they
thrive and be a positive part of the community.&lt;/p&gt;
&lt;p&gt;
To be honest, for teachers at schools where i have a track record, I&amp;#39;d
just as soon get short and sweet - &amp;#34;You remember so and so, well this
kid is like them but here are the differences&amp;#34; or even &amp;#34;Mike, you know
I&amp;#39;ve written for a dozen kids in the past - you WANT this kid.&amp;#34; That
track record is important because over time, I get to know the schools
and the teachers and if they&amp;#39;re honest with me, their recs weigh more
heavily. On the other hand, if I read a bunch of over the top reviews
and later it turns out that the students weren&amp;#39;t fairly represented,
then those writers lose credibility with me in the future.&lt;/p&gt;
&lt;p&gt;
This has made a difference for kids in the past. Every year, it seems
that I reach out to rec writers directly where I&amp;#39;ve felt there was
something, a spark in the application but I needed to dig deeper to
make a case to advocate for the kid. Sometimes it worked out,
sometimes it didn&amp;#39;t but building the track record and history
certainly help.&lt;/p&gt;
&lt;p&gt;
Now, I can&amp;#39;t speak for anyone else or any admissions office - in fact,
I have nothing to do with the Hunter admissions process, I just have a
major voice in advocating for the students in my program and that is
indeed a very little corner of the world.&lt;/p&gt;
&lt;p&gt;
So, why did I write this? I was talking to a couple of friends who
stil teach high school and they were talking about rec writing and I
thought that even though I&amp;#39;m not directly involved in admissions and
in the greater scheme of things my program is very small and I&amp;#39;m just
one voice, I thought it might be interesting for teachers to read a
bit about how I look at and think about college recs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some Professional Development Is Worthwhile</title>
      <link>https://cestlaz.github.io/post/some-pd-is-worthwhile/</link>
      <pubDate>Wed, 26 Oct 2022 16:29:50 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/some-pd-is-worthwhile/</guid>
      <description>&lt;p&gt;
No, I&amp;#39;m not walking back anything from &lt;a href=&#34;https://cestlaz.github.io/post/why-pd-wont-do/#disqus_thread&#34;&gt;my last post&lt;/a&gt;. I still think
we have to stop using professional development as the primary means
for preparing CS teachers but I wanted to take a minute to make it
clear that while there&amp;#39;s plenty of lousy PD out there, there&amp;#39;s also
plenty of good stuff.&lt;/p&gt;
&lt;p&gt;
For bad PD, it&amp;#39;s frequently mandated and frequently neither useful or
relevant or even if its potentially relevant, but the time it becomes
useful you don&amp;#39;t remember it.&lt;/p&gt;
&lt;p&gt;
For good, first we look to our fellow teachers. A couple of years ago
at SIGCSE, they released the results of a survey of CS educators - I
think it was limited to colleges but the results were both expected
and interesting. It turned out that the majority of respondents
considered the best resource to improve their teaching practice to be
techniques learned from other teachers. I believe first it was in
department and then in external meetings but I could be wrong. &amp;#34;The
research,&amp;#34; on the other hand, was way down the list.&lt;/p&gt;
&lt;p&gt;
PD delivered by colleages is the best and can happen at all levels. A
teacher might not be a CS ace nor may they be very experienced but
they can run a session on something they tried and how it worked (or
didnt&amp;#39;) and I&amp;#39;ll take that any day over something from a &amp;#34;thought
leader.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Of course, back to yesterday&amp;#39;s post, you can&amp;#39;t prepare a CS teacher
that way - you can take a teacher and add trick, a technique, a
practice, or a topic.&lt;/p&gt;
&lt;p&gt;
Great stuff for what it is when used appropriately.&lt;/p&gt;
&lt;p&gt;
Every time we would have those school wide required PDs, we&amp;#39;d all look
at the offerings and seek out the good stuff being delivered by our
fellow teachers.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s another class of PD that can also be excellent although,
again, it&amp;#39;s not a replacement for full teacher preparation. That&amp;#39;s
when some group goes in and isn&amp;#39;t trying to &amp;#34;train the teachers from
scratch to proficient&amp;#34; but rather understands that they&amp;#39;re delivering
a limited experience. This might be to expose a new audience to CS on
an introductory level or a non specialist on how they can deliver a
starter set of CS experiences or it could be something deeper but
it&amp;#39;ll be focussed on growing the teachers tool set and knowledge base,
not on delivering some set scripted experience.&lt;/p&gt;
&lt;p&gt;
This type of PD seems to frequently be delivered by researchers and
can be excellent stuff. It can also be delivered by content providers.&lt;/p&gt;
&lt;p&gt;
Finally, content providers can and do deliver worthwhile PD as long as
its taken in the right context. If you&amp;#39;re a knowledgeable CS teacher
you might love some provider&amp;#39;s curriculum and their training can be
the best way to go. Nothing inherently wrong here as long as the
training is not the actual teacher prep.&lt;/p&gt;
&lt;p&gt;
One of the best places for all of these types of PDs are at
conferences like the CSTA conference and that conference has
historically had the best of all versions of PD.&lt;/p&gt;
&lt;p&gt;
So, there it is, I&amp;#39;m not down on PD but I recognize that there&amp;#39;s a lot
of garbage PD to go with a lot of good stuff. The problem and the
danger is that it&amp;#39;s too often used as a replacement for real teacher
prep.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why PD doesn&#39;t work for CS</title>
      <link>https://cestlaz.github.io/post/why-pd-wont-do/</link>
      <pubDate>Mon, 24 Oct 2022 08:01:48 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/why-pd-wont-do/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
EDIT
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I was reminded that by referring to CS4All and what it&amp;#39;s doing in NYC
people could read an implication that the many hard working educators
are not doing a yeoman&amp;#39;s job and indeed they are. They&amp;#39;ve been doing
the heavy lifting from day 1 to bring opportunities to students and I
did not mean to impugn their work or efforts in any way.&lt;/p&gt;
&lt;p&gt;
I also want to mention that I know that there are many educators
working in NY in CS who have been providing direct support for
teachers outside of PD and this post is not about them and their good
work. This is about what PD providers provide and how that is no
longer a good model for us to use for teacher prep. &lt;/p&gt;
&lt;p&gt;
I apologize to educators who read this prior to this edit who felt
that I was referring to them and I hope this addition clears things
up.&lt;/p&gt;
&lt;p&gt;
That said, I&amp;#39;m leaving the post as is because CS4all in NYC has set up
the current system and as I said below &lt;strong&gt;it was correct and necessary at
the start to do it that way&lt;/strong&gt; but it is now clear that the CS4ALl
leadership has to change directions with regards to using professional
development as a model for preparing teachers.&lt;/p&gt;
&lt;p&gt;
I also am leaving it because there are other states along with
nationwide CS PD providers that claim that the PD  model is adequately
preparing CS teachers and it isn&amp;#39;t.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Original Post
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Overall, I&amp;#39;ve been down on the Professional Development model that has
been used nationwide to &amp;#34;prepare&amp;#34; our CS teachers. Yes, I&amp;#39;ll happily
admit that in order to get to a lot of teachers quickly, starting
teachers off with PD was essential but too many people think it&amp;#39;s
doing fine and that&amp;#39;s a problem.&lt;/p&gt;
&lt;p&gt;
Before getting to the specifics of CS PD let&amp;#39;s think about PD in
general. There are different types of PDs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Teachers sharing practices&lt;/li&gt;
&lt;li&gt;conferences and meetings that teachers choose to attend&lt;/li&gt;
&lt;li&gt;PD run by content providers, that is, people selling something&lt;/li&gt;
&lt;li&gt;PD required by schools and districts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first two types are usually considered good, the third, sometimes
but not as often. The fourth, fuggedaboudit.&lt;/p&gt;
&lt;p&gt;
Given that there were and are so few CS teachers that really know CS
and how to teach it, CS training, which started with PD, started with
content providers. As I said at the start, this was essential at first
but had and has many problems.&lt;/p&gt;
&lt;p&gt;
First off, content providers aren&amp;#39;t teaches. Sure, they often hire people
who have taught but usually for a limited period of time. Second,
since they&amp;#39;re pushing their product they&amp;#39;re usually teaching a pretty
scripted experience and not going beyond either the way they envision
their lessons to progress nor to broader possible content. This was
essential at the start but it&amp;#39;s not really preparing teachers. It&amp;#39;s
preparing actors for a play. Unfortunately, those 30 or so other
actors in the room (the students) are all doing improv.&lt;/p&gt;
&lt;p&gt;
Even with those problems content provider provided PD can certainly
have value but there&amp;#39;s one more problem and it&amp;#39;s HUGE. Professional
Development has no teacher accountability or follow up. When you
attend a PD there are no exams or required projects, no assessment, no
grade for credits - nothing. You attend, you&amp;#39;re done.&lt;/p&gt;
&lt;p&gt;
This is 100% the right way to do it for most fields but not when this is
how you&amp;#39;re initially training teachers. I&amp;#39;ve seen this in the
applicants to my program. I mentioned it in earlier posts but I&amp;#39;ve
seen far too many applicants who&amp;#39;ve attended multiple years of CS4All
training in NYC. Training provided by a who&amp;#39;s who of providers and
they can barely get past hello world. I&amp;#39;ve even seen it &lt;strong&gt;in&lt;/strong&gt; my
program where a couple of participants have viewed our courses as PDs
and really tried to dial it in. Fortunately, the vast majority get
that we&amp;#39;re offering legit grad courses for grad credits and while
you&amp;#39;ll work (and hopefully have fun) through the program, you&amp;#39;ll
indeed grow as a  CS teacher throughout. &lt;/p&gt;
&lt;p&gt;
Combine the fact that PD is never assessed by the fact that NY state
is allowing unprepared teachers to teach CS for the next 10 years and
we&amp;#39;ve got a problem.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t really have an answer - PD in general should remain as it is
in most fields but it should no longer be used as primary teacher
preparation. Even though I strongly believe this, nothing will change
based on the state&amp;#39;s stance and the fact that city and state
politicians gain more by rubber stamping CS teachers and saying
they&amp;#39;ve done it rather than facing the fact that they&amp;#39;re going to
exacerbate the difference between the haves - who can make sure
their kids get well prepared teachers, and the have nots who will get
the PD trained kind.&lt;/p&gt;
&lt;p&gt;
What the city and state should be doing is funding teachers to take
advanced certificate programs like mine and students to take CS
teacher preparation programs, also like mine but like the ones offered
by Siena College and others as well. Do this and reduce the number of
years during which you don&amp;#39;t need certification from 10 years to 5 and
you&amp;#39;ve got a real solution.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not holding my breath.&lt;/p&gt;
&lt;p&gt;
In any case, there are teachers out there who want to do it right and
there are charitable groups like Gotham Gives and Google who&amp;#39;ve helped
us at Hunter move around 100 teachers from where they started to
becoming solid CS teachers.&lt;/p&gt;
&lt;p&gt;
Regardless of what the city and state do, we need more organizations to
get on board funding good programs and more good programs becoming
available to truly prepare teachers. If this happens, I do believe the
teachers will come.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Don&#39;t give away the punchline</title>
      <link>https://cestlaz.github.io/post/punchline/</link>
      <pubDate>Fri, 21 Oct 2022 15:42:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/punchline/</guid>
      <description>&lt;p&gt;
Commenting on my post on teaching some &lt;a href=&#34;https://cestlaz.github.io/post/same-old-topics/&#34;&gt;Software Engineering&lt;/a&gt; concepts,
there was a comment on code review and that code.org now included it
in their CS-A curriculum. I found &lt;a href=&#34;https://www.youtube.com/watch?v=dWddHWU3_YM&#34;&gt;this video&lt;/a&gt; but no other materials. I
was thinking that I certainly hoped that the video was not being used to
introduce code review to students. I mean the video is fine and
probably great to show to teachers so that they&amp;#39;ll have some idea on
what code review is and why it&amp;#39;s important. For students, it would be
giving away the punchline too early.&lt;/p&gt;
&lt;p&gt;
There are times when you, as a teacher, have to directly instruct
students and there are times when just seeing a good practice is
sufficient but code review isn&amp;#39;t one of them. Why do I feel that way?
Because I&amp;#39;ve seen code review in the wild. Sure, some, and I&amp;#39;d hope
many professionals take it to heart but I know too many cases where
testing and code reviews are afterthoughts. People click okay based on
reputations or cursory glances or often based on deadlines and don&amp;#39;t
take the time to really review code.&lt;/p&gt;
&lt;p&gt;
For students to buy into code review, they have to really see why it&amp;#39;s
important and useful.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s somewhat like teaching version control, which I do with Git and
GitHub. I teach it early because I use it as a means of distributing
and collecting software but truth be told, students don&amp;#39;t really buy
into the program. They only &amp;#34;get&amp;#34; version control later on when it
saves their bacon. I haven&amp;#39;t cracked the nut of making version
control meaningful early on but I think I have done a pretty good job
with code review (&lt;a href=&#34;https://cestlaz.github.io/post/code-review-2/&#34;&gt;old post&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/post/code-review/&#34;&gt;other old post&lt;/a&gt;) and it involves having
them do some activities before revealing what we&amp;#39;re really doing or
giving them the punchline.&lt;/p&gt;
&lt;p&gt;
Sometimes you&amp;#39;ve got to give the info up front but sometimes you want
to set up exploration, discussion, and discovery. Most teachers know
this but not all. I remember three years ago, we had our first CS
teacher cohort. We started with 22 teachers but one dropped after the
first week. That one teacher insisted that we tell them everything
that was coming up in detail. I explained that we could share some
things in advance but giving away the punchline would lessen their
experience and how much they got out of the program. A couple of days
later they were gone. The other 21 bought in and together we had a
great program.&lt;/p&gt;
&lt;p&gt;
So, most teachers get it, but not all. On the other hand I&amp;#39;m not
convinced that most content providers get it. Yes, they&amp;#39;ve heard all
the buzzwords but I&amp;#39;m not convinced that most of them have really
experienced educators (let alone CS educators) driving their ships, I
mean, it is a profession where it takes decades to become a master
teacher and to me, 5 to 10 years is really advanced beginner to
intermediate and I don&amp;#39;t think you really master your craft util
around 20 and that&amp;#39;s only if you continue to work at it.&lt;/p&gt;
&lt;p&gt;
Some people might push back on that last paragraph but if you&amp;#39;re a
5-10 year teacher, as yourself this - do you expect to stay the same
and not get any better for the rest of your career or do you expect to
continue to grow and get better. If you do expect to grow than what
you will become will be the master teacher version of yourself. If you don&amp;#39;t expect to grow,
you&amp;#39;re probably in the wrong business.&lt;/p&gt;
&lt;p&gt;
Anyway, I digress.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know what materials code.org put together for their whole code
review unit. If the video is intended to show at the start or if
they&amp;#39;ve got something more developmental but it got me thinking about
our craft, how it&amp;#39;s important to give the right information at the
right time, to guide but not to give away the punchline until the time
is right.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Turning 55</title>
      <link>https://cestlaz.github.io/post/turning-55/</link>
      <pubDate>Wed, 19 Oct 2022 15:15:25 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/turning-55/</guid>
      <description>&lt;p&gt;
So, I turned 55 today. Another year older. The changes? Well, I&amp;#39;m
seeing more doctors and seeing them more frequently and to be honest,
I&amp;#39;d love to have a day or two without some small niggling ache or pain
but that&amp;#39;s life. Like many people my age, we&amp;#39;ve got our health issues
but I&amp;#39;m pretty active and managing mine (hey, I had a great 8 mile run
this morning :-) ).&lt;/p&gt;
&lt;p&gt;
Still, 55 is a big one. Yeah, I know, it&amp;#39;s not 50 which ends in a 0
and is half a century so people seem to earmark it. It&amp;#39;s also not 62
or 67 when social security can kick in for most people. Nope. It&amp;#39;s
also not 65 when you get all those senior discounts.&lt;/p&gt;
&lt;p&gt;
Fifty five, for teachers who started around when I did is that magic
age that, if you&amp;#39;ve put in enough years (which I have) you can retire
and start collecting unreduced pension benefits. &lt;/p&gt;
&lt;p&gt;
I mentioned &lt;a href=&#34;https://cestlaz.github.io/post/turning-54/&#34;&gt;last year&lt;/a&gt; that I was starting to think about retirement as
a possibility. Of course, that doesn&amp;#39;t mean getting out of the game
entirely but if I go that route it means reducing my work obligations
be they at Hunter or elsewhere. Regardless of what I do, I think I
still have something to offer in terms of CS, the Tech Industry,
Education, and the intersection of the three.&lt;/p&gt;
&lt;p&gt;
Regardless of what I decide to do, it&amp;#39;s been a tough few years, and
I&amp;#39;m feeling somewhat burnt out and it&amp;#39;s calming and relieving to know
that if I wanted to, I could now step back whenever it suits me.&lt;/p&gt;
&lt;p&gt;
So, now to do some hard thinking and have conversations about this
with family and friends (yes, dear reader, I&amp;#39;ll be reaching out to
some of you) while I work to make the experiences of my current
students as positive and rewarding as I can.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Good class day today</title>
      <link>https://cestlaz.github.io/post/good-day-in-class/</link>
      <pubDate>Thu, 13 Oct 2022 14:59:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/good-day-in-class/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been in something of a teaching funk for much of the
semester. Don&amp;#39;t get me wrong, I think things are going pretty well
with the classes but I don&amp;#39;t feel like I&amp;#39;ve had my &amp;#34;A game.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Part of it, I think is because of the relaxed mask policy. Hunter is
masks optional and in their infinite wisdom, last year replaced the
signs that said &amp;#34;Masks required&amp;#34; with signs that say &amp;#34;Masks &lt;strong&gt;NOT&lt;/strong&gt;
required.&amp;#34; I&amp;#39;m in two overcrowded rooms - one of them, in fact has a
capacity lower than my class size and I have some imunocompromised
people in my life that I&amp;#39;d like to be able to safely see not to
mention my own health. At the beginning of the semester, I requested
for these reasons that in the classroom people wear masks. Most did
and most do but a few didn&amp;#39;t and won&amp;#39;t and a few decided it wasn&amp;#39;t
important any more after a few weeks.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s typical that a few cases like this can really bring the tone down
but I think that&amp;#39;s affecting me more than anything else.&lt;/p&gt;
&lt;p&gt;
In any event, in spite of this, today was a good day. In particular, I
got a boost from my second class. I started my lesson on writing a
program to &lt;a href=&#34;https://cestlaz.github.io/posts/2014-01-07-rot13-gateway/&#34;&gt;decode a Caesar cipher&lt;/a&gt;. It wasn&amp;#39;t exactly the same as the
post. Today we started with a lot of internet history and culture -
&lt;a href=&#34;https://en.wikipedia.org/wiki/ROT13&#34;&gt;rot13&lt;/a&gt;, Usenet news, and the first public dialup Unix system on the
internet the &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Big_Electric_Cat&#34;&gt;Big Electric Cat&lt;/a&gt; run by my old schoolmates and friends,
Charles Foreman, Robert Sweeney, Lee Fischman, and Richard Newman.&lt;/p&gt;
&lt;p&gt;
We moved from there to starting to develop ideas behind finding a
similarity score between two things based on the distance formula. I
now that sounds like a weird topic jump but it made sense in context.&lt;/p&gt;
&lt;p&gt;
More to come in the next few classes.&lt;/p&gt;
&lt;p&gt;
After class in the halls I heard mutterings from students on how they
thought it was a really cool lesson. Made me feel pretty good.&lt;/p&gt;
&lt;p&gt;
My earlier class wasn&amp;#39;t particularly cool but it also went
well. Mostly students sharing work. First part had them in groups and
sharing solutions from the past weeks lab with other group
members. The second part was more interesting and more fun. I had them
look at each others solutions without discussion and then had group
members explain and otherwise talk through other group members
solutions. So, for example, in a four person group, group member A
might chose question 3 from group member B&amp;#39;s repo and then teach that
solution to the full group of four.&lt;/p&gt;
&lt;p&gt;
I think was a productive exercise and time well spent. It&amp;#39;s important
to get them to share solutions and to be able to understand other
peoples code so this was a step in the right direction.&lt;/p&gt;
&lt;p&gt;
So, that&amp;#39;s it today. Nothing really deep, just sharing a good day in
the classroom.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Same Old Topics</title>
      <link>https://cestlaz.github.io/post/same-old-topics/</link>
      <pubDate>Sat, 08 Oct 2022 14:40:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/same-old-topics/</guid>
      <description>&lt;p&gt;
I haven&amp;#39;t been posting about specific CS teaching techniques and
lesson content recently. Probably because I&amp;#39;ve been teaching the same classes
at Hunter now for the past six years.&lt;/p&gt;
&lt;p&gt;
Twice a year, Fall and Spring, I teach a recitation for Hunter&amp;#39;s CS1
in C++. In the Fall I also teach a version of their CS0 in Python. My
second undergrad CS class in the Spring is Data Structures.&lt;/p&gt;
&lt;p&gt;
I have some freedom in the CS0 class but that&amp;#39;s more with applications
and assignments since the basics are the basics. Data Structures is
even more constrained. I&amp;#39;ve got to cover the same data structures and
algorithms as the other, non honors section. I can do more and I can
cover things the way I want but the list of data structures and
algorithms is pretty set.&lt;/p&gt;
&lt;p&gt;
For my CS1 recitation, I probably have the most freedom. For the
regular sections, they cover a number of labs in the recitation. Since
I have an honors class, I push the labs to homework assignments and
can do what I want with the recitation time. This gives me some
freedom but I still have to match the pace and content with what
they&amp;#39;re learning in the CS1 lectures. That means I can&amp;#39;t arbitrarily
cover a topic until it&amp;#39;s prerequisites are covered in the main lecture
and likewise, I can&amp;#39;t cover anything that&amp;#39;s covered in a future
lecture.&lt;/p&gt;
&lt;p&gt;
Now, this doesn&amp;#39;t mean I have no freedom at all. For all three
courses, I developed my lessons and I&amp;#39;ve continually tweaked how I&amp;#39;ve
taught but it&amp;#39;s been largely the same.&lt;/p&gt;
&lt;p&gt;
I bet this is similar to a math teacher teaching algebra or geometry
for the billionth time.&lt;/p&gt;
&lt;p&gt;
For the CS1 lab I initially added in a bunch of software engineering
and a couple of straight CS topics. The software engineering included
things like coding standards, testing, code reviews, working on other
peoples code and the like. It&amp;#39;s worked well but last couple of times
I&amp;#39;ve felt the course was a little stagnant and wanted to mix in some
new things.&lt;/p&gt;
&lt;p&gt;
What to add? I looked at the class calendar and lecture syllabus and
as luck will have it, I&amp;#39;ll be able to add three more topics this
semester. First up will be code coverage. We&amp;#39;ve been talking about
testing and TDD since I started teaching at Hunter but code coverage
as it relates to tests has been an afterthought. This time, I&amp;#39;m going
to bring it to the forefront. I think it&amp;#39;ll be interesting and
fun. The second will be Continuous Integration (CI). I was holding off
on this because of tooling but now that I&amp;#39;ve had a chance to look, it
seems that GitHub actions will make it really easy. Finally, I want to
more formally talk about code profiling.&lt;/p&gt;
&lt;p&gt;
None of these topics is particularly large or complex (at least at the
introductory level) so it&amp;#39;ll all fit nicely and it&amp;#39;s giving me
something new to get excited about as opposed to the same lessons
merely tweaked. In fact, I&amp;#39;m finding myself thinking &amp;#34;Oh man, I&amp;#39;m
going to have to cover those three lessons on decryption before I get
to that cool new lesson on code coverage, ugh.&amp;#34; Four years ago, the
decryption lesson was the cool and fun new lesson that I was super
excited about.&lt;/p&gt;
&lt;p&gt;
So, we&amp;#39;ll see how it all goes. Planning to report back after all the
lessons are delivered.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>We need certified teachers, not professionally developed teachers.</title>
      <link>https://cestlaz.github.io/post/certification-needed/</link>
      <pubDate>Wed, 28 Sep 2022 17:35:05 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/certification-needed/</guid>
      <description>&lt;p&gt;
Last time I mentioned that there are many teachers teaching CS in NY
that have no intention of earning the new certification and also don&amp;#39;t
really know the subject. People might not want to here this but it&amp;#39;s
true. I don&amp;#39;t blame the teachers for this since they&amp;#39;ve been
repeatedly told that &amp;#34;CS is super easy&amp;#34; and that their PD training
100% makes them CS teachers and really prepares them.&lt;/p&gt;
&lt;p&gt;
It doesn&amp;#39;t&lt;/p&gt;
&lt;p&gt;
With the new certification, one would hope that teachers who took one
for the team and muddled through would either get certified or go
back to teaching their primary subject but that probably won&amp;#39;t be the
case.&lt;/p&gt;
&lt;p&gt;
Why?&lt;/p&gt;
&lt;p&gt;
Because the state is allowing it.&lt;/p&gt;
&lt;p&gt;
Current teachers can (or could) file for the SOCE - Statement of
Continuing Eligibility. Basically if you taught CS you can fill out a
form and keep teaching it for 10 years regardless of
qualifications. It has limitations - it&amp;#39;s tied to the school you filed
the SOCE at - if you transfer it&amp;#39;s no longer valid but it basically
means that if you taught CS, good or bad, you can keep doing it at
your current school.&lt;/p&gt;
&lt;p&gt;
This is not good.&lt;/p&gt;
&lt;p&gt;
The idea of giving a time frame to become a strong CS teacher is a
good one but 10 years is excessive.&lt;/p&gt;
&lt;p&gt;
Yes, there are some teachers that won&amp;#39;t be certified but really know
CS and how to teach it but in my experience they are in the
minority. Over the past three years I&amp;#39;ve worked closely with about 100
teachers in my program and I&amp;#39;ve evaluated applications from afew
hundred more. Many of these applicants have been attending CS
professional development for &lt;strong&gt;years&lt;/strong&gt;. These PDs are the usual
suspects - CS4all&amp;#39;s training in NY, code.org etc.. The number of
teachers who attended years of these types of training but have
difficulty with &amp;#34;hello world&amp;#34; has been shocking. Now, I&amp;#39;m not down on
a teacher for not knowing more than what they&amp;#39;ve been taught but
what&amp;#39;s being taught in PDs is sorely lacking and attending them does
not a CS teacher make.&lt;/p&gt;
&lt;p&gt;
Now, this isn&amp;#39;t to say that all CS Certification programs will be
superior to the low bar PD. I&amp;#39;m confident in saying that the Hunter
program is. I&amp;#39;m also confident in the quality of Siena&amp;#39;s program but
they only award a Bachelors so it&amp;#39;s not for currently working, certified
teachers. Other programs, I just don&amp;#39;t know - some will probably be
great and others will be glorified PD.&lt;/p&gt;
&lt;p&gt;
We really need to educate school administrators and district leaders
as to what real CS teacher preparation should look like and they have
to insist that while right now, we&amp;#39;re in a transitional phase, within
a few years - and &lt;strong&gt;not&lt;/strong&gt; the 10 the state is giving, that teachers both
new or existing get that preparation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Certified CS teachers - 2 flags in NY</title>
      <link>https://cestlaz.github.io/post/certified-teacher-in-ny/</link>
      <pubDate>Wed, 28 Sep 2022 16:39:37 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/certified-teacher-in-ny/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been running Hunter&amp;#39;s teacher certification program now for three
years. We started with our Advanced Certificate which allows currently
working teachers to earn an additional cert in CS and soon a few
masters students joined the pipeline.&lt;/p&gt;
&lt;p&gt;
In three years we&amp;#39;ve made great progress. Approximately 45 New York
City teachers are either state certified to teach CS or are qualified
to recieve the certification once they file with the state. We&amp;#39;ve got
close to 60 more joining them this spring. That&amp;#39;s really exciting as
it gets us to the critical mass I think the city needs moving
forward.&lt;/p&gt;
&lt;p&gt;
A core of knowledgeable teachers to provide an existing
community of professionals as new young CS teachers join the
profession over the next few years.&lt;/p&gt;
&lt;p&gt;
This work something I&amp;#39;m both proud and excited about but there are two
major concerns.&lt;/p&gt;
&lt;p&gt;
First, there are many teachers teaching CS in NY that have no
intention of earning the new certification and also don&amp;#39;t really know
the subject. &lt;/p&gt;
&lt;p&gt;
Second, this is only New York City and NY is a big state and not
enough is happening in other parts of the state.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll talk about the first issue in my next post but for now, let&amp;#39;s
talk about the state.&lt;/p&gt;
&lt;p&gt;
A big thing I&amp;#39;m excited about with my current cohort of teachers is
that five of them are from the Finger Lakes region of NY. About a year
ago, I was essentially cold called by educators from the Dryden school
district. They wanted to make sure they had knowledgeable CS teachers
and saw that we had an advanced certificate program. They wanted to
send their teachers to us for certification. There were issues - for
funding, they ended up applying and receiving an NSF grant and on my
end, I had to make sure that our program would remain remote - that
commute from the Finger Lakes would&amp;#39;ve been brutal. When all was said and
done, we started this past summer with over 50 teachers and teacher
candidates from New York City and 5 from Dryden and neighboring
Groton. Those five teachers have been a terrific addition to the
cohort and I think it&amp;#39;s also worked for them - they immediately become
a local network of CS teachers as opposed to being the only one in
town and they&amp;#39;ve also tapped into the New York City network we&amp;#39;ve been
building.&lt;/p&gt;
&lt;p&gt;
This means we&amp;#39;ve planted 2 flags in NY State - two locations that have
or will soon have certified CS teachers. The ones that have finished
my program in NYC along with the five from Dryden and Groton.&lt;/p&gt;
&lt;p&gt;
The trouble is, we need more.&lt;/p&gt;
&lt;p&gt;
Right now, there are 5 institutions with register masters program in
New York State and 3 wither registered bachelors programs. I can&amp;#39;t
vouch for the quality of any programs other than mine and I don&amp;#39;t know
how many are active.&lt;/p&gt;
&lt;p&gt;
Regardless, the issue here is that these are all programs that provide
initial certification - they&amp;#39;re for new people entering the
profession. These programs are needed but will ramp up slowly across
the state. At Hunter we&amp;#39;ve had registrations of 2, 4, and now most
recently 5.&lt;/p&gt;
&lt;p&gt;
We need more Advanced Certificate programs across the
state. Programs that allow current CS teachers to learn this new field
so they can teach it legally and teach it well. Right now, Hunter&amp;#39;s
the only game in town. This is one of the reasons why I&amp;#39;ve fought
to keep us online - you can&amp;#39;t expect teachers from way out in queens
to come into the heart of Manhattan after a school day for classes and
then back out LI or wherever they live let alone teachers from 4 hours
north of the city.&lt;/p&gt;
&lt;p&gt;
We need more Advanced Certification programs and we need ways to fund
the teachers who need these programs. I&amp;#39;ve been extremely fortunate
that organizations like Gotham Gives and Google support our work in
New York City but I&amp;#39;m thinking we need the equivalent up the Hudson
Valley, across the Erie Canal and all the way to Buffalo.&lt;/p&gt;
&lt;p&gt;
These programs and the related funding also wouldn&amp;#39;t have to last
forever. After there years of intense work, NYC will have its core of
certified teachers and I expect the demand for my advanced cert
program to go way down while we slowly see an uptick in interest in
our Masters program.&lt;/p&gt;
&lt;p&gt;
Next time, I&amp;#39;ll talk about that other issue - the fact that we&amp;#39;re
going to have a lot of teachers that don&amp;#39;t really know CS and how to
teach it for a long time but this is enough for now.&lt;/p&gt;
&lt;p&gt;
We need more programs across the state that will recertify current
teachers and really set them up as CS teachers. I&amp;#39;ve done what I could
in that regard at Hunter and am very proud of our partnership with
Dryden and Groton but it&amp;#39;s got to be more than Hunter college.&lt;/p&gt;
&lt;p&gt;
So, hey, if you&amp;#39;re somewhere outside of the city and this is important
to you - drop me a line, I&amp;#39;d love to work together to make things
happen across the state.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Research Vs Practice</title>
      <link>https://cestlaz.github.io/post/research-vs-practice/</link>
      <pubDate>Sun, 11 Sep 2022 12:33:02 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/research-vs-practice/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been seeing a lot of tweets recently about &amp;#34;the research&amp;#34; - how
PD should present how to teach and cite &amp;#34;the research,&amp;#34; how research
defines the best practices teachers should use, and on and on.&lt;/p&gt;
&lt;p&gt;
As readers know, this is not something I subscribe to.&lt;/p&gt;
&lt;p&gt;
What got me this time was a specific tweet on the PD thing and how
it&amp;#39;s critically important to show the research to &amp;#34;prove&amp;#34; the
effectiveness of whatever is being pitched. Sorry, no. &lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at two scenarios.&lt;/p&gt;
&lt;p&gt;
Scenario 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You get a PD either from a researcher telling you how to teach based
on their research or, as would be more common, from an administrator
or private consultant or contractor who read some researcher&amp;#39;s work.&lt;/p&gt;
&lt;p&gt;
The presenter tells you about the practice and how the research said
it was the one true way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Scenario 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You get a PD from an actual teacher. They tell you what they tried,
how it went, and a robust discussion ensues between the presenter and
audience on how the practice might or might not work with the
audience&amp;#39;s students.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I&amp;#39;m taking scenario 2 any day of the week. &lt;/p&gt;
&lt;p&gt;
There is and can be good education research and it can have tremendous
value but the truth is, education research has pretty poor overall reputation
and as far as I can tell, it&amp;#39;s largely deserved. Over my career, I&amp;#39;ve
been told how to teach multiple times based on the research only to
hear a few years later that it was wrong and there&amp;#39;s another one true way.&lt;/p&gt;
&lt;p&gt;
Ed research, as far as I can tell is rarely if ever reproduced and
hardly ever accounts for the many, MANY variables that can change
outcomes.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll talk about the good side of Ed Research down below but first an
example.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve spoken to ed researchers over the years and told them a story
of my classes and how my first period CS class always under-performed
as compared to my later classes. Not by a lot but it was
consistent. The response was always the same - &amp;#34;that class starts at
8:00am, right? That&amp;#39;s way too early - that&amp;#39;s the difference.&amp;#34; Sounds
good and truth be told, I agree that 8:00am is too early but that
wasn&amp;#39;t the factor. My first period was weaker because math team ran
at the same time. My other CS classes always had a math team ace or
two pulling up the average. Once I took them out of the mix, the
variance was gone.&lt;/p&gt;
&lt;p&gt;
There are so many subtle and not so subtle factors that can affect a
class that it&amp;#39;s impossible for &amp;#34;the research&amp;#34; to cover it all. Sure,
you can account for a few, particularly big and obvious ones but there
are so many more. Was the class before or after lunch or gym? What
about on the sunny side of the building getting the greenhouse affect
in the mid afternoon? What about just certain mixes of students. The
variables are endless.&lt;/p&gt;
&lt;p&gt;
Rather than telling us teachers how to teach based on &amp;#34;the research&amp;#34;
I&amp;#39;d much rather hear from, and/or talk to teachers about things
they&amp;#39;ve tried. What worked for them and what didn&amp;#39;t. Why, at least
from their perspective. Then I can pick and chose and try for
myself. While I&amp;#39;ve gotten some good ideas from research papers, the
amount is pretty meager compared to what I&amp;#39;ve learned from other
teachers.&lt;/p&gt;
&lt;p&gt;
All this said, I do think that there can be good and great research
and that good research is important.&lt;/p&gt;
&lt;p&gt;
Even if you don&amp;#39;t account for all the variables, researchers are
documenting practices and this is importance. I&amp;#39;ve learned much more
from teachers than from ed researchers about teaching but what I&amp;#39;ve
learned from teachers is ephemeral. It&amp;#39;s not recorded for all
time. The research can document these practices. We just have to take
a stronger line as a community in saying that &amp;#34;this is what we tried,
here are some of the variables, and here is what happened. It might
work for you or it might not, it&amp;#39;s not the one true way.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Another side where ed research can have a major positive impact is
that when researchers work with teachers they can develop practices
and tools together that directly help teachers. A great example of
this is what Mark Guzdial is doing with his teaspoon languages.&lt;/p&gt;
&lt;p&gt;
So anyway, after seeing all those tweets I felt I had to vent. I know
this is not a popular view in some of my circles but that&amp;#39;s okay,
contrary voices are important as well and as the designated old CS Ed
Curmudgeon I&amp;#39;m always happy to take that role :-).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Subtle Errors</title>
      <link>https://cestlaz.github.io/post/subtle-errors/</link>
      <pubDate>Fri, 02 Sep 2022 15:05:19 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/subtle-errors/</guid>
      <description>&lt;p&gt;
The semesters back up in full swing again - teaching 2 undergrad
classes in person - CS0 in Python and CS1 in C++ along with my teacher
certification class - Ethics via Zoom. Grand total of about 125
students. An error came up in the CS0 class the other day that
reminded me how tough it is not only to prepare students to deal with
all the things that can go wrong when learning to program but even for
a teacher to realize what&amp;#39;s going on.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code. It looks pretty straightforward and should work to
draw a square.&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; turtle
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; turtle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Screen()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crush &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; turtle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Turtle()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forward(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left(&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forward(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right(&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forward(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right(&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;forward(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crush&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right(&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exitonclick()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mainloop()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Problem is, it didn&amp;#39;t. Now, algorithmicaly this is correct and in fact
the actual code looks correct as well but the student couldn&amp;#39;t get it
to run.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an actual screenshot that resulted in the error. Can you spot
the problem?&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cestlaz.github.io/img/thonny-error.png&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;
I spotted it pretty quickly. Not because I&amp;#39;m any good at this but
because I&amp;#39;ve seen the error before. It turns out the student had named
their program file &lt;strong&gt;turtle.py&lt;/strong&gt; and so when line 1 tried to &lt;strong&gt;import
turtle&lt;/strong&gt; we ended up with a circular reference. Instead of loading the
turtle graphics module, it would try to load itself. Had the actual
error message remained on the screen it would have said something
about &amp;#34;circular reference&amp;#34; but that wouldn&amp;#39;t help a student and truth
be told it probably wouldn&amp;#39;t help most CS teachers in diagnosing the
problem. Now, the student wasn&amp;#39;t faultless here - I had explicitly
stated that they should name their program file &lt;strong&gt;t1.py&lt;/strong&gt; but we all
know how well students follow directions ;-).&lt;/p&gt;
&lt;p&gt;
This is just one example of the myriad issues that arise when teaching
programming. One could try to minimize these issue by working in
sandboxed environments but then when students leave class and the
sandbox. The sandbox makes life easier for the teacher but it&amp;#39;s really
only kicking the can down to someone else.&lt;/p&gt;
&lt;p&gt;
I remember this being a big deal when codecademy wa the big thing
around a decade ago. Everyone went to their site and &amp;#34;learned&amp;#34; how to
program. So many of them realized after finishing the course that they
couldn&amp;#39;t do anything outside of the little codecademy programming
window. This isn&amp;#39;t to say that Codecadmey wasn&amp;#39;t a good product or
service but students learning about how to deal with platform and
implementation issues is a real one.&lt;/p&gt;
&lt;p&gt;
This particular issue left some hints - the error mentioned the import
and said that it was circular but there are plenty of weird errors
like this - dealing with versions, file and module locations, build
systems and even things like disk quotas and file permissions that can
make learning to program much more of a minefield than it should be. &lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t have any real answer as to how and when these issues should be
dealt with - how much we should shield our students at first and how
we should expose them to real world issues but it&amp;#39;s probably something
teachers should be talking about more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching CS - How early and how often?</title>
      <link>https://cestlaz.github.io/post/cs-how-early/</link>
      <pubDate>Tue, 16 Aug 2022 15:38:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-how-early/</guid>
      <description>&lt;p&gt;
A big part of the CS4All movement has been making computer science
available at all grade levels. Of course that can mean many
things. Grade levels could be elementary, middle, and high school or
it can me k-2, 3-5, 6-8, 9-12 or maybe even every grade.&lt;/p&gt;
&lt;p&gt;
Does it mean required at every level or just an option?&lt;/p&gt;
&lt;p&gt;
This has led to many discussions and, at least from the ones I&amp;#39;ve
listened in on, the prevailing feeling from the CS side is all CS all
the time.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if this should be the case. It&amp;#39;s important to think about
other factors - bang for your buck, budgets, student workload,
available faculty, what are the other requirements, and more.&lt;/p&gt;
&lt;p&gt;
This question also isn&amp;#39;t limited to computer science, or at least it
shouldn&amp;#39;t be. K12 schooling is still a zero sum game - there are only
so many minutes in a school day and while CS is important, so too are
most if not all of the other subjects and some, like art and music are
in danger or being left by the wayside at the expense of CS. Of
course, on the other hand, there are some subject that I feel are
already given too much time or the wrong amount.&lt;/p&gt;
&lt;p&gt;
That said, this post is about CS. We have neither the funds nor the
faculty to offer CS as a requirement in every grade but is it even
necessary? I don&amp;#39;t know. An important part of offering CS in K12 is so
that it&amp;#39;s on a student&amp;#39;s radar so they can consider studying more
after HS. This is particularly important with some colleges requiring
students apply as a CS major before even attending. Another side is to
give a student the base level knowledge that we feel every educated
person should have just as we seek to do this in biology, chemistry,
history and so on.&lt;/p&gt;
&lt;p&gt;
I know that we can accomplish these goals with a single class
requirement and two years of offerings overall . How do I know this?
Because we did this at Stuy. Doing this requires two basic things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A well taught, well designed intro course that exposes students to
the subject.&lt;/li&gt;
&lt;li&gt;Covering enough material deeply enough so that students are well
prepared for the next steps in college should a student take them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The required intro gives the base level that everyone should have and
a more advanced follow up elective sets students up for success if
they want more in college. Truth be told the required course should
really be a year rather than a semester but we still made it work.&lt;/p&gt;
&lt;p&gt;
This fits well in the Stuyvesant program and given New York graduation
requirements adding a single required course or even a required year
fits pretty easily and adding electives also isn&amp;#39;t a problem.&lt;/p&gt;
&lt;p&gt;
If you can&amp;#39;t offer or require more then this can be enough. The
question, though, is - &amp;#34;is it ideal?&amp;#34; I&amp;#39;d be hard-pressed to say that
a school should require more than a year of CS. If you do it right and
follow up with electives a year is plenty. If you don&amp;#39;t do it right,
well, then multiple years of bad CS isn&amp;#39;t any better than 1. &lt;/p&gt;
&lt;p&gt;
What about earlier grades? Middle school? Standalone CS is nice but is
it necessary or are we better off embedding CS into other classes? I
haven&amp;#39;t landed on an opinion on this but I do know that we&amp;#39;ve had a
few middle school teachers graduate from my State Certification
Program and I&amp;#39;d love to get their opinions over the next few years. 
As a general statement, I think it&amp;#39;s safe to say that if you can fit
in some meaningful CS in middle school that would be great but if I
had a choice to either require it in middle school or in high school,
I&amp;#39;d opt for HS. Middle school is too far from college and work. Why
would I say this? Because of what I&amp;#39;ve noticed. There were periods of
time where CS, or at least programming or web dev were introduced in a
lot of Stuy&amp;#39;s feeder schools and more often than not, when I surveyed
students about past experiences they either barely remembered them
(wait, I think I did something like making a web page in 7th grade…)
or in any event based on my surveys, it made little difference towards
either success in High School CS nor in interest in doing more CS.&lt;/p&gt;
&lt;p&gt;
Finally, the primary grades. When the whole CSforAll thing got started
I noted that a lot of what we&amp;#39;d see in the elementary schools would be
a rebranding of stuff that already being done in schools that can
afford it - logic, problem solving, algorithms etc and also a
relabeling of already taught concepts using CS or CT vocabulary. This
is all good stuff and since it&amp;#39;s more foundational it&amp;#39;s probably
pretty important. Of course, when schools and teachers had the freedom
and budget, this was already happening prior to the CS movement even
if we didn&amp;#39;t call it CS.&lt;/p&gt;
&lt;p&gt;
So, do we need CS at all levels? Probably not. Would it be nice? Sure
but we&amp;#39;re not serving kids if we&amp;#39;re just CS zealots. We have to look
at the big picture and the whole student. If I ran a school system and
could only afford CS at one level I&amp;#39;d go high school as I outlined
above. If I could do two, I&amp;#39;d hop down to elementary school and then
fill in middle last. Of course, that&amp;#39;s just me.&lt;/p&gt;
&lt;p&gt;
Of course non of what I&amp;#39;ve said talks at all about digital citizenship
or fluency but that&amp;#39;s for another day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>End of summer program beginning of summer break</title>
      <link>https://cestlaz.github.io/post/cohort-3-end-of-summer/</link>
      <pubDate>Wed, 03 Aug 2022 11:45:33 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cohort-3-end-of-summer/</guid>
      <description>
&lt;p&gt;
Yesterday was the last day of classes for our current cohort. The
rest of the week and maybe weekend will be all grading all the time
and then I&amp;#39;ll try to tune out work for a couple of weeks to try to
recharge the batteries. Since there are some ongoing Hunter
administrative snafus I&amp;#39;m not all that optimistic on getting real down
time but we&amp;#39;ll see.&lt;/p&gt;
&lt;p&gt;
So, how did it go?&lt;/p&gt;
&lt;p&gt;
Overall I&amp;#39;m happy with the results. We had a much larger cohort -
almost three times the size of past years so that presented challenges
but at the end of the day the participants showed a lot of growth and
based on our anonymous survey the vast majority were very happy with
the experience. There were a couple who were not happy but in a large group,
particularly of teachers being taught, you&amp;#39;re not going to please
everybody.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Challenges
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
The large group was a challenge but I&amp;#39;m not really sweating it since I
don&amp;#39;t expect there to be cohorts nearly this large in the future. I
had a personal goal of getting NYC to around 100 certified teachers
ASAP and that&amp;#39;ll be done once this cohort finishes in the spring but I
suspect that as we move on, there will be less demand for teachers
getting an additional CS certificate while on the other hand, there
will be a slow and steady increase in demand for Masters programs. At
the same time, additional programs should start coming online across
the state.&lt;/p&gt;
&lt;p&gt;
The end result should be no more classes of 60.&lt;/p&gt;
&lt;p&gt;
We also had elementary school teachers for the first time. This added
an additional axis of complexity. We couldn&amp;#39;t do a whole lot about
some of it. The state created a K12 cert so there&amp;#39;s no way around it,
all students must learn the CS we feel is needed for a 12th
grader. Creating two tracks isn&amp;#39;t an option even though it would make
more sense.&lt;/p&gt;
&lt;p&gt;
The other challenge was the spread of expertise. Other than saying
that most of the participants were real troopers on both sides of the
experience spectrum I&amp;#39;ll leave this alone since it&amp;#39;s not appropriate
for a public post. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Good Stuff
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
As I just said, most participants were real troopers. Most of the
participants with strong CS backgrounds put on their teacher hats and
helped support less experienced teachers. We&amp;#39;d frequently drop in and
lurk in a breakout room to see the more expereinced guide the room and
it was rare to see one of them dominate and just &amp;#34;do the task&amp;#34;
(although it did occasionally happen). Likewise most of the
participants who came in raw showed tremendous progress and
growth. Many stayed for end of day office hours to go beyond what we
were asking because they wanted to master everything. &lt;/p&gt;
&lt;p&gt;
Also, based on the comments, the cohort is building a strong sense of
community. There were a couple of comments where a student or two felt
otherwise, but they were in an extreme minority (based on the
anonymous surveys) and from their full comments it looks like they
just didn&amp;#39;t buy into the program at all.&lt;/p&gt;
&lt;p&gt;
We also had a handful of participants from outside the city with five
from up near Ithaca. It was great adding them to the mix and I think
there will be some rich discussions in the Fall in curriculum
development when we can not only contrast schools but entire
districts.&lt;/p&gt;
&lt;p&gt;
Of course, at a base level, there&amp;#39;s also the fact that everyone got
through the program and there was a lot of growth across the board. &lt;/p&gt;
&lt;p&gt;
For me personaly, the highlight was getting to know a bunch of great
teachers and people and to be able to work with my team again. My team
from Stuy is still the thing I miss most at Hunter. It&amp;#39;s funny, we had
one of my CS colleagues from Hunter also on the team and he commented
on how great it was to work with this team and how well we worked
together. A number of students also pointed that out as a positive.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
A couple of things that stood out
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
These are just a few things that have been on my mind since
closing. Maybe they&amp;#39;re important, maybe not and I might change my own
mind down the line. Still, these are few random or tangential things
that stood out from the past month.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
The state of CS PD
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
This year, when I saw the spread of CS expertise, I decided to dig
deeper into teacher backgrounds. I also looked back to the teachers
from the first two cohorts who came in barely able to write &amp;#34;Hello
World!&amp;#34;&lt;/p&gt;
&lt;p&gt;
In many, indeed most of these cases the teacher had gone to the &amp;#34;usual
suspects&amp;#34; PD sessions - mostly through CS4All in NYC but sometimes
arranged independently by them or their school.&lt;/p&gt;
&lt;p&gt;
I then looked to see how long these teachers were doing these PDs.&lt;/p&gt;
&lt;p&gt;
In many cases it was years - three, four, five, or even more years of
going to CS training.&lt;/p&gt;
&lt;p&gt;
This really alarmed me. Well, actually, I already suspected this but
it was a sobering confirmation. I know a lot of people won&amp;#39;t want to
hear this but teachers attending CS &amp;#34;training&amp;#34; for multiple years
should be well beyond the most basic of programs. Even if they haven&amp;#39;t
used a text based language, after multiple years, they should be able
to transition to text fairly easily.&lt;/p&gt;
&lt;p&gt;
So, I know that a lot of people might be offended by my saying this
but I stand by it. There are some providers I know who do good work
but I think what I saw here is an indictment of the overall PD
approach that, to paraphrase what code.org said a few years ago,
&amp;#34;trained XXXXX CS teachers&amp;#34; in a very short period of time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Split the class
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Another interesting thing is that there weren&amp;#39;t a lot of comments from
participants about the mixed teacher levels in terms of sharing
experiences. On the other hand many would have loved us to be able to
split based on programming experience. I haven&amp;#39;t had a chance to do a
deep debrief with JonAlf and Topher who ran the methods components but
this was a little bit of a surprise. We&amp;#39;ll see if this becomes a
larger discussion topic in Curriculum Development.&lt;/p&gt;
&lt;p&gt;
On the splitting for programming level we couldn&amp;#39;t do that for
assorted reasons and moving forward I expect it not to be an issue.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Teaching Methods and Best Practices
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
We approach methods, and in fact our approach to teaching in general
is all about helping teachers build a toolbox. We have to do a better
job at communicating why this is our approach.&lt;/p&gt;
&lt;p&gt;
There were a couple of comments both in class and in the survey about
&amp;#34;best practices&amp;#34; and &amp;#34;the research&amp;#34; with respect to methods. I get it,
younger teachers are hit over the head with this type of edubabble
from their first education course through every department meeting,
PD, and observation.&lt;/p&gt;
&lt;p&gt;
The truth is that there are no &amp;#34;best practices,&amp;#34; there are practices
that under certain circumstances, based on a combination of students,
teacher, school, culture and more can be most effective for &lt;strong&gt;&lt;strong&gt;THAT
SPECIFIC TEACHER&lt;/strong&gt;&lt;/strong&gt; to use in &lt;strong&gt;&lt;strong&gt;that time at that place.&lt;/strong&gt;&lt;/strong&gt; Teachers
aren&amp;#39;t usually taught this, they get hammered with &amp;#34;best practice&amp;#34; and
&amp;#34;the research&amp;#34; but nobody ever tells them that while there are some
people doing great work in Ed research and CS Ed research, the field
is generally held in low regard, work is almost never replicated and
when you read most of it, there are tons of important variables that
the research leaves out.&lt;/p&gt;
&lt;p&gt;
On top of this, we can go down a long list of &amp;#34;best practices&amp;#34; which
were foisted upon teachers as the one true way only to be replaced a
few years later with the new &amp;#34;best practice.&amp;#34;&lt;/p&gt;
&lt;p&gt;
We believe in building a toolbox of content and techniques and we
trust teachers to know their own strengths and weaknesses as well as
their student needs and that they&amp;#39;ll use the right tool at the right
time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
Writing plans from scratch 
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Another thing I noticed was that when we got to the lesson planning
unit, a lot of teachers really wanted to base their work off of a
canned lesson. They said they wanted to adapt it but they were really
reluctant to come up with something on their own, only using other
resources for examples, references, etc.&lt;/p&gt;
&lt;p&gt;
I was a little surprised about this reluctance but upon thinking, it
makes sense. Even if they adapt lessons, CS PD and training is all
about providing canned lessons to teachers so in many cases, it&amp;#39;s what
they&amp;#39;re used to. Add to that the fact that this was for an Education
class, and to be honest, the demands and rigor of education classes
vary greatly  and in many cases the default approach is path of least
resistance. I get it. I did many an Ed class where I threw together a
quick paper from prefabbed sources to get my A for the semester. I&amp;#39;d
like to think, though that our program is a bit better than that.&lt;/p&gt;
&lt;p&gt;
I think the cohort ended up doing it right and with the right attitude
but I think it&amp;#39;s interesting to see what teachers are normally
presented with and how that contrasts, good or bad, with what my team
is selling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
What&amp;#39;s next
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
So, summer&amp;#39;s in the books. We&amp;#39;ll take this group through a few more
courses and in the Spring they&amp;#39;ll join the ranks of New York State
Certified CS Teachers. &lt;/p&gt;
&lt;p&gt;
Personally, I&amp;#39;m going to try to disengage from Hunter related stuff
for the next few weeks and try to recharge. There will be a few things
I have to deal with but I&amp;#39;ll try to keep them to a minimum. After a
few really hard years I&amp;#39;m hoping I&amp;#39;ll start up again at the end of the
month with some renewed energy.&lt;/p&gt;
&lt;p&gt;
I also have to give some serious thought to the long term both for
Hunter and me. Devorah turned 55 last November and I join her in
October so, as many of you know, we&amp;#39;ve got some potential big changes to
consider. More on that though once the year starts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>