<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csed on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/csed/</link>
    <description>C&#39;est la Z (csed)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Jan 2022 06:47:18 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/csed/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Do you need to know assembly to be a computer scientist?</title>
      <link>https://cestlaz.github.io/post/assembly/</link>
      <pubDate>Wed, 19 Jan 2022 06:47:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/assembly/</guid>
      <description>&lt;p&gt;
Another recent discussion online asked &amp;#34;do you need to know assembly
language to be a computer scientist?&amp;#34;&lt;/p&gt;
&lt;p&gt;
Sides quickly formed. On one side, it was a strict requirement. Some
going so far as saying you &lt;strong&gt;had&lt;/strong&gt; to start with it or at worst a
language like C. On the other side you had people claiming that it&amp;#39;s
wholly unnecessary for most CS graduates like many of the classes we
require of a CS major (I&amp;#39;m looking at you Calc II and beyond).&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t dispute that many people with CS degrees have great tech
careers and never program in assembly. Further, the idea that a low
level assembly programmer describes what a &amp;#34;computer scientist looks
like&amp;#34; or &amp;#34;should look like&amp;#34; is pretty off base.&lt;/p&gt;
&lt;p&gt;
On the other hand, I&amp;#39;d argue that a well educated computer scientist
should have some knowledge of low level concepts which can probably
best be explored through some exposure to assembly language.&lt;/p&gt;
&lt;p&gt;
To start, what is a computer scientist? As a field we still haven&amp;#39;t
worked that one out. Certainly, people employed as professors in
computer science departments are pretty much, by definition, computer
scientists but that&amp;#39;s the minority of CS majors.&lt;/p&gt;
&lt;p&gt;
To me, and this isn&amp;#39;t really a great formal definition, a person who
employs the creative and problem solving techniques associated with
computer science in their day to day can certainly call themselves a
computer scientist.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a wishy washy definition, I know but to me, it works. Someone
employed as a software engineer &lt;strong&gt;can&lt;/strong&gt; be a computer scientist or they
might not be. It depends on their job and how they approach it. Say
said SE is given screen descriptions, layouts and what to do when
events happen and they write code to implement this, they&amp;#39;re not being
a computer scientist. Likewise, if they implement an algorithm
specifically given to them for a task. On the other hand, if the same
person designs the interface making creative decisions involving
accessibility and usability or solves a problem using or designing an
algorithm then implementing one, then they would be, in my view acting
as a computer scientist.&lt;/p&gt;
&lt;p&gt;
Of course, in the general sense a SE could be a real software
engineer, software architect, or many more things as well.&lt;/p&gt;
&lt;p&gt;
So, does a computer scientist &lt;strong&gt;need&lt;/strong&gt; to actively know assembly?
No. That said, do they benefit from knowing something about it? I&amp;#39;d
say yes.&lt;/p&gt;
&lt;p&gt;
Years ago, I was watching a special with Itzhak Perlman, arguably the
greatest violinist of a generation and one of my favorites. He was
talking to and playing with a bunch of &lt;a href=&#34;https://en.wikipedia.org/wiki/Klezmer&#34;&gt;klezmer&lt;/a&gt; musucians. Or rather, I
should say trying to play with. Klezmer is something of a Jewish jazz
with a lot of improvisation. Perlman understood this, could
meaningfully converse about it with the other musucians but he had the
hardest time trying to keep up with them. Nobody could seriously say
that Izhak Perlman wasn&amp;#39;t and isn&amp;#39;t a brilliant musician and artist
but he really couldn&amp;#39;t play improvisational jazz. His training and art
are just in a different corner of the music world. That said, he was
certainly well versed in it. He knew jazz even though he didn&amp;#39;t
perform it.&lt;/p&gt;
&lt;p&gt;
I also saw this at a Bobby Mcferrin concert. He was performing with a
small string orchestra. I think maybe it was Gidon Kremer&amp;#39;s Kremerate
Baltica but I don&amp;#39;t remember. At one point he was calling out the
individual orchestra members to do some improv. It did not go
well. Again, these were all clearly master artists and they certainly
knew and were comfortable with Jazz, just not performing it on the
fly.&lt;/p&gt;
&lt;p&gt;
In case you really want to see what I&amp;#39;m talking about, I&amp;#39;ll give one
more example:&lt;/p&gt;


&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6mRT61rRSGc?t=37&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/iframe&gt;
&lt;p&gt;
Having some knowledge of assembly, or more specifically, how low level
things work is what I call a &amp;#34;latin&amp;#34; of CS. Understanding things like
memory or how a processor works help an individual understand buffer
overflows or why data types matter, why floating point calculations
are innacurate or why a hash table has to be sparse. They may never
program in assembly but some knowledge will make them a stronger
computer scientist. I would say the same for my other CS latin -
theory. They might not use it day to day but it will help shape their
decisions and make them a stronger software engineer or whatever.&lt;/p&gt;
&lt;p&gt;
So, can you be a gainfully employed tech person and never have seen
anything low level? Of course. Can you do computer science stuff and
say the same? Sure. But a well educated, well rounded computer
scientist will have had some exposure to low level concepts and have
some base level understanding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>If you build programs, teachers will come</title>
      <link>https://cestlaz.github.io/post/people-will-teach-cs/</link>
      <pubDate>Thu, 27 May 2021 06:53:26 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/people-will-teach-cs/</guid>
      <description>&lt;p&gt;
It&amp;#39;s been a month since my last post. In fact it seems that most of
the usual CS Ed bloggers are down in frequency this year. For me it&amp;#39;s
probably been Covid fatigue and the resulting funk but I&amp;#39;m going to
see if I can force myself to write more frequently.&lt;/p&gt;
&lt;p&gt;
So, the other day someone was asking about CS certification in NY
state on Facebook. One comment caught my eye. It was about Michigan
dropping all requirements to teach CS because, and I&amp;#39;m paraphrasing
here, nobody who knows enough CS to go into industry will ever become
a teacher.&lt;/p&gt;
&lt;p&gt;
I both resent and resemble that remark as do a handful of my
colleagues.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve heard this argument many times. A particularly disgusting version
goes &amp;#34;if we teach CS teachers too much CS they&amp;#39;ll leave for industry.&amp;#34;&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t buy it. That&amp;#39;s just an excuse and it&amp;#39;ll keep our students from
getting the teachers they both need and deserve. Why don&amp;#39;t I buy it?
Math and Science. CS is the hot subject these days and, at least in
theory, with a strong tech background you can &amp;#34;easily&amp;#34; get a high
paying job but CS wasn&amp;#39;t always the be all and end all. There were and
are other fields that pay well and can pull from our pool of potential
teachers.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s dig a little deeper. Nowadays you can become certified in math
or science in New York state by completing an &amp;#34;approved program,&amp;#34;
taking some state exams and jumping through a few hoops. This has led
programs in &amp;#34;math education.&amp;#34; Some of these  programs provide teachers
with a solid foundation in math but some, not so much. Back before no
child left behind, at least in New York City, you had to actually know
your math. You needed legit math credits as opposed to math-ed (which
can be legit or lame) and you had to get through the &amp;#34;board of
examiners&amp;#34; where you had to face a panel of teachers and assistant
principals who could grill you on all manner of content.&lt;/p&gt;
&lt;p&gt;
Where am I going with this?&lt;/p&gt;
&lt;p&gt;
Well, a math teacher who knows their math, at least in NY has plenty
of alternatives. Accounting has always been a mainstay but for the big
bucks we have wall street. How is it we have math teachers that know
math when wall street and those big bonuses beckon? Same thing with
some of the sciences - we&amp;#39;ve got big pharma right across the river.&lt;/p&gt;
&lt;p&gt;
The truth is that some people are good in their subject area and
actually want to become teachers. This might not be the majority of CS
people, math people etc. but there are some. Math and science might be
shortage areas in schools over time but somehow schools manage to find
teachers.&lt;/p&gt;
&lt;p&gt;
The problem with CS is that there was never a career path. If you knew
CS you couldn&amp;#39;t get certification so you had to go in through math or
some other subject. Then you had to find a school where you could
teach CS and of course, for seniority and job retention you were
always lumped in with another discipline.&lt;/p&gt;
&lt;p&gt;
Now, a career path is developing. We&amp;#39;ve got programs like mine at
Hunter through which a prospective teacher can become certified and we
have schools starting to offer CS and they&amp;#39;ll want to hire those CS
teachers.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;ll just take time.&lt;/p&gt;
&lt;p&gt;
Our first Masters cohort at Hunter has four students in it. Our
second, which will start in the Fall looks like it will have
around 6. These are small but from what I&amp;#39;m told, pretty good sizes
for a new program, particularly when there was zero advertising and
outreach. I&amp;#39;ve also started to get questions from undergraduate CS
students.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re not going to solve K12 CS education over night. We&amp;#39;ve got to play
the long game. Positions that need certified CS teachers are starting
to appear as are pathways to certification. There will be people who
want to teach and want to teach CS. If we give them the pathway they
will come.&lt;/p&gt;
&lt;p&gt;
As a final thought though, knowledgeable CS teachers do have a
choice. So do knowledgable math and science teachers. If they&amp;#39;re
leaving teaching or not even entering the profession it&amp;#39;s not because
of CS, math, or science. It&amp;#39;s because we&amp;#39;ve made teaching as a
profession so undesireable and those teachers have options. That&amp;#39;s why
I found that version of the argument I mentioned up at the top so
disgusting. People who don&amp;#39;t want CS teachers to know real CS are
really saying that the only way they can get and keep teachers is to
in fact keep them uneducated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New York City has Certified CS Teachers</title>
      <link>https://cestlaz.github.io/post/certified-teachers/</link>
      <pubDate>Tue, 23 Mar 2021 19:35:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/certified-teachers/</guid>
      <description>&lt;p&gt;
I&amp;#39;m super proud to say that New York City now has state certified
Computer Science Teachers!!!!!!&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cestlaz.github.io/img/cs-cert.png&#34; width=&#34;500px&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s been a long road - really long if you consider I got started on
my CS Ed journey decades ago and there&amp;#39;s a long road ahead but we hit
a major milestone. &lt;/p&gt;
&lt;p&gt;
I started at Hunter a little over five years ago and creating teacher
certification programs was one of the goals. Back then, the state had
neither CS certification nor CS standards. The certification area was
created a year or so ago and the standards were just adopted this past
December. Hunter&amp;#39;s programs were approved December 2019 and we started
our first advanced certificate cohort last summer. &lt;/p&gt;
&lt;p&gt;
Twenty one working teachers, all certified in another subject
area. They spent a big chunk of their summer with us all day every day
and continued on with classes and field work in the Fall. Many
finished last December while a few needed one more course which
they&amp;#39;re taking now. Earlier today on our Slack, teachers from that
cohort started sharing that they either received their state
certificates in the mail or that they looked themselves up on the
NYSED web site and confirmed that they were now certified to teach
computer science in the state of NY.&lt;/p&gt;
&lt;p&gt;
This is big news.&lt;/p&gt;
&lt;p&gt;
The entire cohort came in as strong teachers and they all grew
tremendously in terms of CS knowledge and their ability to teach
it. Now they represent the first of a growing group of certified CS
teachers - education leaders to provide a core of expertise in terms of
both CS content and how to teach it.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m super proud of the cohort and super proud to be part of this. One
of the best parts for me have been meeting and working with these
great teachers and having this new learning network form - hopefully
we can keep it growing for years to come. Another is being able to get
the band back together - I was able to bring in my old partners in
crime JonAlf and Topher to teach and anyone who&amp;#39;s seen them teach know
that they&amp;#39;re the best. I couldn&amp;#39;t include our other co-conspirator,
Sam, because he was on sabbatical and couldn&amp;#39;t work but hopefully that
will change next time around. Not having a team at Hunter has been
really one of the few downsides so being able to work with my &amp;#34;go to
guys&amp;#34; again was a blast.&lt;/p&gt;
&lt;p&gt;
We also have our Masters program well underway so the pipeline of CS
teachers is starting to form. &lt;/p&gt;
&lt;p&gt;
This is exciting news for New York City, Hunter and for me
personally. Long road ahead but as of today, a bunch of students in
NYC are being taught by state certified computer science teachers and
there will be more to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing CS Teachers - tools for remote instruction</title>
      <link>https://cestlaz.github.io/post/teacher-cert-tools/</link>
      <pubDate>Mon, 10 Aug 2020 06:07:26 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-tools/</guid>
      <description>&lt;p&gt;
Our summer intensive was supposed to be in person but COVID-19 changed
that in a hurry. We had to scramble to redesign and figure out how we
were going to run things.&lt;/p&gt;
&lt;p&gt;
We decided to go with the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zoom for live meetings &lt;/li&gt;
&lt;li&gt;Slack for chat&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git and GitHub&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub classroom for assignments &lt;/li&gt;
&lt;li&gt;GitHub repos for code distribution, class website and resource
sharing. &lt;/li&gt;
&lt;li&gt;GitHub discussions for off hour and long form discussion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While Zoom is a great platform it was lacking in a few areas so we
also ended up using: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://padlet.com&#34;&gt;Padlet&lt;/a&gt; as a collaborative writing space for groups&lt;/li&gt;
&lt;li&gt;Assorted whiteboarding tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#39;s the breakdown.&lt;/p&gt;
&lt;p&gt;
We used Zoom as you might imagine - big zoom for direct instruction
and whole class work and lots of breakout rooms. Screen sharing worked
great but the whiteboarding was less than ideal so we turned to screen
sharing with other tools. The big things missing from Zoom were a
collaborative writing/drawing space and flexibility for breakout
rooms. I would have loved to be able to spy on a breakout room or have
more fluidity between them but it still did a pretty good job
considering Zoom wasn&amp;#39;t designed for education. &lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://bigbluebutton.org/&#34;&gt;Big Blue Button&lt;/a&gt; is an open source alternative to Zoom. It&amp;#39;s design for
teaching so it has some of the features that Zoom lacks but it&amp;#39;s not
quite there yet in terms of quality and reliability.&lt;/p&gt;
&lt;p&gt;
Instead of the Zoom chat, we decided to use Slack. Zoom&amp;#39;s chat only
works while Zoom is up and there were times when the cohort was
working &amp;#34;offline.&amp;#34; Also, slack gave us both threads and different
channels as well as arbitrary private chats. &lt;/p&gt;
&lt;p&gt;
In addition to the general class chat we had channels like #git-fu, #java-fu, #fall-is-coming to discuss COVID-19 and the public schools,
#attendance  and a bunch of others. &lt;/p&gt;
&lt;p&gt;
Funny thing - this was the first time any of us had strong Slack
adoption. We&amp;#39;ve tried it before but never got buy in. This time we
did. Maybe because we were together morning through afternoon and when
we broke we were still in the same physical location with out
computers nearby. In any event, Slack was used for both in class and
out of class communication and is still being used now albeit at a
lower volume. &lt;/p&gt;
&lt;p&gt;
Slack also gave us a place, besides the zoom to build
community. Having some fun channels like #duckygram and #cs-educationy-goodness  set a light tone. Every day, Alex would wait
until right before our start to put a gif in the #attendance channel
each day outdoing the ridiculousness of the rest of the class. It was
the cohort that made the community but Slack as a platform helped.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m wondering if a I&amp;#39;ll get better buy in with my undergrads in a few
weeks as we&amp;#39;re starting the semester online but at least for this
cohort, it worked.&lt;/p&gt;
&lt;p&gt;
My only problem with Slack is the price. I have zero budget which
leaves us with the free tier. That means limited integrations  and
limited history. I might check out some self-hosted options like Zulip
and Rocketchat to see if they&amp;#39;re viable alternatives.&lt;/p&gt;
&lt;p&gt;
We originally planned to use GitHub discussions for longer form
communication. It hit most of the buttons for me – threaded
discussion, reply via email, customizable alerts. All good. It&amp;#39;s
lacking tags and search but it looked like it could be a viable long
form discussion platform. We kicked off with it but the class voted
with their feet. They kept going back to Slack so while GitHub was our
main platform for code, GitHub discussions fell by the wayside as
Slack won the day.&lt;/p&gt;
&lt;p&gt;
Along the way we learned some tricks. Even though Topher was paid for
teaching two courses, JonAlf two, and I was just officially
supervising and coordinating, all three of us were pretty much on all
the time. Ones strategy that developed was having one of us man Slack
while another ran the Zoom. I might be running a Zoom based activity
while Topher or JonAlf would answer questions or highlight and
emphasize key points on Slack. I don&amp;#39;t know yet if it helped the class
educationally or was a distraction but we all liked the
flow. Something to look at further. &lt;/p&gt;
&lt;p&gt;
We also had to figure out how not to double or triple respond to
questions. We each adopted an emoji and when a question was asked,
whoever got there first would mark the thread with that emoji letting
the others know we had it covered. &lt;/p&gt;
&lt;p&gt;
Another skill we mastered was the &amp;#34;slack-moji&amp;#34; poll - pre-staging
Slack polls and content to cut and paste over. Actually, there&amp;#39;s a
cool remote class tool, &lt;a href=&#34;https://prismia.chat/&#34;&gt;Primsia&lt;/a&gt; (formerly babylon.hosue) which is much
better at that than Slack but it isn&amp;#39;t up 24x7 and is more set up for
a teacher actively managing class discussion rather than a free form
chat.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d love to see Big Blue Button grow to be a suitable Zoom replacement
as it&amp;#39;s better suited for education and I&amp;#39;m hoping that Zulip proves
to be a good free alternative to Slack but regardless of specific
tool, the combination of video conferencing, chat, long form message,
and whiteboarding make up a pretty good remote classroom. It would be
nice if collaborative coding was easier but there aren&amp;#39;t that many
options there. &lt;a href=&#34;https://repl.it&#34;&gt;Repl.it&lt;/a&gt; is awesome but we decided to have them develop
on their local machines and adding a tool like &lt;a href=&#34;https://floobits.com/&#34;&gt;Floobits&lt;/a&gt; would have
been too much to ask for most of the cohort. &lt;/p&gt;
&lt;p&gt;
We think it all went pretty well. If given the option next summer, I&amp;#39;m
leaning towards a hybrid program as even without COVID-19, remote is
easier for many teachers for geographic and school scheduling
reasons. I figure open in person and maybe do one day or a couple of
half days a week on site and the rest remote. I think we&amp;#39;ll talk about
it as a cohort once the Fall begins and can start thinking about
cohort 2.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing CS teachers - Curricula don&#39;t add richness, teachers do</title>
      <link>https://cestlaz.github.io/post/teacher-cert-topics-curriculum/</link>
      <pubDate>Fri, 07 Aug 2020 07:25:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-topics-curriculum/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve frequently been asked for curricula. I&amp;#39;ll hear from a school or
someone otherwise involved in a school or education and they&amp;#39;ll ask
for a course they can drop in and teach.&lt;/p&gt;
&lt;p&gt;
I explain it doesn&amp;#39;t work that way. A syllabus or curriculum is only
so good. A great curriculum with a bad teacher will still be bad but a
great teacher can do a lot to salvage a horrible curriculum.&lt;/p&gt;
&lt;p&gt;
A curriculum only goes so far. At it&amp;#39;s most sparse, it&amp;#39;s a list of
topics. At the other end we frequently see worked out prescribed
lessons that can be a boon to a beginner but in the end constrains
great teachers. &lt;/p&gt;
&lt;p&gt;
As a side note, this was something I noticed years ago when touring
elementary schools for my own children. We saw one school where
everything was in lockstep - every classroom looked basically the
same. Every teacher taught the same subject at the same time as every
other teacher each day and what they taught and how they taught it was
tightly controlled. We opted for  a school where the teachers were
much more free to actually teach. The school in question was well
regarded and the more we dug in the more we realized that the
strictness the principal imposed helped bring the bad teachers up to a
certain level and got most students through the standardized tests but
there was no joy. Great teachers weren&amp;#39;t allowed to teach. It was a
perfect example of a Bloomberg era stat mill. &lt;/p&gt;
&lt;p&gt;
Anyway back to CS.&lt;/p&gt;
&lt;p&gt;
I was thinking about this while we watched the summer cohort&amp;#39;s topic
presentations. Three of the topics were ones that I teach annually -
AI Search, NLP, and Cipher decryption. Some of the others I&amp;#39;m planning
on mixing in next year. The presentations and supporting materials
were all terrific but in every case, the teachers chose to spin and
emphasize aspects different to those I would emphasize.&lt;/p&gt;
&lt;p&gt;
In the case of the cipher decryption lesson, the cohort emphasized the
machine learning type aspect. I spin the lesson more towards a
recommender system. Neither is better or worse. My guess is that we
each selected aspects that were exciting to us and riffed on
those. Similarly the other groups brought up nuances and emphases that
differed from mine. &lt;/p&gt;
&lt;p&gt;
It was terrific.&lt;/p&gt;
&lt;p&gt;
If you look at a syllabus, the search topic might just say &amp;#34;Depth
First Search.&amp;#34; It might be in the recursion section of the class and
thus lead you to teaching a recursive solution or it might be in
the data structure / stack section and lead you to implement your own
stack. If the curriculum is fleshed out it&amp;#39;ll give more specifics but
will it talk about states and state space? How about implicit data
structures? &lt;/p&gt;
&lt;p&gt;
There&amp;#39;s so much richness to a well taught course that&amp;#39;s never captured
by a curriculum and that includes tangents, side stories and limitless
discoveries. &lt;/p&gt;
&lt;p&gt;
When I talk to my students decades later it&amp;#39;s usually not those lines
on the syllabus they remember but the richness that lives in the ether
of a well taught class.&lt;/p&gt;
&lt;p&gt;
So cool that our certification program created an environment where
we&amp;#39;ve been able to mix the spices from so many different chefs and
each of us is leaving with something new and richer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing CS Teachers - what to leave in, what to leave out</title>
      <link>https://cestlaz.github.io/post/teacher-cert-methods-choosing/</link>
      <pubDate>Thu, 06 Aug 2020 07:37:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-methods-choosing/</guid>
      <description>&lt;p&gt;
Teachers always make decisions in their courses - what to leave in,
what to leave out. I&amp;#39;ve seen programming and data structure classes
where everything is written from scratch and others where a few things
are explained and the students just use built in types like the
java LinkedList  or Arrays.sort() method.&lt;/p&gt;
&lt;p&gt;
Do too much from scratch and you&amp;#39;ll never finish the curriculum. Do to
little and the students won&amp;#39;t really understand what&amp;#39;s going on and
walk a path towards being programmers or coders rather than computer
scientists. Most teachers work somewhere between the extremes.&lt;/p&gt;
&lt;p&gt;
We not only had to make these decisions for our CS content but also
for our methods. We decided to leave out two particular
methods that are very popular - pair programming and Parsons
problems. We did mention both in passing and did a little talk on pair
programming but the treatment was far less than say live coding,
subgoal labeling or the many other teaching techniques we decided to
explicitly cover. &lt;/p&gt;
&lt;p&gt;
Why did we leave out these two topics? &lt;/p&gt;
&lt;p&gt;
Partly pragmatism and pragmatism is something that&amp;#39;s always left out
when talking about teaching. Let&amp;#39;s look at Parsons problems. If you&amp;#39;re
unfamiliar with them, they&amp;#39;re basically scrambled code
fragments. Students have to put them in order. They&amp;#39;re cool puzzles
and a nice change of pace. but you have to create them and get them to
your students. That didn&amp;#39;t fit all that well with us. By the time we
got to content that would benefit from Parsons problems our pace or approach
didn&amp;#39;t really fit using them. It&amp;#39;s also worth noting that we haven&amp;#39;t
seen any good online Parson problem generator systems which would be
both a boon to problem creation and potentially distribution and
assessment. &lt;/p&gt;
&lt;p&gt;
There just wasn&amp;#39;t that much bang for the buck in giving them more than
lip service. Since our cohort was composed of experienced teachers, we
were confident that they can find the appropriate Parsons problems
resources and use them where appropriate in their classes.&lt;/p&gt;
&lt;p&gt;
On pair programming we had similar pragmatic issues - it didn&amp;#39;t fit
all that well given how tight the program was and we had to figure out
how bet to do it remotely on the fly. We also knew that the cohort had
all been to at least some NYC CS4All training and so were at least
exposed to the idea. Still, we, or more accurately, Topher, who&amp;#39;s had
great success getting student buy in did do a brief talk on the
subject. Some of the things we covered were: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to motivate pair programming in a collaborative way&lt;/li&gt;
&lt;li&gt;What activities can you give the navigator while the driver&amp;#39;s
setting up the environment to involve them.&lt;/li&gt;
&lt;li&gt;How in the &amp;#34;real world&amp;#34; some developers love PP and some hate it
and that there are many variations on the theme.&lt;/li&gt;
&lt;li&gt;You&amp;#39;d not always going to get student buy in.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That last point is &lt;strong&gt;very&lt;/strong&gt; important. Teachers are going to try things
that don&amp;#39;t always work and unfortunately, the system of evaluation
doesn&amp;#39;t promote such necessary experimentation. What&amp;#39;s more every time
you go to a professional development or training session or head
something online it&amp;#39;s about how the presented did it and it worked
perfectly and if you follow the same recipe it&amp;#39;ll work for you. It
might, but then, it might not. It&amp;#39;s all about building the toolbox of
tricks and using them when appropriate and even then, not every lesson
is going to be John Keating or Jaime Escalante on the big screen.&lt;/p&gt;
&lt;p&gt;
So, in the end we made choices. We&amp;#39;re they the right ones? I think
so. Next time around the cohort will be different and the
circumstances a little as well. Will we make the same choices? Maybe,
we&amp;#39;ll have to wait and see. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS Teacher Certification - Topics in CS</title>
      <link>https://cestlaz.github.io/post/teacher-cert-topics/</link>
      <pubDate>Wed, 05 Aug 2020 07:13:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-topics/</guid>
      <description>&lt;p&gt;
Officially, the last course of the summer was &amp;#34;Modern Topics in
Computer Science.&amp;#34; The idea was that K12 CS teachers on the one hand
need depth beyond the typical terminal high school course, hence data
structures and also breadth so that they could create electives, mix
teasers in to the regular courses, or help precocious students with
independent or semi-independant explorations. &lt;/p&gt;
&lt;p&gt;
If someone was teaching this in a typical fall or spring semester
course, they&amp;#39;d probably have a list of topics and spend a couple of
weeks on each. We wanted to do it a little differently. &lt;/p&gt;
&lt;p&gt;
The original thought was to integrate some of the topics in with the
earlier computer science but there weren&amp;#39;t too many opportunities due
to the compressed nature of the program. Instead, a few days before we
wrapped up data structures we gave the cohort a list of potential
topics and asked them to select one. Since the cohort had all already
been teaching CS and had differing content backgrounds we also
encouraged them to choose a topic not on the list.&lt;/p&gt;
&lt;p&gt;
When it was time for them to begin work on the topics part of the
intensive, they all shared their desired topic. Fortunately, things
worked out. We ended up with two solo students and a bunch of small
teams. The teams were tasked with learning about the topic and
designing a lesson or unit covering it. This could be for their
current students or some other hypothetical group. Each group would
also have to create a program or programs to show an implementation
and or use of the topic. Once they chose their topics, we picked a few
out of the remaining selections as topics that we&amp;#39;d present. &lt;/p&gt;
&lt;p&gt;
The next few days were Topher, JonAlf and I delivering our topics and
the cohort working in groups. When they worked, we&amp;#39;d drop in and
support. The final two days consisted of the groups presenting their
work.&lt;/p&gt;
&lt;p&gt;
The topics they selected were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data Mining&lt;/li&gt;
&lt;li&gt;Public Key Encryption&lt;/li&gt;
&lt;li&gt;Blockchain&lt;/li&gt;
&lt;li&gt;Natural Language Processing&lt;/li&gt;
&lt;li&gt;Classic AI - Decision Trees&lt;/li&gt;
&lt;li&gt;SQL / Cyber Security&lt;/li&gt;
&lt;li&gt;Visualization&lt;/li&gt;
&lt;li&gt;Machine Learning / Cipher Decryption&lt;/li&gt;
&lt;li&gt;Genetic Algorithms&lt;/li&gt;
&lt;li&gt;Classic AI - Search&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We weren&amp;#39;t sure exactly what to expect but we were blown away both in
terms of the CS content as well as what they prepared in terms of
lessons and units. &lt;/p&gt;
&lt;p&gt;
Since this is just year one of the program we thought we&amp;#39;d get ahead
of the game and set up a site where we could host and share these
units and other resources so check them out &lt;a href=&#34;https://github.com/hunter-teacher-cert/Teacher-Resources/blob/master/README.org&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
We didn&amp;#39;t have a strict format for the cohort to use so each one is a
little different but each link&amp;#39;s README.md file will get you started.&lt;/p&gt;
&lt;p&gt;
As I said, we were blown away by their work but super proud that we
also have the bonus of being able to make their work available to the
general CS Ed community. If you&amp;#39;re looking to create a unit in any of
these, check them out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing CS Teachers - adding methods to our madness</title>
      <link>https://cestlaz.github.io/post/teacher-cert-methods/</link>
      <pubDate>Tue, 04 Aug 2020 06:47:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-methods/</guid>
      <description>&lt;p&gt;
Our summer intensive was, well, pretty intensive. We met all day every
day for a month and knocked out four classes. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Programming (CS1)&lt;/li&gt;
&lt;li&gt;Data Structures&lt;/li&gt;
&lt;li&gt;Topics&lt;/li&gt;
&lt;li&gt;Methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you ever took or taught a summer session class, you know that time
is tight and generally you cover a little less than in a fall or
spring semester class. N credits in 5 weeks just isn&amp;#39;t the same as
those same N credits spread over 13. &lt;/p&gt;
&lt;p&gt;
How did we recapture some time? First, we had some pre-work and second
we integrated some of the courses. We couldn&amp;#39;t really do it with
programming and data structures and we were less successful at
integrating the topics than we liked but it made the most sense with
methods, in fact, I think the methods part of the class was more
successful as a result of it&amp;#39;s integration with the other subjects
than it would have been as a stand alone.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what we did.&lt;/p&gt;
&lt;p&gt;
We first thought about covering methods as we taught topics - that is,
present something using some teaching technique, cover the topic and
then also dive in to the technique. This turned out to be a
mistake. The teachers that came in with a strong CS background  seemed
fine but for the ones newer to the subject matter, it was too much at
once. We had to alter course.&lt;/p&gt;
&lt;p&gt;
So we did.&lt;/p&gt;
&lt;p&gt;
We continued to model various methods and sometimes made a side remark
here or there but focused on the CS. After a few days in, we were
ready to spend a day on pedagogy. We broke the class into groups and
had them reflect on the content we taught - how did we teach it? Why
did we approach it the way we did? Did it work? This led to some rich
discussion of both CS teaching techniques and teaching in general. We
were very happy with how it all went.&lt;/p&gt;
&lt;p&gt;
We then went back to content but added more side bits here and there
about the teaching methods - as they became more comfortable with the
CS we were able to integrate more methods talk in with the CS talk. At
our next formal pedagogy lesson, we again talked about new techniques
that were modeled but also looked at alternative approaches and
took a deeper look at our individual cohort members student
populations. &lt;/p&gt;
&lt;p&gt;
Some of the methods we discussed included: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Live Coding &lt;/li&gt;
&lt;li&gt;Subgoal labeling&lt;/li&gt;
&lt;li&gt;Make predictions&lt;/li&gt;
&lt;li&gt;Modifying existing code&lt;/li&gt;
&lt;li&gt;code tracing&lt;/li&gt;
&lt;li&gt;diagramming&lt;/li&gt;
&lt;li&gt;scaffolded assignments (code skeletons)&lt;/li&gt;
&lt;li&gt;Rubber Duck Debugging&lt;/li&gt;
&lt;li&gt;Code sharing (presenting)&lt;/li&gt;
&lt;li&gt;writing implementations of library code&lt;/li&gt;
&lt;li&gt;slack techniques (reacts polls, channels, ) &lt;/li&gt;
&lt;li&gt;thought-grooming/sparking warm-up Qs/tasks&lt;/li&gt;
&lt;li&gt;relevant quotes at warm-up&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and more but the list doesn&amp;#39;t really do the discussion justice. Take
&amp;#34;live coding&amp;#34; for example - that&amp;#39;s not just writing code in front of
the class. There&amp;#39;s a rich discussion here - how do you narrate? Is it
truly live or from a note sheet? How about discussing workflow while
modeling it? How about live coding subgoals? The actual class is much
richer than just &amp;#34;live coding.&amp;#34;&lt;/p&gt;
&lt;p&gt;
In addition to integrating methods into the teaching of content, we
also merged it with the topics course for some of the assessment. For
topics, each group created a class or unit on some area of CS and
included in the documents they prepared and presentation was a
discussion of how it might bet taught. I know that they all came in as
experienced teachers so weren&amp;#39;t starting with nothing but man, they
knocked it out of the park. I&amp;#39;ll be talking more about the topics in a
later post.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll probably say this a lot in my summer intensive wrap up posts but
it was such a treat working with a cohort of great educators and also
to have two of the best teachers I know to work with as the teaching
team.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing teachers to teach CS</title>
      <link>https://cestlaz.github.io/post/teacher-cert-recap-intro/</link>
      <pubDate>Mon, 03 Aug 2020 06:16:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-recap-intro/</guid>
      <description>&lt;p&gt;
Now that the summer portion of Hunter College&amp;#39;s Advanced Certificate
in Teaching Computer Science is over I thought I&amp;#39;d do a
postmortem. That is, a few posts about what we did and how it all
went. &lt;/p&gt;
&lt;p&gt;
First, though, an overview of the program.&lt;/p&gt;
&lt;p&gt;
The Advanced Certificate program is geared towards teachers who are
currently certified in another subject area who wish to earn an
additional New York State teaching certificate in Computer
Science. Aspiring teachers - people who don&amp;#39;t currently have either a
Masters degree or any teaching certification can enroll in our Masters
in Computer Science Education program. We&amp;#39;re starting a small cohort
of five on that in the Fall. &lt;/p&gt;
&lt;p&gt;
The certificate program consists of a bunch of graduate classes plus
field work which is required by the state. Over the summer we covered
four of the classes. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Programming - essentially a CS1 type course.&lt;/li&gt;
&lt;li&gt;Data Structures - since K12 teachers should go deeper than the last
HS course which is typically APCS-A.&lt;/li&gt;
&lt;li&gt;Topcs in Compute rScience - since K12 teachers need a wide breadth
of CS knowledge.&lt;/li&gt;
&lt;li&gt;Methods - since teachers need to know how to teach CS.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the fall, we&amp;#39;ll continue with Ethics in Computer Science and
Curriculum Development which also includes the field work.&lt;/p&gt;
&lt;p&gt;
For this summer we started with a cohort of 22 practicing teachers but
lost one along the way. They all came from different schools and we
had all five boroughs represented. Most of the teachers worked in high
schools but we had some middle school representation and in terms of
current certifications, we had at least math, special ed, and science
represented but that&amp;#39;s something we didn&amp;#39;t officially track.&lt;/p&gt;
&lt;p&gt;
Staffing wise, it was me along with two of my long time collaborators
JonAlf Dyrland-Weaver and Topher Mykolyk. JonAlf and Topher are two of
the best educators out there and part of my former core team at
Stuy. That team is the biggest thing I still miss having come over to
Hunter. They&amp;#39;re quite simply the best.&lt;/p&gt;
&lt;p&gt;
The program ran basically all day every day during the month of
July. we knew it would be tight so we also added on some pre-work
which made sure all participants had some experience with Java prior
to our official start. &lt;/p&gt;
&lt;p&gt;
More will be revealed over the next few posts but I&amp;#39;ll spoil the
ending - I&amp;#39;m super proud of our 21 participants - while they still
have more work to do to earn their certifications, if I ran a school,
I&amp;#39;d love to have any of them teaching my CS classes. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not planning on writing much about the programming and data
structure classes except possibly through the methods eye because both
of those courses are pretty well established and cut and dry but I do
plan to write at least the following: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The methods course &lt;/li&gt;
&lt;li&gt;More on the methods course &lt;/li&gt;
&lt;li&gt;The topics course &lt;/li&gt;
&lt;li&gt;Use of tools for remote teaching &lt;/li&gt;
&lt;li&gt;Our overall philosophy in designing and running the program.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, stay tuned for more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do It First</title>
      <link>https://cestlaz.github.io/post/do-it-first/</link>
      <pubDate>Mon, 10 Jun 2019 08:00:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/do-it-first/</guid>
      <description>&lt;p&gt;
Reading Garth Flint&amp;#39;s end of year &lt;a href=&#34;https://gflint.wordpress.com/2019/06/07/last-day-of-school-and-done-with-java/&#34;&gt;post&lt;/a&gt; and Alfred Thompson&amp;#39;s &lt;a href=&#34;http://blog.acthompson.net/2019/06/how-well-can-you-code-projects-you.html&#34;&gt;follow up&lt;/a&gt;
had me thinking about a couple of things. &lt;/p&gt;
&lt;p&gt;
One was spurred when Garth
wrote &amp;#34;They also have to figure out the math before they code.&amp;#34; This
made me think about all the details we sometimes &lt;a href=&#34;https://cestlaz.github.io/posts/2014-11-21-little-details.html/&#34;&gt;take for for
granted&lt;/a&gt;. Things that are hard for our students that we just know. It&amp;#39;s
frequently math that we might find trivial but it could also be much
simpler things.&lt;/p&gt;
&lt;p&gt;
When I write Java code I have a snippet that provides most of my main
boilerplate. For a beginner, just typing in all the details and
getting them right might be a chore. Heck, even typing is something we
take for granted. Beginners who can type have a distinct
advantage. They can focus on the code rather than on the keys. That
boilerplate code might take ten minutes of typing alone and that&amp;#39;s not
adding in any typos or understanding errors. &lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t have anything to add here that I didn&amp;#39;t address in earlier
posts and Garth&amp;#39;s post has some great points so if you haven&amp;#39;t read it
yet, I recommend you take the few minutes to do so.&lt;/p&gt;
&lt;p&gt;
The other thoughts were spurred from this part of Garth&amp;#39;s post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;did only two of the six assignments myself.  With the others I saw
 the solution so did not code them up.  I should have coded them up
 just so I could answer questions better for the students.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Alfred expounded on this in his post and there was a good twitter
conversation around it as well.&lt;/p&gt;
&lt;p&gt;
As a general rule as teachers we should have solved the problems
before we assign them and not just theoretically be able to solve
them. Actually writing up the solutions can also clue us in on some of
the difficulties that our students might face. Particularly if we
really try to look at the assignment using our student&amp;#39;s eyes. &lt;/p&gt;
&lt;p&gt;
Neal Plotnick tweeted: &lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The lack of
experience with coding for Ts combined with canned, cloud based
curricula has allowed classrooms to be created with Ts pushing
assignments out and relying on automated grades. I don’t have a CS
degree but I made sure to code my python assignments first.&lt;/p&gt;&amp;mdash;
neil plotnick (@NeilPlotnick) &lt;a
href=&#34;https://twitter.com/NeilPlotnick/status/1137340790554996736?ref_src=twsrc%5Etfw&#34;&gt;June
8, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
And this is a real concern for me. I get it - we&amp;#39;re building a plane
while flying it and that places teachers in situations where they have
to learn on the fly and at times they&amp;#39;ll  have to assign problems
before they have  solutions. Long term, however, this is a big problem
and I suspect it&amp;#39;s not going to go away. &lt;/p&gt;
&lt;p&gt;
On the other side of the coin though are times when it&amp;#39;s best not to
have a solution before the class. Sure, if you&amp;#39;re teaching a merge
sort or doing a unit on inheritance you probably should have your
ownb written solutions but there are a whole bunch of topics which
lend themselves to doing things on the fly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;debugging&lt;/li&gt;
&lt;li&gt;software engineering practices&lt;/li&gt;
&lt;li&gt;how to approach &amp;#34;random&amp;#34; problems&lt;/li&gt;
&lt;li&gt;practical &amp;#34;programming&amp;#34; techniques&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;can all benefit from an on the fly lesson. &lt;/p&gt;
&lt;p&gt;
Coding or teaching on the fly, when used appropriately allows the
teacher to model best practices in real situations. Of course this is
difficult to truly replicate if you teach the same class again later
in the day or if you revisit the class next year but it can be a
valuable tool. When you get a bug - a real bug not a planted one in
your code, you can really model techniques to solve the problem and
you can involve the class in finding that solution.&lt;/p&gt;
&lt;p&gt;
This can all be pretty scary. You can end up going down the wrong path
and never finish building whatever you&amp;#39;re building but overall it can
be a very valuable experience for the students. &lt;/p&gt;
&lt;p&gt;
The other consideration is that you can teach a great lesson this way
but it would probably get a low rating on Danielson or whateve
nonsense rubric your district uses for teacher evaluation.&lt;/p&gt;
&lt;p&gt;
None of this is to say that you don&amp;#39;t want to prepare. Most of the
time I&amp;#39;ll have solutions worked out or if not, I&amp;#39;ll have written
similar solutions countless times before but that said, there&amp;#39;s
sometimes value in exploring in the wild or as one of my early
supervisors put it &amp;#34;calling an audible.&amp;#34;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blog For Self Professional Devleopment</title>
      <link>https://cestlaz.github.io/post/blog-for-pd/</link>
      <pubDate>Thu, 16 May 2019 07:12:44 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/blog-for-pd/</guid>
      <description>&lt;p&gt;
Lat day of the 2019 &lt;a href=&#34;https://www.ncwit.org/summit/2019-ncwit-summit-women-and-it&#34;&gt;NCWIT Summmit&lt;/a&gt;. Got up crazy early, got back from
my run and saw this when I checked Twitter:&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;A1: CSTA,
Twitter chats like this one, &lt;a
href=&#34;https://twitter.com/guzdial?ref_src=twsrc%5Etfw&#34;&gt;@guzdial&lt;/a&gt;
and &lt;a
href=&#34;https://twitter.com/alfredtwo?ref_src=twsrc%5Etfw&#34;&gt;@alfredtwo&lt;/a&gt;&amp;#39;s
blogs among others. In all cases because those places start from
assuming I&amp;#39;m a CS teacher, rather than starting from assuming
I&amp;#39;m a teacher who is better at teaching something else. &lt;a
href=&#34;https://twitter.com/hashtag/csk8?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#csk8&lt;/a&gt;
&lt;a
href=&#34;https://t.co/6DO77fzq0j&#34;&gt;https://t.co/6DO77fzq0j&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Sarah Judd (@SarahEJudd) &lt;a
href=&#34;https://twitter.com/SarahEJudd/status/1128829652145979392?ref_src=twsrc%5Etfw&#34;&gt;May
16, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
I don&amp;#39;t usually participate in Twitter chats. The format doesn&amp;#39;t
really work for me. I do frequently lurk though and while I didn&amp;#39;t see
this tweet until the morning after, another &lt;a href=&#34;https://twitter.com/Todd_Lash/status/1128816582048673793&#34;&gt;one&lt;/a&gt; by my &lt;a href=&#34;https://twitter.com/Todd_Lash&#34;&gt;Todd Lash&lt;/a&gt; caught
my eye and I&amp;#39;ll probably comment on that at some point in the near
future.&lt;/p&gt;
&lt;p&gt;
On Sarah&amp;#39;s tweet I&amp;#39;ll say that CS teachers should certainly frequent
Alfred and Mark&amp;#39;s blogs. I subscribe to and enjoy both. I&amp;#39;ll add
something that I&amp;#39;ve said before and that is if you&amp;#39;re a CS teacher you
should also blog.&lt;/p&gt;
&lt;p&gt;
I get it - it takes time, it&amp;#39;s hard to put yourself out there and if you&amp;#39;re a
relatively young teacher you might feel like you don&amp;#39;t have much to
say but I say so what.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been blogging on and off for nine years now. I have no reason to
believe I have anything more than a small readership but I do
periodically get surprised at a conference with a &amp;#34;hey, I love your
blog.&amp;#34; Comments are few and far between and from &amp;#34;the usual
suspects&amp;#34; but as I sad above, so what.&lt;/p&gt;
&lt;p&gt;
Pick a lesson you just did and describe it. That&amp;#39;s all it takes. Try
something different a week later? Write it up. Rinse and repeat.&lt;/p&gt;
&lt;p&gt;
Why have I found writing a blog to be good self-PD?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing the experience or the lesson makes me think through it
again. What worked, what didn&amp;#39;t.&lt;/li&gt;
&lt;li&gt;When I do a similar lesson in the future, I can look back on what I
did. It helps in iterating towards becoming a better teacher.&lt;/li&gt;
&lt;li&gt;I get to see how I&amp;#39;ve evolved as a teacher over time. You don&amp;#39;t get
this immediately but blog for a few years and then reread some early
posts. &lt;/li&gt;
&lt;li&gt;You could get some comments. I don&amp;#39;t get a lot but the ones people
have left have proven useful to me. Some of the ones from people who
disagree have been the most useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On top of this, some other new teacher might discover something you
wrote up and find inspiration from it. &lt;/p&gt;
&lt;p&gt;
So, jump in and try it. Blogging for self-PD. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Give me a break (and a continue)</title>
      <link>https://cestlaz.github.io/post/break-continue/</link>
      <pubDate>Wed, 01 May 2019 08:39:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/break-continue/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;What can I do to discourage my students from using the &amp;#34;break&amp;#34;
statement?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That was more or less the gist of the comment and it elicited some
good responses. This time the conversation was on Facebook but I&amp;#39;ve
seen this one and participated in it many times before. I never liked
the question when presented as a &amp;#34;how can I stop them&amp;#34; one.  I equally
dislike when the offered advice is basically &amp;#34;never use break no
matter what&amp;#34; or something similar. When writing code the best advice
is rarely to never or always do something. The question should really
be &amp;#34;when is it appropriate for my students to use a break statement
and how can I steer them  towards using it correctly.&amp;#34; The answer, of
course is &amp;#34;it depends.&amp;#34;&lt;/p&gt;
&lt;p&gt;
For those unfamiliar with the statements, &lt;code&gt;break&lt;/code&gt; jumps to the end and
exits the loop or switch statement that encloses it. The &lt;code&gt;continue&lt;/code&gt;
statement jumps up to the next iteration of its enclosing loop. I&amp;#39;ll
show some examples below.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s true that you never &lt;strong&gt;need&lt;/strong&gt; to use break but in my opinion, if
used correctly it can create clearer code. Let&amp;#39;s look at a related
situation. Suppose you write a function to find and return some item
from  a data set (in pseudocode):&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You could tighten it up a bit but there are two things that I don&amp;#39;t
like about the above solution. First, it goes through the entire data
set even if the item you&amp;#39;re searching for is near the beginning. You
could fix that by putting in a more complex loop boolean:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; numitems &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;found &lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Second. you&amp;#39;ve got the conditional after the loop. I find the
following much clearer:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To me this is perfectly clear. Look for an item, if and when we find
it, we&amp;#39;re done so let&amp;#39;s get out of here. If not, the loop finishes and
we return the not found stuff at the end. It&amp;#39;s clean, easy to
understand, and potentially a little faster.&lt;/p&gt;
&lt;p&gt;
You have a similar situation with &lt;code&gt;break&lt;/code&gt;. Without it you might have
code like this:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And with:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Not significantly different. &lt;/p&gt;
&lt;p&gt;
People who don&amp;#39;t like the break statement usually adhere to a very
strict interpretation of structured programming - one entry point, one
exit point but I&amp;#39;d argue that break (and continue) are not like
arbitrary jumps. They&amp;#39;re well defined and don&amp;#39;t introduce spaghetti
code. They either specifically exit a bounding language construct or
jump to the next iteration. Actually, now that I think about it,
&lt;code&gt;exceptions&lt;/code&gt; can be used in a way that mucks with clear code in a much
more dangerous way than break and continue can.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an example with continue:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
as opposed to:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Which is better? It&amp;#39;s purely subjective. Nothing wrong with either.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll share a final example. This one lifted from an &lt;a href=&#34;https://cestlaz.github.io/post/globals-breaks-and-returns/&#34;&gt;older post&lt;/a&gt; on
&amp;#34;best practices.&amp;#34; If you&amp;#39;re writing an event handler, you could put
the exit event in the loop boolean but I find including it
as a case using a &lt;code&gt;break&lt;/code&gt; to be cleaner:&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
At the end of the day, &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;, like most langauge
constructs can be used for either good or evil. There have been times
when they&amp;#39;ve led me to cleaner code so I&amp;#39;ve used them. At other times,
using them would have been forced.&lt;/p&gt;
&lt;p&gt;
If we agree that &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; can be appropriate, the other
question is when to introduce them. One comment from the most recent
Facebook thread on this (name withheld since that&amp;#39;s a semi-private
forum) was that it shouldn&amp;#39;t be right off the bat but rather after
they&amp;#39;re comfortable with loops, conditionals and booleans so that they
can use the new constructs when they make sense and not willy-nilly. I
tend to agree with this.&lt;/p&gt;
&lt;p&gt;
Personally, I think it&amp;#39;s important to show our kids constructs like
&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; and it&amp;#39;s also important for us to talk about
good code and &lt;a href=&#34;https://cestlaz.github.io/posts/best-practices-cli/&#34;&gt;best practices&lt;/a&gt; but the important thing is that we don&amp;#39;t
have our kids blindly follow any practice but empower them to make good
decisions based on their situations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seam Carving and Dynamic Programming</title>
      <link>https://cestlaz.github.io/post/seam-carving/</link>
      <pubDate>Mon, 22 Apr 2019 13:51:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/seam-carving/</guid>
      <description>&lt;p&gt;
It&amp;#39;s spring break and for me that&amp;#39;s always been a good time to explore
some new ideas.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s one that some of you might like, particularly if you&amp;#39;re
teaching APCS-A or something similar. &lt;/p&gt;
&lt;p&gt;
Many APCS-A teachers do a unit on image processing using the &lt;a href=&#34;https://docs.google.com/viewer?url=http%253A%252F%252Fmedia.collegeboard.com%252FdigitalServices%252Fpdf%252Fap%252Fpicture-lab-studentguide.pdf%0A&#34;&gt;picture
lab&lt;/a&gt; (&lt;a href=&#34;http://www.apcs.mathorama.com/index.php?n=Main.PictureLab&#34;&gt;alternate resource&lt;/a&gt;). Image processing is a nice platform to
explore two dimensional arrays. You basically use a 2D array of pixels
(points) to represent an image. You can just use a 2D array of ints
and store 0-255 at each location for a grayscale image and three ints
per pixel for red, green, blue. For this you can just use a simple
2D array of some color class - I think there&amp;#39;s even one built into
Java that you can use.&lt;/p&gt;
&lt;p&gt;
I like to use the PPM format to save and later reload the images. PPM
is a simple text format. It starts with a header, then an optional
comment (starting with #), the width and height (4x4 in the example
below), then the maximum color number. Here&amp;#39;s an example:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
P3
# feep.ppm
4 4
15
 0  0  0    0  0  0    0  0  0   15  0 15
 0  0  0    0 15  7    0  0  0    0  0  0
 0  0  0    0  0  0    0 15  7    0  0  0
15  0 15    0  0  0    0  0  0    0  0  0
&lt;/pre&gt;
&lt;p&gt;
You can even cut and paste the above into a file and view it with an
image viewer. &lt;/p&gt;
&lt;p&gt;
You can find the full format specification &lt;a href=&#34;http://netpbm.sourceforge.net/doc/ppm.html%0A&#34;&gt;here&lt;/a&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Netpbm_format&#34;&gt;alternate resource&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;
The picture lab has a bunch of interesting exercise ideas but if
you&amp;#39;re looking for something &amp;#34;next level&amp;#34; check this out:&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/6NcIJXTlugc&#34;&gt;https://www.youtube.com/embed/6NcIJXTlugc&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;p&gt;
Seam Carving is no longer a new cutting edge
technique but it still blows me away. It&amp;#39;s also a really cool project
for more advanced students for two reasons: one, it&amp;#39;s not a toy
assignment - it&amp;#39;s from real research and two, it contains a very
approachable example of dynamic programming which I&amp;#39;ll talk about in a
bit.&lt;/p&gt;
&lt;p&gt;
If you watch the video, there are two pieces that can sound
intimidating. One is the &amp;#34;dynamic programming algorithm.&amp;#34; The other is
when they talk about the &amp;#34;gradient magnitude.&amp;#34; &lt;/p&gt;
&lt;p&gt;
Gradient magnitude. That sounds pretty hard. Actually, it could be
worse. When I first starting looking at the basics of image processing
it was described as &amp;#34;the derivative of the pixels.&amp;#34; &lt;strong&gt;The dirivative of
the pixels????&lt;/strong&gt; I have to know calculus for this?????? Not really. I
hate it when they use big words for simple ideas. All they&amp;#39;re really
talking about is the difference between the color of neighboring
pixels. That is, how much the color changes from one pixel to the
next. Let&amp;#39;s say you have a greyscale image (or have converted an image
to greyscale by averaging the red green and blue values), if you have
a vertical row of pixels with all the values of, let&amp;#39;s say 200 and the
row right next to it is also of values 200, then the two lines are of
the same color - there is no difference. If one pixel has a value of
200 and its neighbor has a value of 50, it changes quite a lot.&lt;/p&gt;
&lt;p&gt;
The APCS-A picture lab describes a simple way to calculate this in
exercise 9 (linked above). You can also just do a search on &amp;#34;edge
detection tutorial&amp;#34; or &amp;#34;sobol edge detection tutorial&amp;#34; or something
similar.&lt;/p&gt;
&lt;p&gt;
For Seam Carving, you have to find a sequence of pixels from one side
of the image to the other where the sum off all the differences is the
lowest. This is where the dynamic programming comes in.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_programming&#34;&gt;Dynamic Programming&lt;/a&gt; is a technique that, in basic terms takes a
problem that decomposes into subproblems and you store the optimal
subproblem solution rather than recalculating it.&lt;/p&gt;
&lt;p&gt;
Probably the easiest example is Fibonacci numbers. You can generate
Fibonacci numbers recursively using something like this:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fib(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;fib(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s very simple but it gets very slow very fast. That&amp;#39;s because it
keeps recalculating the same subproblems over and over and over.&lt;/p&gt;
&lt;p&gt;
You can &amp;#34;fix&amp;#34; this by creating a list of previously found Fibonacci 
numbers and just return them rather than recalculating:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fibs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# make room for 1000 fib numbers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; fibs[n] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# we already have the answer, just return it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fibs[n]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# otherwise, calculate it, store it, return it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fib(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;fib(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          fibs[n]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and that&amp;#39;s a dynamic programming solution for Fibonacci numbers,
specifically using a technique known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Memoization&#34;&gt;memoization&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;
How does this apply to finding the proper seam to remove? The one with
the lowest total change? &lt;/p&gt;
&lt;p&gt;
First, go through the image array and build a second 2D array where
each element contains the pixels &amp;#34;gradient magnitude&amp;#34; or change using
either the method described in task 9 of the picture lab or
elsewhere. &lt;/p&gt;
&lt;p&gt;
For the first row, the sum of each pixels path so far is just the
array element.&lt;/p&gt;
&lt;p&gt;
For each successive row, the value of any pixel is going to be it&amp;#39;s
value plus one of the values abov it, either up left, up center, or up
right. Specifically, the elements new value will be it&amp;#39;s value + the
smallest of the above three.&lt;/p&gt;
&lt;p&gt;
For example, given this array representing the color changes:&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;/img/seam-mat1.png&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
When calculating the second item in the second row, you&amp;#39;ll consider
the three values above it:&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;/img/seam-mat2.png&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
The smallest is 0 so that 2 remains a 2. If we do this for every
element in the second row we get the following:&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;/img/seam-mat3.png&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
The green boxes added a 0 from the line above but the yellow ones
added the smallest non zero value from the above  row. Note that the
edges just considered the two values above them and didn&amp;#39;t wrap.&lt;/p&gt;
&lt;p&gt;
Working the rest of the way through, you get this final array:&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;/img/seam-mat4.png&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
You can now easily identify the best seam to remove by finding the
smallest value in the bottom row and working your way up to the top.&lt;/p&gt;
&lt;p&gt;
All together this is very doable by an advanced APCS-A student and the
results are very cool, particularly if you do it in an interactive
environment like processing.&lt;/p&gt;
&lt;p&gt;
So, check out seam carving. I&amp;#39;ll leave you with one more link to a
longer presentation on the topic: &lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=ZBtXl3EuU14&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZBtXl3EuU14&#34;&gt;https://www.youtube.com/watch?v=ZBtXl3EuU14&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS Teacher PD at Grow with Google</title>
      <link>https://cestlaz.github.io/post/pd-at-gwg/</link>
      <pubDate>Fri, 12 Apr 2019 08:12:54 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-at-gwg/</guid>
      <description>&lt;p&gt;
Yesterday we held our third monthly Professional Development session
for teachers of &amp;#34;APCS-A, Similar, and Beyond.&amp;#34; It&amp;#39;s great to see that
we&amp;#39;re starting to form a core of a community of CS teachers teaching
some of the more advanced classes as there is a core group that keeps
coming back for more. Even better is the fact that we&amp;#39;re gaining a
couple of new teachers at each session.&lt;/p&gt;
&lt;p&gt;
Last time, we were at &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt;, a cloud provide that has been
very involved in education since their creation  and has been a
tremendous boon to my education projects over the years. &lt;/p&gt;
&lt;p&gt;
This time we were hosted at &lt;a href=&#34;https://events.withgoogle.com/grow-with-google-in-nyc/#content&#34;&gt;Grow with Google&lt;/a&gt;&amp;#39;s new New York City
space. It&amp;#39;s a great space on the first two floors of Google&amp;#39;s main
building in Chelsea - 111 8th avenue. GWG looks like it will be a
terrific resource for New Yorkers with workshops ranging from coding,
resume writing, digital skills, and more. They also have offerings for
both kids and adults. &lt;/p&gt;
&lt;p&gt;
They were also great hosts, providing a great room for us to run our
session as well as a nice dinner to keep the teachers fueled.&lt;/p&gt;
&lt;p&gt;
As usual, we had two major themes for our PD. First the pedagogy. My
former colleage Topher started with a pair programming workshop. &lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;/img/gwg-topher.jpg&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
Pair programming is a pretty common technique but it&amp;#39;s deceptively
difficult to do well. It&amp;#39;s not as simple as &amp;#34;work in groups of two&amp;#34;
and it can be a challenge to make sure both students are engaged and
progressing while using this practice.&lt;/p&gt;
&lt;p&gt;
Topher ran the group through a pair programming exercise and led a
discussion as to some of the strategies he uses and some of the
challenges he&amp;#39;s face. I found it very helpful. Even small suggestions
like when he has each pair draw their &amp;#34;team flag&amp;#34; on a piece of paper
which they&amp;#39;ll hold up if they want to ask for help. In the discussion
after the workshop I mentioned that I&amp;#39;ve had more success with pair
programming when I relate it to a series of code review lessons I&amp;#39;ve
been doing and that if people were interested I&amp;#39;d talk about those
lessons at a future session.&lt;/p&gt;
&lt;p&gt;
Then we had dinner after which I did the content piece.&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;/img/gwg-z.jpg&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
We first look at a bit of &lt;a href=&#34;https://ccl.northwestern.edu/netlogo/&#34;&gt;NetLogo&lt;/a&gt; for image procesing mostly so I
could introduce the participants to NetLogo since it&amp;#39;s really an
underused, underappreciated environment. Then we talked a bit about
the APCS-A image lab. This led to the meat of the content piece. We
took a look at &lt;a href=&#34;https://www.youtube.com/watch?v=6NcIJXTlugc&amp;amp;list=WL&amp;amp;index=44&amp;amp;t=0s&#34;&gt;this video&lt;/a&gt; on seam carving. When I first saw it, I was
blown away. Now it&amp;#39;s an old technique but I&amp;#39;m still blown away by how
it can be used as both motivation and a a platform to teach some
dynamic programming. We then did a brief overview behind the basic
ideas of dynamic programming and then developed the dynamic
programming algorith that&amp;#39;s used in Seam Carving. I&amp;#39;ll probably write
all of this up in more detail in a future post.&lt;/p&gt;
&lt;p&gt;
Overall it was a great event. We have one more PD scheduled for May
and then we&amp;#39;ll start it up again in the Fall.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s great to have amazing partners like Google and Digital Ocean to
help support our CS teachers and I&amp;#39;m looking forward to work with both
of them for years to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Choosing A Textbook</title>
      <link>https://cestlaz.github.io/post/choosing-a-textbook/</link>
      <pubDate>Sun, 31 Mar 2019 10:41:16 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/choosing-a-textbook/</guid>
      <description>&lt;p&gt;
Now and again there are requests on the assorted CS Education forums
asking about which text book to use. These requests are usually for
APCS-A. There are usually a number of &amp;#34;I&amp;#39;m very happy with …&amp;#34;
replies but I thought I&amp;#39;d take a bit of a deeper dive into what
teachers might want to consider when evaluating a textbook.&lt;/p&gt;
&lt;p&gt;
It was never an issue when I started as a math teacher. The choice was
generally already made and the school had one book for each subject
level. Sometimes there were two if the school was transitioning from
one book to another.&lt;/p&gt;
&lt;p&gt;
The older books were in general more rigorous and at the same time
more terse. The newer ones were more accessible but never seemed to
give enough guidance for kids to approach the harder
problems on their own. &lt;/p&gt;
&lt;p&gt;
In general, most teachers I know used them primarily as a source for
homework problems.&lt;/p&gt;
&lt;p&gt;
In the CS world, it seems like we have more options. &lt;/p&gt;
&lt;p&gt;
When I first starting teaching APCS-AB at Stuy we had to buy new books
as the enrollment had just shot up. There weren&amp;#39;t many books that
covered both the programming and the data structures but I found one
nad it was a good one:&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;&lt;img src=&#34;https://pictures.abebooks.com/isbn/9780314933072-uk.jpg&#34; alt=&#34;https://pictures.abebooks.com/isbn/9780314933072-uk.jpg&#34; title=&#34;https://pictures.abebooks.com/isbn/9780314933072-uk.jpg&#34; /&gt;&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
It was both accessible and was thorough. It wasn&amp;#39;t a great source of
exercises but it was no worse than the other options.&lt;/p&gt;
&lt;p&gt;
When we moved to C++ it was pretty easy as the same book was still
available, albeit now in two parts:
&amp;lt;div&amp;gt;
&amp;lt;figure class=&amp;#34;z_image_right&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/31pkP2rZj5L._BO1,204,203,200_.jpg&#34; alt=&#34;https://images-na.ssl-images-amazon.com/images/I/31pkP2rZj5L._BO1,204,203,200_.jpg&#34; title=&#34;https://images-na.ssl-images-amazon.com/images/I/31pkP2rZj5L._BO1,204,203,200_.jpg&#34; /&gt;&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;&amp;lt;img src=&amp;#34;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51BS6W1XRRL._SX394_BO1,204,203,200_.jpg&#34; alt=&#34;https://images-na.ssl-images-amazon.com/images/I/51BS6W1XRRL._SX394_BO1,204,203,200_.jpg&#34; title=&#34;https://images-na.ssl-images-amazon.com/images/I/51BS6W1XRRL._SX394_BO1,204,203,200_.jpg&#34; /&gt;&amp;#34; width=&amp;#34;150px&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
&amp;lt;/div&amp;gt;
When we went to Java we couldn&amp;#39;t find a book that covered both the
programming and the data structures but settled on this one: &lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;&lt;img src=&#34;https://i.ebayimg.com/images/g/N4oAAOSw4bVTmzOV/s-l1600.jpg&#34; alt=&#34;https://i.ebayimg.com/images/g/N4oAAOSw4bVTmzOV/s-l1600.jpg&#34; title=&#34;https://i.ebayimg.com/images/g/N4oAAOSw4bVTmzOV/s-l1600.jpg&#34; /&gt;&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
Nowadays, particularly with data structures no longer being in issue
at most high schools there are many more choices and even back then
there was more to consider than I&amp;#39;m sure I realized.&lt;/p&gt;
&lt;p&gt;
When we recommend books to our colleagues we&amp;#39;re probably not being as
helpful as we can when we say &amp;#34;we like ….&amp;#34;&amp;#34;&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s important to think about how the text book is going to be
used. &lt;/p&gt;
&lt;p&gt;
Some text books weave a project, toolkit, or theme throughout
the chapters. That&amp;#39;s great if the teacher&amp;#39;s going to align the course
closely with the textbook. If you don&amp;#39;t however, it can make later
chapters harder on the students. If the text book develops, let&amp;#39;s say,
a graphics library in the early chapters and the teacher doesn&amp;#39;t do
the same, when the later chapters rely on this library students will
find themselves in a bit of trouble. &lt;/p&gt;
&lt;p&gt;
Some textbooks develop these large projects or libraries but do so as
add ons to each chapter. For most teachers that&amp;#39;s probably a better
bet.&lt;/p&gt;
&lt;p&gt;
Does the textbook have a rich set of problems, questions, and
examples? I haven&amp;#39;t found many that are great but then it&amp;#39;s probably
not as important these days with resources like &lt;a href=&#34;https://codingbat.com/java&#34;&gt;Coding Bat&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Does the textbook present material in a way similar to the teacher? If
it is, is that a good thing or not? On the one hand, it might make the
book easier for the student that&amp;#39;s &amp;#34;getting it&amp;#34; in class and then the
book and the class reinforce each other. On the other hand, if I&amp;#39;m not
connecting with a student, it&amp;#39;s probably better if the textbook takes
on a different voice.&lt;/p&gt;
&lt;p&gt;
There are more questions one should ask themselves when desciding on a
new textbook but I think you get the idea.&lt;/p&gt;
&lt;p&gt;
For my classes, I&amp;#39;ve never strictly used the textbook. It&amp;#39;s more meant
as a reference and alternate resource for the kids. For this reason, I
like a book that is more on the tutorial side. I generally don&amp;#39;t use
them for assignments but if the book has good ones, so much the
better. As we cover a unit in class, I want the book to be available
for the student who might need extra support. Nowadays, with so many
free resources out there I try to leverage them as well. For my
beginners at Hunter, I&amp;#39;ve been using &lt;a href=&#34;https://automatetheboringstuff.com/&#34;&gt;this&lt;/a&gt; and am pretty happy with it.&lt;/p&gt;
&lt;p&gt;
So, what am I missing? What else should we be considering more so than
just &amp;#34;I like the book.&amp;#34;
&amp;#34;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adapting A Nifty Assignment</title>
      <link>https://cestlaz.github.io/post/adapting-a-nifty-assignment/</link>
      <pubDate>Sat, 16 Mar 2019 08:20:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/adapting-a-nifty-assignment/</guid>
      <description>&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;&lt;img src=&#34;http://nifty.stanford.edu/2019/popyack-nifty-post-it/samples/animation/Animated_325.gif&#34; alt=&#34;http://nifty.stanford.edu/2019/popyack-nifty-post-it/samples/animation/Animated_325.gif&#34; title=&#34;http://nifty.stanford.edu/2019/popyack-nifty-post-it/samples/animation/Animated_325.gif&#34; /&gt;&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
The &lt;a href=&#34;http://nifty.stanford.edu/&#34;&gt;Nifty Assignments&lt;/a&gt; session at SGICSE is always a popular one.&lt;/p&gt;
&lt;p&gt;
Go to &lt;a href=&#34;http://nifty.stanford.edu/&#34;&gt;the site&lt;/a&gt; and you&amp;#39;ll find links to all the assignments presented
from 1999 to the present year.&lt;/p&gt;
&lt;p&gt;
On the one hand, it&amp;#39;s a great resource. On the other, the assignments
vary in nifty-ness depending on one&amp;#39;s personal taste. To me, there
seemed to be a run of nifty assignments that were really just &amp;#34;take a
generic assignment and fancy up the graphics&amp;#34; mixed in with one&amp;#39;s that
I found really cool. There&amp;#39;s also no way to really tell if an
assignment scratches your fancy without clicking through and reading
all of them.&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d talk about one of the assignments presented at this past
SIGCSE. I don&amp;#39;t think I&amp;#39;ll have an opportunity to use it directly but
I did find it pretty nifty. I also thought I&amp;#39;d share some tweaks I&amp;#39;d
consider if I were to use it.&lt;/p&gt;
&lt;p&gt;
The assignment is Jeffrey L. Popyack&amp;#39;s &lt;a href=&#34;http://nifty.stanford.edu/2019/popyack-nifty-post-it/&#34;&gt;Post-It Pandemoniim&lt;/a&gt; assignment.&lt;/p&gt;
&lt;p&gt;
At first glance, or rather at the start of the presentation it seemed
a pretty lightweight assignment - kids make a pixelated image by
putting colored postit notes on a grid. That&amp;#39;s a simple, nice
intro to 2D arrays but not all that nifty. The nifty part came when
you drilled down into the details. &lt;/p&gt;
&lt;p&gt;
The assignment starts with a GIF image. First you process it  with a program
provided hich produces sheets describing a 3x5 section of the overall
image. These sheets are ultimately distributed to the students
perofming the activity. This still doesn&amp;#39;t sound tremendously deep but
the activity also lets you talk about file formats with color
palettes. The idea that instead of storing the rgb triple for each
pixel you store an index into a palette of 256 colors that&amp;#39;s also
embedded into the file. This is a great way to introduce indirect
lookups. Another feature Poplyack spoke about was compression. He
mentioned the project lending itself to Run Length Encoding. The idea
that if the image has a run of adjacent pixels of the same color,
let&amp;#39;s say 9 reds in a row, instead of encoding them as &amp;#34;RRRRRRRRR&amp;#34; you
would use something like &amp;#34;9R.&amp;#34; Add this all together and it&amp;#39;s pretty
nifty. &lt;/p&gt;
&lt;p&gt;
I did have a problem, though with the compression part. During the
talk, Poplyack talked about Run Length Encoding which is pretty simple
and approachable to beginners. GIF, however, as far as I know uses
Lempel-Ziv compression which is much more complex.&lt;/p&gt;
&lt;p&gt;
If I were to use this assignment, I&amp;#39;d probable make a few changes. I&amp;#39;m
not sure which of the following I&amp;#39;d actually do but here&amp;#39;s what I
would think about.&lt;/p&gt;
&lt;p&gt;
First I would consider using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Netpbm_format&#34;&gt;NetPBM&lt;/a&gt; formats. Some of these formats
are simple ASCII. You can see some examples on the &lt;a href=&#34;https://en.wikipedia.org/wiki/Netpbm_format&#34;&gt;Wikipedia&lt;/a&gt;
page. This lets them go directly from the file to the poster. You also
have binary encoded versions of the format which adds a layer of
complexity if desired.&lt;/p&gt;
&lt;p&gt;
The second thing I would consider is using &lt;a href=&#34;https://en.wikipedia.org/wiki/PCX&#34;&gt;PCX&lt;/a&gt; files instead of
GIFs. PCX is a pretty simple format. It uses a color palette and also
RLE compression so while it&amp;#39;s no longer as well known as GIF I think
it might present a more accessible way of getting to a format with Run
Length Encoding and a palette.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not sure of the exact direction I&amp;#39;d go in with this assignment but
these are the additional things I&amp;#39;d think about. It&amp;#39;s pretty nifty as
is but as with a lot of nifty assignments, part of the fun is
customizing it for your situation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evaluating Java IDES for teaching teachers.</title>
      <link>https://cestlaz.github.io/post/java-ides/</link>
      <pubDate>Fri, 08 Mar 2019 13:29:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/java-ides/</guid>
      <description>
&lt;p&gt;
Since Hunter uses C++ as it&amp;#39;s core language, I haven&amp;#39;t used Java much
in the past three years. That&amp;#39;s going to change pretty soon. Once we
start offering our CS teacher Certificate and Masters programs I&amp;#39;ll
once again start teaching with Java as that&amp;#39;s one of the langauges
that we want to prepare our teachers with.&lt;/p&gt;
&lt;p&gt;
That means deciding on a set of tools and so I&amp;#39;ve been spending time
evaluating Java programming environments with an eye on the
beginner since not only do the teachers I work with have to be
comfortable with the tool but more importantly they will have to be
able to support the tool for all of their students.&lt;/p&gt;
&lt;p&gt;
One tool we&amp;#39;re likely to use is &lt;a href=&#34;https://repl.it/&#34;&gt;repl.it&lt;/a&gt;. That&amp;#39;s an online environment
for Java and a bunch of other languages. There&amp;#39;s a lot to like about
it and teachers might go with it or a similar cloud based option in
their classes but it&amp;#39;s important that we also prepare teachers to
build programs locally.&lt;/p&gt;
&lt;p&gt;
So, here&amp;#39;s my criteria and here&amp;#39;s what I found.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
The tool has to install easily on all platforms
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I started with my desktop Linux machine. I&amp;#39;m running LinuxMint which
is pretty mainstream and I installed the Java tools using Mint&amp;#39;s
package manager. The packages are openjdk-11 and it looks like running
Java 10. If the IDE or editor I installed  didn&amp;#39;t work off the bat it
was no good. If it installed and I liked it I&amp;#39;ll pass it off to
friends who use Windows and Macs to see if the install there is
equally seamless.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
The tool has to be easy to run 
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
After install you have to be able to run it easily. No fancy &lt;code&gt;java
-jar blah blah blah&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
I&amp;#39;m not looking for a professional tool
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;Professional tools can be too compex and do too much for students. I
was looking for the sweet spot of giving a nice amount of support but
not giving away the store.&lt;/p&gt;
&lt;p&gt;
Here are the tools I looked at (and you can debate if something
belongs in the other category in some cases):&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-4&#34;&gt;
Editors
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-4&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Emacs&lt;/li&gt;
&lt;li&gt;Gedit&lt;/li&gt;
&lt;li&gt;Vim&lt;/li&gt;
&lt;li&gt;Sublime Text&lt;/li&gt;
&lt;li&gt;Atom&lt;/li&gt;
&lt;li&gt;Jedit&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-5&#34;&gt;
IDES
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-4&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Eclipse&lt;/li&gt;
&lt;li&gt;DrJava&lt;/li&gt;
&lt;li&gt;Geany&lt;/li&gt;
&lt;li&gt;BlueJ&lt;/li&gt;
&lt;li&gt;IntelliJ&lt;/li&gt;
&lt;li&gt;VSCode&lt;/li&gt;
&lt;li&gt;JGrasp&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Editor vs IDE
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
The line between editor and IDE is a blurry one. I tend to think of an
editor as multi-purpose and multi-language where an also useful for
non programming text realted tasks whereas an IDE comes with more
programming bells and whistles. The truth is, though. that some IDES
can do well with non programming tasks and many editors are pretty
close to IDEs.&lt;/p&gt;
&lt;p&gt;
In any event, for a teacher, there&amp;#39;s something to be said for keeping
it &amp;#34;close to the metal&amp;#34; and have them use an editor to edit source
code and compile from the command line. This doesn&amp;#39;t mean they
shouldn&amp;#39;t also see IDEs and perhaps use them with their students but
a teacher should know a little more about what&amp;#39;s going on than just
load a program, write some code, and click run. If a teacher is that
limited you end up in situations similar to that common comment from
people who finish a beginner course on Codecademy - &amp;#34;I finished the
course and I can program in their environment but I don&amp;#39;t know how to
actually make something anywhere else.&amp;#34;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
The Editors
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Here the idea would be start as I mentioned above. Edit files adn then
compile on the command line. Eventually, though, many of these tools
can be used as IDEs&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-8&#34;&gt;
Emacs
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;https://www.gnu.org/software/emacs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve got to start with my tool of choice although I can&amp;#39;t really be
unbiased. I think it gets a bad wrap because it&amp;#39;s old and out of the
box looks plain but, yes, you can use your mouse and it does have
menus. The upside is that it can do everything an IDE can do and a
thousand times more. I do email, read rss feeds, maintain my calendar
and more in Emacs. &lt;/p&gt;
&lt;p&gt;
The downside is that it doesn&amp;#39;t do Java well out of the box and kids
like shinier objects. &lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t think I&amp;#39;d start the teachers with Emacs but I&amp;#39;d probably shift
my instruction to using it at some point and show some of the cooler
features (many highlighted in my &lt;a href=&#34;https://cestlaz.github.io/stories/emacs/&#34;&gt;Emcacs videos&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-9&#34;&gt;
Gedit
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.gnome.org/Apps/Gedit%0A&#34;&gt;https://wiki.gnome.org/Apps/Gedit%0A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This is a plain simple editor. You can bucket in notepad+ and whatever
the basic Mac editor is in here. Nothing special and nothing
fancy. It&amp;#39;s easy enough to load, edit a file and save but not much
more. I&amp;#39;d be fine using it were it not for better options.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-10&#34;&gt;
Vim
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.vim.org/&#34;&gt;https://www.vim.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
No&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-11&#34;&gt;
Sublime Text
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-11&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sublimetext.com/%0A&#34;&gt;https://www.sublimetext.com/%0A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This was the hotness for a while and it&amp;#39;s a pretty slick editor. I
can&amp;#39;t recommend it for teachers though for two reasons. One is that
it&amp;#39;s not free (although it isn&amp;#39;t expensive). The other is that it&amp;#39;s
not open source. There were other hot editors before sublime and when
their companies folded or sunset the editor all those plugins and
customizations had to be redone on a new platform. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-12&#34;&gt;
Atom
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-12&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;https://atom.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Atom&amp;#39;s an editor I want to like. It&amp;#39;s open source and looks pretty
neat but it seems more focused on the JS ecosystem. I couldn&amp;#39;t find
enough Java related plugins to make it better than Gedit although it
was easy to theme and customize the keys. Were I not an Emacs guy I&amp;#39;d
probably use Atom for much of my non-Java development but it doesn&amp;#39;t
seem like a great fit for Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-13&#34;&gt;
Jedit
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-13&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jedit.org/&#34;&gt;http://www.jedit.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This looked like the strongest contender for Java. Not too
complicated. Nice syntax highlighting out of the box. It doesn&amp;#39;t do
completion but that&amp;#39;s arguably a good thing when teaching
programming (incidentally, Emacs doesn&amp;#39;t do completion out of the box
but it can be added so you can up the tools ability as the class moves
along). From my limited explorations you can install plugins like a
Java Linter and you can run a console from inside JEdit which means
you can actually type things like &lt;code&gt;javac file.java&lt;/code&gt; and then run the
program all from within the editor.&lt;/p&gt;
&lt;p&gt;
Jedit also has some nice builtin macros for boilerplate code like
setters and getters.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-14&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-14&#34;&gt;
IDEs
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-14&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div id=&#34;outline-container-headline-15&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-15&#34;&gt;
Eclipse 
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-15&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org&#34;&gt;https://www.eclipse.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve used eclipse before and as a Java environment, it&amp;#39;s actually
pretty nice. You can customize the keys so I set mine to Emacs. It has
a lot of plugins, you can compile and test your program from within
the IDE and do tons of other things. It&amp;#39;s a VERY nice professional
tool.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t like it for teaching for three reasons. First, it does too
much. By giving too much professional support kids rely too much on
the tool. Second, it&amp;#39;s made for big projects using build systems not
small AP class programs consisting of one or two files where you run
javac manually. Yes, you can do this in Eclipse but it seems more
awkward. Third, becasue there&amp;#39;s so much going on you need a HUGE
screen and kids and schools might not have enough screen real estate.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s also a fourth reason which is that I installed Eclipse using
LinuxMint&amp;#39;s package manager and it crashed when running. If I&amp;#39;m going
to recommend a teacher roll out a tool that all of their students are
going to install at home on their own, at the very least it has to
install and run seamlessly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-16&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-16&#34;&gt;
DrJava
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-16&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://www.drjava.org/&#34;&gt;http://www.drjava.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Like Eclipse, I&amp;#39;ve used DrJava before. It&amp;#39;s similar to DrRacket (nee
Scheme) and Dr. Python. It&amp;#39;s close to perfect. You get highlighting,
helpful error finding, can run your program from within Dr. Java and
more.&lt;/p&gt;
&lt;p&gt;
The killer problem is that I can&amp;#39;t get the latest version to
run. Actually the first problem is that it&amp;#39;s just a jar file so you
have to run it with &lt;code&gt;java -jar drjava.jar&lt;/code&gt;. Beyond that, it didn&amp;#39;t
work out of the box. It loaded but compilign and running didn&amp;#39;t After
some mucking around, I got it to compile but it doesn&amp;#39;t run the
programs. &lt;/p&gt;
&lt;p&gt;
This is too bad because when it runs it&amp;#39;s a terrific learning
environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-17&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-17&#34;&gt;
BlueJ
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-17&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://bluej.org/&#34;&gt;https://bluej.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This is another tool that was DOA. I tried the debian package as well
as the jar file. Couldn&amp;#39;t get it working. &lt;/p&gt;
&lt;p&gt;
I have used an older version so I&amp;#39;ll describe that instead just
remember things might be different in the current version.&lt;/p&gt;
&lt;p&gt;
BlueJ does one thing very well - objects. It visually shows object
creation and relationships. I recall that you can create an opject,
click on it&amp;#39;s box in a visual graph pane, inspect it, instantiate new
ones and in general explore and expirement. If you&amp;#39;re big on OOP and
like Object First by all means check BlueJ out. It&amp;#39;s probably best in
class for that approach.&lt;/p&gt;
&lt;p&gt;
On the other hand, it&amp;#39;s a one trick pony. If you, like me, are not all
in on OOP or an Objects first and all the time approach it&amp;#39;s probably
not the tool for you. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-18&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-18&#34;&gt;
Geany
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-18&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.geany.org/&#34;&gt;https://www.geany.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
I hadn&amp;#39;t heard of this one before but it looks like a contender. It
has a  pretty clean interface and it worked out of the box. I
installed it using the package manager.&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;&amp;lt;img src=&amp;#34;/img/geany.png&amp;#34; width=&amp;#34;250px&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
Class browser on the right, files on the left and console (terminal),
compiler status etc on the bottom. It supports some level of
autocomplete but it doesn&amp;#39;t do everything. I&amp;#39;m not sure yet but it
might hit the completion sweet spot.&lt;/p&gt;
&lt;p&gt;
It says it does snippets but I haven&amp;#39;t figured that out yet. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-19&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-19&#34;&gt;
IntelliJ
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-19&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;https://www.jetbrains.com/idea/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
IntelliJ is fro JetBrains. They make a bunch of IDEs each focussed on
a different toolset but all with the same look and feel. You can also
add plugins to each to make them multi-modal. I believe the editor at
the core is JEdit. I&amp;#39;ve used their IDEs in the past and as far as
professional IDEs go I like them. They&amp;#39;re more lightweight than say
Eclipse and don&amp;#39;t need the real estate.&lt;/p&gt;
&lt;p&gt;
Still, I think it&amp;#39;s too much for a beginner. For example, you can
in theory run your program from the build menu but, much like Eclipse,
it takes you to a configuration screen. I was pretty lost and I&amp;#39;m not
a beginner. Much like Eclipse it&amp;#39;s made for projects not small class
programs. &lt;/p&gt;
&lt;p&gt;
I found the Python version of JetBrains IDEs more approachable
probably because the ecosystem is much simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-20&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-20&#34;&gt;
VSCode
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-20&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This one shocked me - I actually found myself liking a Microsoft
product. I guess this really isn&amp;#39;t your father&amp;#39;s Microsoft.&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;&amp;lt;img src=&amp;#34;/img/vscode.png&amp;#34; width=&amp;#34;250px&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
Much like Geany it has a clean interface and like Geany you don&amp;#39;t need
a whole Java build system. It does more completions out of the box
which you may or may not like as well as snippets. A single key will
compile and run your program and on top of all that it has en &amp;#34;Emacs&amp;#34;
setting for keybindings.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not sure if I like Geany or VSCode better but I think both are
really good options. I&amp;#39;d probably lean towards Geany due to the less
robust completions. Were I writing code for real rather than teaching,
I&amp;#39;d probably go the other way.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-21&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-21&#34;&gt;
JGrasp
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-21&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;&amp;lt;img src=&amp;#34;/img/vscode.png&amp;#34; width=&amp;#34;250px&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
JGrasp feels much the same as the other contenders - Geany and VSCode
but the interface just looks a bit clunkier to me. I know that&amp;#39;s
purely subjective. &lt;/p&gt;
&lt;p&gt;
The biggest difference I&amp;#39;m seeing out of the box is that JGrasp
doesn&amp;#39;t do completions so depending on where you fall with that you
might want Jgrasp for none, Geany for some, and VSCode for all.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;[EDIT]&lt;/strong&gt; JGrasp has a very cool visualizer built in that will animate
 your proram. Here&amp;#39;s a &lt;a href=&#34;https://www.youtube.com/watch?v=wuQowTV0o6s&#34;&gt;video&lt;/a&gt; of it in action. I&amp;#39;m going to have to
 play with this a bit and see if it pushes JGrasp up over the top for
 me. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-22&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-22&#34;&gt;
Processing
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-22&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://processing.org/&#34;&gt;https://processing.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not going to talk about processing but I felt that it would be
negligent not to mention it at all. Processing is a IDE, wrapper and
graphical library that&amp;#39;s essentially Java under the hood (although
there are Processing bindings in many other languages probably the
most well known now is &lt;a href=&#34;https://p5js.org/&#34;&gt;p5.js&lt;/a&gt;). It&amp;#39;s great if you want to do graphical
work or base your class around the libraries that are available to
processing which include ones for web cameras, hardware access,
networking, sound and more but it&amp;#39;s not the same as an IDE or editor
for traditional Java development.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-23&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-23&#34;&gt;
Notes
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-23&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Just about all of these tools have multiple themes and are fairly
customizable so don&amp;#39;t go by the screenshots above, on the homepages or
what they look like when you first install them.&lt;/p&gt;
&lt;p&gt;
All of the tools I liked installed right out of the box either by
using the package manager or downloading and extracting from an
archive. I can&amp;#39;t say yet if they install as easily on a Mac or Windows
box but since Linux is usually the unloved stepchild of sortware
packaging and distribution my guess is that if anything it&amp;#39;ll be
easier on those platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-24&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-24&#34;&gt;
Conclusions
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-24&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I&amp;#39;ll always be an Emacs guy. Org-mode is too useful and I can get IDE
like behavior for pretty much any language I want to work in. In some
cases like Clojure, I haven&amp;#39;t seen an IDE that can match Emacs and
Cider, it&amp;#39;s premier Clojure development setup. I also haven&amp;#39;t a Git
interface nearly as slick and powerful as &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt; which works under
Emacs.&lt;/p&gt;
&lt;p&gt;
For my teachers though, I&amp;#39;ll probably start with Geany or VSCode,
switch to Emacs for myself at some point in the program and make sure
to spend time on the command line along the way.&lt;/p&gt;
&lt;p&gt;
If I missed any editors or IDEs or have something to add on one of the
ones I mentioned, please share in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2019 - the keynotes</title>
      <link>https://cestlaz.github.io/post/sigcse-2019-keynotes/</link>
      <pubDate>Mon, 04 Mar 2019 15:25:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2019-keynotes/</guid>
      <description>
&lt;p&gt;
It&amp;#39;s that time of the year to write a series of blog posts about
SIGCSE. I thought I&amp;#39;d start with one on the keynotes. &lt;/p&gt;
&lt;p&gt;
There were four keynote speakers. Marie desJardins, Gloria Townsend,
Mark Guzdial, and Blair Taylor. I wasn&amp;#39;t at the first timer&amp;#39;s lunch
where Townsend spoke so I won&amp;#39;t talk at all about that keynote.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m also not going to summarize the talks. Andy Ko wrote up a terrific
summary of his &lt;a href=&#34;https://medium.com/bits-and-behavior/sigcse-2019-trip-report-celebrating-50-years-b3460835a09a&#34;&gt;SIGCSE experience&lt;/a&gt; and did a much better job giving
overviews to the keynotes than I ever could so I&amp;#39;ll just refer you to
Andy&amp;#39;s &lt;a href=&#34;https://medium.com/bits-and-behavior/sigcse-2019-trip-report-celebrating-50-years-b3460835a09a&#34;&gt;blog post&lt;/a&gt;. Rather, I&amp;#39;m just going to talk a bit about what they
left me thinking about. It might be something that&amp;#39;s pretty tangential
to the actual talk but hey, it&amp;#39;s the direction that the speaker sent
my brain to follow.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Marie des Jardin - the pinch hitter
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Marie desJardins wasn&amp;#39;t supposed to be the keynote. She was filling in
for a flu ridden &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Freeman_A._Hrabowski_III&#34;&gt;Freeman Hrabowski&lt;/a&gt; at the last minute and she did a
more than admirable job.&lt;/p&gt;
&lt;p&gt;
The big line for me was her plea for us not to create &amp;#34;weed out&amp;#34;
courses but rather to create &amp;#34;launch&amp;#34; courses. I think this resonated
with many in the audience. It got me thinking about something that&amp;#39;s
been a concern of mine for a while. We see a lot of examples of making
student&amp;#39;s first CS experience more gentle and more varied. Probably
the biggest example is APCS-P but you can also find it in many college
CS0 classes. Hunter&amp;#39;s no exception - we&amp;#39;re now in the second year of a
more varied CS0 class (although truth be told, our problem
wasn&amp;#39;t so much that our old CS0 was a gatekeeper but more that
students hardly did any programming). &lt;/p&gt;
&lt;p&gt;
I started to become aware of the problem as I would hear stories of
kids who did Girls Who Code programs who then dropped out of CS
classes that were too hard and then later when my former students at
Harvard told me that many kids &amp;#34;dropped like flies&amp;#34; in the class after
CS50. I&amp;#39;ve also seen these problems at Hunter but at least here I know
we&amp;#39;re working on it. Having a more accessible entry point is terrific
but not if you just set the kids up to fail one step down the line. It
seems that not enough people are looking at the complete path: from
first course to last and the transitions in between. This is a hidden
danger. We can proudly say that diversity and enrollments are up based
on those first experiences and no one&amp;#39;s the wiser that we&amp;#39;re killing
the kids later on. We have to do better.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Mark Guzdial - the outstanding contributer
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Mark was this year&amp;#39;s winner of SIGCSE&amp;#39;s Award for Outstanding
Contribution to CS Education. A well deserved award. Mark&amp;#39;s talk was
terrific and similar to the one he gave at the Code and Beyond
conference in NY which I wrote about &lt;a href=&#34;https://cestlaz.github.io/post/thoughts-on-code-and-beyond-ct/&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
As with the previous keynote you can get a great summary if you read
Andy&amp;#39;s post linked above.&lt;/p&gt;
&lt;p&gt;
One point Mark made was that he felt that all students should learn
programming but if I remember the talk correctly he didn&amp;#39;t make a
strong statement about all students learning CS. He also said that
first course our CS majors take shouldn&amp;#39;t be the same as the first
course for non majors. I see where Mark&amp;#39;s coming from I&amp;#39;m not sure I
agree. Well, I do agree given what a first CS course for a major
typically looks like versus what a never-CS major might need for life but
the few CS0 for non major courses I&amp;#39;ve seen don&amp;#39;t leave their students
with enough to continue on to the CS major or a minor (which could be
valuable to a HUGE swath of students) so they end up taking the CS0
for CS majors anyway. This means one more course and one more
semester. More cost and more time spent. I&amp;#39;ll say that I do agree with
Mark UNLESS you can design a course that can address the needs of both
parties and the truth is I think you can. We did it at Stuy. Students
come back with that having been their only course and talk of its
usefulness and utility and students come back having used it to launch
a tech career in later high school, college, and beyond. What we built
isn&amp;#39;t perfect and is for a particular population but as proof of
concept it&amp;#39;s convinced me that a single course for both can be done&lt;/p&gt;
&lt;p&gt;
Another one of Mark&amp;#39;s big points was taking CS into other subject
areas. I love this and I love when he said (apologies if the quote&amp;#39;s a
little off) &amp;#34;They need things and we can build stuff&amp;#34; as a call to
action to partner with and to develop the languages and tools needed
to support a new vision of CS embedded in other subject areas.&lt;/p&gt;
&lt;p&gt;
My thoughts here are that as a community we are ignoring the realities
of K12 education. Mark mentioned Bootstrap World, a sprogram both he
and I like very much. It is embedded in Algebra classes and uses CS in
Racket (nee Scheme) to support learning said algebra. Mark noted that
Racket looks like Algebra and that&amp;#39;s one of the reasons Bootstrap
works. Another fact often left out is that algebra is frequently
taught either over two years or with a double period allocated to
it. It is given more time than most classes and that allows teachers to experiment
a bit more with instruction. Even if we develop more tools like
Bootstrap that align themselves to teaching other subjects those
subject teachers might not have the time to dedicate to the new
tool. Why not? That&amp;#39;s another thing Mark indirectly mentioned. At one
point he said that we might have to &amp;#34;take a step back&amp;#34; first in terms
of results and quite frankly, K12 teachers sometimes can&amp;#39;t take that
chance. In addition to not wanting to give their current students a
worse experience even with the promise that future classes would get a
better one they have to face the specter of high stakes testing. If
I&amp;#39;m using a new CS tool in a history class and my student&amp;#39;s test
results go down, they might have to repeat the class and the teacher
could put their license in jeopardy.&lt;/p&gt;
&lt;p&gt;
In the end I loved just about everything Mark had to say but it still
got me thinking about a lot and to me that&amp;#39;s one of the hallmarks of a
great talk. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Blair Taylor - the controversy
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Blair Taylor gave the final keynote and this one had some controversy
around it. Andy&amp;#39;s blog post again summarizes things well. &lt;/p&gt;
&lt;p&gt;
My only take on the content is that the talk was more about
Dr. Taylor&amp;#39;s journey and less about Cyber Security (I hate it that
it&amp;#39;s now just being called &amp;#34;cyber&amp;#34;) but that was fine. &lt;/p&gt;
&lt;p&gt;
What I want to talk about here is not so much the controversy over how
some people took parts of Dr. Taylor&amp;#39;s talk and the Q&amp;amp;A at the end but
rather the fact that more and more recently I&amp;#39;ve felt that as a
community we can&amp;#39;t talk about difficult issues concerning gender,
race, and the like. &lt;/p&gt;
&lt;p&gt;
I consider myself an ally to under represented and under served groups
but have found myself in situations recently where unless I 100%
parrot one side&amp;#39;s extreme view I&amp;#39;m accused of sexism or racism at
which point ANYTHING I say is treated as such. One is not allowed to
see any nuance in what is a very complex topic. &lt;/p&gt;
&lt;p&gt;
At one point, the speaker made a joke. She prefaced it with something
like &amp;#34;I&amp;#39;m going to tell this offensive joke&amp;#34; and that she could,
presumably because she is a women. The joke fell flat (although I&amp;#39;ve
told the story of the keynote to a few women in tech and they chuckled
and said they actually kind of liked the joke). My take was that the
speaker was setting the stage to maybe dive into a difficult
conversation. My take was also that some members of the audience right
then and there decided that the speaker was wrong about all things. &lt;/p&gt;
&lt;p&gt;
After the talk I was a bit more convinced that this was the case as I
read a tweet stream explaining what happened that included the joke
but none of the context for the reader to make an informed decision. &lt;/p&gt;
&lt;p&gt;
In the end, I felt that Dr. Taylor has honestly worked for under
represented groups and while this might be unpopular, her pragmatism of
sometimes swallowing an insult and &amp;#34;having a sense of humor&amp;#34; is the
right thing to do. Unfortunately, Dr. Taylor misread the audience and that
some people decided somewhere in her talk that even though she was
working to empower women in her own way, it wasn&amp;#39;t &amp;#34;my way&amp;#34; so it was
wrong. &lt;/p&gt;
&lt;p&gt;
The situation was unfortunate and my big fear is that as a community
we still have a long way to go before we can have these conversations
and personally, as someone who considers themselves an ally of the
undeserved I&amp;#39;m becoming more gun shy of partaking in discussions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
That&amp;#39;s all for now.
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
So, that&amp;#39;s my take on the keynotes. Much more to come on the
conference in future posts. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>March PD for CS Teachers</title>
      <link>https://cestlaz.github.io/post/pd-apcs-a-and-beyond-3-14-2019/</link>
      <pubDate>Tue, 26 Feb 2019 15:49:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-apcs-a-and-beyond-3-14-2019/</guid>
      <description>&lt;p&gt;
Back in December we ran our first &lt;a href=&#34;https://cestlaz.github.io/post/pd-apcs-a-and-beyond/&#34;&gt;PD session for CS teachers&lt;/a&gt;. This was
to address the need for professional development for teachers who were
more experienced in terms of computer science - we aimed this at people who were ready to
teach APCS-A, similar, or beyond and also to start to build a
community for these teachers. &lt;/p&gt;
&lt;p&gt;
We had trouble setting things up for February but we&amp;#39;re good to go for
March, April and May.&lt;/p&gt;
&lt;p&gt;
Just as with our first session, each session will consist of a content
piece, a pedagogy piece, and will overall be driven by the
participants.&lt;/p&gt;
&lt;p&gt;
The next session is set for Thursday, March 14 from 5:00 - 8:00 and
will be hosted by Digital Ocean. The sessions will earn you 3 CTLE
hours and dinner will be provided.&lt;/p&gt;
&lt;p&gt;
If you or a CS teacher you know is interested in this, they can sign
up here: &lt;a href=&#34;https://goo.gl/forms/DCXqPtwYS47Ooo8j1&#34;&gt;https://goo.gl/forms/DCXqPtwYS47Ooo8j1&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why the Thomas Friedman&#39;s editorial on the College Board&#39;s Two Codes left me concerned</title>
      <link>https://cestlaz.github.io/post/college-boards-two-codes/</link>
      <pubDate>Tue, 19 Feb 2019 10:20:19 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/college-boards-two-codes/</guid>
      <description>&lt;p&gt;
There was some buzz over &lt;a href=&#34;https://www.nytimes.com/2019/02/12/opinion/college-board-sat-ap.html&#34;&gt;this editorial&lt;/a&gt; about the College Board last
week. The two codes every child needs - Coding and the US
Constitution? Who could argue with that.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not going to disagree. Civics and CS are important and can&amp;#39;t wait
until college. The thing that left me chilled though was that nobody&amp;#39;s
paying attention to the fact that the College Board - a private entity
with its own interests has so much influence over American education.&lt;/p&gt;
&lt;p&gt;
In the piece, Friedman states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So rather than have SAT exams and Advanced Placement courses based on things that you cram for and forget, they are shifting them, where they can, to promote the “two codes.”&lt;/p&gt;
&lt;p&gt;
In 2016, the College Board completely revamped its approach toA.P. computer science courses and exams. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Nothing wrong here but the AP program is supposed to offer &amp;#34;college
level&amp;#34; work in high school. Back when the program started, from 
best I can figure, they offered exams based on courses that were
essentially HS implementations of college classes. Now they&amp;#39;re
flipping the script. They&amp;#39;re dictating what they think should be
taught at the high school level and, oh by the way, it&amp;#39;s college level
because it has the AP designation. The editorial goes into some
details. Now, I&amp;#39;m not against what they&amp;#39;re doing with AP US Gov, it
sounds like a really good idea. I&amp;#39;m against their overall influence.&lt;/p&gt;
&lt;p&gt;
The biggest concern I had though was with this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Besides revamping the government course and the exam on that subject, Coleman and Sanford in 2014 made a staple of the regular SAT a long reading comprehension passage from one of the founding documents, such as the Constitution, or another important piece of democracy, like a great presidential speech. That said to students and teachers something the SAT had never dared say before: Some content is disproportionately more powerful and important, and if you prepare for it you will be rewarded on the SAT.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If we put this on the SAT, schools will teach it so the kids will do
better the SAT.&lt;/p&gt;
&lt;p&gt;
This should be chilling to everyone. &lt;/p&gt;
&lt;p&gt;
No, I&amp;#39;m not against the details but it&amp;#39;s frightening to have a private
entity with so much influence on public policy like
education. Ultimately, it can&amp;#39;t be good. Just because what the College
Board&amp;#39;s pushing in terms of civics jives with me doesn&amp;#39;t mean they
should be able to influence and manipulate curriculum across the
nation to such a degree. The College Board is pretty much accountable
to nobody. As long as students are told to take AP classes and the
SAT, particularly with politicians and boards of education agreeing to
pay the college board with taxpayers money, the public has very little
say. Sure, more better civics and CS is good but who&amp;#39;s to say the next
initiative will be in the public&amp;#39;s interest?&lt;/p&gt;
&lt;p&gt;
The same can be said for any of the major education players - for and
non profit alike both in and out of CS. We have to be more aware,
vigilant, and vocal when the power players accomplish things by being
the 800 pound gorilla even when we agree with what some of those
things are.&lt;/p&gt;
&lt;p&gt;
This is a big reason why I frequently speak out against the College
Board and other power players, some of whom I greatly like, respect,
and admire, and feel that others should feel obligated to do the same.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use A Real Language</title>
      <link>https://cestlaz.github.io/post/use-a-real-language/</link>
      <pubDate>Sat, 09 Feb 2019 15:08:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/use-a-real-language/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Why can&amp;#39;t we use a real language!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This topic has been coming up a lot recently. Now I&amp;#39;m not talking
about the Drag and drop vs textual language thing. Let me be clear. To
me a Drag and Drop language can certainly be a real language and many
are. I also think they&amp;#39;re terrific when used correctly. I just think
they&amp;#39;re frequently misapplied in later grades. &lt;/p&gt;
&lt;p&gt;
No, I&amp;#39;m talking about people asking things like &amp;#34;Why do we have to use
Java in our class, why can&amp;#39;t we use a real language like &lt;span style=&#34;text-decoration: underline;&#34;&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;__&lt;/span&gt;&lt;/span&gt;.&amp;#34; Or
at Hunter, I might get &amp;#34;Why do we have to use C++, why can&amp;#39;t we use
Java.&amp;#34; Back at Stuy I&amp;#39;d get the same question about Scheme and
Netlogo. It actually doesn&amp;#39;t really matter what language you
use. Someone else, usually a non-teacher always knows better.&lt;/p&gt;
&lt;p&gt;
All of this reminded me of when I was young. &lt;/p&gt;
&lt;p&gt;
I started with BASIC and then in high school programmed Fortran IV
using punch cards on an &lt;a href=&#34;https://en.wikipedia.org/wiki/IBM_1130&#34;&gt;IBM 1130&lt;/a&gt;. At the time BASIC was considered a
toy language and Fortran IV not to mention punch cards were
yesterday&amp;#39;s technology. I also took APCS the first year it was offered
and that&amp;#39;s where I learned Pascal.&lt;/p&gt;
&lt;p&gt;
I then went to NYU - The Courant Institute of Mathematical Sciences. There
we also used Pascal as the core language. That was the language used
in CS1, Data Structures, and Algorithms. It was also the default
language for other classes. That is, unless the class lent itself to
a specific language such as Lisp for AI you&amp;#39;d probably use
Pascal. I learned C early on in my college career and also took
classes that used Ada, and 8088 Assembly. I mostly tried to stick with&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It was the hot language at the time and all the cool kids were&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;using it. Some kids continued to use Pascal but it was universally
derided. It wasn&amp;#39;t a &amp;#34;real language.&amp;#34; Nobody used it for anything
serious.&lt;/p&gt;
&lt;p&gt;
Senior year it was time to look for a job. I ended up going  to
Goldman Sachs and developed for PCs running Windows 2.1 in C. They
also hired a bunch of college grads to program the Stratus systems in
PL1 and Cobol programmers for the mainframes. This was
around 1989. Goldman and most other big companies started you in a
training program. I already knew C but they ran a crash course for my
group. They did the same for the Cobol kids although most of them had
learned it in their business schools. The PL1 kids were grouped in
with the C and Cobol groups and had to figure out PL1 on their own
once they were assigned teams.&lt;/p&gt;
&lt;p&gt;
My story tough, isn&amp;#39;t about Goldman. It&amp;#39;s about another big bank I
interviewed with. I won&amp;#39;t name them but it&amp;#39;s a big firm that still
exists today. I think they had at least a whole big building down on
the street back when I interviewed but I don&amp;#39;t remember. The interview
process was tough and thorough. We talked about the firm, what they
did, the platforms they developed and of course they drilled me on
what I brought to the table. The funny thing was that their entire
PC platform was built in, yep, you guessed it, Turbo Pascal. &lt;/p&gt;
&lt;p&gt;
Here was a really respected financial firm doing really interesting
tech and they were using that fake toy language that no kid would ever
use for real.&lt;/p&gt;
&lt;p&gt;
So there you have it. All this &amp;#34;it&amp;#39;s not a real language&amp;#34; stuff is
largely nonsense. If it can solve your problem it&amp;#39;s real. If it can
teach your concept it&amp;#39;s real. The rest is nonsense.&lt;/p&gt;
&lt;p&gt;
As a side note, my first programming gig was in the mid 1980s for a
ticket printing company - Arcus Simplex Brown. I worked on a computer
ticket printing system for them. It was in BASIC and ran on a little
PC running CP/M with a big line printer. Best I could figure they were
still using the same system in 2012.&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cestlaz.github.io/img/ticket.jpg&#34; width=&#34;250&#34; height=&#34;250px&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;
So, don&amp;#39;t get caught up with someone else&amp;#39;s opinion of what&amp;#39;s a real
language just make sure your students are getting what they need.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sequencing Topics</title>
      <link>https://cestlaz.github.io/post/sequencing-topics/</link>
      <pubDate>Sat, 26 Jan 2019 16:06:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sequencing-topics/</guid>
      <description>&lt;p&gt;
Monday&amp;#39;s the start of the Spring semester. Other than the 8:00am start
I&amp;#39;m looking forward to it. My 8:00am class is the honors/lab component
that goes with CS1. I taught it last semester and during each of the
past two years at Hunter. My second class is the follow up  - more OOP
/ C++, data structures and some algorithms.&lt;/p&gt;
&lt;p&gt;
The material is old hat. I&amp;#39;ve taught it in Java more times than I can
count and also in C++ albeit many years ago. What&amp;#39;s new is that I&amp;#39;m
teaching my Hunter kids and I&amp;#39;m doing it in a college framework - two
days a week, 1:15 a session. I&amp;#39;m not thinking too much about how I&amp;#39;ll
teach each class - I usually figure that out in the moment - not
actually in the class but week to week based on the flow of the
class. &lt;/p&gt;
&lt;p&gt;
Right now, I have to make final decisions on sequencing, at least for
the start of the class. We got ahead of the game by covering most of
the C++ topics - inheritance, templates, overloading etc. at the end
of last semester so that
leaves all the data structures, algorithms, dynamic structures, and
memory management, recursion, and sorting and searching. If I have
time I&amp;#39;d also love to get into some graph stuff. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the plan, at lest for now.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll start with recursion. They had the basics last term but now
we&amp;#39;ll talk about search - I usually focus this around a maze
solver. After this we&amp;#39;ll place recursion on hold - at least in terms
of class time and move to linked lists and dynamic memory. We&amp;#39;ll
follow this with sorting. The idea is that students have trouble
getting comfortable with both recursion and also with dynamic
structures first time through. Rather than ploughing  through from
recursion to the recursive sorts I&amp;#39;m hoping that putting the dynamic
lists in between will give recursion some time to marinate in the
background. Likewise I&amp;#39;m hoping that the dynamic memory stuff can
marinate through the sorting unit for when we revisit it with stacks,
queues, and trees after sorting.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if this is the optimal way of sequencing the topics but I
think it will work pretty well.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll see as the semester progresses. If things are going swimmingly I
can always call an audible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts On Code And Beyond - Computational Thinking</title>
      <link>https://cestlaz.github.io/post/thoughts-on-code-and-beyond-ct/</link>
      <pubDate>Mon, 14 Jan 2019 17:48:27 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/thoughts-on-code-and-beyond-ct/</guid>
      <description>&lt;p&gt;
The theme of this year&amp;#39;s &lt;a href=&#34;https://twitter.com/i/moments/1084877641285541889&#34;&gt;To Code and Beyond&lt;/a&gt; was Computational
Thinking. &lt;a href=&#34;https://twitter.com/guzdial&#34;&gt;Mark Guzdial&lt;/a&gt; gave the keynote. While the talk isn&amp;#39;t
currently online, check out &lt;a href=&#34;https://www.youtube.com/watch?v=N3uCb-95fFE&amp;amp;t=5s&#34;&gt;this talk&lt;/a&gt; that Mark gave last March. It&amp;#39;s
not the same but the second halves are and well worth a look.&lt;/p&gt;
&lt;p&gt;
In the first half, Mark talked about other types of &amp;#34;thinking.&amp;#34;
Scientific thinking, engineering thinking and even historical
thinking. All had a good amount of overlap with both each other and
with computational thinking even as we haven&amp;#39;t yet settled on what
computational thinking actually is.&lt;/p&gt;
&lt;p&gt;
This overlap is why I think that bringing CS into the primary grades
gives us an opportunity to reduce the achievement gap between rich and
poor. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve already said that I&amp;#39;m not sold on hardcore CS and programming in
the early grades but rather it&amp;#39;s CT - the problem solving and
methodologies of CS that can effectively be part of the earlier
grades.&lt;/p&gt;
&lt;p&gt;
Of course, that&amp;#39;s easier said than done. While there has been some
pushback recently we still have far too much emphasis on standardized
tests and elementary school teachers are way overworked. Trying to get
already overburdened teachers to add in a whole new subject area is a
big ask. The opportunity is that we might be able to develop aspects
of CT in a way that supports what elementary teachers are already
doing, possibly under the unlabeled guise of scientific thinking,
historical thinking, engineering thinking or some other thinking.&lt;/p&gt;
&lt;p&gt;
This is already going on to a certain extent with individual teachers
at individual schools. Logic games and problem solving techniques have
always been explored by elementary school teachers who have freedom
from tightly packed test based curricula. These could be considered CT
and you could also add data collection and processing and I&amp;#39;m sure
many other things as well. This is where CS/CT can fit in the
elementary schools without adding to the teacher&amp;#39;s current
load. What&amp;#39;s more, if we can figure out how to incorporate these CT
concepts to support the subject matter already being studied we could
help close the gap between the haves and the have nots.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve said many times before that I&amp;#39;m not an elementary school
specialist but I still suspect this is the approach for CS in the
primary grades at least for the near term. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve already got a pretty full plate between my work with Hunters
Daedalus CS honors program along with our pre-service programs being
very close to going live but I&amp;#39;m also hoping to do some work in
relating to this in the near future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is There a First Grade Machine Learning Achievement Gap?</title>
      <link>https://cestlaz.github.io/post/is-there-a-first-grade-ml-achievement-gap/</link>
      <pubDate>Fri, 11 Jan 2019 15:24:16 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/is-there-a-first-grade-ml-achievement-gap/</guid>
      <description>&lt;p&gt;
Today was the fifth &amp;#34;To Code and Beyond&amp;#34; - a one day conference
hosted at Cornell Technion and once again Diane Levitt put together
a great show. The theme was Computational Thinking and the day
consisted of a variety of talks, panels, and activities. I plan on
writing about one panel in particular but for today I wanted to
address something that came up as a question. One attendee asked a
panel about the achievement gap - the fact that when the CS movement got
started in NY some of the more innovative and interesting work was
being done with some of our most vulnerable students. Recently, he
heard about a student who was doing Machine Learning in early
elementary school - first grade. The concern
he had was that when we started the less affluent populations might
have even been pulling ahead but now he&amp;#39;s concerned that the gap
between have and have nots will continue to grow even in this new
field.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not so concerned about the ML gap in the early grades and I
still think that we still have an opportunity to lessen the gap
between the haves and have nots with CS and more specifically CT.&lt;/p&gt;
&lt;p&gt;
I was reminded about when I started fencing. I first picked up a foil
in 11th grade. Stuy had a senior heavy team that year. I was the only
new junior and there were a bunch of new sophomores. The following
year, we were the starting lineup. We were raw but we still managed
second place in the city. Most of us continued on to fence in USFA
events and then in college. I remember one of the first events we went
to. It was the under 20 qualifiers for the Junior Olympics National
Championships. There were a couple of superstars who recently came
over from eastern bloc countries there. Also a bunch of
fencers we didn&amp;#39;t know but we knew that they&amp;#39;d been fencing for
years - since they were 8, 9, 10. &amp;#34;They&amp;#39;ve been fencing for
years. We&amp;#39;ve only been doing it for one. How can we ever compete?&amp;#34;
I remember Jordan saying &amp;#34;Yeah, they&amp;#39;ve fenced for years but probably
a day or two a week, we&amp;#39;ve been doing it intensely every day for a
year and a half.&amp;#34; He also noted that when they were in their early
years their bodies probably weren&amp;#39;t coordinated enough to really
develop so much. He was right. The superstars dominated but then we
were very much in the mix and in fact took most of the qualifying
spots. &lt;/p&gt;
&lt;p&gt;
I also thought about teaching CS at Stuy. There were always kid who
came in to class with prior experience. That was clear on day one and
for the first few weeks. By the end of the first semester you woudn&amp;#39;t
know it based on overall class performance. The newcomers caught up
pretty quickly. &lt;/p&gt;
&lt;p&gt;
This is why I&amp;#39; not really concerned when I hear about a school doing
Machine Learning in first grade. How much can they really do and how
deep is it? Is the kid even really ready for it or are they just going
through the motions? Or, are they just doing something they&amp;#39;ve always
done in first grade and are just labelling it ML.&lt;/p&gt;
&lt;p&gt;
I think that last option is fairly likely. It&amp;#39;s also why I think we
still have an opportunity to close the achievement gap as part of the
CS / CT movement. &lt;/p&gt;
&lt;p&gt;
When people ask me about CS in the early grades I first tell them that
I&amp;#39;m not an early grade specialist. I follow this by stating that I
think that well resourced schools have been doing thing that we now
consider CT for years - logic, problem solving, puzzles, etc.When a
group of students solve a problem and describe a solution that
includes repetition it used to be just problem solving. Now it&amp;#39;s
computation thinking. Sure, we can tease it out, formalize it and
expand on it but the schools and teachers with the resources and
freedom have already been doing this. &lt;/p&gt;
&lt;p&gt;
With the CS For All movement, we have an opportunity to bring this to
all our students not just the well to do ones.&lt;/p&gt;
&lt;p&gt;
Of course this is easier said than done. We have to prepare them to
identify these CT practices and actively develop these skills in their
students. This means giving teachers the time, resources, and training
and not shorten the already tight tether to standardized multiple
choice tests. &lt;/p&gt;
&lt;p&gt;
At times I&amp;#39;ve been disappointed with the overall K12 CS Ed
movement. We&amp;#39;ve made great strides coming from nowhere to where we are
but as a community we missed the opportunity to bypass the mistakes
and bad ideas that teachers of other disciplines are plagued with. 
We still have this chance with Computational Thinking and the early
grades.&lt;/p&gt;
&lt;p&gt;
I hope we do it right.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code, Data Structures, and Hidden Complexity</title>
      <link>https://cestlaz.github.io/post/aoc-data-structures-hidden-complexity/</link>
      <pubDate>Sun, 30 Dec 2018 15:17:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/aoc-data-structures-hidden-complexity/</guid>
      <description>&lt;p&gt;
Since 2015, &lt;a href=&#34;https://twitter.com/ericwastl&#34;&gt;Eric Wastl&lt;/a&gt; has gifted us each December with &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of
Code&lt;/a&gt; - a 25 day programming competition that I very much enjoy. This
year I haven&amp;#39;t been able to get to too many of the problems. I only
completed the first two days on the day they were released, problem
three a day late and then I didn&amp;#39;t get back to the problems until
almost 12/25 - the final day of the competition. I&amp;#39;ve spent a bit of
time over the break working through the problems. I&amp;#39;m currently
through 9. I started working through the problems in Clojure - part of
my yearly attempt to dive into the language but then did a few in
Python just to speed up my progress.&lt;/p&gt;
&lt;p&gt;
Yesterday, I did &lt;a href=&#34;https://adventofcode.com/2018/day/9&#34;&gt;question 9&lt;/a&gt; which I found interesting as a teacher -
so much so that I think I&amp;#39;ll assign at some point in the future.
At the core of the problem you have to maintain a list of items
inserting and deleting items at assorted locations. I threw together
this solution:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num_players &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;431&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;last_score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70950&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 255&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;players &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(num_players&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;player&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;board&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;next_marble &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; next_marble &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; last_score:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; next_marble &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;#regular insert&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(board)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;L
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;L
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(index,next_marble)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        players[player]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;players[player]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; next_marble
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;len(board)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        players[player]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;players[player]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;board[index]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; board[index]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    player&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(player&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;num_players
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    next_marble &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_marble &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(max(players))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
It worked and I got my first star. This unlocked part 2 which changed
the number of marbles in the game from 70950 to 70950&amp;lt;b&amp;gt;00&amp;lt;/b&amp;gt;. This
brings me to my first observation - hidden complexity. Seeing my input
I knew my part 2 would be crazy slow. The solution requires you insert
and delete into a list over and over again and I did it using a Python
list and a Python list is backed by an array. This means that every
insert and delete will be linear and I had a whole bunch of them.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s another great simple example of hidden complexity. Students and
beginners use Python lists as if they were linked structures with
direct indexing - the best of all worlds. It&amp;#39;s great if you&amp;#39;re dealing
with small data sets but unless you&amp;#39;re careful things can get very
slow very fast. It&amp;#39;s important that students learn about this and it
appears that many don&amp;#39;t. &lt;/p&gt;
&lt;p&gt;
Even though I knew the program would take forever to run it was my bed
time so I started it on part two and turned in for the night.&lt;/p&gt;
&lt;p&gt;
When I woke up I had an answer to part 2, entered it and earned my
next star. &lt;/p&gt;
&lt;p&gt;
Of course I knew that the solution should really be written using a
doubly linked list. The funny thing is that if you&amp;#39;re comfortable with
creating dynamic data structures like linked lists, writing a solution
using a doubly linked list and running it on part 2 actually takes a fraction of
the time of writing the original solution and running it. To make
sure, I did it. I decided to code it up in Java since I might assign
something like this to my students in C++. You can check it out &lt;a href=&#34;https://github.com/zamansky/advent2018/tree/master/java&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
The second take away was that it&amp;#39;s actually beneficial for students to
be able comfortable with pointers and dynamic memory and while
creating a linked list let alone a tree can be tricky at first, &lt;a href=&#34;https://cestlaz.github.io/posts/it-gets-easier-advent19/&#34;&gt;it
does get easier.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
With all the debate going on over coding vs computational thinking vs
CS it&amp;#39;s things like this - thinking about things like this that marks
one of the ways a computer scientist is different from a programmer. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visiting schools and talking tech</title>
      <link>https://cestlaz.github.io/post/fall-2018-tour-revisited/</link>
      <pubDate>Fri, 21 Dec 2018 15:49:44 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/fall-2018-tour-revisited/</guid>
      <description>&lt;p&gt;
Back in September I talked about embarking on my &lt;a href=&#34;https://cestlaz.github.io/post/fall-2018-hs-tour/&#34;&gt;Fall 2018 HS CS Tour&lt;/a&gt;.
Since then I&amp;#39;ve visited about a dozen schools. I&amp;#39;d like to thank my
friends who helped connect me to schools - particularly &lt;a href=&#34;https://twitter.com/aankit&#34;&gt;Aankit Patel&lt;/a&gt;
and &lt;a href=&#34;https://twitter.com/diane_levitt&#34;&gt;Diane Levitt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Even though the original motivation for the visits was to get the word
out about Hunter CS and the awesome things we&amp;#39;re doing in the Hunter
CS Honors program I always tried to make my talks about something that
would be relevant for the entire audience and not just the few that
were great fits for my program. I think I&amp;#39;ve done a pretty good job at
that. All this said, doing these visits is incredibly draining. I&amp;#39;m
usually up at the crack of dawn and end up taking the subway or
sometimes subway and bus way out into the five boroughs. Actually four
this year since I wasn&amp;#39;t able to get a date to visit any Staten Island
schools. It takes a lot of time and effort and while I love
talking to students and there some ancillary things I enjoy about
getting out into the neighborhoods of the city I&amp;#39;m extremely happy
that I can now rest for a few weeks. &lt;/p&gt;
&lt;p&gt;
Reflecting on all of this I&amp;#39;m realizing how important these visits are
and not because they&amp;#39;re recruiting trips.&lt;/p&gt;
&lt;p&gt;
I spoke about some of the specifics I talk about in an &lt;a href=&#34;https://cestlaz.github.io/post/fall-2018-hs-tour/&#34;&gt;earlier post&lt;/a&gt;
but arguably more important is that for many of them it&amp;#39;s the first
time for them to hear about the possibilities.&lt;/p&gt;
&lt;p&gt;
While many students are excited about what they&amp;#39;re doing in their first
CS classes it turns out that few have any idea where it will
lead. They may have heard that computer science can lead to a high
paying job. They might know they can get a job at Google but they
don&amp;#39;t really know what that means.&lt;/p&gt;
&lt;p&gt;
I saw this at Hunter when I started three years ago and now a lot of
hard work later students are much more in tune with the New York Tech
community and all that it means.&lt;/p&gt;
&lt;p&gt;
Students don&amp;#39;t realize that there are many programming careers beyond
Google and their are many CS careers beyond programming. &lt;/p&gt;
&lt;p&gt;
They don&amp;#39;t realize they can combine computer science with almost any
other field or interest.&lt;/p&gt;
&lt;p&gt;
They don&amp;#39;t know that the same algorithmic approach behind Amazon,
Netflix, and Spotify recommendations can be used by companies selling
cloths, cosmetics, or anything else.&lt;/p&gt;
&lt;p&gt;
And that&amp;#39;s just the tip of the iceberg. &lt;/p&gt;
&lt;p&gt;
Now I&amp;#39;m not saying that teachers aren&amp;#39;t telling their students about
the possibilities but rather that sometimes it has to come from an
outsider. When I started at Stuy, before I had a reputation (good or
bad) I&amp;#39;d tell students things and they wouldn&amp;#39;t buy it. Later I&amp;#39;d have
a friend from the &amp;#34;real world&amp;#34; come in. Frequently they&amp;#39;d touch on
points I addressed in class and all of a sudden I was worth listening
to. Sometimes you need an outside voice to empower and authenticate the teacher.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not saying that I&amp;#39;m a super motivational speaker or anything like
that. I&amp;#39;m not. I&amp;#39;m an ok speaker with content worth listening to. I&amp;#39;m
just realizing more and more how important this small self imposed
corner of my job is. Not so much for Hunter but for the kids of NY. &lt;/p&gt;
&lt;p&gt;
Jut this past week I&amp;#39;ve started to work to connect some of my current
students to &lt;a href=&#34;http://tealsk12.org&#34;&gt;TEALS&lt;/a&gt; volunteers. If you read this blog you know I&amp;#39;m a
big fan of TEALS and have wanted to encourage my students to get
involved for a while. Once we get some of our Hunter CS majors into
schools around the city to help teach CS perhaps they can help spread
the message of the possibilities to even more students.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Professional Development - APCS-A, similar and beyond</title>
      <link>https://cestlaz.github.io/post/pd-apcs-a-and-beyond/</link>
      <pubDate>Sat, 15 Dec 2018 08:56:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-apcs-a-and-beyond/</guid>
      <description>&lt;p&gt;
A while ago I wrote about &lt;a href=&#34;https://cestlaz.github.io/post/pd-in-nyc/&#34;&gt;our plans&lt;/a&gt; at Hunter to run professional
development for CS teachers. Specifically, running once a month
sessions for teachers who teach APCS-A, similar and beyond.&lt;/p&gt;
&lt;p&gt;
The idea started as a joke but morphed into a legit idea.&lt;/p&gt;
&lt;p&gt;
I was talking to some friends about CTLE hours and how ridiculous the
system is. NY State teachers need 100 hours of CTLE credit (PD hours)
every so many years. It&amp;#39;s something of a scam for a few
reasons. First, two of the biggest providers are the NYC DOE and the
UFT, the teacher&amp;#39;s union. I&amp;#39;ve been told they both charge money for
many CTLE credit bearing activities. That certainly doesn&amp;#39;t seem
kosher – your boss and your union set up a system to charge you to keep your
job. &lt;/p&gt;
&lt;p&gt;
Well, it turns out that Hunter is certified to issue CTLE credits so
we joked that we should get dinner and hang out once a month and call
it professional development. We were only half joking - whenever you
get a bunch of teachers in a room they talk shop and that is actually
the best PD there is. Upon talking among ourselves and also to other
teachers we realized there was a legitimate need for PD for teachers
who were beyond the basics and so we turned this silly idea into the
real deal.&lt;/p&gt;
&lt;p&gt;
Last Thursday we had our first session. We had about 25 attendees for
a three hour session.&lt;/p&gt;
&lt;p&gt;
I can&amp;#39;t tell you if it was any good - you&amp;#39;ll have to ask the
participants, I can tell you what we did and what we plan moving
forward.&lt;/p&gt;
&lt;p&gt;
We started with a content piece. I ran through &lt;a href=&#34;https://cestlaz.github.io/posts/2013-03-23-who_won_the_election-quadratic_to_linear_time/&#34;&gt;this lesson&lt;/a&gt; (or &lt;a href=&#34;https://cestlaz.github.io/posts/when-they-change-the-script/&#34;&gt;this
one&lt;/a&gt;) where the students find the mode of a list, realize it&amp;#39;s a slow
(n^2) algorithm and then refine it to a linear solution. The key idea
is to give the students an intuitive feeling for run time issues and
also to introduce them to &lt;a href=&#34;https://cestlaz.github.io/posts/2014-11-17-hidden-complexity.html/&#34;&gt;hidden complexity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
After this we had dinner, provided by our friends at Google. Over
dinner the teachers talked shop. In addition to getting to know each
other, their programs, and their classes we also asked them to
consider these three items:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are things that cause you difficulty that you&amp;#39;d like us to
cover?&lt;/li&gt;
&lt;li&gt;What are things you wish you knew about that you&amp;#39;d like us to
cover?&lt;/li&gt;
&lt;li&gt;What are things you&amp;#39;re comfortable with that you&amp;#39;d be willing to
share with the group?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After dinner we circled up and JonAlf presented the way he set up
student note taking in his class.&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cestlaz.github.io/img/pd-apcs-a.jpg&#34; width=&#34;500&#34; height=&#34;500px&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;
Finally, we discussed next steps - specifically what we came up with
for those three bullet points above.&lt;/p&gt;
&lt;p&gt;
I like the idea of having at least one short content piece, one short
pedagogy piece and a deeper dive at each meeting. For the first one,
JonAlf and I had to guess as to what might be useful and at the
appropriate level. We advertised for teachers who did APCS-A, similar,
or beyond but I&amp;#39;m sure we had teachers for whom the mode lesson was a
bit too advanced to do without scaffolding and also some for whom it
was way to simple. As we continue to meet, we&amp;#39;ll nail down the right
level and the right activities.&lt;/p&gt;
&lt;p&gt;
The real hope is that many of the participants will become regulars
and together we&amp;#39;ll turn this into both an amazing once a month
activity and also a community of teachers.&lt;/p&gt;
&lt;p&gt;
Right now, I&amp;#39;m looking for companies who want to feed us and possibly
provide space so if you know of any, hook me up. We&amp;#39;re also collecting
feedback and ideas from the attendees. &lt;/p&gt;
&lt;p&gt;
We&amp;#39;re targetting February for our next session followed by March,
April, May and possibly June.&lt;/p&gt;
&lt;p&gt;
In the meantime, stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching Sorting</title>
      <link>https://cestlaz.github.io/post/teaching-sorting/</link>
      <pubDate>Mon, 19 Nov 2018 20:04:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teaching-sorting/</guid>
      <description>&lt;p&gt;
Earlier today I saw a facebook post asking for thoughts on teaching
sorting. The question was specifically not  about motivations like
having the class act out sorts or sort cards but rather about the
coding. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been meaning to write about this since last summer when I
attended Owen Astrachan&amp;#39;s talk on the same subject.&lt;/p&gt;
&lt;p&gt;
Early in my career when teaching sorting I developed the n^2 sorts as
standalone routines just as they&amp;#39;re presented in most books but as I
gained more experience as a teacher, I changed it up to build the
sorts (at least some of them) from existing concepts. &lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at the selection sort.&lt;/p&gt;
&lt;p&gt;
We can demonstrate it by arranging an already dealt hand. Find the
smallest card place it all the way at the left. The next smallest,
next to it. Repeat until done.&lt;/p&gt;
&lt;p&gt;
This is actually a very easy algorithm to develop using code the kids
have already written.&lt;/p&gt;
&lt;p&gt;
By the time we do sorting, students have already written the code to
find the smallest or largest in a list time and time again. We&amp;#39;ve also
used that concept in developing other algorithms like the one I wrote
about &lt;a href=&#34;https://cestlaz.github.io/oldblog/2013-03-23-who_won_the_election-quadratic_to_linear_time/&#34;&gt;here&lt;/a&gt;. Assuming we&amp;#39;ve covered the ArrayList, We can easily code
up a sorting type algorithm (excuse any little Java errors, I&amp;#39;ve been
teaching this in C++ for the past 3 years):&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; min_index&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          min_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findMinIndex&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;min_index&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;min_index&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This won&amp;#39;t be efficient due to &lt;a href=&#34;https://cestlaz.github.io/posts/2014-11-17-hidden-complexity/&#34;&gt;hidden complexity&lt;/a&gt; but it&amp;#39;s very easy to
write and understand the algorithm&lt;/p&gt;
&lt;p&gt;
From here it&amp;#39;s a simple matter to code this algorithm in place -
swapping the next smallest item each time. This time coded with an array::&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; min_index&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      min_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findMinIndex&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// find min excluding what&amp;#39;s sorted so far
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;min_index&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      swap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;],&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;min_index&lt;span style=&#34;color:#f92672&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If you want, you can then break out the findMinIndex routine and the
swap so that kids see all the code in one place but regardless, this
is an easy, incremental way of teaching selection sort.&lt;/p&gt;
&lt;p&gt;
You can do something similar with insertion sort. Start with the code
to insert an item into an already sorted list. Write that as a routine
and then put a loop around it to complete the sort.&lt;/p&gt;
&lt;p&gt;
Developing routines like this incrementally has a number of
advantages. The code is simpler, it reinforces old concepts, and it
gives students additional practice in composing more complex solutions
from building blocks.&lt;/p&gt;
&lt;p&gt;
You can use a similar approach to coding the more advanced sorts but
I&amp;#39;ll save those ideas for a future post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From Scripts To Freestyle</title>
      <link>https://cestlaz.github.io/post/from-scripts-to-freestyle/</link>
      <pubDate>Fri, 26 Oct 2018 17:35:56 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/from-scripts-to-freestyle/</guid>
      <description> 

I just read [[https://medium.com/@bethanymarz/going-off-script-b69345fc5904][this post]] by  [[https://twitter.com/bethanymarz][Bethany Crystal]] - [[https://medium.com/@bethanymarz/going-off-script-b69345fc5904][Going off script]].

Bethany writes that while she normally essentially scripts important
presentations, this time she went more off the cuff.

It made me think about how I teach and a disturbing trend I&#39;ve
seen in CS education and education in general.

I&#39;ve never strictly used a script for teaching. When I started I did
use *very* detailed lesson plans. Back then I was teaching math. It
was also pre internet or at least pre internet as we now know
it. I had an account on [[https://www.panix.com/][Panix]] and the internet did indeed exist but
you couldn&#39;t just look for teaching materials. I actually remember
bringing a modem in to Seward Park one day and showing a bunch of kids
this up and coming thing called the internet. I showed them usernet
news, a gopher server and a couple of other things.

In terms of teaching materials, you could buy sample lesson plans from
the teacher store near the Board of Ed in Brooklyn. These were books
that were compilations of mostly handwritten lessons. 

I basically copied and modified them. I had an *aim*, a *do now* key
questions were written as were definitions and summary
statements. Of course there were numerous sample problems and
exercises, all worked out
in advance. It wasn&#39;t quite a script but it was a very well fleshed
out guide 

As I gained experience and also shifted from math which wasn&#39;t my
passion to CS, my plans become sparser. I&#39;d still write down
definitions, maybe some solutions and a list of key points but a lot
of the particulars were gone. I didn&#39;t write out key questions or
solutions to all the problems in advance. 

As time went by the plans got sparser still. I&#39;d still list the key
points I&#39;d want to cover as well as notes on tricky parts of the
lesson but more often than not I&#39;ll just go in with a bullet list.

Here&#39;s my plan for a recent lesson:

- Go over cipher soution
- How to we solve if already ciphered?
- Rotate 26 times.
- What about using stats
- Frequency of letters - look up
- Find freq of letter in string then use distance formula against
  model
- Get frequencies from a book
- try it in another language

We didn&#39;t get to the last two bullet items so that&#39;s where we&#39;ll start
off on Monday. This plan was all I needed but it in no way tells the
full story of the lesson to anyone but me. It doesn&#39;t include the
motivation, ancillary stories and materials nor how the lesson was
developed or delivered. I knew how it would play out because I was
teaching it and for me these notes were more than sufficient. 

All this is not to say that I don&#39;t spend a lot of time planning my
lessons. I do. I just don&#39;t create detailed scripts. I know what I
want to cover and how I want to cover it. Then it&#39;s just got to the
class and go.

A big advantage of this is something that Bethany mentioned in her
piece - the ability to &#34;read the room.&#34; This is a big part of
teaching. If you&#39;re following a script, you&#39;re not reading the room
and you&#39;re probably not really teaching the class. You might be
following a script but your students certainly aren&#39;t and once they
veer off program you&#39;ve got to abandon your script or you&#39;re not doing
right by the class. 

Having a direction but not a script makes it easier to &#34;call and
audible.&#34; That&#39;s what led me to teach the [[/post/who-played-spiderman/][question answering system]]
lesson the other day. It was unplanned but as a class we were having a
discussion and that&#39;s where it led.

As I mentioned, when I started out I couldn&#39;t do this. I needed much
more detailed plans. That said, as a teacher gains more experience
they can better connect to their classes and do more for their
students by not sticking to the script, reading the room and adapting.

This brings me to that trend that disturbing trend. I&#39;m talking about
pushing [[https://www.washingtonpost.com/news/answer-sheet/wp/2013/11/30/teacher-slams-scripted-common-core-lessons-that-must-be-taught-word-for-word/?utm_term=.6afd6d64f1c6][scripted lessons]]. These crop up in charter schools and no
excuse environments and are typically used as ways of &#34;compensating&#34;
for teachers that don&#39;t really know the subject area or how to teach
and to standardize teaching. To me it&#39;s an attack on the teaching
profession. A script is great for a play. It&#39;s great for a speech and
for some presentations but not for teaching. 

I understand having something that&#39;s more scripted to use when you&#39;re
faced with novice teachers or teachers that are new to a subject area
but I fear that at times the scripted lessons are the end game.

I was talking to a friend a few years ago. He&#39;s doing great work in the
CS Ed space and among other things, he develops curricula. I mentioned
to him that I loved his work (still do) but I was concerned that his
materials were becoming much more scripted. His reply was something
like &#34;I agree with you in theory but the truth is most teachers aren&#39;t
you.&#34; I understood his point as most of the teachers that used his
materials were novices but I disagreed that they were &#34;not me.&#34; I&#39;m
nothing special. I&#39;m just a reasonably bright guy who works hard at
his craft. If I can teach script free so can anyone. Maybe not at
first, but certainly after time and we subvert our profession by
settling for less. 

As a final note, at this point in my career I actually find it very
hard to use a script - even for a presentation. Over the last couple
of years, I&#39;ve been spending my Falls visiting high schools to talk
about Hunter&#39;s [[http://info.huntercs.org][Honors CS]] program. As much as I tried, I couldn&#39;t
script a presentation. No matter what I did, when I got in front of
the students I just ended up doing my thing and talking to them. At
the end of the day I ended up working things backwards. Over my first
few school visits, I developed a set of key points that I kept coming
back to and finally ended up with a list of bullet points that I can
pretty much follow when I do the &#34;navigating from high school to
college in tech&#34; talk. I guess I&#39;m now working in reverse. Starting
free style and working back to a script.


</description>
    </item>
    
    <item>
      <title>Who Played Spiderman - part 3</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman-3/</link>
      <pubDate>Tue, 16 Oct 2018 17:25:33 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman-3/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Parts 1 and 2
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-2/&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Part 3
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
In the first two parts of this set of posts I wrote about the
motivation and design a question answering system that can answer
&amp;#34;who&amp;#34; queries like &amp;#34;who played Spiderman&amp;#34; or &amp;#34;who shot John Lennon?&amp;#34;
It&amp;#39;s not perfect. When doing the Spiderman query, chances are the
desired answer will be at or near the top of the list of most
frequently appearing names but so will &amp;#34;Peter Parker.&amp;#34; How do you
distinguish between a real answer and a fictional name? Likewise, if
you ask &amp;#34;Who shot John Lennon?&amp;#34; You&amp;#39;ll probably get Mark David (if you
search for two word names) or if you&amp;#39;re more inclusive, Mark David
Chapman, but you&amp;#39;ll also find John Lennon at or near the top of your
results.&lt;/p&gt;
&lt;p&gt;
This system may not be perfect but then again, it can be written by one or a
small group of students relatively new to CS in a few periods as
opposed to a team of full time Google Software Engineers. I also truly
 &lt;strong&gt;like&lt;/strong&gt; the fact that it isn&amp;#39;t perfect. Too many student experiences involve
perfect questions with predetermined perfect answers. I love the fact
that they see false positives and true negatives in this. I love that
they can get pretty good but not perfect results. This makes the
experience more interesting, more fun, and more authentic.&lt;/p&gt;
&lt;p&gt;
This lesson can also easily be extended beyond &amp;#34;who&amp;#34; queries. &amp;#34;When&amp;#34;
queries are also pretty straightforward. Things like &amp;#34;When was D-Day&amp;#34;
or &amp;#34;When did Elvis die?&amp;#34; For a &amp;#34;when&amp;#34; query, you start the same way as
for a &amp;#34;who&amp;#34; query. Use the search API to get a bunch of documents that
mention the query terms. Then you look for dates. Dates can be even
easier to search for than names. Particularly if your students know
regular expressions. Dates could be things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;two digits / two digits / two digits&lt;/li&gt;
&lt;li&gt;Month name number, number&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or in regular expressions, something like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0-9]{2}/[0-9]{2}/[0-9]{2}/&lt;/li&gt;
&lt;li&gt;(Jan|Feb|Mar…)[0-9]{2}, {0-9]{4}}&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just as with &amp;#34;who&amp;#34; queries there are issues to deal with - searching
for &amp;#34;when did Elvis die&amp;#34; might give you when Elvis was born instead
but again, these are great motivators for further exploration and
discussion.&lt;/p&gt;
&lt;p&gt;
So, there&amp;#39;s the project. What level of students can do this? It
depends. I first did this in my Software Devepment class. That class
was offered to student who had completed APCS-A. The class covered
using APIs and setting up a web application using Python and Flask so
they were able to do the entire project, soup to nuts. An APCS class
could also do the project without the web application just so long as
they have access to the search API. In fact, an intro programming
class could also have success with this project.&lt;/p&gt;
&lt;p&gt;
This was actually one of the lessons I&amp;#39;ve missed since I haven&amp;#39;t been
able to work it into my Hunter courses so I was really happy when the
class discussion led me to call and audible and talk about it.&lt;/p&gt;
&lt;p&gt;
I hope some of you out there experiment with it and if you do, I&amp;#39;d
love to hear about your tweaks, implementations and successes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Parts 1 and 2
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-2/&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Who Played Spiderman part 2</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman-2/</link>
      <pubDate>Sat, 13 Oct 2018 16:04:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman-2/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Parts 1 and 3
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-3/&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Part 2
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
When we left off &lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;last time&lt;/a&gt; we used a search engine API to gather a
whole bunch of documents with the term &amp;#34;played Spiderman&amp;#34; or &amp;#34;who
played Spiderman.&amp;#34; Now we have to process these documents to answer
the question. Fortunately, the documents are basically just big
strings of text.&lt;/p&gt;
&lt;p&gt;
Since we&amp;#39;re doing a &amp;#34;who&amp;#34; query  we want to find all the names in all
the documents. This leads to a class discussion on how to find names
in a large string. They&amp;#39;ll come up with rules like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;two adjacent words each with a capital first letter.&lt;/li&gt;
&lt;li&gt;an honorific (Mr, Ms, etc.) followed by a capitalized word&lt;/li&gt;
&lt;li&gt;A word that matches a name from a &amp;#34;popular name&amp;#34; list followed by a
capitalized word.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The class might come up with different or additional rules. Actually
writing the code to pull out the names is an nice little assignment
that can be done with classes at many different levels. A beginning
class might just use string operations while an intermediate one could
use regular expressions. &lt;/p&gt;
&lt;p&gt;
Will the students write code that always finds all the names? Probably
not. Will their code incorrectly identify some word sets as names?
Most likely. It doesn&amp;#39;t really matter. Actually, this is a good
thing. You now have a great platform to talk about false positives and
true negatives.&lt;/p&gt;
&lt;p&gt;
Now the moment of truth - what&amp;#39;s the most common name? To answer that
you have to decide on the meaning of &amp;#34;most common.&amp;#34; Is it the name
that appeared the most times? How about the name that appeared in the
most documents? Does it matter? Whichever way you do it, chances are
the correct answer will be near the top of your list.&lt;/p&gt;
&lt;p&gt;
Next up in part 3 - other types of queries and why I love this sequence of
lessons so much.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Parts 1 and 3
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-3/&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Who Played Spiderman part 1 or my Nifty Assignment (that was rejected)</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman/</link>
      <pubDate>Thu, 11 Oct 2018 17:16:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Parts 2 and 3
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;[[/post/who-played-spiderman-2/][Part 2]&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-2/&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wasn&amp;#39;t going to teach this lesson today. I was planning on starting
a multi day project starting with an exercise in specification writing
and design.&lt;/p&gt;
&lt;p&gt;
Beforehand though, we had to talk about classes. One of my students
asked if probability and/or statistics were really important for CS. I
started to cite a few examples and then decided to segue into
this. Normally, I do this as a couple of lessons which leads to a
project, we just did the first part. I might do it as a project with
my class later on.&lt;/p&gt;
&lt;p&gt;
I also submitted this as a &amp;#34;Nifty Assignment&amp;#34; for SIGCSE a couple of
years ago but it wasn&amp;#39;t accepted. I was going to share the lesson at
some point so, well, here goes.&lt;/p&gt;
&lt;p&gt;
It starts with a question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Who played Spiderman?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That&amp;#39;s it. Every student writes down their answer. No talking, no
Googling or other searching, just write something down.&lt;/p&gt;
&lt;p&gt;
We then go around the room an tally up the answers. I got something
like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Toby Maguire&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tom Holland&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Andrew Garfield&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Peter Parker&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I don&amp;#39;t know&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
So as a class, we think that Toby MAguire played Spiderman with Tom
Holland also being a good choice. &lt;/p&gt;
&lt;p&gt;
After painstakingly explaining that Peter Parker couldn&amp;#39;t play
Spiderman because he &lt;strong&gt;IS&lt;/strong&gt; Spiderman I also shared some of the more
interesting answers I&amp;#39;ve gotten over the years.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve gotten &amp;#34;the lady playing the song on the violin in the movie in
front of the subway&amp;#34; which is technically correct and I also get
Willem Dafoe because as the Green Goblin / Norman Osborn he &lt;strong&gt;PLAYED&lt;/strong&gt; Spiderman.&lt;/p&gt;
&lt;p&gt;
In any event, it appears that if we get a lot of data on who &amp;#34;played
Spiderman&amp;#34; it&amp;#39;s likely that the most popular result is the right
answer or at least the right answer will be among the most popular
results. Of course, this is &lt;a href=&#34;https://www.nbc.com/saturday-night-live/video/common-knowledge/n9612&#34;&gt;not always the case&lt;/a&gt; but with reliable
data sources. &lt;/p&gt;
&lt;p&gt;
So, the basic idea is that if we have a question to answer like &amp;#34;Who
played spiderman?&amp;#34; we can start by collecting a whole bunch of
documents from the web with terms like &amp;#34;played Spiderman&amp;#34; in them.&lt;/p&gt;
&lt;p&gt;
When I first taught this lesson, we used the Google API to search for
web pages with the search terms in them but more recently I&amp;#39;ve used
the Bing API instead.&lt;/p&gt;
&lt;p&gt;
This leaves us with a large number of documents that could potentially
answer a search for &amp;#34;who played Spiderman?&amp;#34; &lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll leave it at this for now. Next time, we&amp;#39;ll talk about how we can
go from this collection of documents to a likely answer to our query. &lt;/p&gt;
&lt;p&gt;
Tune in again tomorrow, same bat Time, same bat channel.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Parts 2 and 3
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;ul&gt;
&lt;li&gt;[[/post/who-played-spiderman-2/][Part 2]&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-2/&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Globals Breaks And Returns, oh my</title>
      <link>https://cestlaz.github.io/post/globals-breaks-and-returns/</link>
      <pubDate>Sat, 06 Oct 2018 15:48:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/globals-breaks-and-returns/</guid>
      <description>
&lt;ul&gt;
&lt;li&gt;Never use global variables&lt;/li&gt;
&lt;li&gt;Never break out of a loop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are two &amp;#34;best practices&amp;#34; that are frequently touted in early CS
classes both at the high school and college level.&lt;/p&gt;
&lt;p&gt;
They came up a couple of times yesterday. Once in the Facebook APCS-A
teachers group and once on &lt;a href=&#34;http://blog.acthompson.net/2018/10/if-you-are-using-global-variables-you.html&#34;&gt;Alfred Thompson&lt;/a&gt;&amp;#39;s blog.&lt;/p&gt;
&lt;p&gt;
Alfred post was topically on global variables. Actually it was deeper than just global
variables. It&amp;#39;s also about how students progress - what they can figure
out at various stages of progress and how what seems like a good idea
early on the path to computer science doesn&amp;#39;t seem so great later on.&lt;/p&gt;
&lt;p&gt;
The discussion on the APCS-A group started with a discussion of this
code and its &lt;code&gt;break&lt;/code&gt; statement as opposed to having the loop&amp;#39;s exit
condition in the boolean up top:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// do stuff
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;condition&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
These two &amp;#34;best practices&amp;#34; - not using globals and not breaking out of
loops are frequently taught to students at a point when reasons for
the best practice aren&amp;#39;t always clear. &lt;/p&gt;
&lt;p&gt;
Actually, these aren&amp;#39;t even universally best practices.&lt;/p&gt;
&lt;p&gt;
Looking at the while loop, You might have event driven code with a
while loop acting as a dispatcher:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// do stuff
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;some event&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; that event&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;some other event&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; that event&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// etc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;exit event&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Nothing wrong with that structure. It&amp;#39;s clean, easy to read and easy
to reason about. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen loops that use extra variables and crazy boolean expressions
so as to avoid using a &lt;code&gt;break&lt;/code&gt; statement so that they follow the &amp;#34;best
practice&amp;#34; but end up with much messier code.&lt;/p&gt;
&lt;p&gt;
This is not to say that you should always use &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; for that matter but rather that the best practice should be to
consider if it makes the code cleaner, easier to read, and more
maintainable or not. &lt;/p&gt;
&lt;p&gt;
On the global front things are also not so clear. Sure, storing
information in globals  and then using them indiscriminantly in
assorted methods or functions is both bad form and dangerous but there
are times when using globals make sense. &lt;/p&gt;
&lt;p&gt;
Back in &amp;#34;the day&amp;#34; I was a C programmer. I used single C source files
along with their matching .h include files to enable &lt;strong&gt;object typed&lt;/strong&gt;
programming. Each file was a singleton object. Functions in the file
were methods using some naming convention to demarcate public vs
private, and variables that were global to the file as class variables
(or instance variables but there was only ever one instance of any
given class). Technically I broke the rules but the technique was very
effective and allowed me to write large maintainable systems. &lt;/p&gt;
&lt;p&gt;
More recently I&amp;#39;ve been playing with &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; for front end
development. Vue uses a central data store - Vuex to maintain
state. Basically a place for global variables to manage the state of
your application. Again, technically global but with rules and
protocols to make things work without the usual danger associated with
globals.&lt;/p&gt;
&lt;p&gt;
A great comment on the Facebook thread &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; included this Hal
Ableson quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#34;Programs must be written for people to read, and only incidentally for machines to execute.&amp;#34; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
and noted that this is particularly true on the AP Exam and after all,
the original question was posed on a forum about APCS-A. With this in
mind, you shouldn&amp;#39;t &lt;strong&gt;try&lt;/strong&gt; to use globals or cleverly or creatively 
use &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; but they do have their places.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve used globals in both professional and personal work when
appropriate and I don&amp;#39;t shy away from &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; and use
them regularly. The real &lt;strong&gt;best practice&lt;/strong&gt; is that you consider why you
are or aren&amp;#39;t using these constructs and make a choice that makes
sense for you, your group, or your team. &lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Footnotes
&lt;/h2&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr class=&#34;footnotes-separatator&#34;&gt;
&lt;div class=&#34;footnote-definitions&#34;&gt;
&lt;div class=&#34;footnote-definition&#34;&gt;
&lt;sup id=&#34;footnote-1&#34;&gt;&lt;a href=&#34;#footnote-reference-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;div class=&#34;footnote-body&#34;&gt;
&lt;p&gt;While I will identify sources when they publish content publicly on ablog or Twitter, since
the Facebook group is semi-private, I don&amp;#39;t feel it&amp;#39;s appropriate to
state the names of commenters without asking]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>When the students know more than the teacher</title>
      <link>https://cestlaz.github.io/post/students-know-more/</link>
      <pubDate>Thu, 04 Oct 2018 16:07:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/students-know-more/</guid>
      <description>&lt;p&gt;
We&amp;#39;ve heard it many times with computer science - &amp;#34;the kids know more
than the teacher.&amp;#34; &lt;/p&gt;
&lt;p&gt;
On the one hand, the truth is that this isn&amp;#39;t so much the case. Kids
might use computers all the time but they don&amp;#39;t necessarily know
much about them or about computer science (&lt;a href=&#34;https://cestlaz.github.io/oldblog/keyboarding-dig-divite/&#34;&gt;link 1&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/posts/2015-01-15-kids-know-nuttin.html/&#34;&gt;link 2&lt;/a&gt;). Then
you have students who think they know all about CS but really
don&amp;#39;t. They might have picked up a bit of coding somewhere but more
often than not, the knowledge is pretty superficial.&lt;/p&gt;
&lt;p&gt;
On the other hand, you do have some cases where the students or a
subset of them do know more than the teacher. As K12 CS Education is
fairly nascent many of our teachers are brand new to the subject
matter. You might have kids who&amp;#39;s parents have a background and teach
them, kids who&amp;#39;s previous school had a solid program or you might have
some kids that are in that minority of people who can do it all on
their own. &lt;/p&gt;
&lt;p&gt;
In some cases, this problem will work itself out over time. States are
starting to require certification to teach computer science. Some of
these states have requirements that when met will result in teachers
who have a solid background in CS. In these cases, the problem will
eventually mostly be solved. Of course this will take years if not
decades and in states with weaker requirements the issue will never
disappear.&lt;/p&gt;
&lt;p&gt;
The issue of having students knowing more than the teacher isn&amp;#39;t
always a problem. A solid teacher can make sure a kid that&amp;#39;s ahead of
the class doesn&amp;#39;t dominate and intimidate the rest of the class and as
long as the teacher adds some value to that student things can work
out. &lt;/p&gt;
&lt;p&gt;
In any event, I was thinking earlier today that as our subject area
gains traction and starts to mature, perhaps we can learn from other
fields where students knowing more than teachers is not that uncommon.&lt;/p&gt;
&lt;p&gt;
The subjects that come to mind for me are art and music. Even though
NY has decimated it&amp;#39;s programs, there are still a few out there. When
I grew up and also through my children&amp;#39;s years in school there were
always students in all our music classes that were exceptional and well
beyond their respective teachers. &lt;/p&gt;
&lt;p&gt;
I never gave it much thought until now.&lt;/p&gt;
&lt;p&gt;
I know that the disciplines are different but I wonder if there&amp;#39;s
something us CS teachers can learn from music and art teachers in
terms of dealing with this issue.&lt;/p&gt;
&lt;p&gt;
Just some food for thought.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fall 2018 HS CS Tour</title>
      <link>https://cestlaz.github.io/post/fall-2018-hs-tour/</link>
      <pubDate>Sat, 29 Sep 2018 16:57:26 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/fall-2018-hs-tour/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve written before about why &lt;a href=&#34;https://cestlaz.github.io/posts/hunter-cs-important/&#34;&gt;Hunter College CS is so important&lt;/a&gt; for
NYC and I&amp;#39;ve been working hard to develop our Daedalus Scholars honors
CS program -  a program in which students receive a scholarship along
with all sorts of special opportunities to add on to their in class CS
education. The program and Hunter CS as a whole have &lt;a href=&#34;https://cestlaz.github.io/posts/hunter-cs-year-two/&#34;&gt;made a lot of
progress&lt;/a&gt; over the past two years and each year I roll out new
special activities and events for my honors students. Still, a major
challenges is getting the word out and building our reputation. Anyone
who takes a close look at what we&amp;#39;re doing can see we&amp;#39;re growing
something special but we still have to convince students and parents
who may not even realize that Hunter offers a CS degree to come to us
instead of going to more well known albeit much more expensive programs.&lt;/p&gt;
&lt;p&gt;
To that end I try to visit as many high schools as I can during the
Fall semester to speak to high school seniors.&lt;/p&gt;
&lt;p&gt;
I spent last Friday at Packer Collegiate.&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Great to have &lt;a href=&#34;https://twitter.com/zamansky?ref_src=twsrc%5Etfw&#34;&gt;@zamansky&lt;/a&gt; come by and talk to juniors and seniors in the advanced CS about the tech sector and options for study including the amazing program at Hunter &lt;a href=&#34;https://t.co/ubHNfyt8Y9&#34;&gt;pic.twitter.com/ubHNfyt8Y9&lt;/a&gt;&lt;/p&gt;&amp;mdash; saber khan (@ed_saber) &lt;a href=&#34;https://twitter.com/ed_saber/status/1045768969519542272?ref_src=twsrc%5Etfw&#34;&gt;September 28, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
I was invited by my friend &lt;a href=&#34;https://twitter.com/ed_saber&#34;&gt;Saber Khan&lt;/a&gt; who runs the weekly twitter
#EthicalCS chat among other things.&lt;/p&gt;
&lt;p&gt;
When I first started doing school visits I had a tough time figuring
out exactly what to say - I&amp;#39;m no salesman - I&amp;#39;m not good at it and I
don&amp;#39;t like doing it. Fortunately, I didn&amp;#39;t have to be a salesman. I
decided I&amp;#39;d talk to the students about questions they should be asking
themselves as they consider where to go after graduation. I talk about
school location, community, and culture. I also talk about majors - BA
vs BS, Major vs Minor, niche majors, and possible career paths. I also
talk about tech sectors - how NY might be different from Sill icon
Valley might be different from Seattle or Boston.&lt;/p&gt;
&lt;p&gt;
I also tell them the truth about the undergraduate experience - how
you can get a great CS background at all sorts of schools. How
Algorithms is Algorithms and no matter where you go you&amp;#39;ll probably
use the same text and how while I have many former students at the
Googles and Facebooks of the world that  have gone to MIT and CMU I
also have plenty who end up at those companies or similar going to
Stony, Oberlin, Tufts, and yes, Hunter.&lt;/p&gt;
&lt;p&gt;
At the end of the talk I spend a few minutes talking about Hunter and
my honors program but it&amp;#39;s only a small part of the talk. I figure in
any given class there will be a few kids who could be a fit for my
program and I want the time spent to be worthwhile for the entire
class.&lt;/p&gt;
&lt;p&gt;
Sometimes guidance people sit in when I talk to the students and
almost always they tell me how valuable it was for the students to
have someone like me come in and talk frankly about the college
application and acceptance process.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s going to take time to build our reputation at Hunter but I think
that going around to students and talking honestly about college and
not giving the hard sell helps build trust and our reputation and over
time, people will realize the value we&amp;#39;re bringing to the table and
come to us. It&amp;#39;s already happening.&lt;/p&gt;
&lt;p&gt;
Now, the only other challenge is to get more high schools to bring me
in. Next week I&amp;#39;m visiting NEST+M and Brooklyn Tech and I&amp;#39;ve got a few
more on the calendar in upcoming weeks but would love to get to a
bunch more.&lt;/p&gt;
&lt;p&gt;
So, if you&amp;#39;re at a NY area High School and you think there&amp;#39;s a fit -
hit me up - I&amp;#39;d love to visit and meet and talk with your kids.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS vs CT vs Coding</title>
      <link>https://cestlaz.github.io/post/cs-ct-cc/</link>
      <pubDate>Fri, 28 Sep 2018 12:08:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ct-cc/</guid>
      <description>&lt;p&gt;
There&amp;#39;s been a lot of buzz recently concernting Computational Thinking
(CT) vs Computer Science (CS) vs Coding / Programming on the
interwebs.&lt;/p&gt;
&lt;p&gt;
Some of the questions and concerns that I&amp;#39;ve seen recently include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is CT??&lt;/li&gt;
&lt;li&gt;Will rich schools get CS and poor only CT?&lt;/li&gt;
&lt;li&gt;Will rich schools get CS and poor on coding?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first question is a big one and as a community we haven&amp;#39;t answered
it yet. I think about it as including things like algorithmic
thinking, decomposing problems, iterating, pattern recoginition and the like 
but I&amp;#39;m hardpressed to come up with a succinct formal definition. This
is somewhat related to the bigger problem of &amp;#34;what is CS?&amp;#34; A problem
the CS community is still dealing with. There seems to be an editorial
or letter in the &lt;a href=&#34;https://cacm.acm.org/&#34;&gt;Communications of the ACM&lt;/a&gt; every few months talking
about this. &amp;#34;We&amp;#39;re an enginering discipline. No, we&amp;#39;re a science. No
we&amp;#39;re an artistic endeavor&amp;#34; and on and on. It&amp;#39;s no surprise that the
rest of the world doesn&amp;#39;t understand what we are when we haven&amp;#39;t
figured it out ourselves. It&amp;#39;s also no surprise that this problem also
extends to CT.&lt;/p&gt;
&lt;p&gt;
One thing seemed clear on the twitter threads and posts I read is that
people seem to believe that CT and Coding are potentially overlapping
subsets of CS but you can do CT and Coding without CS.&lt;/p&gt;
&lt;p&gt;
While there&amp;#39;s probably a lot to say on the CT without CS or rather CT
without programming but today let&amp;#39;s look at the programming without CS
side of things.&lt;/p&gt;
&lt;p&gt;
This is probably of particular concern to me as a high school and now
college guy. There&amp;#39;s no doubt to me that there&amp;#39;s a big difference
between a kid learning coding/programming and computer science. &lt;/p&gt;
&lt;p&gt;
Coding can be a useful skill but without at least some computer
science it&amp;#39;s of limited value. Look at code schools as examples. Many
code schools work to prepare their customers for entry level tech
jobs. Usually, this includes the fundamentals of programming on top of
a typical business toolset. Examples would be a node.js backend,
Mongodb, and React.js. Another, albeit older one so probably not
taught as much now would be Ruby on Rails. Upon completing the
program, one can create a formulaic full stack applicationand knowing
that formula can make you employable in our current tech sector. The
downside though, as I&amp;#39;ve heard from countless employers, is that code
school graduates, by training, can&amp;#39;t break out of that formula. They
just don&amp;#39;t have the context, nor the problem solving ability - they
lack the CS. I&amp;#39;m sure many go on to learn the CS but that&amp;#39;s another
story. I was talking to a code school founder a few years ago about
this and asked &amp;#34;what happens when the formula chages.&amp;#34; The answer I
got was &amp;#34;that&amp;#39;s ok, we&amp;#39;ll just bring them back for a new bootcamp.&amp;#34; Of
course that will cost the kid another 10K or whatever bootcamps are
charging these days.&lt;/p&gt;
&lt;p&gt;
Now of course some code schools try harder than others and some
attempt build some CS into their programs but while there are always
outliers who can learn a great deal in a short period of time, and
often on their own, real education takes time and effort and a short
term bootcamp just doesn&amp;#39;t have that time.&lt;/p&gt;
&lt;p&gt;
Back to schools.&lt;/p&gt;
&lt;p&gt;
To start coding is easier to teach than CS. It can be formulaic and
there are lots of resources out there to assist teachers without a CS
background. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s also easy to test and show off. &lt;/p&gt;
&lt;p&gt;
I was at the NYTM once and they were celebrating a code school
project. The idea was really a good one - automatic sensing of heat in
low income apartments. I had a couple of questions about getting their
data out to the authorities but thought that if they figured that out
it could really do some good. On the other hand there was practically
no CS. As the project was described - it sets up it&amp;#39;s own mesh network
and communicates heat readings etc etc., I said to my neighbor in the
audience - sounds like an arduino with an XBee shield and yep, when
they showed the case, it was the exact form factor to hold an arduino
and xbee. That told me there was no CS. The mesh networking is
automatically done by the XBee so all they had to do was take the
sample arduino code to read the heat sensor and instead of sending it
to the serial port as the sample code does, send it to a particular
XBee node. Pretty much no CS and almost no programming. Just a great
idea and gluing some components together.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen the same with student projects that have been highlighted at
events with funders and politicians and in the media. I won&amp;#39;t describe
them as they are student projects and wouldn&amp;#39;t do that to a student
but the projects really had no CS under the hood. Nice ideas or even
more importantly nice stories around the kid but it was glue and
simple basic programming not CS.&lt;/p&gt;
&lt;p&gt;
Teaching real CS is harder to do, harder to assess and harder to show
off which makes teaching coding so enticing. &lt;/p&gt;
&lt;p&gt;
This is not to say that teaching coding without CS doesn&amp;#39;t have
value. I believe it does but it also leads to another problem – it
can be assessed improperly either with showy projects that are merely
gluing a theme on a fixed pattern or by tests that allow for
memorization and this at times has led to students being given too
much too early.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ve seen this with algebra and physics. Students end up taking these
subjects before they&amp;#39;re ready for them. They can pass the
standardized test  because they can plug numbers into formulas or can
recognize what form to use because there are a limited set of problem
patterns on the exams but they don&amp;#39;t really &amp;#34;get&amp;#34; the subject. This
leads to problems later on but of course that&amp;#39;s another teacher&amp;#39;s
problem.&lt;/p&gt;
&lt;p&gt;
This also happens in coding classes. While it&amp;#39;s usually pretty clear
when a kid isn&amp;#39;t getting a CS concept, I&amp;#39;ve seen programming
experiences where the student at first or in the short term can appear
to pass the assessments but later on it&amp;#39;s revealed that they weren&amp;#39;t
ready and they didn&amp;#39;t really learn what they were supposed to.&lt;/p&gt;
&lt;p&gt;
This is a problem. Just as we might have some students exposed to CT
without CS I think a major problem will be kids getting Coding without
CS. This will particularly be a danger in poorer schools and
communities but possibly across the board.&lt;/p&gt;
&lt;p&gt;
Just another thing we have to really be on guard for as we try to
achieve CS for all.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Not every lesson has to be magic</title>
      <link>https://cestlaz.github.io/post/not-always-exciting/</link>
      <pubDate>Tue, 25 Sep 2018 18:08:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/not-always-exciting/</guid>
      <description>&lt;p&gt;
If you check out Twitter, Facebook, Medium  and other blog sites you
might get the idea that you&amp;#39;re the worst teacher in the world. The
internet abounds with people sharing tweets and posts about wonderful
lessons they&amp;#39;ve just taught, witnessed or learned about in
professional development. Sure, the teacher forums rife with requests
for lesson ideas and resources but the shared material is always aces.&lt;/p&gt;
&lt;p&gt;
It makes sense, people in the community want to share things that
worked for them or things they think will work. &lt;/p&gt;
&lt;p&gt;
Still, for new teachers it can create an unhealthy illusion of what
really goes on in the classroom.&lt;/p&gt;
&lt;p&gt;
This is not to say that sharing of the good stuff is a bad thing but
the truth is that not every lesson is a masterpiece, not every teacher
is a super charismatic showman, and not all topics lend themselves to
creative teaching.&lt;/p&gt;
&lt;p&gt;
Why am I writing this now? Because I was planning lessons earlier
today and I&amp;#39;m at one of those places where I&amp;#39;m not going to be able to
deliver a whiz-bang lesson in my next class. One of my classes this
semester is for beginners so we&amp;#39;re building up language skills from
the ground up. Right now I want to do some loop applications but
there&amp;#39;s only so much we can do given what the students know. There are
reasons why I don&amp;#39;t want to do graphics with them right now. I also
haven&amp;#39;t introduced lists yet and don&amp;#39;t want to loop over strings yet
so I&amp;#39;m left with doing mathy stuff.&lt;/p&gt;
&lt;p&gt;
I think I&amp;#39;ll look at Newton&amp;#39;s method for square roots. It&amp;#39;s
interesting for the math inclined and does let us explore issues with
floating point and accuracy. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not going to be super exciting for everyone though and that&amp;#39;s okay. &lt;/p&gt;
&lt;p&gt;
I could do lists first but I don&amp;#39;t want the kids to have to handle so
much new material so quickly. I&amp;#39;d rather keep the pace slower and work
with what they&amp;#39;ve just learned for a bit. &lt;/p&gt;
&lt;p&gt;
I could also do graphics but that adds a level of overhead I don&amp;#39;t
want to get into now.&lt;/p&gt;
&lt;p&gt;
The idea is to look at the long game. A class runs a whole semester or
possibly a year. You&amp;#39;re going to have some special memorable lessons
and some mundane ones and that&amp;#39;s nothing to be ashamed of. &lt;/p&gt;
&lt;p&gt;
We&amp;#39;re still mostly going to see best practices shared online with only
a few brave souls sharing disaster classes and asking for help. That&amp;#39;s
just how the internet works. It&amp;#39;s not the worst thing in the
world. Just remember when you&amp;#39;re struggling to come up with a good
lesson or you&amp;#39;ve just taught a bad one that tomorrow&amp;#39;s will be
better. Judge yourself by your students long term development, not one
day at a time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What CS should we teach in HS</title>
      <link>https://cestlaz.github.io/post/what-cs-in-hs/</link>
      <pubDate>Sun, 23 Sep 2018 16:54:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/what-cs-in-hs/</guid>
      <description>&lt;p&gt;
I wanted to chime in on Alfred Thompson&amp;#39;s post last week on &lt;a href=&#34;http://blog.acthompson.net/2018/09/deciding-what-to-include-in-high-school.html&#34;&gt;what to
include in a HS CS class&lt;/a&gt; but was working on moving blogging platforms
so didn&amp;#39;t get a chance so I&amp;#39;ll say a few words here.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;ve been here before you probably know I&amp;#39;m not a fan of &lt;a href=&#34;https://cestlaz.github.io/posts/standards-who-for/&#34;&gt;the
standards&lt;/a&gt; and I certainly am no fan of the College Board and the AP
program so what&amp;#39;s my take?&lt;/p&gt;
&lt;p&gt;
The truth is, my take doesn&amp;#39;t matter. Not in terms of specifics
anyway. Every school is different. Different kids, teachers, parents,
community, and culture so while there might be some things from the
program I designed at Stuy that work at another school there will be
plenty of things that don&amp;#39;t. I&amp;#39;m now designing first year experiences
at Hunter and while I take lessons earned away from my Stuy
experience, I&amp;#39;m now teaching different kids in a different environment
so the answer to the question &amp;#34;what do I teach them and how?&amp;#34; is different.&lt;/p&gt;
&lt;p&gt;
The important thing to consider are the questions you should ask and
the answers you come up with.&lt;/p&gt;
&lt;p&gt;
The first question is &amp;#34;why?&amp;#34; Why are you doing CS in your school? Is
it for kids already interested in CS? Is it &amp;#34;for all?&amp;#34; In either case,
what do you want them to get out of it?&lt;/p&gt;
&lt;p&gt;
Is it for employment after high school? If so you might want to
consider locally used tools and technologies and also look at more
vocational tech like DevOps, SysAdmin and networking.&lt;/p&gt;
&lt;p&gt;
Is it in support of other classes while in high school or college? You
might want to look at aspects of CS that cross over into other disciplines.&lt;/p&gt;
&lt;p&gt;
You&amp;#39;ll then have other questions dealing with resources, class size,
required classes vs electives and so on.&lt;/p&gt;
&lt;p&gt;
At some point schools get to the point of figuring out what specific
topics to include. Many teachers now veer to an assortment of hot
topics that interest them or alternatively go the other way and try to
do whatever the students want. I&amp;#39;m not a  big fan of either. Don&amp;#39;t get
me wrong, if I worked in a rich private institution with tiny class
sizes and lots of resources I&amp;#39;d love to be student directed after the
basics but that&amp;#39;s a luxury that public school educators can&amp;#39;t really
afford. I&amp;#39;m also not a fan of the &amp;#34;hot topic&amp;#34; approach. &lt;/p&gt;
&lt;p&gt;
At Stuy, I tried to look at the complete sequence as a program. I
wanted the designation of &amp;#34;Stuy CS graduate&amp;#34; to mean something so I
looked at what the kids trajectories were after graduation and I tried
to develop a program that best launched them on that trajectory. That
meant designing an intro class that could both launch CS minded kids
into our more advanced classes and also give non-CS kids everything
they needed for their next levels. &lt;/p&gt;
&lt;p&gt;
The motivation and design of the intro course is a topic unto itself
but I&amp;#39;ll share what I considered when designing our post AP CS
courses. One of the first guidelines I follow is &amp;#34;don&amp;#39;t give them a
course that they&amp;#39;ll have to take later anyway.&amp;#34; A second is &amp;#34;set up
courses that support the students in what they&amp;#39;ll have to take later&amp;#34;
and finally &amp;#34;fill in the gaps.&amp;#34; &lt;/p&gt;
&lt;p&gt;
With this in mind, we ended up with a Graphics course, Systems course
and a two semester Software Development class and it&amp;#39;s worked pretty
well. &lt;/p&gt;
&lt;p&gt;
Had I been at another school and designed it&amp;#39;s sequence it would
likely look different. I would have developed the program the same
way but would likely have ended up with something different albeit
with similar themes.&lt;/p&gt;
&lt;p&gt;
I get emails and calls now and then from schools asking for advice on
building their CS programs. Some want the easy way out - they want a
drop in curriculum with little regard for the fit or worse, they want
APCS because it&amp;#39;s AP. Those conversations usually don&amp;#39;t go
anywhere. Other schools ask for help and ask for a curriculum. I&amp;#39;ll
say I can&amp;#39;t help with that but I&amp;#39;d love to talk and to get to know the
school and together we can come up with the right program. That&amp;#39;s a
longer process and is more work. It&amp;#39;s also more likely to result in a
good sustainable program and building those are both better and a lot
more fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Two Faces of Project Based Learning</title>
      <link>https://cestlaz.github.io/posts/two-faces-of-pbl/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/two-faces-of-pbl/</guid>
      <description>&lt;p&gt;
If one looks at my twitter feed they&amp;#39;ll notice that in addition to CS
Ed, another issue I&amp;#39;m passionate about is school reform or rather
resistance to what is popularly known as and mislabeled as school reform. I&amp;#39;m anti
vouchers, charter schools, high stakes testing and more. One of the
heroes of this resistance is education historian Diane Ravitch. I&amp;#39;m a
big fan of Diane&amp;#39;s and she&amp;#39;s one of the true great champions of public
schools, kids, and teachers. She blogged today about how a superintendent on Long Island &lt;a href=&#34;https://dianeravitch.net/2018/07/27/new-york-district-on-long-island-shows-that-problem-based-curriculum-produces-better-results-than-test-prep/&#34;&gt;replaced test
prep with project based learning&lt;/a&gt;. The post which talks about how this
superintendent improved test results  is worth a read. My only
quibble was that we shouldn&amp;#39;t read anything into the results for a
variety of reasons including the fact that the group of students who
did the project based learning (PBL) units instead of test prep were
self selecting volunteers.&lt;/p&gt;
&lt;p&gt;
One of the comments caught my eye:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PBL is just another “student-centered” fad…&lt;/p&gt;
&lt;p&gt;
PBL operates on the myth of “transference” perpetuated by non-educators.&lt;/p&gt;
&lt;p&gt;
…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The comment continues on with a number of good points.&lt;/p&gt;
&lt;p&gt;
Why am I writing about it here? Because PBL is a big CS Ed buzzword
and like most buzzwords there&amp;#39;s both truth at the root of the hype and
hype that distorts the truth.&lt;/p&gt;
&lt;p&gt;
When done right with the right group of kids, project based learning
can be wonderful but it takes a lot of time and effort. You can&amp;#39;t just
set the kids loose to learn. You&amp;#39;ve got to train them to work
together, set up the project, as the teacher, you&amp;#39;ve got to know the
subject so as to know when to guide, when to tell, when to prod, and when to leave
them alone. Doing it right, at least for most students, is certainly
not giving them the instruction sheet and going off the check your
email.&lt;/p&gt;
&lt;p&gt;
On the other hand, it&amp;#39;s easy to do it wrong. If you&amp;#39;ve got high
performing kids, they&amp;#39;ll figure things out. If you&amp;#39;ve got a few high
performing kids, they can mask the fact that the majority of a group
isn&amp;#39;t getting things. You might have an assignment where a kid figures
out a formula from discovered data and might be able to then use it to
make predictions but there&amp;#39;s a good chance they won&amp;#39;t understand why
it works or it&amp;#39;s root derivation. That&amp;#39;s where we need the teacher.&lt;/p&gt;
&lt;p&gt;
One of the dangers of bad PBL is that it&amp;#39;s sexy. Kids are engaged and
it appears to work - particularly when the teacher doesn&amp;#39;t know the
subject area. This is my great fear whenever I hear things about
teachers being &amp;#34;Lead Learners.&amp;#34; Sure, when you&amp;#39;re a converted
something else teacher moving into CS you won&amp;#39;t know the subject
matter but that has to change over time. I&amp;#39;ve seen enough instances of
cases where teachers never develop their chops and just throw projects
at the kids augmented by scripted curricula or computer driver
content. The kids get through the class or program but are not
prepared for the next class or next level. I&amp;#39;ve seen this with the old
Cisco curriculum, any number of after school and summer programs -
some VERY highly regarded ones and I think we&amp;#39;ll see more and more of
this in states that are pushing CSforAll without developing the
necessary pre and in service programs for their teachers.&lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t let my last two paragraphs leave you feeling that I&amp;#39;m anti
PBL. I&amp;#39;m not. It&amp;#39;s great when done right and if you have thee time and
resources in your school and classes you should be using it when
appropriate.&lt;/p&gt;
&lt;p&gt;
If you want some pointers on how to get going in the right direction with PBL in CS  check out &lt;a href=&#34;https://www.amazon.com/Computer-Science-K-12-Imagining-possibilities-ebook/dp/B07DYDXBSH/ref=sr_1_1?ie=UTF8&amp;amp;qid=1532808363&amp;amp;sr=8-1&amp;amp;keywords=doug+bergman&#34;&gt;this
book&lt;/a&gt; by my buddy Doug Bergman. It&amp;#39;s a great getting started guide by a
great teacher. He&amp;#39;s basically Mr. PBL and he does it right.  If you&amp;#39;re new to CS you&amp;#39;ll still need to learn content
and if you&amp;#39;re new to teaching, you&amp;#39;ll be developing your chops for
your entire career but it&amp;#39;s a great resource to get you and then your
kids started on the journey.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Time To Create An Ethics Course</title>
      <link>https://cestlaz.github.io/posts/time-to-create-an-ethics-course/</link>
      <pubDate>Sat, 21 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/time-to-create-an-ethics-course/</guid>
      <description>&lt;p&gt;
I think it&amp;#39;s time for me to start developing a CS Ethics class.&lt;/p&gt;
&lt;p&gt;
An ethics course isn&amp;#39;t a replacement for having teachers that live and
model good behavior and weave ethical issues throughout the curriculum
but still, adding a separate course on top of that has its merits.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not in a rush to create this course. I might be done in a month or
it might take a couple of years. When I&amp;#39;m done, I&amp;#39;ll add it as an
option in my CS Teacher education programs but hopefully it will be an
attractive course for undergrad CS majors as well.&lt;/p&gt;
&lt;p&gt;
While it&amp;#39;s easy enough to come up with possible topics - privacy,
moral responsibilities, biased algorithms, net neutrality and on and
on I&amp;#39;m looking for this course to have a serious coding component. I
want the students to build things to really understand the
implications of what they&amp;#39;re studying.&lt;/p&gt;
&lt;p&gt;
One topic I definitely want to cover is &lt;a href=&#34;https://news.harvard.edu/gazette/story/2011/10/youre-not-so-anonymous/&#34;&gt;anonimity&lt;/a&gt;. I&amp;#39;d love to find
the right combination of data sets and have the class discover that
some hidden information in the sets isn&amp;#39;t nearly as hidden as it seems
to be. When I was at Stuy, I was thinking about
having the kids give me permission to use their class schedules since
even with names removed we could probably identify many kids by
electives and overlapping classes. I have no idea what I&amp;#39;ll be able to
do at Hunter. If I can come up with something good I think this will
form the basis of a pretty amazing part of the class.&lt;/p&gt;
&lt;p&gt;
Another project I&amp;#39;d love to put together is something dealing with a
biased algorithm. Again, I don&amp;#39;t know where this will go, maybe
something where I can seed the class so that different groups
implement some project differently and we can then analyze each groups
biases, hidden or otherwise.&lt;/p&gt;
&lt;p&gt;
Beyond these two, I&amp;#39;m not sure.&lt;/p&gt;
&lt;p&gt;
How about you? Anyone out there have any good ideas for programming
projects for an ethical CS course? If so, please share. It might be a
while but when I do finish putting this together I&amp;#39;ll be sure to
publish whatever the end result is.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>