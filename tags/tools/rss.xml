<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tools on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/tools/</link>
    <description>C&#39;est la Z (tools)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Sep 2018 19:02:09 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/tools/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Using Emacs Series</title>
      <link>https://cestlaz.github.io/stories/emacs/</link>
      <pubDate>Wed, 19 Sep 2018 19:02:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/stories/emacs/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Link to current configuration: &lt;a href=&#34;https://github.com/zamansky/using-emacs&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/dot-emacs&#34;&gt;https://github.com/zamansky/dot-emacs&lt;/a&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-introduction&#34;&gt;Introduction&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-1-setup&#34;&gt;Video 1 - Setting up the package manager&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-2-org&#34;&gt;Video 2 - Intro to Org Mode&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-3-elisp&#34;&gt;Video 3 - How to think about Emacs&lt;/a&gt; 
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-4-buffers&#34;&gt;Video 4 - Buffers&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-5-windows&#34;&gt;Video 5 - Windows&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-6-swiper&#34;&gt;Video 6 - Search / Swiper&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-7-avy&#34;&gt;Video 7 - Navigation / avy&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-10&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-8-autocomplete&#34;&gt;Video 8 - Autocomplete&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-9-themes&#34;&gt;Video 9 - Themes&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-10-org-init&#34;&gt;Video 10 - Org init files&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-11-reveal&#34;&gt;Video 11 - org-reveal / reveal.js&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-14&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-14&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-12-python&#34;&gt;Video 12 - Python, Flycheck, Jedi&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-15&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-15&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-13-yasnippet&#34;&gt;Video 13 - Python, Yasnippet&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-16&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-16&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-14-thoughts&#34;&gt;Video 14 - Thoughts on Using Emacs&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-17&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-17&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-15-macros&#34;&gt;Video 15 - Macros&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-18&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-18&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-16-undo-tree&#34;&gt;Video 16 - Undo Tree&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-19&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-19&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-17-misc&#34;&gt;Video 17 - Small packages&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-20&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-20&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-18-narrow&#34;&gt;Video 18 - narrowing and iedit&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-21&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-21&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-19-live&#34;&gt;Video 19 - moving to a live config&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-22&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-22&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-20-yanking&#34;&gt;Video 20 - Yanking&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-23&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-23&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-21-web-mode&#34;&gt;Video 21-web-mode&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-24&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-24&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-22-emacsclient&#34;&gt;Video 22-emacsclient&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-25&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-25&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-23-capture-1&#34;&gt;Video 23 - capture 1&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-26&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-26&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-24-capture-2&#34;&gt;Video 24 - capture 2&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-27&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-27&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-25-tramp&#34;&gt;Video 25 - Tramp&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-28&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-28&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-26-gcal&#34;&gt;Video 26 - Google Calendar and Org Agenda&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-29&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-29&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-27-shell&#34;&gt;Video 27 - Shell and eshell&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-30&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-30&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-28-rectangles&#34;&gt;Video 28 - Rectangles&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-31&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-31&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-29-elfeed&#34;&gt;Video 29 - elfeed 1 &lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-32&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-32&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-30-elfeed-2&#34;&gt;Video 30 - elfeed 2 - Hydras &lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-33&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-33&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-31-elfeed-3&#34;&gt;Video 31 - elfeed 3 - macros&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-34&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-34&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-32-cpp&#34;&gt;Video 32 - C++&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-35&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-35&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-33-projectile-jump&#34;&gt;Video 33 - Projectile Dumb-jump&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-36&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-36&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet&#34;&gt;Video 34 - ibuffer and emmet&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-37&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-37&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-35-blogging&#34;&gt;Video 35 - blogging&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-38&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-38&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp&#34;&gt;Video 36 - A Touch of Elisp&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-39&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-39&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-37-treemacs&#34;&gt;Video 37 - Treemacs file browser&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-40&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-40&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-38-dired&#34;&gt;Video 38 - dired&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-41&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-41&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-39-mu4e&#34;&gt;Video 39 - mu4e&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-42&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-42&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome&#34;&gt;Video 40 - Atomic chrome&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-43&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-43&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-41-pandoc&#34;&gt;Video 41 - Pandoc&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-44&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-44&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-42-git-gutter&#34;&gt;Video 42 - Git Gutter and Timemachine&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-45&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-45&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-43-music&#34;&gt;Video 43 - Music&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-46&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-46&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-44-pdf&#34;&gt;Video 44 - pdf&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-47&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-47&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-45-company&#34;&gt;Video 45 - Company or Autocomplete&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-48&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-48&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets&#34;&gt;Video 46 - auto yasnippets&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-49&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-49&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-47-magit&#34;&gt;Video 47 - Magit&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-50&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-50&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-48-silversearcher&#34;&gt;Video 48 - silversearcher&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-51&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-51&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation&#34;&gt;Video 49 - mu4e conversation&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-52&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-52&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-50-presentations&#34;&gt;Video 50 - presentations&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-53&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-53&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-51-dtd-org&#34;&gt;Video 51 - Day to day with org-mode&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-54&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-54&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-52-eyebrowse&#34;&gt;Video 52 - eyebrowse&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-55&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-55&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-53-emailing-org-agenda&#34;&gt;Video 53 - Emailing org-agenda&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-56&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-56&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-54-org-tables&#34;&gt;Video 54 - Org Tables&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-57&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-57&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-55-irony-completions&#34;&gt;Video 55 - Irony Completions&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-58&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-58&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-56-dictionaries&#34;&gt;Video 56 - Dictionaries&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-59&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-59&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-57-dired-narrow&#34;&gt;Video 57 - Dired Narrow&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-60&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-60&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-58-lsp-mode&#34;&gt;Video 58 - lsp-mode&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-61&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-61&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-59-markdown&#34;&gt;Video 59 - markdown&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-62&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-62&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-60-restclient&#34;&gt;Video 60 - restclient&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-63&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-63&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-61-org-msg&#34;&gt;Video 61 - org-msg&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-64&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-64&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-62-magit-forge&#34;&gt;Video 62 - Magit Forge&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-65&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-65&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-63-clojurescript&#34;&gt;Video 63 - ClojureScript&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-66&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-66&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-64-notmuch&#34;&gt;Video 64 - Notmuch&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-67&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-67&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-65-live-python&#34;&gt;Video 65 - Live Python&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-68&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-68&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-66-eshell-elisp&#34;&gt;Video 66 - Eshell - Elisp&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-69&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-69&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-67-emacs-rant&#34;&gt;Video 67 - Emacs vs Vi(m)&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-70&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-70&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish&#34;&gt;Video 68 - Tramp and org-publish&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-71&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-71&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-69-floobits&#34;&gt;Video 69 - Floobits&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-72&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-72&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-70-org-protocol&#34;&gt;Video 70 - org-protocol&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-73&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-73&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-71-openwith&#34;&gt;Video 71 - openwith&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-74&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-74&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed&#34;&gt;Video 72 - customizing elfeed&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-75&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-75&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-72-rg&#34;&gt;Video 73 - RipGrep&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-76&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-76&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-74-eglot&#34;&gt;Video 74 - Eglot&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-77&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-77&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-75-bufler&#34;&gt;Video 75 - bufler&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-78&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-78&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-76-bookmarks-burly&#34;&gt;Video 76 - Bookmarks and Burly&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-79&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-79&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/advent-2020-day03&#34;&gt;Video 77 - Advent of Code 2020 day 3&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-80&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-80&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-78-grading&#34;&gt;Video 78 - Grading workflow&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-81&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-81&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-79-project&#34;&gt;Video 79 - Project&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 50 - presentations</title>
      <link>https://cestlaz.github.io/posts/using-emacs-50-presentations/</link>
      <pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-50-presentations/</guid>
      <description>&lt;p&gt;
Next weekend I&amp;#39;ll be attending the Computer Science Teachers
Association&amp;#39;s &lt;a href=&#34;https://www.csteachers.org/general/custom.asp?page=2018Conference&#34;&gt;annual conference.&lt;/a&gt; It&amp;#39;s probably the biggest conference
focussed on K12 Computer Science education. This year, in addition to
attending, I&amp;#39;ll be giving a talk on preservice and inservice CS
teacher preparation programs. I&amp;#39;ll be talking about the new New York
State certification requirements along with what we&amp;#39;re rolling out at
Hunter College.&lt;/p&gt;
&lt;p&gt;
This means putting together a slide deck for the session. When I have
to work collaboratively with non-Emacs users, I will usually go to
Google Docs for presentations. It works and the collaborative aspects
are nice but tools like Google Docs and Powerpoint are designed around
composing slides manually. I much prefer to use a tool where I can
focus on writing my presentation and have the tool turn it into a
presentation.&lt;/p&gt;
&lt;p&gt;
Org-mode is of course the ideal tool. As an outliner, it lends itself
to organizing a talk:&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;,* topic 1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the content for slide one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;,* topic 2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the content for slide two
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;,* topic 3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;etc.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I can embed code, tables, images, and more. I can also cycle
visibility so I can focus on individual sections. Org-mode also has a
number of export options to take a plain org file which is just ascii
with markup and export it as a presentation. In the video, I&amp;#39;ll take a
quick look at &lt;code&gt;ox-beamer&lt;/code&gt;, which exports to a Beamer presentation in LaTeX and then a PDF,
&lt;code&gt;epresent&lt;/code&gt; which presents right in Emacs and finally &lt;code&gt;ox-reveal&lt;/code&gt; wich
creates a &lt;code&gt;reveal.js&lt;/code&gt; presentation. I ultimately decide to continue to
use &lt;code&gt;ox-reveal&lt;/code&gt; as it&amp;#39;s pretty simple and flexible and I can also directly serve
the final presentation from my own laptop, a usb drive, or directly
from GitHub.&lt;/p&gt;
&lt;p&gt;
Check out the video to see how. If you want more information on using
&lt;code&gt;ox-reveal&lt;/code&gt; check out my earlier &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-11-reveal&#34;&gt;Using Emacs post and video&lt;/a&gt;.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/bRoSpJ23Kzk&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 49 mu4e-conversation</title>
      <link>https://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been using Emacs for email for a couple of years now. Not for
everything, for now my personal email is still Gmail but work is sent
and read through Emacs. I&amp;#39;m currently using &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e.html&#34;&gt;mu4e&lt;/a&gt; and while it has a
few quirks and limitations, I like it very much. You can take a look
on how I configure and use it &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-39-mu4e/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
The other day I saw &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/8qryri/mu4econversation_single_buffer_fullthread_display/&#34;&gt;this&lt;/a&gt; thread on Emacs about a new package -
&lt;a href=&#34;https://gitlab.com/ambrevar/mu4e-conversation&#34;&gt;mu4e-conversation&lt;/a&gt;. It&amp;#39;s a package that deals with email threads.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s pretty cool. You can invoke it whenever you&amp;#39;re in the headers
view you can just run &lt;code&gt;M-x mu4e-conversation&lt;/code&gt; and it combines all the
email messages in the current thread into a single buffer.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s pretty nice.&lt;/p&gt;
&lt;p&gt;
You can navigate between messages in the thread with &lt;code&gt;C-c C-n&lt;/code&gt; and
&lt;code&gt;C-c C-p&lt;/code&gt; and use most if not all of the usual mu4e goodness but on
top of that you can also toggle what the author calls tree mode by
hitting &lt;code&gt;V&lt;/code&gt;. Tree mode turns the thread into an org-mode tree - also
extremely cool.&lt;/p&gt;
&lt;p&gt;
On top of this, you can also make mu4e your default viewing mode by
setting a single variable with &lt;code&gt;(setq mu4e-view-func &amp;#39;mu4e-conversation)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
Although it&amp;#39;s very cool, I&amp;#39;m not sure if mu4e-conversation will find
its way into my workflow or not and probably won&amp;#39;t know for a
while. This is mostly due to the fact that it&amp;#39;s summer so work email
slows down and I won&amp;#39;t have too many long threads to play with this
on.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll report back once I give it a fair shake but in the meantime if
anyone out there has had the time to play with it, let us know what
you think.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/V5efS8uXANI&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 48 Silversearcher</title>
      <link>https://cestlaz.github.io/posts/using-emacs-48-silversearcher/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-48-silversearcher/</guid>
      <description>&lt;p&gt;
A couple of days ago I wrote about on my &lt;a href=&#34;http://cestlaz.github.io/posts/unit-tests-grading-workflow&#34;&gt;lab grading workflow&lt;/a&gt;. In the
post I mentioned that I used Emacs to easily navigate between student
folders and files so I can actually look at their work in addition to
their programs output and test results.&lt;/p&gt;
&lt;p&gt;
The key is a combination of &lt;code&gt;dired&lt;/code&gt; and &lt;a href=&#34;https://github.com/Wilfred/ag.el&#34;&gt;ag&lt;/a&gt;, Emacs&amp;#39;s interface to &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;the
Silver Searcher&lt;/a&gt; which is something like a recursive code grep on
steroids. I also briefly try to show &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt; in the video which allows
you to edit Emacs grep buffers, effectively allowing you to make
changes across a set of files all at once. It ended up not working
with silversearcher - if anyone out there knows why, please chime in.&lt;/p&gt;
&lt;p&gt;
Enjoy:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-sFTkCQ774o&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 47 - Magit</title>
      <link>https://cestlaz.github.io/posts/using-emacs-47-magit/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-47-magit/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been holding off on doing a &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt; video for a while. Mostly
because I wasn&amp;#39;t using it exclusively and also because there are
already a number of good Magit videos and resources out there.&lt;/p&gt;
&lt;p&gt;
What changed? Along with the new version of Magin, Jonas Bernoulli
wrote up &lt;a href=&#34;https://emacsair.me/2017/09/01/magit-walk-through/&#34;&gt;a walkthrough of the Magit interface&lt;/a&gt;. For whatever reason,
it all finally clicked.&lt;/p&gt;
&lt;p&gt;
In spite of what the documentation says, Magit &lt;strong&gt;is not&lt;/strong&gt; an interface
for git. Magit is a &lt;strong&gt;command and control&lt;/strong&gt; center for git. You can
launch it just to execute some git commands but you can also leave it
up and running in an Emacs window or frame as a constant project
overview.&lt;/p&gt;
&lt;p&gt;
Wow. Mind blown!!!&lt;/p&gt;
&lt;p&gt;
If you use Emacs for Deveopment, you &lt;strong&gt;have to&lt;/strong&gt; use Magit. If you don&amp;#39;t
use Emacs, you can load it on the side for Magit. If you&amp;#39;re not a
developer, learn to code so you can use Magit!!!!!&lt;/p&gt;
&lt;p&gt;
I tried to do justice to the package in the video. Magit along with &lt;a href=&#34;https://orgmode.org/&#34;&gt;Org
Mode&lt;/a&gt; are arguably Emacs killer apps - enough in and of themselves to
justify using Emacs.&lt;/p&gt;
&lt;p&gt;
Check out the video:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/1IYsiHXR620&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Tools and Complexity</title>
      <link>https://cestlaz.github.io/posts/tools-and-complexity/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/tools-and-complexity/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred Thompson&lt;/a&gt; wrote about &lt;a href=&#34;http://blog.acthompson.net/2018/04/thoughts-on-where-cs-education-tools.html&#34;&gt;CS education tools&lt;/a&gt; earlier today. I&amp;#39;ve
also been meaning to write on the topic but from a different point of
view.&lt;/p&gt;
&lt;p&gt;
I do my best to keep up with the latest and greatest in the CS world
both on the academic side as well as the professional one. That&amp;#39;s not
really possible, but I do my best. When I have a small project to work
on I&amp;#39;ll some times use it as an excuse to play with some recent
technology. Over December, I wanted to write an application viewer to
use for company / student internship matching. I started by looking at
&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; but ended up using &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; which I liked much more for a variety
of reasons.&lt;/p&gt;
&lt;p&gt;
The viewer served it&amp;#39;s purpose but I think it can be turned into a
much more comprehensive student / employer internship platform. I
tried to steal a few minutes over this past week&amp;#39;s spring break to
start a rewrite using another toolset, Clojure, Clojurescript and
Reagent. I&amp;#39;m really liking the Clojure stack and using
Emacs and Cider for the IDE is really blowing me away.&lt;/p&gt;
&lt;p&gt;
What I&amp;#39;ve noticed is that for every new language of framework you also
have to learn a whole set of ancillary tools.&lt;/p&gt;
&lt;p&gt;
It didn&amp;#39;t used to be that way. Back in the day, things were much
simpler. I remembering doing work at Goldman Sachs, it was as simple
as typing something on the command line like &lt;code&gt;cc file1.c file2.c
file3.c&lt;/code&gt;. I of course had to be cutting edge and use fancy modern
tools like &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;Make&lt;/a&gt;. What&amp;#39;s more, the tools I used in industry were very
similar to what I used in college.&lt;/p&gt;
&lt;p&gt;
We now live in very different times.&lt;/p&gt;
&lt;p&gt;
If you go to the getting started guides for React or Vue it&amp;#39;s pretty easy to
get hello world up and running but beyond that you start to fall in to
the Javascript tooling hole. To start you need either &lt;strong&gt;npm&lt;/strong&gt; or &lt;strong&gt;yarn&lt;/strong&gt;
just to manage packages and dependencies. Then you need a build system
or bundler like &lt;strong&gt;webpack&lt;/strong&gt;, &lt;strong&gt;browserify&lt;/strong&gt;, or &lt;strong&gt;parcel&lt;/strong&gt; and that&amp;#39;s not even
considering older options like &lt;strong&gt;gulp&lt;/strong&gt; and &lt;strong&gt;grunt&lt;/strong&gt; and ancillary tools
like &lt;strong&gt;babel&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
A typical React or Vue project is going to need a &lt;a href=&#34;https://github.com/krasimir/react-webpack-starter/blob/master/package.json&#34;&gt;project.json&lt;/a&gt; and
&lt;a href=&#34;https://github.com/krasimir/react-webpack-starter/blob/master/webpack.config.js&#34;&gt;webpack.config.js&lt;/a&gt; file and sometimes some other files as well. Check
out the links. They&amp;#39;re from a simple project template I found
online. Far from simple.&lt;/p&gt;
&lt;p&gt;
When I was playing with Vue.js a couple of months ago, I ended up
using Webpack to convert the source code into the final JS, take care
of live-reloading, and in general manage the project. I still have no
idea how most of it works. I don&amp;#39;t know if it&amp;#39;s just me but I&amp;#39;m very
uncomfortable relying on tools that I really don&amp;#39;t fully understand to
build my systems.&lt;/p&gt;
&lt;p&gt;
The Clojure world is little better with Leiningen and Boot. If you
don&amp;#39;t believe me, try to make heads or tails of &lt;a href=&#34;https://github.com/bhauman/figwheel-template/blob/master/src/leiningen/new/figwheel/project.clj&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
While it&amp;#39;s true that as a professional you&amp;#39;ll likely use one set of
tools on a day to day basis and you&amp;#39;ll eventually get to know them
that doesn&amp;#39;t mean it&amp;#39;s not a good idea to prepare kids for what&amp;#39;s to
come.&lt;/p&gt;
&lt;p&gt;
On the K12 side we have drag and drop languages, specialized learning
IDEs like BlueJ, simple cut down IDEs like Dr Racket and completely
online environments like repl.it. All great starter tools that
insulate beginners from the complexities to come. College&amp;#39;s
might get closer to the &amp;#34;real world&amp;#34; but just a tad.&lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t get me wrong, I like many of the tools used in K12
classes and there&amp;#39;s far too much complexity in the professional world to
throw at beginners. If we look at a student&amp;#39;s entire school
career, classes are already so packed with material it would be hard to
really prepare kids for the real world within their classes. You could
take that tried and true teacher / professor technique of just
requiring it and having the kids figure it out on their own but that&amp;#39;s
really just downright abusive.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t have an answer for this one.&lt;/p&gt;
&lt;p&gt;
I have my kids use tools like Git and GitHub early along with using
testing frameworks and external libraries. I also try to move my
students to a general purpose programmable platform like Emacs or
Vim. I think these are sound practices but students will still have a
big learning curve when they finally get to industry.&lt;/p&gt;
&lt;p&gt;
What I really would love it to see the tooling become simpler and
documentation better. &lt;a href=&#34;https://github.com/parcel-bundler/parcel&#34;&gt;Parcel&lt;/a&gt;, a Javascript bundler is one of the newer
kids on the block and is much simpler and cleaner than alternatives
like Webpack. The new version of Clojure has it&amp;#39;s own command line
tool which is also simpler than the alternatives. Maybe we are already
moving in the right direction and this entire rant will become moot in a couple of years.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Part 2</title>
      <link>https://cestlaz.github.io/posts/testing-part2/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-part2/</guid>
      <description>&lt;p&gt;
A few weeks ago I wrote about &lt;a href=&#34;https://cestlaz.github.io/posts/testing-testing/#.Wq7Ud3XwZhE&#34;&gt;introducing testing&lt;/a&gt; in CS classes,
specifically using a testing framework. In that post I talked about
the plan but now I can talk about the results.&lt;/p&gt;
&lt;p&gt;
My class interleaves with Hunter&amp;#39;s CSCI 13500 - Software Analysis and
Design I class. One day each week, my students have complete a hands
on lab focusing on whatever is being covered in the 13500 class. I
decided to use one of those labs as a first foray into testing.&lt;/p&gt;
&lt;p&gt;
I had each student use a classmates lab solution. They were to examine
their solution and write a test suite for the lab using the &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt;
C++ testing framework.&lt;/p&gt;
&lt;p&gt;
I think this proved to be a valuable exercise.&lt;/p&gt;
&lt;p&gt;
Partway into the exercise, a few students independently had an issue -
they couldn&amp;#39;t even build the tests.&lt;/p&gt;
&lt;p&gt;
The code looked right. Something like this:&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It looked like at textbook example of a test case but it wouldn&amp;#39;t even
compile.&lt;/p&gt;
&lt;p&gt;
In all cases, the original student code compiled and ran and gave the
correct result. All the students had code similar to this:&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This stumped everyone for a while - why wouldn&amp;#39;t the test even
compile.&lt;/p&gt;
&lt;p&gt;
The answer was &amp;#34;data types.&amp;#34; The lab specification required that
getValue was supposed to return a &lt;code&gt;double&lt;/code&gt; but in all the problem
cases, the student returned a &lt;code&gt;std::string&lt;/code&gt;. The lab appeared to work
since &lt;code&gt;std::cout&lt;/code&gt; handles strings as well as numeric data types but
once they put it in to a test case that actually checked types the
problem was apparent and easy to fix.&lt;/p&gt;
&lt;p&gt;
As it turns out, I was pretty excited about this – even before
finishign the tests, the act of writing tests revealed a problem. This
is a good thing.&lt;/p&gt;
&lt;p&gt;
From there, it was pretty easy for students to finish writing the
tests for their classmates labs.&lt;/p&gt;
&lt;p&gt;
Fast forward a week. This was the first lab where I required
the students to submit their own test suite as part of their lab. This
didn&amp;#39;t seem to slow anyone down by an appreciable and time will tell
if this leads to better development practices but it certainly made my
life easier. I was able to quickly move from repo to repo and type:&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make tests
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./tests -s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;... watch the tests run
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--- watch the program run&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Easy peasy.&lt;/p&gt;
&lt;p&gt;
Not only did it make it faster for me, it also gave me insights into
their programs by seeing their decisions in terms of test writing.&lt;/p&gt;
&lt;p&gt;
Is it a win?&lt;/p&gt;
&lt;p&gt;
At the very worst, they&amp;#39;re learning an
industry practice and at best, it&amp;#39;s going to help them improve as
software engineers. Add on the fact that it&amp;#39;s making my life as a
teacher easier both in terms of understanding the students work and in
terms of speed of evaluation. Sounds like a win to me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 46 Auto Yasnippets</title>
      <link>https://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</guid>
      <description>&lt;p&gt;
The other day I discovered &lt;a href=&#34;https://github.com/abo-abo/auto-yasnippet&#34;&gt;auto-yasnippet&lt;/a&gt;, another great package by
&lt;a href=&#34;https://github.com/abo-abo&#34;&gt;Oleh Krehel&lt;/a&gt; or abo-abo.&lt;/p&gt;
&lt;p&gt;
It looks like it&amp;#39;s going to be a great way to solve a particular
problem that come up now and again.&lt;/p&gt;
&lt;p&gt;
There are plenty of times when I want to create a number of similar
but slightly different blocks of text. The example on the project
site  is:&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You could use multiple cursors, a macro, or other methods to put in
the common text but you still have to deal with the parts of each line
that are unique, the red, green, and blue.&lt;/p&gt;
&lt;p&gt;
You could use a yasnippet but it&amp;#39;s unlikely that you&amp;#39;ll have a snippet
for every occasion. This is where auto-yasnippet comes in. You would
write the first line but add  a tilda as a placeholder:&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and then invoke &lt;code&gt;aya-create&lt;/code&gt;. This will get rid of the tildas and
create the auto-snippet. Then when you run &lt;code&gt;aya-expand&lt;/code&gt; it will put in
the snippet with the tilda locations as placeholders.&lt;/p&gt;
&lt;p&gt;
Very cool.&lt;/p&gt;
&lt;p&gt;
Check out the video:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/utrMabxgXbg&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 45 - Company or Autocomplete</title>
      <link>https://cestlaz.github.io/posts/using-emacs-45-company/</link>
      <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-45-company/</guid>
      <description>
&lt;p&gt;
This is a good time to be an Emacs user. In addition to all of the
great packages and tools being developed there seem to be more people
regularly blogging and making videos about Emacs than ever before.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://planet.emacsen.org/&#34;&gt;Planet Emacsen&lt;/a&gt; aggregates a ton of Emcas blogs and Emacs Legend Sacha
Chua posts what&amp;#39;s going on in emacs every week on her &lt;a href=&#34;http://sachachua.com/blog/category/geek/emacs/&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
on the video front, &lt;a href=&#34;https://www.youtube.com/channel/ucdetz7akmws0_gnjog01d2g&#34;&gt;uncle dave&lt;/a&gt; has recently joined the ranks of emacs
video producers. sometimes we&amp;#39;ll cover the same topic. dave made a
video on swiper the other week and i made one a year ago. the other
week we both made videos on mpd almost on the same day but dave
focussed on emms and i focussed on simple-mpc. i think this
is great because it gives different perspectives.&lt;/p&gt;
&lt;p&gt;
today, i watched dave&amp;#39;s video on &lt;a href=&#34;https://www.youtube.com/watch?v=xewzfruru6k&amp;amp;t=854s&#34;&gt;company&lt;/a&gt; mode for auto
completion. I&amp;#39;ve always used &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-8-autocomplete/&#34;&gt;autocomplete&lt;/a&gt; mode. I thought it would be
a good time for me to see how the other half lived.&lt;/p&gt;
&lt;p&gt;
You can find my configurations up on GitHub
(&lt;a href=&#34;https://github.com/zamansky/using-emacs&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs&#34;&gt;https://github.com/zamansky/using-emacs&lt;/a&gt;&lt;/a&gt;). The master branch is using
autocomplete and the company-test branch for company. I&amp;#39;ve also pulled
out the relevant code and am placing it down under the video.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what I&amp;#39;ve found so far:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/srFQwTvbaxY&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Company config (so far):
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package company
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq company-idle-delay &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq company-minimum-prefix-length &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(global-company-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package company-irony
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-backends&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-irony&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package irony
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c++-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-mode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-mode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-cdb-autosetup-compile-options&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package irony-eldoc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;irony-eldoc))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package company-jedi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:setup&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun my/python-mode-hook ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-backends&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-jedi&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my/python-mode-hook&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Autocomplete config
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package auto-complete
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(progn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(ac-config-default)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(global-auto-complete-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq py-python-command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python3&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq python-shell-interpreter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python3&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package jedi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:setup&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:ac-setup&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 44 - An org-mode workflow for application processing</title>
      <link>https://cestlaz.github.io/posts/using-emacs-44-pdf/</link>
      <pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-44-pdf/</guid>
      <description>&lt;p&gt;
One of my titles at Hunter College is Director of the Daedalus CS
Honors program. It&amp;#39;s something like a Hunter specific, CS specific
version of the CUNY Macaulay Honors program.&lt;/p&gt;
&lt;p&gt;
Hunter gives all its students the ability to get a great computer
science education at a fraction of the cost of a private institution
and if you&amp;#39;re a Daedalus scholar you also get a scholarship, a laptop,
special classes (with me :-) ), activities and more. Just the other
day we visited  &lt;a href=&#34;http://samsungnext.com/&#34;&gt;Samsung Next&lt;/a&gt; accelerator and earlier in the year we
made our annual visit to &lt;a href=&#34;http://www.catskillsconf.com/&#34;&gt;Catskills Conf&lt;/a&gt;, arguably my favorite event of
the year.&lt;/p&gt;
&lt;p&gt;
When deciding on which students to recommend for acceptance, I try to
glean as much information as I can about each applicant. When I feel
there&amp;#39;s not enough information, I&amp;#39;ve been known to reach out to
recommenders and other sources for more. But first I go through the
applications. For each student, I&amp;#39;m provided with a pdf file with a
bunch of data and also an entry in an internal Hunter online form with
even more.&lt;/p&gt;
&lt;p&gt;
For the first cohort, this wasn&amp;#39;t a big deal. I hadn&amp;#39;t even started at
Hunter when the applications closed so there was no
outreach. Everything was after the fact so there were very few
students to evaluate.&lt;/p&gt;
&lt;p&gt;
Last year, I was able to do some outreach and we had around 60 or so
applications for a little over 20 spots.&lt;/p&gt;
&lt;p&gt;
This year, there are well over 100 applicants (and we&amp;#39;re looking to
grow the program by a large number of students). All of a sudden, it
wasn&amp;#39;t so easy to navigate all the pdf files.&lt;/p&gt;
&lt;p&gt;
Emacs to the rescue. Using a combination of org-mod,  &lt;a href=&#34;https://github.com/politza/pdf-tools&#34;&gt;pdf-tools&lt;/a&gt;, and
&lt;a href=&#34;https://melpa.org/#/org-pdfview&#34;&gt;org-pdfview&lt;/a&gt; I&amp;#39;ve come up with a workflow that I very much like.&lt;/p&gt;
&lt;p&gt;
Take a look and let me know what you think:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LFO2UbzbZhA&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Testing, Testing</title>
      <link>https://cestlaz.github.io/posts/testing-testing/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-testing/</guid>
      <description>&lt;p&gt;
With CS4All being the buzzword of the day we&amp;#39;re paying a lot of
attention to the fact that when we teach a CS class for all students,
most of them won&amp;#39;t end up studying CS or going directly
into a tech heavy field.&lt;/p&gt;
&lt;p&gt;
Among those that do study CS though, there is another division. Those
studying CS as an academic exercise or to go on to graduate studies
and those who are going in to the tech sector. For those going into
the tech field, it&amp;#39;s important that they&amp;#39;re prepared in terms of
software development, design, and all those goodies not covered in CS
classes.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not advocating removing the good stuff currently in most colleg CS
curricua, although I will say that most CS programs I&amp;#39;ve reveiwed could benefit by
trimming some requriements and adding some electives. I am advocating
doing more than telling your students &amp;#34;comment your code,&amp;#34; - a refrain
many undergrads have heard frequently with little guidance.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m advocating to begin by bringing in tools and practices that either
don&amp;#39;t detract from current CS classes or in fact can add to or
streamline them.&lt;/p&gt;
&lt;p&gt;
Last year I wrote about &lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4/&#34;&gt;using Git and GitHub&lt;/a&gt; in my classes. Students
have to submit projects anyway and frequently have to work in teams so
using Git and a Git hosting service can actually make both student&amp;#39;s
and instructor&amp;#39;s class experiences better while introducing them to an
industry best practice.&lt;/p&gt;
&lt;p&gt;
Today I want to talk about testing.&lt;/p&gt;
&lt;p&gt;
Students are always told to test their code but frequently not given
tremendous guidance. The results can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;projects that don&amp;#39;t compile&lt;/li&gt;
&lt;li&gt;projects that compile and run but not the way they&amp;#39;re supposed to.&lt;/li&gt;
&lt;li&gt;wonky input or interfaces&lt;/li&gt;
&lt;li&gt;projects that don&amp;#39;t work for all cases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
On the instructor side, we have to evaluate the student&amp;#39;s
submissions and deal with all of this. Some teachers use auto graders
to help. I have mixed feelings on them. On the one hand they can speed
up grading but on the other hand it&amp;#39;s important for me as the teacher
to actually dive into the student&amp;#39;s code. In any case, using an auto grader
is actually somewhat similar to running a test suite.&lt;/p&gt;
&lt;p&gt;
Why not have the students create their own test suites? If done right,
this should encourage students to evaluate their own code more
carefully and also cut down on the time it takes the intructor to
evaluate a given submission.&lt;/p&gt;
&lt;p&gt;
This means that we have to use a testing framework with a very low
cost of entry.&lt;/p&gt;
&lt;p&gt;
I ended up finding &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt; for C++. It&amp;#39;s really simple and just a
single include file. This means that students don&amp;#39;t have to actually
install anything on their machines. Here&amp;#39;s the example from the
project page:&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; alt=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; title=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
Basically, the students can just start writing tests.&lt;/p&gt;
&lt;p&gt;
Python also has a couple of low friction testing options. One is to
use the built in &lt;a href=&#34;https://docs.python.org/3/library/doctest.html&#34;&gt;doctest&lt;/a&gt; facility. Basically you put sample runs in the doc
string at the top of a function with the expected output:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This might seem a little cumbersome, particularly if you look at the
example at the link. It also requires the tests go on top of each
function and that the tests will print out as part of the docstring.&lt;/p&gt;
&lt;p&gt;
The other easy Python option is the built in &lt;a href=&#34;https://docs.python.org/3/library/unittest.html&#34;&gt;unittest&lt;/a&gt; module.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an example of testing strings from the link above:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I havn&amp;#39;t played with Java testing in years but I&amp;#39;d guess there&amp;#39;s
something similarly light weight.&lt;/p&gt;
&lt;p&gt;
Tomorrow I&amp;#39;m hoping to finish the groundwork on using C++ doctest with
my class and I&amp;#39;ll write another post afterwards. Probably after SIGCSE
since I&amp;#39;ll be attending that from Wednesday on.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll see how this goes but I&amp;#39;m guessing it will work well. If it
does, it should make my life as a grader easier and also get the kids
on track to using test frameworks - something they&amp;#39;ll need wherever
they end up.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 40 - Atomic Chrome</title>
      <link>https://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</guid>
      <description>
&lt;p&gt;
Thanks to everyone who voted for topics or commented with suggestions
for videos. I&amp;#39;ll try to get to them in the coming months.&lt;/p&gt;
&lt;p&gt;
Today is just a quick hit on Atomic Chrome - an Emacs package and
browser extension that allows you to edit web form inputs with Emacs.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
UPDATE
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I forgot to mention that you can set a shortcut key, at least in chrome rather than
clicking on the icon. This makes things much smoother.&lt;/p&gt;
&lt;p&gt;
All you have to do is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;strong&gt;&lt;strong&gt;chrome://extensions&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;On the bottom of the page you&amp;#39;ll see a button to set &lt;strong&gt;&lt;strong&gt;keyboard shortcuts&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Set the shortcut for Atomic Chrome&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Enjoy:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wyPZws66Sic&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 39 - mu4e</title>
      <link>https://cestlaz.github.io/posts/using-emacs-39-mu4e/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-39-mu4e/</guid>
      <description>
&lt;p&gt;
I generally use three email accounts. My personal one, work one, and
one for my non-profit. For a couple of years, I&amp;#39;ve been using mu4e
under Emacs for both my work and non-profit email accounts and gmail
for my personal account.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve had lots of requests for a video on what I do but I&amp;#39;ve been
hesitant for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There are parts of my configuration that are copied from others and&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I really don&amp;#39;t understand.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I wasn&amp;#39;t happy with the complexity and some of the tooling.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While there are still parts of my configuration that I&amp;#39;m not 100%
clear on I&amp;#39;ve cleaned up the tooling and complexity by using mu4e only
for my work email for the time being and by switching to mbsync.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a writeup on configuring things with video at the end.&lt;/p&gt;
&lt;p&gt;
Unless you run an email server on your local machine using mu4e can be
thought of as three parts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the email from the server to the local machine using IMAP.&lt;/li&gt;
&lt;li&gt;Setting up mu.&lt;/li&gt;
&lt;li&gt;Access the email locally from Emacs.&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Part 1 Getting the email to your local machine using mbsync
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I found his terrific blog post by &lt;a href=&#34;https://twitter.com/robstewartUK&#34;&gt;Rob Stewart&lt;/a&gt; on setting up &lt;a href=&#34;http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html&#34;&gt;mbsync and
mu4e&lt;/a&gt;. Read it over. I basically followed his directions for setting up
&lt;a href=&#34;https://sourceforge.net/p/isync/isync/ci/master/tree/&#34;&gt;mbsync&lt;/a&gt;. To build from source under Linux, I used the sequence:&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./autogen.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo make install&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I followed Rob&amp;#39;s instructions basically verbatim for the password and
authentication stuff so I suggest you do the same.&lt;/p&gt;
&lt;p&gt;
You&amp;#39;ll also have to make sure to make the necessary email directories
manually. I describe all of this in the video.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Part 2 - setting up mu.
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
To set up mu, clone it from git://github.com/djcb/mu.git and build
it. You can find dependencies &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html&#34;&gt;here&lt;/a&gt; and then follow the same sequence
used to build mbsync listed above.&lt;/p&gt;
&lt;p&gt;
Since I store my local email under a folder &lt;code&gt;Maildir&lt;/code&gt;  which is what
mu defaults to I can start using it by indexing my emails:&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mu index&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video shows some examples of using mu from the command line and
you can look at the mu cheatsheet &lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/cheatsheet.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Setting up mu4e in emacs
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Finally, you can set up mu4e in emacs. Take a look at Rob&amp;#39;s
configuration in his post or my &lt;a href=&#34;https://github.com/zamansky/using-emacs/blob/master/mu4econfig-sample.el&#34;&gt;sample&lt;/a&gt; config. You&amp;#39;ll have to take a
few minutes to go through either and make the appropriate changes but
the required changes should be cleared.&lt;/p&gt;
&lt;p&gt;
The video goes through all of this and then a brief demo of how I use
mu4e.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m very happy with it and plan to integrate my non-profit email and
maybe even personal email into it soon.&lt;/p&gt;
&lt;p&gt;
Enjoy:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/newRHXKm4H4&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tools can shape how we think</title>
      <link>https://cestlaz.github.io/posts/advent-2017-4-6/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-2017-4-6/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been having fun with this years &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; competition. So
far, I&amp;#39;ve been able to keep up but with I expect that to change in
another couple of days since I&amp;#39;ll be traveling for the weekend.&lt;/p&gt;
&lt;p&gt;
After solving a problem, I like looking over some of the other
solutions on the Advent of Code &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;subreddit&lt;/a&gt;. Even with similar
agorithmic solutions there&amp;#39;s a decent amount of variation in the
actual code and solutions in different languages can look radically
different.&lt;/p&gt;
&lt;p&gt;
That got me thinking about how the tools we know and use both shape the ways we
approach solving problems and creating things and either limit or
empower us to go from a mental model of a solution or creation to an
actual artifact.&lt;/p&gt;
&lt;p&gt;
Relating to this are the common themes that come up in the CS
Education world. The idea that it&amp;#39;s computer science not programming
and certainly not merely coding. That&amp;#39;s true but the tools and
languages we use shape the whole thinking part and can also give the
students a valuable practical tool that they can leverage to great
advantage in both future classes and work and life endeavors.&lt;/p&gt;
&lt;p&gt;
I decided to do this rant as a video. I hope you enjoy it:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/x8cZgEogWNw&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 38 - dired</title>
      <link>https://cestlaz.github.io/posts/using-emacs-38-dired/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-38-dired/</guid>
      <description>&lt;p&gt;
The 38th installment of Using Emacs is about &lt;strong&gt;&lt;strong&gt;dired&lt;/strong&gt;&lt;/strong&gt;, Emacs&amp;#39; built
in mode for navigating and working with directories.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not a dired power user and in fact am just now making a real
effort to explore it and work it into my daily workflow and
with that in mind, I&amp;#39;d love to hear some configuration and
use suggestions from people who use it regularly.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the configuration I use:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package dired+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dired+&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which merely adds dired+ into the mix.&lt;/p&gt;
&lt;p&gt;
I also started playing with &lt;a href=&#34;https://github.com/joddie/pcre2el&#34;&gt;pcre2el&lt;/a&gt; which allows me to use the more
usual regex syntax in place of Emacs regex syntax in both dired and
other places. This is a big win for me since I never remember all the
escaping rules for Emacs regex.&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package pcre2el
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(pcre-mode)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Finally, abo-abo and jcs have both written about new features in ,
Ivy/Swiper/Counsel that allow you to use ivy-occur to dump results
into a dired buffer (&lt;a href=&#34;http://irreal.org/blog/?p=6760&#34;&gt;link&lt;/a&gt;, &lt;a href=&#34;https://oremacs.com/2017/11/18/dired-occur/&#34;&gt;link&lt;/a&gt;) but to get that to work, I needed to
install &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt; and also had to install and setup &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; which looks to be
useful.&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package wgrep
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq counsel-fzf-cmd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/zamansky/.fzf/bin/fzf -f %s&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To help get started here are links to a couple of cheat sheets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf&#34;&gt;dired reference card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://harryrschwartz.com/assets/documents/dired-cheatsheet.pdf&#34;&gt;another dired cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#39;ll probably use dired more frequently but again, would love to hear
how other people are using it.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Fg7HmmRYWy8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 37 - Treemacs file browser</title>
      <link>https://cestlaz.github.io/posts/using-emacs-37-treemacs/</link>
      <pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-37-treemacs/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been meaning to get back to making Emacs videos but I&amp;#39;ve been
having trouble figuring out what to record.&lt;/p&gt;
&lt;p&gt;
People have asked for &lt;a href=&#34;https://github.com/magit/magit&#34;&gt;Magit&lt;/a&gt; but I only use the basics and I think
there are already some great videos on it out there. I&amp;#39;d also like to
get more comfortable with DIRED mode and then do a video on it but I&amp;#39;m
not there yet. I&amp;#39;ve also been looking into packages that manage
workspaces like Eyebrowse and Persp-mode but neither are really doing
it for my workflow.&lt;/p&gt;
&lt;p&gt;
This morning I saw an post on the &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/7249jt/introducing_treemacs_a_modern_file_project/&#34;&gt;Emacs subreddit&lt;/a&gt; about &lt;a href=&#34;https://github.com/Alexander-Miller/treemacs#treemacs---a-tree-layout-file-explorer-for-emacs&#34;&gt;Treemacs&lt;/a&gt; - a
sidebar file browser similar to what the Atom editor has. It&amp;#39;s pretty
slick. I particularly like the integration with &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;projectile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
I suspect I won&amp;#39;t integrate a file browser side bar into my workflow -
I&amp;#39;ve probably spent too many years with Emacs built in buffer commands
but if like that type of interface, definitely check Treemacs out.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ACg6RnVdw8k&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>New Term New Tool - Thonny, a Python IDE</title>
      <link>https://cestlaz.github.io/posts/new-tool-thonny/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/new-tool-thonny/</guid>
      <description>&lt;p&gt;
Last year I &lt;a href=&#34;https://cestlaz.github.io/posts/new-term-new-tool-replit&#34;&gt;wrote about&lt;/a&gt; &lt;a href=&#34;http://repl.it&#34;&gt;repl.it&lt;/a&gt;, an online IDE that supports multiple
languages. At the time it had some rudimentary classroom support and
since I started using it, repl.it has become better and better. I
used it last year with my class because I had to start the year in a
lab where I couldn&amp;#39;t easily install my own software. I&amp;#39;ll continue to
use repl.it - mostly for it&amp;#39;s ability to schedule publish and manage
assignments but when possible, I like having my students work
locally.&lt;/p&gt;
&lt;p&gt;
This year I&amp;#39;m excited about another tool - &lt;a href=&#34;http://thonny.org&#34;&gt;Thonny&lt;/a&gt;. Thonny&amp;#39;s a simple
Python IDE designed for beginners. I discovered it last year but at a
time when it was impractical for me to use with my students. This
year I can and I&amp;#39;m really liking it. I&amp;#39;m still an Emacs guy and will
continue to use Emacs for my python development (&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-12-python/&#34;&gt;video 1&lt;/a&gt;, &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-13-yasnippet&#34;&gt;video 2&lt;/a&gt;) but
for beginners I think Thonny is the way to go.&lt;/p&gt;
&lt;p&gt;
Some of Thonny&amp;#39;s highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An integrated Python 3 virtual environment making for ease of&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;installation and consistency across student installs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A debugger that shows how expressions are evaluated&lt;/li&gt;
&lt;li&gt;Great visualizations of function calls that make it easier to&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;understand the call stack and scope&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ability to look at memory to understand references.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rather than go into the gory details in text, I put together this
video:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/lWaCl0WjNZI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 36 - A Touch of Elisp</title>
      <link>https://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</link>
      <pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been working on a vue.js project this summer. During the school
year I really can&amp;#39;t dive into code so it&amp;#39;s been fun.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve already showed you most of the Emacs tools I use for
development. Projectile, Ace-Window, IBuffer, Swiper / Ivy and
all. One thing I couldn&amp;#39;t easily do was arrange windows the way I
wanted.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been setting up Emacs with one large window and a couple of
smaller ones:&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/touch-elisp.png&#34; alt=&#34;/img/touch-elisp.png&#34; title=&#34;/img/touch-elisp.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
I can easily switch the buffer in the window and I can easily switch
windows but what I wanted to do was swap the buffer in the large
window with one of the smaller buffers and leave focus in the larger
buffer:&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/touch-elisp2.png&#34; alt=&#34;/img/touch-elisp2.png&#34; title=&#34;/img/touch-elisp2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
I started looking at perspective mode and persp mode but neither work
with the latest Emacs. After poking around at other packages I
realized that ace-window does most of what I wanted. Ace-window has a
function that swaps the buffers in two windows named
&lt;code&gt;ace-swap-window&lt;/code&gt;. The only problem is that it leaves the focus on the
window you swap to not the one you started in. Ace-window also has
&lt;code&gt;aw-flip-window&lt;/code&gt; which then returns the cursor to the previous window.&lt;/p&gt;
&lt;p&gt;
With a little elisp, we get the behavior I was looking for which I
then bound to &lt;code&gt;C-1 z&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun z/swap-windowsn ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(ace-swap-window)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(aw-flip-window)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; z-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z/swap-windows&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video goes into more details but it shows that if you&amp;#39;re not
afraid to explore a bit you can pretty much get Emacs to do whatever
you want.&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/NQhud2ZNd1w&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 35 - Blogging</title>
      <link>https://cestlaz.github.io/posts/using-emacs-35-blogging/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-35-blogging/</guid>
      <description>&lt;p&gt;
Very little new Emacs in today&amp;#39;s episode of Using Emacs. The video
shows my old blogging workflow and what I&amp;#39;m playing with now.&lt;/p&gt;
&lt;p&gt;
The only new Emacs covered is the &lt;a href=&#34;https://github.com/rejeep/prodigy.el&#34;&gt;prodigy&lt;/a&gt; package which lets you run
services under Emacs. I use it to run &lt;a href=&#34;https://getnikola.com/blog/index.html&#34;&gt;Nikola&lt;/a&gt;&amp;#39;s development server but
I think prodigy will also be useful when I start writing that knitting
application I promised my wife.&lt;/p&gt;
&lt;p&gt;
When I started this blog, I used Jekyll. It was simple and worked with
GitHub pages. I wrote about why I transitioned to Nikola &lt;a href=&#34;https://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/&#34;&gt;here&lt;/a&gt; and
&lt;a href=&#34;https://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s not much more to say here so enjoy the video:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wSeTic9obKw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 34 - ibuffer and emmet</title>
      <link>https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</guid>
      <description>&lt;p&gt;
A couple of quick, unrelated packages today.&lt;/p&gt;
&lt;p&gt;
first up, ibuffer. If you keep Emacs open all the time, you&amp;#39;ll start
to accumulate buffers. Last time, I talked about using &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-33-projectile-jump&#34;&gt;projectile&lt;/a&gt; and
how that can help when navigating between buffers. IBuffer is another
one.&lt;/p&gt;
&lt;p&gt;
Out of the box, &lt;code&gt;C-x C-b&lt;/code&gt; is bound to the Emacs &lt;strong&gt;&lt;strong&gt;list-buffers&lt;/strong&gt;&lt;/strong&gt;
command. It brings up a buffer with all the buffers listed inside
it. You can navigate that buffer and hit enter on a particular buffer
to go to it. You can also mark buffers and then operate on all the
marked buffers. Hitting &lt;strong&gt;&lt;strong&gt;h&lt;/strong&gt;&lt;/strong&gt; in the list-buffers buffer brings up
more details.&lt;/p&gt;
&lt;p&gt;
IBuffer is like list-buffers on steroids. It looks much nicer and I
think it has more functionality (again hitting &lt;strong&gt;&lt;strong&gt;h&lt;/strong&gt;&lt;/strong&gt; in the buffer
brings up help).&lt;/p&gt;
&lt;p&gt;
IBuffer really shines though, once you start customizing it. I found
&lt;a href=&#34;http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html&#34;&gt;this&lt;/a&gt; post by Martin Owen which shows how to customize the way ibuffer
appears. You can group buffers however you want or even omit some from
the listing.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my configuration (mostly stolen from Owen):&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x C-b&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ibuffer&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq ibuffer-saved-filter-groups
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(quote ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dired&amp;#34;&lt;/span&gt; (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dired-mode))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org&amp;#34;&lt;/span&gt; (name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^.*org$&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;web&amp;#34;&lt;/span&gt; (or (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; web-mode) (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; js2-mode)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt; (or (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; eshell-mode) (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; shell-mode)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mu4e&amp;#34;&lt;/span&gt; (name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\*mu4e\*&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;programming&amp;#34;&lt;/span&gt; (or
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; python-mode)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; c++-mode)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs&amp;#34;&lt;/span&gt; (or
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^\\*scratch\\*$&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^\\*Messages\\*$&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ibuffer-mode-hook&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(lambda ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(ibuffer-auto-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(ibuffer-switch-to-saved-filter-groups &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; don&amp;#39;t show these&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;(add-to-list &amp;#39;ibuffer-never-show-predicates &amp;#34;zowie&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Don&amp;#39;t show filter groups if there are no buffers in that group&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq ibuffer-show-empty-filter-groups &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Don&amp;#39;t ask for confirmation to delete marked buffers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq ibuffer-expert &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video also shows &lt;a href=&#34;https://github.com/smihica/emmet-mode&#34;&gt;emmet&lt;/a&gt; mode. A terrific mode for quickly creating
HTML and CSS. I tried it a long time ago when it was called zencoding
and found it lacking but after watching &lt;a href=&#34;https://www.youtube.com/watch?v=gGPv7jsQGpc&amp;amp;t=329s&#34;&gt;this video&lt;/a&gt; at Build Fun Things
I started playing with it again. It&amp;#39;s a real winner.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the config I&amp;#39;m using:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package emmet-mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sgml-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emmet-mode&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; Auto-start on any markup modes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;web-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emmet-mode&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; Auto-start on any markup modes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;css-mode-hook&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emmet-mode&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; enable Emmet&amp;#39;s css abbreviation.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Check them both out:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/yUfA-7wWNKA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python - Editor or IDE</title>
      <link>https://cestlaz.github.io/posts/python-editors/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/python-editors/</guid>
      <description>&lt;p&gt;
Earlier today I read Garth Flint&amp;#39;s latest post on &lt;a href=&#34;https://gflint.wordpress.com/2017/05/25/python-editors-simple-wins/%0A&#34;&gt;choosing a Python
environment for his classes&lt;/a&gt;. While our classes and populations are
different it looks like Garth and I share a lot of thoughts on the
subject.&lt;/p&gt;
&lt;p&gt;
I started to write a comment to leave on Garth&amp;#39;s blog but since it was
getting a little long I thought I&amp;#39;d write it up as a post.&lt;/p&gt;
&lt;p&gt;
The question of development environment can be an important one and
can make a big difference. When I designed the intro course at Stuy,
the fact that Dr. Scheme existed made the use of Scheme in the class
an option. Without it as a supportive and simple environment for the
students I probably wouldn&amp;#39;t have been able to use Scheme even though
I really liked it as a teaching and learning tool.&lt;/p&gt;
&lt;p&gt;
Garth writes about issues relating to choosing a local development
environment so that&amp;#39;s what I&amp;#39;m going to stick to here. If you want an
online environment check out &lt;a href=&#34;http://codesters.com&#34;&gt;Codesters&lt;/a&gt; - a terrific online Python
environment with lots of educational support materials and features
and &lt;a href=&#34;http://repl.it&#34;&gt;repl.it&lt;/a&gt; - an online environment that supports many languages and
is also developing great teacher and class support – I very much like
both of these platforms.&lt;/p&gt;
&lt;p&gt;
The first question is editor or IDE?&lt;/p&gt;
&lt;p&gt;
As a user, I&amp;#39;m very pro editor. Learn a tool that you can customize to
your tastes and that will work for all sorts of text editing chores
from coding to document preparation to scheduling and more and you&amp;#39;re
in great shape. Personally, I&amp;#39;m an &lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;Emacs wonk&lt;/a&gt; but there are other
choices as well.&lt;/p&gt;
&lt;p&gt;
As a teacher, though, Emacs or another programmers editor can be
overwhelming for younger students and rank beginners.&lt;/p&gt;
&lt;p&gt;
This can make IDEs attractive.&lt;/p&gt;
&lt;p&gt;
Some IDEs are too big and cumbersome and can add even more cognitive
load than an editor - think Eclipse for Java development. If you think
writing&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
is a lot of overhead, just wait until you have a novice try to start a
Java project in Eclipse.&lt;/p&gt;
&lt;p&gt;
Other IDEs are more streamlined. One common choice is
Idle. It&amp;#39;s big advantage is that it&amp;#39;s always available and is &amp;#34;part&amp;#34;
of Python. On the other hand, it doesn&amp;#39;t seem to add much to a bare
editor and I&amp;#39;ve found that it can be somewhat confusing.&lt;/p&gt;
&lt;p&gt;
Garth seems to have settled on &lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt; from &lt;a href=&#34;https://jetbrains.com&#34;&gt;JetBrains&lt;/a&gt;. It&amp;#39;s pretty
streamlined and really easy to get up and running. JetBrains also
provides a free community edition as well as a heavier professional
one available for purchase. Garth notes that it&amp;#39;s a Python only IDE
but JetBrains has similar IDEs for a whole bunch of languages and I
seem to recall you can add plugins across their IDEs to basically make
them multi-language development environments.&lt;/p&gt;
&lt;p&gt;
I really like the JetBrains products and if I used an IDE I&amp;#39;m pretty
sure I&amp;#39;d use their products. As a teacher though, I find their IDEs a
little too powerful for my tastes. I want a learner IDE to provide the
bare minimum of features - an interactive REPL, a code window, run and
debug buttons, some completion and help - but to make those features
really easy to use. JetBrains does a little too much.&lt;/p&gt;
&lt;p&gt;
What I ended up using in the past is &lt;a href=&#34;http://drpython.sourceforge.net/&#34;&gt;Dr Python&lt;/a&gt;. For me it hit the
sweet spot. As an added bonus we were already using Dr. Racket (nee
Dr. Scheme) and Dr. Java so our students had a similar environment
across languages and even NetLogo looked and behaved similarly.&lt;/p&gt;
&lt;p&gt;
Is there a right answer? Probably not. Just as with choosing a first
language there are always trade offs. Besides, if you don&amp;#39;t have the
right solution, there will be another one next week. Just recently I
saw &lt;a href=&#34;http://thonny.org/&#34;&gt;this project&lt;/a&gt;. A new beginners IDE for python. It looks interesting
and worth checking out.&lt;/p&gt;
&lt;p&gt;
The right IDE can make a big difference while keeping the overhead low
and giving just the right amount of support. For me, the last time
around it was Dr. Python. For Garth, it looks like PyCharm fits the
bill. Looking at the overall plan, I usually start the kids off with a
simple learners IDE and then transition them to a programmers editor
like Emacs as they gain more comfort and experience.&lt;/p&gt;
&lt;p&gt;
As a postscript, let me share these links on how I use Emacs for
Python development (each with a video) as well as my series on how I
use Emacs in general:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs/&#34;&gt;http://cestlaz.github.io/stories/emacs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-12-python&#34;&gt;http://cestlaz.github.io/posts/using-emacs-12-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-13-yasnippet&#34;&gt;http://cestlaz.github.io/posts/using-emacs-13-yasnippet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 33 - projectile, dumb-jump</title>
      <link>https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</guid>
      <description>&lt;p&gt;
If you keep Emacs open all the time you end up accumulating lots of
buffers. That can make navigating a little bit awkward.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;Projectile&lt;/a&gt; is a really nice package that makes navigating in and
between projects much easier. I also have &lt;a href=&#34;https://github.com/ericdanan/counsel-projectile&#34;&gt;counsel-projectile&lt;/a&gt;
installed.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my configuration:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; projectile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package projectile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(projectile-global-mode)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq projectile-completion-system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ivy&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package counsel-projectile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(counsel-projectile-on))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Projectile considers a sub-directory tree to be a project if it&amp;#39;s a
git or other source control repo, if it&amp;#39;s created by tool like lein,
maven, or sbt, or if you put an empty file named &lt;strong&gt;&lt;strong&gt;.projectile&lt;/strong&gt;&lt;/strong&gt; in
the root directory of the project.&lt;/p&gt;
&lt;p&gt;
Projectile learns about projects when you open a file in that project
and then stores that information in an Emacs bookmark file in your
.emacs.d directory.&lt;/p&gt;
&lt;p&gt;
You can switch between projects using &lt;code&gt;C-c p&lt;/code&gt; and when in a project,
load another file using &lt;code&gt;C-c f&lt;/code&gt;. If you use the &lt;strong&gt;&lt;strong&gt;which-key&lt;/strong&gt;&lt;/strong&gt; package
as I do, just type &lt;code&gt;C-c&lt;/code&gt; - the projectile prefix and then which-key
will bring up help.&lt;/p&gt;
&lt;p&gt;
The video goes through some of my favorite features and you can find
the full documentation can be found &lt;a href=&#34;http://projectile.readthedocs.io/en/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
The other package I show is &lt;a href=&#34;https://github.com/jacktasia/dumb-jump&#34;&gt;dumb-jump&lt;/a&gt;. It&amp;#39;s basically a zero (or
almost zero) configuration tags replacement. Really nice.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my current config:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package dumb-jump
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:bind ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g o&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dumb-jump-go-other-window)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dumb-jump-go)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dumb-jump-go-prefer-external)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g z&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dumb-jump-go-prefer-external-other-window))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config (setq dumb-jump-selector &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ivy&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; (setq dumb-jump-selector &amp;#39;helm)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; (setq dumb-jump-selector &amp;#39;ivy) ;; (setq dumb-jump-selector &amp;#39;helm)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(dumb-jump-mode)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wBfZzaff77g&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GitHub as a tool for education</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-4/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-4/</guid>
      <description>&lt;p&gt;
When I started using git and GitHub with my students it was a natural
progression having started with started with CVS and then, as
technology changed moving through Subversion and then Mercurial. It
was all about using sensible professional software development
techniques while making it easier for students to submit work and for
me to evaluate their submissions.&lt;/p&gt;
&lt;p&gt;
Over time, I found that git and GitHub in fact provided some extra
support for educators right out of the box.&lt;/p&gt;
&lt;p&gt;
In my &lt;a href=&#34;http://cestlaz.github.io/posts/sigcse-2017-github-3&#34;&gt;last github post&lt;/a&gt; I talked about using the results of &lt;code&gt;git log&lt;/code&gt;
and looking at diffs. Both provide ways of seeing what a student did
and when. The commit log and history make it easier to hold students accountable to working
through a project and not leavings for the last minute. The diffs make
it easier to see what&amp;#39;s changed both to see progress and also to help
support students as they develop their projects.&lt;/p&gt;
&lt;p&gt;
If you use Emacs, as I do, you can use the &lt;a href=&#34;https://github.com/pidu/git-timemachine&#34;&gt;git timemachine&lt;/a&gt; package
which does a great job visualizing changes:&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/sigcse-github/timemachine.gif&#34; alt=&#34;/img/sigcse-github/timemachine.gif&#34; title=&#34;/img/sigcse-github/timemachine.gif&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
Other editors might have a similar feature.&lt;/p&gt;
&lt;p&gt;
The contribution graphs also provide a quick snapshot which shows what
team members are contributing and when:&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/sigcse-github/githubgraph.png&#34; alt=&#34;/img/sigcse-github/githubgraph.png&#34; title=&#34;/img/sigcse-github/githubgraph.png&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
The punchcard graph is also useful to see when students actually do
their work.&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/sigcse-github/githubgraph2.png&#34; alt=&#34;/img/sigcse-github/githubgraph2.png&#34; title=&#34;/img/sigcse-github/githubgraph2.png&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
GitHub also make it easy to set up starter code or to have students
&amp;#34;take over&amp;#34; each others projects by forking.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m very happy using git and GitHub as is but if you want more
support, check out &lt;a href=&#34;https://classroom.github.com/&#34;&gt;GitHub Classroom&lt;/a&gt;. Had it existed when I started,
I&amp;#39;d probably have used it but since I had already gotten used to my
work flows I&amp;#39;ve stuck with raw git and github.&lt;/p&gt;
&lt;p&gt;
In case you missed the earlier posts describing the process I use to
introduce github to my classes here they are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/posts/sigcse-2017-github-1&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/posts/sigcse-2017-github-2&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/posts/sigcse-2017-github-3&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#39;m hoping some of you have found this set of four posts useful or at
least interesting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - a path to github part 3</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-3/</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-3/</guid>
      <description>&lt;p&gt;I wanted to write this up earlier but, as so frequently happens all my
dormant work projects decided it was time to rise up and demand
instant attention.&lt;/p&gt;
&lt;p&gt;
When we left off, we had students pulling code and submitting homework
via github.&lt;/p&gt;
&lt;p&gt;
Form here, it&amp;#39;s an easy step to have them working on a small project
in their own repo. In fact, sometimes, I&amp;#39;ll jump right to a two person
project where one person creates the repo and invites the other (and
me) as a collaborator.&lt;/p&gt;
&lt;p&gt;
Once here, it&amp;#39;s important to emphasize the normal workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;edit stuff with an occasional &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git rm&lt;/code&gt;,  or &lt;code&gt;got mv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;commit&lt;/li&gt;
&lt;li&gt;and an occasional &lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Regardless of how much you emphasize the workflow you&amp;#39;re now going to
have to cover merges as well how to recover from problems by going to
an earlier revision.&lt;/p&gt;
&lt;p&gt;
For going back to earlier versions or otherwise recovering from
disasters, I don&amp;#39;t show them the &amp;#34;right&amp;#34; way of doing things. I show
them a way that&amp;#39;s easy to remember and reliably works without tons of
searching for answers.&lt;/p&gt;
&lt;p&gt;
First, given some repo, I have them clone a version under another
name:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone git@github.com:hunterdaedalus/classcode.git newdirname&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now, they have the original repo and a clone under the directory
&lt;strong&gt;&lt;strong&gt;newdirname&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
I have them go into that new copy and use &lt;code&gt;git log&lt;/code&gt; to go through the
logs to find an earlier version that they want to go back to.&lt;/p&gt;
&lt;p&gt;
The log will look something like this:&lt;/p&gt;
&lt;div class=&#34;verse-block&#34;&gt;
&lt;p&gt;commit 67eceb5e0a01ca5f5fb54ace65a4fe134f71edae
Author: Mike Zamansky &amp;lt;zamansky@gmail.com&amp;gt;
Date:   Sat Feb 25 12:32:26 2017 -0500&lt;/p&gt;
&lt;p&gt;
updated Makefile&lt;/p&gt;
&lt;p&gt;
commit 7efed10eb6015276b0cb82874ce786dc68a683ae
Author: Mike Zamansky &amp;lt;zamansky@gmail.com&amp;gt;
Date:   Sat Feb 25 08:45:34 2017 -0500&lt;/p&gt;
&lt;p&gt;
broke out main –&amp;gt; main and shapes&lt;/p&gt;
&lt;p&gt;
commit e8b5c240123a7cb17920d52b4aba9cf5787ddab2
Author: Mike Zamansky &amp;lt;zamansky@gmail.com&amp;gt;
Date:   Sat Feb 25 08:36:29 2017 -0500&lt;/p&gt;
&lt;p&gt;
added lab3 code&lt;/p&gt;
&lt;p&gt;
commit 6d5bcf866306334ddc5c6a48e8f49fb39ddbcb18
Author: Some other coder &amp;lt;somone@somewhere.net&amp;gt;
Date:   Sun Feb 19 19:29:51 2017 -0500&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
Find the hash that they want to get back to and &lt;strong&gt;&lt;strong&gt;checkout&lt;/strong&gt;&lt;/strong&gt; that
version (you normally only have to use the first few characters of
the hash):&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout 7efed10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now they can grab what they want, copy it into the working copy of the
repo, &lt;strong&gt;&lt;strong&gt;commit&lt;/strong&gt;&lt;/strong&gt; the changes and &lt;strong&gt;&lt;strong&gt;push&lt;/strong&gt;&lt;/strong&gt; them back.&lt;/p&gt;
&lt;p&gt;
For Merging, I start by having them do it manually. I&amp;#39;ll have them
load the file in question into their editor and look for the chunks
that look like this:&lt;/p&gt;
&lt;div class=&#34;verse-block&#34;&gt;
&lt;p&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; A
lines in file A
&lt;code class=&#34;verbatim&#34;&gt;=====&lt;/code&gt;
lines in file B
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; B&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
They&amp;#39;ll manually make the changes, then save, commit and push back.&lt;/p&gt;
&lt;p&gt;
Later, I&amp;#39;ll show them a couple of tools to help along the way. I
usually show ediff in emacs along with meld.&lt;/p&gt;
&lt;p&gt;
Once they&amp;#39;ve been doing this for a while, it&amp;#39;s easy to expand group
sizes. After that, I&amp;#39;ll introduce &lt;strong&gt;&lt;strong&gt;issues&lt;/strong&gt;&lt;/strong&gt; via the github interface.&lt;/p&gt;
&lt;p&gt;
The last big topic is branches.&lt;/p&gt;
&lt;p&gt;
First I show basic branches and merging. Here&amp;#39;s a pretty good &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging&#34;&gt;run
through&lt;/a&gt;. Afterwards, I&amp;#39;ll show how branching works in conjunction with
github. This is also a good time to emphasize that students have to
actually read the messages that git gives them when things don&amp;#39;t  go
well. In most cases, the message will contain the exact thing to type
to fix the problem (such as linking a branch with a branch up on
github).&lt;/p&gt;
&lt;p&gt;
Now is also the time to introduce pull requests and how to use them to
support code review. The general setup I recommend is one branch per
group member and a main &amp;#34;deployment&amp;#34; branch with group members
creating more branches as they see fit.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s about it. I&amp;#39;ve followed this process, more or less, over a
semester, over a year, and over multiple years. It&amp;#39;s worked for me, I
hope some of this helps you as well.&lt;/p&gt;
&lt;p&gt;
In the next and probably last git/github post I&amp;#39;ll talk about the
educational benefits that I&amp;#39;ve discovered along the way. After that,
I&amp;#39;ll get back to some emacs videos, other SIGCSE stuff and my normal rants.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - a path to github part 2</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-2/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-2/</guid>
      <description>
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Note:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;Just for some quick context. The process I started to describe in the
last post and continue here chronicles what I did at Stuy with high
schoolers. Now that I&amp;#39;m at Hunter college, I&amp;#39;m adapting the process
but the overarching themes remain the same.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Post starts here:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;Now that your students have been pulling the classcode repo regularly
it&amp;#39;s time to move to the next step - adding and pushing files to a
repo.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t claim to do this the &amp;#34;right way&amp;#34; or the best way but it&amp;#39;s
worked for me and it&amp;#39;s gotten my students up to speed.&lt;/p&gt;
&lt;p&gt;
I ease my students into adding and pushing files using git through
homework submission. I create a single repo, usually named
&lt;strong&gt;&lt;strong&gt;submissions&lt;/strong&gt;&lt;/strong&gt; and make a folder for each student underneath looking
something like this:&lt;/p&gt;
&lt;div class=&#34;verse-block&#34;&gt;
&lt;p&gt;.
└── submissions
├── abram_sarah
├── chen_stuart
└── thompson_steve&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
Before going any further, let me clear up one thing. The repo is
public so all the students have access to each others work. I&amp;#39;m OK
with that. We could have each student make their own repo and use git
&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;submodules&lt;/a&gt; to make a submissions repo but administration is much
trickier and we lose the chance to build a culture of cooperation and
trust. We can lock down our submission systems as much as we want. If
students want to share assignments there&amp;#39;s nothing we can do about
it.&lt;/p&gt;
&lt;p&gt;
My preference is to try to build a culture that minimizes bad
behavior and rewards good behavior. I&amp;#39;d rather see an incorrect
homework so that I can tell what we need to work on than a copied
perfect assignment. I&amp;#39;d rather see students cite each other, share
properly, and support each other than copy in the shadows.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not naive enough to believe that copying doesn&amp;#39;t happen in my
classes but I still prefer erring on the side of openness.&lt;/p&gt;
&lt;p&gt;
Once the repo is set up, I give all the students access. This is a
little onerous since I have to type each of their GitHub usernames
under the collaborators section of the submissions repo but I only
have to do this once a semester.&lt;/p&gt;
&lt;p&gt;
Then I teach the workflow. Assignments go into a file or folder under
their directory named ##_name where ## is the assignment number
(01,02,03, etc) and name is the assignment name. The student workflow
is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git pull&lt;/li&gt;
&lt;li&gt;git add (sometimes)&lt;/li&gt;
&lt;li&gt;git commit&lt;/li&gt;
&lt;li&gt;git push&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since every student is working in their own directory, things
basically work.&lt;/p&gt;
&lt;p&gt;
The first issue that students come up with is when another student
pushes before another student. The second student merely has to do
another &lt;strong&gt;&lt;strong&gt;git pull&lt;/strong&gt;&lt;/strong&gt; before proceeding. This provides an easy
introduction to dealing with the distributed nature of git.&lt;/p&gt;
&lt;p&gt;
There will occasionally be other issues when students don&amp;#39;t follow
procedure exactly so I&amp;#39;ll have to fix the repo every now and then but
nothing too bad and each time is a opportunity to show the class:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you can pretty much always restore and fix things once you commit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;them.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the specifics to fix things.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There will be a few bumps in the road but after a few assignments the
sailing will be pretty smooth.&lt;/p&gt;
&lt;p&gt;
At the end of the day, the students are a little closer to being fully
fluent using git, they&amp;#39;re hopefully using each others code as
resources but in a proper way and since the students are all using a
consistent assignment naming convention I can use simple scripts and
shell commands to do all sorts of processing on assignments.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the end of phase two. The next step  brings us to small
projects using git.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - a path to github part 1</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-1/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-1/</guid>
      <description>
&lt;p&gt;
Both at and prior to SIGCSE 2017, I promised to write up the steps I
take to introduce and use revision control systems in my classes.&lt;/p&gt;
&lt;p&gt;
This series is not meant to be a git or &lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt; tutorial. There are
plenty of those already (two of which I&amp;#39;ve linked to below).  This is
about the process I use with my students to get them up to speed.&lt;/p&gt;
&lt;p&gt;
As with any new tool, there will be some resistance but once git saves
them once, they get religion. There will also be some bumps in the
road but at the end of the day, the students will be using a valuable
and necessary tool.&lt;/p&gt;
&lt;p&gt;
I was also surprised at the ancillary benefits I got as a teacher by
using GitHub in particular. I&amp;#39;ll talk about that at the end of the
series.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s part one.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m doing this with git and GitHub but there&amp;#39;s no reason why other
systems and hosts can&amp;#39;t be used. I&amp;#39;d also recommend that any educator
or student sign up for the assorted &lt;a href=&#34;https://education.github.com/&#34;&gt;discounts&lt;/a&gt; offered by GitHub.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve followed this basic idea multiple times and done it over the
course of a single semester, a year, and even two years. Regardless of
time frame, the idea is the same. Make each step simple and relevant
and introduce complexity and roadblocks a piece at a time.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Step 1 - code distribution
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
To start, I don&amp;#39;t even talk about version control. We start with code
distribution. For years, I&amp;#39;ve looked for efficient ways of sharing
code with my classes. Both code developed in class and code for
assignments.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve tried things like NFS, Dropbox, online code repositories like the
files section of systems like Moodle or Blackboard.&lt;/p&gt;
&lt;p&gt;
At Stuy, we&amp;#39;ve always had efficiency problems with NFS and Dropbox has
multiple problems ranging from students not being able to install the
client on school machines to the problems of the network hit when a
room full of kids are syncing at the same time.&lt;/p&gt;
&lt;p&gt;
Uploading to a CMS system was also problematic - I&amp;#39;m a command line
wonk and hate going through slow web page menus to navigate a
filesystem and upload files. I also had to remember to get the files
off of whatever machine I was working on in class and then transfer
them to the CMS when I had a free moment.&lt;/p&gt;
&lt;p&gt;
Enter git. Now, of course, if you&amp;#39;re going to use git in the classroom
you have to know it. There are plenty of resources out there. Online
courses, articles, videos, and tutorials. Here are a couple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://try.github.io/&#34;&gt;https://try.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0fKg7e37bQE&#34;&gt;https://www.youtube.com/watch?v=0fKg7e37bQE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also want to point out that I just use raw command line git along
with native GitHub. GitHub has rolled out &lt;a href=&#34;https://classroom.github.com/&#34;&gt;GitHub Classroom&lt;/a&gt; which adds
a layer of support for educators. I don&amp;#39;t use it because, as I said,
I&amp;#39;m an old school command line wonk and also because I figured out a
sequence that worked for me and my students before GitHub Classroom
existed. Were I starting now, I&amp;#39;d take some time to look at their
current offerings before jumping in.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Set up
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Before starting, make sure you register your ssh keys. &lt;a href=&#34;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/&#34;&gt;This&lt;/a&gt; help page
has more information. You&amp;#39;ll want to register an ssh key from every
machine you use - home, work, laptop.&lt;/p&gt;
&lt;p&gt;
Now go over to GitHub and make a new repository. I usually name it
&lt;strong&gt;&lt;strong&gt;classcode&lt;/strong&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;strong&gt;BEGINNER NOTE:&lt;/strong&gt;&lt;/strong&gt; when creating the repo, make sure to
check the &amp;#34;initialize this repository with a README&amp;#34; box. If you don&amp;#39;t
you&amp;#39;ll be given a set of instructions on how to set things up once you
click &lt;strong&gt;&lt;strong&gt;Create repository&lt;/strong&gt;&lt;/strong&gt; but it&amp;#39;s easier and easier to follow if
you start with an initialized repo with a README.&lt;/p&gt;
&lt;p&gt;
I make the repo public – it&amp;#39;s code I&amp;#39;m distributing – nothing to
hide here. If you aren&amp;#39;t comfortable with that, just make the repo
private. If you&amp;#39;ve registered as a teacher with GitHub, you can set up
an organization and you&amp;#39;ll be able to set up free private repos within
it. The other downside here is that you&amp;#39;ll have to individually give
each student access to the repo. That&amp;#39;s a mild annoyance but it only
has to be done once.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Teacher use
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Next, clone out the repo. &lt;strong&gt;&lt;strong&gt;BEGINNER NOTE:&lt;/strong&gt;&lt;/strong&gt; Make sure you check out
the ssh version not the https version. Just make sure that when you
click the &lt;strong&gt;&lt;strong&gt;clone&lt;/strong&gt;&lt;/strong&gt; button, it says &amp;#34;Clone with SSH.&amp;#34; If not, just
click the &amp;#34;Use SSH&amp;#34; link in the same box. Students will clone the
using https.&lt;/p&gt;
&lt;p&gt;
From the teacher point of view, you can just start using the repo. My
work flow is typically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;git pull&lt;/strong&gt;&lt;/strong&gt; at the start of class&lt;/li&gt;
&lt;li&gt;write code throughout class&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;git add&lt;/strong&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;strong&gt;git commit&lt;/strong&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;strong&gt;git push&lt;/strong&gt;&lt;/strong&gt; at the end of class&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I use a similar flow when I want to add files in my office or at home.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Student use
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;From the student point of view, assuming a public repo, they just have to clone the repo and
at the beginning of every class or work session, do a &lt;strong&gt;&lt;strong&gt;git
pull&lt;/strong&gt;&lt;/strong&gt;. That&amp;#39;s all there is to it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Thoughts
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
That&amp;#39;s it. The kids are now using GitHub – they&amp;#39;re probably looking
at and poking around on the web site as well as pulling files to their
machines. You can also, in class, show things like &lt;strong&gt;&lt;strong&gt;git status&lt;/strong&gt;&lt;/strong&gt;,
&lt;strong&gt;&lt;strong&gt;git log&lt;/strong&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;strong&gt;git diff&lt;/strong&gt;&lt;/strong&gt; to set the stage for step 2 of this
process and beyond.&lt;/p&gt;
&lt;p&gt;
Since the students aren&amp;#39;t adding, committing or pushing, you probably won&amp;#39;t
get any errors.&lt;/p&gt;
&lt;p&gt;
The only problem that could reasonably occur is if a student places a
file in their local copy of the repo with the same name as something
they haven&amp;#39;t pulled yet. This is pretty easy to address and provides a
nice stepping stone lesson to again, set the stage for more complex
operations.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m happy with this as a first step towards git using GitHub. It
provides a nice way of sharing class code while gently introducing the
students to the tool.&lt;/p&gt;
&lt;p&gt;
The next step  is having the students add files to a repo. That&amp;#39;s the
next post in this series.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 32 - C&#43;&#43;</title>
      <link>https://cestlaz.github.io/posts/using-emacs-32-cpp/</link>
      <pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-32-cpp/</guid>
      <description>&lt;p&gt;
This video is specifically for my students or any students out there
who are starting with C++ and emacs. The videos also longer than usual, coming in
at a little over 20 minutes.&lt;/p&gt;
&lt;p&gt;
The big difference is instead of building on my &lt;a href=&#34;https://github.com/zamansky/using-emacs&#34;&gt;existing config&lt;/a&gt;, the
code at the bottom is a complete standalone configuration. It&amp;#39;s all
pulled from the main config with one additional package.&lt;/p&gt;
&lt;p&gt;
By taking the code at the bottom and putting in into a file named &lt;strong&gt;&lt;strong&gt;init.el&lt;/strong&gt;&lt;/strong&gt; in a
directory off of your home directory named &lt;strong&gt;&lt;strong&gt;.emacs.d&lt;/strong&gt;&lt;/strong&gt; and run emacs,
it will install everything and you&amp;#39;ll be good to go.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;ve been following this series, the only new package is &lt;a href=&#34;https://github.com/leoliu/ggtags&#34;&gt;ggtags&lt;/a&gt;
and the configuration code is:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; tags for code navigation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package ggtags
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode-common-hook&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(lambda ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(when (derived-mode-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c++-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;java-mode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(ggtags-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For people new to the series, the top section sets up the emacs
package manager. After that we install:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;which-key&lt;/td&gt;
&lt;td&gt;brings up contextual key binding help&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auto-complete&lt;/td&gt;
&lt;td&gt;just as the name says&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flycheck&lt;/td&gt;
&lt;td&gt;in line, live syntax checking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yasnippet&lt;/td&gt;
&lt;td&gt;snippets and expansion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ggtags&lt;/td&gt;
&lt;td&gt;source code navigation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;color-theme&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;moe-theme&lt;/td&gt;
&lt;td&gt;just because&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
The video also show me using &lt;strong&gt;&lt;strong&gt;counsel-ag&lt;/strong&gt;&lt;/strong&gt; which is part of the
swiper/counsel package. You can check that out &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-6-swiper&#34;&gt;here&lt;/a&gt; as well as some
other packages I use like &lt;strong&gt;&lt;strong&gt;smartparens&lt;/strong&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;strong&gt;hungry-delete&lt;/strong&gt;&lt;/strong&gt; and
probably a few more.&lt;/p&gt;
&lt;p&gt;
You can look at my complete configuration or the other videos for
details.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re an experienced C++ developer and use emacs, please share
tips, tricks, and suggestions. I haven&amp;#39;t done serious C++ work in over
a decade and while I did professional development in C in a past life,
never in C++.&lt;/p&gt;
&lt;p&gt;
The packages used here are not C++ specific - I use them for Java,
Python, Clojure, and Javascript development as well.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the configuration code:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; set up package sources&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq package-enable-at-startup &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://melpa.org/packages/&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(package-initialize)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Bootstrap `use-package&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(unless (package-installed-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(package-refresh-contents)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(package-install &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; small interface tweaks&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq inhibit-startup-message &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(tool-bar-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fset&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yes-or-no-p&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y-or-n-p&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f5&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;revert-buffer&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; bring up help for key bindings&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package which-key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(which-key-mode))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Auto completion&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package auto-complete
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(progn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(ac-config-default)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(global-auto-complete-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; on the fly syntax checking&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package flycheck
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(global-flycheck-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; snippets and snippet expansion&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package yasnippet
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(yas-global-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; tags for code navigation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package ggtags
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode-common-hook&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(lambda ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(when (derived-mode-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c++-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;java-mode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(ggtags-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Theme&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package color-theme
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package moe-theme
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(moe-light)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/7SQmleA4EMo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy.
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 31 - elfeed part 3 - macros</title>
      <link>https://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</guid>
      <description>&lt;p&gt;
In &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-30-elfeed-2&#34;&gt;part 2&lt;/a&gt; I talked about how I used &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;Hyrdas&lt;/a&gt; to quickly navigate through
elfeed tags. It was a nice step up but the fact that I still had to
manually edit my configuration code for every new tag to update the
hydra was a problem.&lt;/p&gt;
&lt;p&gt;
Basically, I had to somehow or other, take a list of all the active
tags and with it build a &lt;strong&gt;&lt;strong&gt;defhydra&lt;/strong&gt;&lt;/strong&gt; command that will then make my
Hydra.&lt;/p&gt;
&lt;p&gt;
Fortunately, emacs, being a lisp, has macros. I&amp;#39;m not talking about
keyboard macros which I talked about in &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-15-macros/#.WLbj5t9idKQ&#34;&gt;episode 15&lt;/a&gt; but rather &lt;a href=&#34;http://wiki.c2.com/?LispMacro&#34;&gt;Lisp
style macros&lt;/a&gt;. Macros let you transform code and then execute the
transformed code.&lt;/p&gt;
&lt;p&gt;
The example I give in the video:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defmacro infix (a op b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;op &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;b))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(infix &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; evaluates to 11&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This transforms the &lt;strong&gt;&lt;strong&gt;3+8&lt;/strong&gt;&lt;/strong&gt; into &lt;strong&gt;&lt;strong&gt;(+ 3 8)&lt;/strong&gt;&lt;/strong&gt; and then evaluates it to
be 11.&lt;/p&gt;
&lt;p&gt;
We can use this idea with our Hydra.&lt;/p&gt;
&lt;p&gt;
We can use the call &lt;strong&gt;&lt;strong&gt;elfeed-db-get-all-tags&lt;/strong&gt;&lt;/strong&gt; to get a list of all
the tags in our database. I decided that if I had an uppercase letter
in the tag, I&amp;#39;d use the lowercase version of that letter as my &amp;#34;hotkey&amp;#34;
and if it didn&amp;#39;t, I&amp;#39;d just use the first letter.&lt;/p&gt;
&lt;p&gt;
So, given a tag list of:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(active blogs cs eDucation emacs local misc sports star tech unread webcomics)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I&amp;#39;d want a &amp;#34;hotkey&amp;#34; of &lt;strong&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/strong&gt; for logs and &lt;strong&gt;&lt;strong&gt;d&lt;/strong&gt;&lt;/strong&gt; for eDucation.&lt;/p&gt;
&lt;p&gt;
The routine &lt;strong&gt;&lt;strong&gt;z/hasCap&lt;/strong&gt;&lt;/strong&gt; tests to see if a tag has a capital letter in
it and &lt;strong&gt;&lt;strong&gt;z/get-hydra-option-key&lt;/strong&gt;&lt;/strong&gt; returns the final &amp;#34;hotkey:&amp;#34;&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun z/hasCap (s) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(let ((case-fold-search &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(string-match-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[[:upper:]]&amp;#34;&lt;/span&gt; s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun z/get-hydra-option-key (s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;returns single upper case letter (converted to lower) or first&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(let ( (loc (z/hasCap s)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(if loc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;downcase&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;substring&lt;/span&gt; s loc (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; loc &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;substring&lt;/span&gt; s &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;mz/make-elfeed-cats&lt;/strong&gt;&lt;/strong&gt; takes a list of tags and returns a list of
items where each item is in the form expected by the hydra definition:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +tagname&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tagname&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun mz/make-elfeed-cats (tags)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Returns a list of lists. Each one is line for the hydra configuratio in the form
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(c function hint)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; (lambda (tag)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(let* (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(tagstring (&lt;span style=&#34;color:#a6e22e&#34;&gt;symbol-name&lt;/span&gt; tag))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(c (z/get-hydra-option-key tagstring))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; c (&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(elfeed-search-set-filter) (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +%s&amp;#34;&lt;/span&gt; tagstring) ))tagstring  )))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tags))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Finally, here&amp;#39;s our macro:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defmacro mz/make-elfeed-hydra ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(defhydra mz/hydra-elfeed ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;(mz/make-elfeed-cats (elfeed-db-get-all-tags))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +star&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starred&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt; elfeed-toggle-star &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mark&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@1-day-ago&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Today&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; bjm/elfeed-save-db-and-bury &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quit Elfeed&amp;#34;&lt;/span&gt; :color blue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quit&amp;#34;&lt;/span&gt; :color blue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The line that starts with &lt;strong&gt;&lt;strong&gt;,@&lt;/strong&gt;&lt;/strong&gt; calls the routine that builds lines
of code for all the tags in the database and the macro leaves me with
the defhydra I need.&lt;/p&gt;
&lt;p&gt;
I then redefine the hydra every time I need it, just in case tags
changed:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun mz/make-and-run-elfeed-hydra ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(mz/make-elfeed-hydra)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(mz/hydra-elfeed/body))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and bind &lt;strong&gt;&lt;strong&gt;mz/make-and-run-elfeed-hydra&lt;/strong&gt;&lt;/strong&gt; to j and J in my elfeed
keymap (this code goes in the bind section of my use-package elfeed
section):&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mz/make-and-run-elfeed-hydra)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mz/make-and-run-elfeed-hydra)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
As long as I remember to name my tags in a way that they don&amp;#39;t
conflict with one another I can quickly navigate all around elfeed.&lt;/p&gt;
&lt;p&gt;
Macros FTW!!!!&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video:&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5zuSUbAHH8c&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy.
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 30 - elfeed part 2 - Hydras</title>
      <link>https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</guid>
      <description>&lt;p&gt;
In &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-29%2520elfeed/&#34;&gt;part 1&lt;/a&gt;, I talked about &lt;a href=&#34;https://github.com/skeeto/elfeed&#34;&gt;elfeed&lt;/a&gt;, a really awesome feed reader for
emacs. Generally, I&amp;#39;m really liking it but there&amp;#39;s been one problem -
not being able to navigate quickly between groups of feeds with a
keystroke or two.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s emacs so there has to be a solution.&lt;/p&gt;
&lt;p&gt;
Enter &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;hydra&lt;/a&gt; - a terrific emacs package from the same guy who brought
us &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;swiper&lt;/a&gt;, another one of my favorite emacs packages.&lt;/p&gt;
&lt;p&gt;
Basically, Hydra allows us to create Hydras - a collection of emacs
commands tied o a single prefix along with a nice interface and help
system.&lt;/p&gt;
&lt;p&gt;
Truth be told, I don&amp;#39;t use hydra as much anymore since &lt;a href=&#34;https://github.com/justbur/emacs-which-key&#34;&gt;which-key&lt;/a&gt;
does such a great job most of the time. Which-key, however, is no help
here.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code to install hydra along with a some of sample Hydra&amp;#39;s
I use:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package hydra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Hydra for modes that toggle on and off&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(global-set-key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x t&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defhydra toggle (:color blue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;toggle&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; abbrev-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abbrev&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; flyspell-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flyspell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt; toggle-debug-on-error &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;debug&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; fci-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fCi&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt; auto-fill-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fill&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; toggle-truncate-lines &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;truncate&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt; whitespace-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;whitespace&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cancel&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Hydra for navigation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(global-set-key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x j&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defhydra gotoline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;( :pre (linum-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:post (linum-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;goto&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; (lambda () (interactive)(move-to-window-line-top-bottom &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; (lambda () (interactive)(move-to-window-line-top-bottom &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bottom&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; (lambda () (interactive)(move-to-window-line-top-bottom)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;middle&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt; (lambda () (interactive)(end-of-buffer)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; recenter-top-bottom &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recenter&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt; next-line &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;down&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt; (lambda () (interactive) (&lt;span style=&#34;color:#a6e22e&#34;&gt;forward-line&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;))  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;up&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt; goto-line &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;goto-line&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Hydra for some org-mode stuff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(global-set-key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c t&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defhydra hydra-global-org (:color blue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; org-timer-start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Start Timer&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; org-timer-stop &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Stop Timer&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt; org-timer-set-timer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set Timer&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; This one requires you be in an orgmode doc, as it sets the timer for the header&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt; org-timer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Print Timer&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; output timer value to buffer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt; (org-clock-in &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clock-In&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt; org-clock-out &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clock-Out&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; you might also want (setq org-log-note-clock-out t)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; org-clock-goto &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clock Goto&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; global visit the clocked task&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; org-capture &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Capture&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; Don&amp;#39;t forget to define the captures you want http://orgmode.org/manual/Capture.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; (or )rg-capture-goto-last-stored &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Last Capture&amp;#34;&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Take a look at the &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;Hydra&lt;/a&gt; home page for detailed information.&lt;/p&gt;
&lt;p&gt;
With Hydra installed, I can creat one for navigating in elfeed:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(defhydra mz/hydra-elfeed ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +cs&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cs&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +emacs&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +education&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;education&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +star&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starred&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt; elfeed-toggle-star &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mark&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@1-day-ago&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Today&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; bjm/elfeed-save-db-and-bury &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quit Elfeed&amp;#34;&lt;/span&gt; :color blue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quit&amp;#34;&lt;/span&gt; :color blue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and add a binding to the elfeed key map:&lt;/p&gt;
&lt;p&gt;#+BEGIN_SRC emacs-lisp
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package elfeed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:bind (:map elfeed-search-mode-map
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-toggle-star)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-toggle-star)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mz/hydra-elfeed/body)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mz/hydra-elfeed/body)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+End_SRC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This isn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&lt;/span&gt; the actual Hydra I use -- we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; to that in the next
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;installment where I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll&lt;/span&gt; show how to make a Hydra on the fly that
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;contains keys for all your elfeed tags but this is a reasonable example.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&lt;/span&gt; the video:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+begin_export html
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;iframe width=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;560&amp;#34;&lt;/span&gt; height=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;315&amp;#34;&lt;/span&gt; src=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/embed/tjnK1rkO7RU&amp;#34;&lt;/span&gt; frameborder=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+end_export html
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enjoy.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Relevant links:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; Video series overview page:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; http://cestlaz.github.io/stories/emacs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; Code:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; [[https://github.com/zamansky/using-emacs/tree/master][https://github.com/zamansky/using-emacs/tree/master]]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 29 -elfeed part 1</title>
      <link>https://cestlaz.github.io/posts/using-emacs-29-elfeed/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-29-elfeed/</guid>
      <description>&lt;p&gt;
Since the demise of Google Reader, I&amp;#39;ve been using &lt;a href=&#34;http://feedly.com&#34;&gt;Feedly&lt;/a&gt; to read my
streams. Feedly&amp;#39;s a nice product and it&amp;#39;s been working well for me for
quite some time.&lt;/p&gt;
&lt;p&gt;
A few days ago, I decided to see what emacs had to offer on the feed
reader front. One solution was Gnus but then I&amp;#39;ve never been able to
get my head around Gnus. Another was &lt;a href=&#34;https://github.com/skeeto/elfeed&#34;&gt;elfeed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d give elfeed a go.&lt;/p&gt;
&lt;p&gt;
Combined with elfeed-goodies and elfeed-org it&amp;#39;s a pretty nice
solution. You can easily search by either keywords or tags and tags
are particularly easy to set up with elfeed-org.&lt;/p&gt;
&lt;p&gt;
If I want to display all the items from the last month, I hit &lt;strong&gt;&lt;strong&gt;s&lt;/strong&gt;&lt;/strong&gt; (for
search) and enter the query:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@6-months-ago&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For only unread posts:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@6-months-ago +unread&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For unread posts tagged emacs:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@6-months-ago +unread +emacs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And for everything in the past 24 hours, read or not:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@1-day-ago&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s pretty easy and pretty slick. The only thing missing is easy
single key navigation. There&amp;#39;s one solution to that problem over at
&lt;a href=&#34;http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/&#34;&gt;Pragmatic Emacs&lt;/a&gt; and I&amp;#39;ll present another one in the next two posts.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m using some of the code from pragmatic emacs (the functions that start
with &lt;strong&gt;&lt;strong&gt;bjm&lt;/strong&gt;&lt;/strong&gt;) which makes things easier when sharing the elfeed
database on Dropbox (see the Pragmatic Emacs post above for details) and also a couple of routines I found via web
search).&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my basic configuration:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq elfeed-db-directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/shared/elfeeddb&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun elfeed-mark-all-as-read ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(mark-whole-buffer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(elfeed-search-untag-all-unread))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;functions to support syncing .elfeed between machines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;makes sure elfeed reads index from disk before launching&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun bjm/elfeed-load-db-and-open ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrapper to load the elfeed db from disk before opening&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(elfeed-db-load)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(elfeed)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(elfeed-search-update--force))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;write to disk when quiting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun bjm/elfeed-save-db-and-bury ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrapper to save the elfeed db to disk before burying buffer&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(elfeed-db-save)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(quit-window))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defalias &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elfeed-toggle-star&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(elfeed-expose &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;elfeed-search-toggle-all &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;star&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package elfeed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:bind (:map elfeed-search-mode-map
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-toggle-star)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-toggle-star)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package elfeed-goodies
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(elfeed-goodies/setup))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package elfeed-org
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(elfeed-org)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq rmh-elfeed-org-files (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/shared/elfeed.org&amp;#34;&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Check out elfeed and make sure to go to the links provided on the main
&lt;a href=&#34;https://github.com/skeeto/elfeed&#34;&gt;elfeed&lt;/a&gt; page.&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pOFqzK1Ymr4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy.
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 28 -Rectangles</title>
      <link>https://cestlaz.github.io/posts/using-emacs-28-rectangles/</link>
      <pubDate>Thu, 09 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-28-rectangles/</guid>
      <description>&lt;p&gt;
One of my favorite but little used emacs features is rectangular
editing. It&amp;#39;s little used because I don&amp;#39;t need it all that often. It&amp;#39;s
one of my favorites because when I do need it, it&amp;#39;s just so amazingly
useful.&lt;/p&gt;
&lt;p&gt;
The idea is you can mark a rectangle of text, cut it and later paste
it.  This means that if you have three columns of text:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
a b c
d e f
g h i
j k l
&lt;/pre&gt;
&lt;p&gt;
You can easily mark the middle column (b e h k) or even just the b e
and h, cut it and paste it elsewhere as a rectangle. You can also open
up a rectangular region (filled with whitespace). There are a couple
of other niceties but that&amp;#39;s the basic idea.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a link to all the functions:&lt;/p&gt;
&lt;p&gt;
https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html&lt;/p&gt;
&lt;p&gt;
And the video:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pcA5NeEudgU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy.
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 27 - shell and eshell</title>
      <link>https://cestlaz.github.io/posts/using-emacs-27-shell/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-27-shell/</guid>
      <description>&lt;p&gt;
While I use emacs for all all sorts of things, one of the things I
haven&amp;#39;t done much is run shells from within emacs. I&amp;#39;m not sure
why. I&amp;#39;m a command line wonk and adding command line goodness and
emacs together seems like a natural. Maybe it&amp;#39;s because back in the
day I spent a lot of time on MS-DOS systems. You could get a
reasonable Unixy facsimile using tools like the &lt;a href=&#34;https://en.wikipedia.org/wiki/MKS_Toolkit&#34;&gt;MKS toolkit&lt;/a&gt; and I like
so many other young computer scientists wrote our own small shells
when we learned C so I used that insted of command.com.&lt;/p&gt;
&lt;p&gt;
In any event, I&amp;#39;m trying to use the shell within emacs more.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a quick video showing both &lt;strong&gt;&lt;strong&gt;shell&lt;/strong&gt;&lt;/strong&gt;, which runs whatever your
default shell is in an emacs buffer and &lt;strong&gt;&lt;strong&gt;eshell&lt;/strong&gt;&lt;/strong&gt; which is emacs own
shell.&lt;/p&gt;
&lt;p&gt;
I use a couple of packages to smooth over a couple of things.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/porterjamesj/virtualenvwrapper.el&#34;&gt;Virtuelenvwrapper&lt;/a&gt; smooths things voer with the python virtaulenv and
virtualenvwrapper linux packages:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package virtualenvwrapper
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(venv-initialize-interactive-shells)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(venv-initialize-eshell))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Only relevant if you use Python and virtualenvs.&lt;/p&gt;
&lt;p&gt;
and more importantly, &lt;a href=&#34;https://github.com/killdash9/better-shell&#34;&gt;better shell&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package better-shell
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:bind ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; better-shell-shell)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; better-shell-remote-open)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
cleans things up when using a termianl to connect to a remote machine.&lt;/p&gt;
&lt;p&gt;
If you use a shell from within emacs as part of your workflow, please
post how, or better, make a video!!!!&lt;/p&gt;
&lt;p&gt;
Enjoy&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pjhRFMUxBB4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 26 - Google Calendar, Org Agenda</title>
      <link>https://cestlaz.github.io/posts/using-emacs-26-gcal/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-26-gcal/</guid>
      <description>&lt;p&gt;
A while ago I did a couple of videos on how I use org-capture
(&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-23-capture-1/&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-24-capture-2/&#34;&gt;part 2&lt;/a&gt;). I didn&amp;#39;t get into a big part of org-capture - how I
use org-mode and capture to manage my calendar and todo lists.&lt;/p&gt;
&lt;p&gt;
I was waiting to see if I liked my current setup - using &lt;a href=&#34;https://github.com/myuhe/org-gcal.el&#34;&gt;org-gcal&lt;/a&gt; to
sync with my Google Calendar for appointments while using my main org
file for my todo list.&lt;/p&gt;
&lt;p&gt;
Coincidentally, Rainer König recently put up a video on how he &lt;a href=&#34;https://www.youtube.com/watch?v=cIzzjSaq2N8&amp;amp;amp;list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&amp;amp;amp;index=33&#34;&gt;syncs
with his Google calendar&lt;/a&gt;. He uses a different method than the one I
present in this video so make sure to check out his approach. In fact,
you should check out his entire &lt;a href=&#34;https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&#34;&gt;series on org-mode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code I use install org-gcal. The video steps through
setting up things on the Google side. You&amp;#39;ll have to replace the
&lt;strong&gt;&lt;strong&gt;client ID&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;client secrets&lt;/strong&gt;&lt;/strong&gt; in the code below as well as use
your calendar name and whatever org file you want to sync with.&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq package-check-signature &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package org-gcal
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq org-gcal-client-id &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oauth 2.0 client ID&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;org-gcal-client-secret &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client secret&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;org-gcal-file-alist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zamansky@gmail.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/gcal.org&amp;#34;&lt;/span&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I use these two hooks to sync things semi-automatically. The first
hook syncs whenever I load the agenda. Since this happens in the
background, if I just added something to my calendar, I might have to
reload the agenda by hitting &lt;strong&gt;&lt;strong&gt;r&lt;/strong&gt;&lt;/strong&gt; in the agenda view.&lt;/p&gt;
&lt;p&gt;
The second hook syncs with my Google calendar when I capture.&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-agenda-mode-hook&lt;/span&gt; (lambda () (org-gcal-sync) ))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-capture-after-finalize-hook&lt;/span&gt; (lambda () (org-gcal-sync) ))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here are the rest of my settings. The org files I want to include in
my agenda views:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcal.org – the one I&amp;#39;m syncing&lt;/li&gt;
&lt;li&gt;i.org – my main org file for todo items (the todo capture places&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;things in here)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;schedule.org – my old schedule before I was syncing with&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Google. Not active anymore. I should probably remove it.&lt;/p&gt;
&lt;p&gt;
Also, my capture settings:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq org-agenda-files (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/gcal.org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/schedule.org&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq org-capture-templates
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Appointment&amp;#34;&lt;/span&gt; entry (file  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/gcal.org&amp;#34;&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Link&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/links.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Links&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %? %^L %^g \n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog idea&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog Topics:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do Item&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* TODO %?\n%u&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Note&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Note space&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%u&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Journal&amp;#34;&lt;/span&gt; entry (file+datetree &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/journal.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\nEntered on %U\n  %i\n  %a&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Screencast&amp;#34;&lt;/span&gt; entry (file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/screencastnotes.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%i\n&amp;#34;&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The end result is that I can add an event in my Google calendar (or
accept a calendar invite) and it appears in my org-mode
agenda. Likewise, I can add a scheduled event using capture and it
will sync up to Google. I can also just add an event by editing
gcal.org but then would have to run &lt;strong&gt;&lt;strong&gt;org-gcal-post-at-point&lt;/strong&gt;&lt;/strong&gt; to send
it up to Google.&lt;/p&gt;
&lt;p&gt;
Now, I can use bring up a regular agenda &lt;strong&gt;&lt;strong&gt;C-a a&lt;/strong&gt;&lt;/strong&gt;, my todo list &lt;strong&gt;&lt;strong&gt;C-a
t&lt;/strong&gt;&lt;/strong&gt; or by adding a custom agenda command:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq org-agenda-custom-commands
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simple agenda view&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;((agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(alltodo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
a combined agenda and todo view using &lt;strong&gt;&lt;strong&gt;C-a n&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
Finally, there&amp;#39;s &lt;a href=&#34;https://github.com/kiwanami/emacs-calfw&#34;&gt;calfw&lt;/a&gt;. It&amp;#39;s a nice tool to view calendars in
Google. I don&amp;#39;t use it much anymore but it is nice:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package calfw
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#75715e&#34;&gt;;TODO:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calfw&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calfw-org&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq cfw:org-overwrite-default-keybinding &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calfw-ical&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun mycalendar ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(cfw:open-calendar-buffer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:contents-sources
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; (cfw:org-create-source &amp;#34;Green&amp;#34;)  ; orgmode source&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(cfw:ical-create-source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcal&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://somecalnedaraddress&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IndianRed&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; devorah calender&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(cfw:ical-create-source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcal&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://anothercalendaraddress&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IndianRed&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; google calendar ICS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq cfw:org-overwrite-default-keybinding &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package calfw-gcal
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calfw-gcal&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
&lt;p&gt;
Better version:&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/vO_RF2dK7M0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Old, bad version:&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/RyNBtfu9AJ4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 25 - Tramp</title>
      <link>https://cestlaz.github.io/posts/using-emacs-25-tramp/</link>
      <pubDate>Mon, 26 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-25-tramp/</guid>
      <description>&lt;p&gt;
Today&amp;#39;s video talks about using emacs &lt;a href=&#34;https://www.emacswiki.org/emacs/TrampMode&#34;&gt;Tramp&lt;/a&gt; mode.&lt;/p&gt;
&lt;p&gt;
Tramp mode allows you to edit remote files using your local emacs. I usually do this over ssh.&lt;/p&gt;
&lt;p&gt;
To edit a file on a machine &lt;strong&gt;&lt;strong&gt;www.cstuy.org&lt;/strong&gt;&lt;/strong&gt; I would first
&lt;strong&gt;&lt;strong&gt;find-file&lt;/strong&gt;&lt;/strong&gt; using &lt;strong&gt;&lt;strong&gt;C-c C-f&lt;/strong&gt;&lt;/strong&gt; and then for the file name to open:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ssh:www.cstuy.org:/home/zamansky/sc/testfile&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
this would open the file &lt;strong&gt;&lt;strong&gt;testfile&lt;/strong&gt;&lt;/strong&gt; in the absolute directory
&lt;strong&gt;&lt;strong&gt;/home/zamansky/sc&lt;/strong&gt;&lt;/strong&gt;. If my username on the remote machine is
different:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ssh:username@www.cstuy.org:/home/zamansky/sc/testfile&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And I can also work relative to my home directory:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ssh:username@www.cstuy.org:sc/testfile&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If I just hit enter after the machine name and &lt;strong&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/strong&gt; -&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ssh:username@www.cstuy.org:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I end up in a dired buffer on the remote machine.&lt;/p&gt;
&lt;p&gt;
Likewise if I run a &lt;strong&gt;&lt;strong&gt;shell&lt;/strong&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;strong&gt;eshell&lt;/strong&gt;&lt;/strong&gt; in the tramp buffer, it
will run the shell on the remote machine. In the video I showed how
shell didn&amp;#39;t work because locally, I&amp;#39;m configured to use zsh and I
don&amp;#39;t have zsh installed remotely. Eshell, however, worked fine.&lt;/p&gt;
&lt;p&gt;
Using tramp in this way gives us all of the power of our local emacs
configuration to edit a file on a remote machine.&lt;/p&gt;
&lt;p&gt;
You can also use tramp to edit local files as root using sudo:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo::/tmp/sc/rootfile&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note the double colon.&lt;/p&gt;
&lt;p&gt;
Finally, you can do the double-whammy - remote root editing:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh::www.cstu.org|sudo:www.cstuy.org:/home/zamansky/sc/rootfile&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you use zsh and any of this freezes, just do a search on &amp;#34;zsh
tramp&amp;#34; and the top couple of hits will tell you what to add to your
configuration files to fix things.&lt;/p&gt;
&lt;p&gt;
Finally, I mentioned in the video that I don&amp;#39;t use tramp all that much
anymore. That&amp;#39;s mostly because I don&amp;#39;t do much remote editing
anymore. I used it more when I was administering a number of machines
at Stuyvesant.&lt;/p&gt;
&lt;p&gt;
I still use it periodically, but I also use &lt;a href=&#34;https://github.com/libfuse/sshfs&#34;&gt;sshfs&lt;/a&gt;, a Linux tool (which
may be available for other operating systems) that allows me to mount
a directory tree from a remote machine and use it on my local machine.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Iqh50fgbIVk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 24 - Org Capture 2</title>
      <link>https://cestlaz.github.io/posts/using-emacs-24-capture-2/</link>
      <pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-24-capture-2/</guid>
      <description>&lt;p&gt;
Not much in today&amp;#39;s actual post. The video is a continuation of the last one on &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-23-capture-1&#34;&gt;org-capture&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
The video goes over how I set things up to pop up a new frame to do a
capture even if emacs isn&amp;#39;t on screen (as long as it&amp;#39;s running) by
hitting &lt;strong&gt;&lt;strong&gt;F1&lt;/strong&gt;&lt;/strong&gt;. I would  have preferred to bind to &lt;strong&gt;&lt;strong&gt;C-c c&lt;/strong&gt;&lt;/strong&gt; - the
same as within emacs but I havn&amp;#39;t figured out how to do that in Ubuntu
or Mint Linux yet.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the elisp code for the configuration file to do the heavy
lifting. I can&amp;#39;t for th elife of me remember who&amp;#39;s blog I found it
on. If anyone knows, please leave a comment - I&amp;#39;d like to give credit
where credit&amp;#39;s due:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defadvice org-capture-finalize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(after delete-capture-frame activate)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Advise capture-finalize to close the frame&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(if (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capture&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;frame-parameter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;delete-frame&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defadvice org-capture-destroy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(after delete-capture-frame activate)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Advise capture-destroy to close the frame&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(if (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capture&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;frame-parameter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;delete-frame&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package noflet
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun make-capture-frame ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Create a new frame and run org-capture.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(make-frame &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capture&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(select-frame-by-name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capture&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(delete-other-windows)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(org-capture)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The command I bind to the keyboard shortcut in my window manager:&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;emacsclient -ne &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(make-capture-frame)&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
There will be a third capture video in a few weeks where I&amp;#39;ll talk
about scheduling and agendas. Right now, I&amp;#39;m playing with org-gcal to
sync with my Google calendar and want to figure out a config I&amp;#39;m happy
with before making that video.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/gjr9mP01oWE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 23 - Org Capture 1</title>
      <link>https://cestlaz.github.io/posts/using-emacs-23-capture-1/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-23-capture-1/</guid>
      <description>&lt;p&gt;
Org mode has an amazing feature - &lt;strong&gt;&lt;strong&gt;org-capture&lt;/strong&gt;&lt;/strong&gt;. I only started
using it recently but it&amp;#39;s really awesome.&lt;/p&gt;
&lt;p&gt;
What took me so long?&lt;/p&gt;
&lt;p&gt;
Probably that the manual seemed a little intimidating.&lt;/p&gt;
&lt;p&gt;
It really isn&amp;#39;t hard, though. Combined with what I&amp;#39;ll go over in the
next video and post (and a future one for Google calendar sync) it&amp;#39;s
what I use for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;recording blog ideas&lt;/li&gt;
&lt;li&gt;managing bookmarks&lt;/li&gt;
&lt;li&gt;taking short Notes&lt;/li&gt;
&lt;li&gt;managing my calendar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I use the binding:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c c&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-capture&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
By default, running org-capture brings up a form to capture a &amp;#34;task&amp;#34;
but things get really cool when you start making your own capture
templates. With capture templates, you can speed up recording
information and then tell org-mode to store it where you want it.&lt;/p&gt;
&lt;p&gt;
Here are my template settings.&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq org-capture-templates
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Appointment&amp;#34;&lt;/span&gt; entry (file  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/gcal.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Appointments&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Note&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/notes.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Notes&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* Note %?\n%T&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Link&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/links.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Links&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %? %^L %^g \n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog idea&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog Topics:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do Item&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do Items&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Journal&amp;#34;&lt;/span&gt; entry (file+datetree &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/journal.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\nEntered on %U\n  %i\n  %a&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Screencast&amp;#34;&lt;/span&gt; entry (file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/screencastnotes.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%i\n&amp;#34;&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Let&amp;#39;s look at the &lt;strong&gt;&lt;strong&gt;Blog&lt;/strong&gt;&lt;/strong&gt; entry:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog idea&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog Topics:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It&amp;#39;s a list with a bunch of options. The first string &lt;strong&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/strong&gt; is the
key to type to select this template, &lt;strong&gt;&lt;strong&gt;Blog idea&lt;/strong&gt;&lt;/strong&gt; is the actual name
for this template.&lt;/p&gt;
&lt;p&gt;
The next item, &lt;strong&gt;&lt;strong&gt;entry&lt;/strong&gt;&lt;/strong&gt; describes the type of template you&amp;#39;re
creating. &lt;strong&gt;&lt;strong&gt;entry&lt;/strong&gt;&lt;/strong&gt; says you&amp;#39;re going to create an org node with a
headline which can then be added to an org-file. You can also have
your template create things like an org list &lt;strong&gt;&lt;strong&gt;item&lt;/strong&gt;&lt;/strong&gt; a checkbox
&lt;strong&gt;&lt;strong&gt;checkitem&lt;/strong&gt;&lt;/strong&gt; or even &lt;strong&gt;&lt;strong&gt;plain&lt;/strong&gt;&lt;/strong&gt; text. You can see the full set of
options &lt;a href=&#34;http://orgmode.org/manual/Template-elements.html#Template-elements&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Next, in parentheses, you have the target - where to store the captured
info. The &lt;strong&gt;&lt;strong&gt;Blog idea&lt;/strong&gt;&lt;/strong&gt; template says &lt;strong&gt;&lt;strong&gt;file+headline&lt;/strong&gt;&lt;/strong&gt; followed by a
filename in quotes and a headline in quotes. This says to store the
new org heading you&amp;#39;re capturing in the file
&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34; under the heading &amp;#34;Blog Topics:&amp;#34; Contrast
this to the &lt;strong&gt;&lt;strong&gt;appointments&lt;/strong&gt;&lt;/strong&gt; template which just specifies &lt;strong&gt;&lt;strong&gt;file&lt;/strong&gt;&lt;/strong&gt;
and a filename. The &lt;strong&gt;&lt;strong&gt;appointments&lt;/strong&gt;&lt;/strong&gt; template will just append the new
appointment to its specified file whereas &lt;strong&gt;&lt;strong&gt;Blog idea&lt;/strong&gt;&lt;/strong&gt; will prepend
(due to the &lt;strong&gt;&lt;strong&gt;:prepend&lt;/strong&gt;&lt;/strong&gt; option at the end of the template) to the
&amp;#34;Blog Topics:&amp;#34; heading in &lt;strong&gt;&lt;strong&gt;i.org&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
After this we have the actual template: &amp;#34;* %?\n%T&amp;#34; - the %? and %T are
placeholders for substitutions. The &lt;strong&gt;&lt;strong&gt;%T&lt;/strong&gt;&lt;/strong&gt; prompts for a date with a
timestamp and the &lt;strong&gt;&lt;strong&gt;%?&lt;/strong&gt;&lt;/strong&gt; is where to leave the cursor for final input
before saving the capture.&lt;/p&gt;
&lt;p&gt;
Finally, &lt;strong&gt;&lt;strong&gt;:prepend&lt;/strong&gt;&lt;/strong&gt; and other options can be found at the above link.&lt;/p&gt;
&lt;p&gt;
All the substitutions can be found in &lt;a href=&#34;http://orgmode.org/manual/Template-expansion.html#Template-expansion&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Once you&amp;#39;ve set up your templates, it&amp;#39;s quick and easy to capture
information.&lt;/p&gt;
&lt;p&gt;
This video shows the basics. The next one shows how to pop up a
capture even when you&amp;#39;re not in emacs and how I use org-capture to
maintain my web bookmarks.&lt;/p&gt;
&lt;p&gt;
More information on capture templates can be found &lt;a href=&#34;http://orgmode.org/manual/Capture-templates.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-wPfxuxIfeU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 21 - web mode</title>
      <link>https://cestlaz.github.io/posts/using-emacs-21-web-mode/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-21-web-mode/</guid>
      <description>&lt;p&gt;
Quick post today.&lt;/p&gt;
&lt;p&gt;
The video goes over web-mode - my preferred weapon for html and all the goodies you embed in an html file.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s multi-modal so it acts sensibly regardless of wether you&amp;#39;re editing html, css, javascript or even templates in a single file.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/strong&gt; In the video, web-mode wasn&amp;#39;t automatically inserting
quotes. I had to set hte following variable to fix this:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-listp&#34;&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-emacs-listp&#34; data-lang=&#34;emacs-listp&#34;&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-emacs-listp&#34; data-lang=&#34;emacs-listp&#34;&gt;(setq web-mode-enable-auto-quoting t)&lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Giving the final configuration I&amp;#39;m currently using:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(use-package web-mode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.html?\\&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; web-mode))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq web-mode-engines-alist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;django&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.html\\&amp;#39;&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq web-mode-ac-sources-alist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (ac-source-css-property))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;html&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (ac-source-words-in-buffer ac-source-abbrev))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq web-mode-enable-auto-closing &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(setq web-mode-enable-auto-quoting &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; this fixes the quote problem I mentioned&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The web-mode &lt;a href=&#34;http://web-mode.org&#34;&gt;documentation&lt;/a&gt; has more information including a nice chart of all the key bindings.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/69bQa5n23jc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 22 - emacsclient</title>
      <link>https://cestlaz.github.io/posts/using-emacs-22-emacsclient/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-22-emacsclient/</guid>
      <description>&lt;p&gt;
Another quick hit today.&lt;/p&gt;
&lt;p&gt;
This video is really setting the stage for hte next two, where I talk about org-mode capturing.&lt;/p&gt;
&lt;p&gt;
Today, we&amp;#39;re demoing the use of the emacs server and client.&lt;/p&gt;
&lt;p&gt;
Back in the old days, emacs took a LOOONG time to load. A complex
conviguration could take on the order of 10 to 20 seconds. This
resulted in people loading emacs at the start of the day and leaving
it up forever. While load times aren&amp;#39;t much of an issue anymore, it&amp;#39;s
still nice to leave emacs around all the time.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s where running emacs as a server comes in.. I set up a keyboard shortcut my window manager to run:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;emacsclient -a &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; -c&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Rather than trying to run emacs, this tries to connect to an already
running emacs server. The &lt;strong&gt;&lt;strong&gt;-c&lt;/strong&gt;&lt;/strong&gt; creates a new frame. Instead if you
use &lt;strong&gt;&lt;strong&gt;-t&lt;/strong&gt;&lt;/strong&gt; it will open emacs in the terminal. The &lt;strong&gt;&lt;strong&gt;-a &amp;#34;&amp;#34;&lt;/strong&gt;&lt;/strong&gt; tells
emacs to run itself as a server (daemon) if it isn&amp;#39;t already running.&lt;/p&gt;
&lt;p&gt;
Later on, running &lt;strong&gt;&lt;strong&gt;emacsclient -c&lt;/strong&gt;&lt;/strong&gt; will very quickly bring up a new frame to the server.&lt;/p&gt;
&lt;p&gt;
In addition to instant loading, Running emacs this way has the
advantage, or some may say disadvantage of keeping buffers around
forever since you just keep emacs up and running.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/9AHGsCtsClg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 20 - yanking</title>
      <link>https://cestlaz.github.io/posts/using-emacs-20-yanking/</link>
      <pubDate>Sun, 13 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-20-yanking/</guid>
      <description>&lt;p&gt;
Today&amp;#39;s video is a bit of a follow up on the last one as well as a few
miscillaneous configuration.&lt;/p&gt;
&lt;p&gt;
We got some comments on alternate ways to load a file if it exists -
it&amp;#39;s always cool to see how different people end up doing similar things.&lt;/p&gt;
&lt;p&gt;
We then talk about three little configurations. Two I found out about
reading Jon Sander&amp;#39;s (jcs) blog &lt;a href=&#34;http://irreal.org/blog&#34;&gt;Irreal&lt;/a&gt;. Jon&amp;#39;s blog is a terrific
source of emacs info - if you don&amp;#39;t subscribe, you should.&lt;/p&gt;
&lt;p&gt;
I go over using counsel for working with the kill-ring. The command
counsel-yank-pop acts as a replamcement for yank-pop and it lets you
easily yank anything from the kill ring - not just the most previously
killed/whacked piece.&lt;/p&gt;
&lt;p&gt;
You just hit &lt;strong&gt;&lt;strong&gt;M-y&lt;/strong&gt;&lt;/strong&gt; and then either keep hitting it or use up and
down to select what you want to yank.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the original post from Irreal: &lt;a href=&#34;http://irreal.org/blog/?p=5707&#34;&gt;http://irreal.org/blog/?p=5707&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
I then briefly talk about smoothing things over between the system
clipboard and the kill ring, also from Irreal:
&lt;a href=&#34;http://irreal.org/blog/?p=5702&#34;&gt;http://irreal.org/blog/?p=5702&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Finally, I talk about auto-revert-mode - this monitors files on your
file system and when they change, they reload your buffer. I find this
very useful to keep multiple machines in sync when I&amp;#39;m working with
files in a could based filesystem like Dropbox or Owncloud.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LReZI7VAy8w&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 19 - moving to a live config</title>
      <link>https://cestlaz.github.io/posts/using-emacs-19-live/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-19-live/</guid>
      <description>&lt;p&gt;
Some of the videos I want to make are going to be much easier to do if
I&amp;#39;m working in my own account where my whole file tree is available.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s also a little annoying changing between my full emacs config and
the one I&amp;#39;m developing here.&lt;/p&gt;
&lt;p&gt;
So, I decided to move to this config for my real config and as I make
more videos move parts of my old configuration over to this new one.&lt;/p&gt;
&lt;p&gt;
The only problem is that I &lt;strong&gt;&lt;strong&gt;need&lt;/strong&gt;&lt;/strong&gt; some of my current config right
now – things like my email setup.&lt;/p&gt;
&lt;p&gt;
This video talks about how I&amp;#39;m going to set things up to take care of
everything.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/8RwQNXOjSis&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Video series overview page:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>