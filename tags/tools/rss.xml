<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tools on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/tools/</link>
    <description>C&#39;est la Z (tools)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Sep 2020 13:17:41 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/tools/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Using Emacs 75 - Bufler</title>
      <link>https://cestlaz.github.io/post/using-emacs-75-bufler/</link>
      <pubDate>Tue, 22 Sep 2020 13:17:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-75-bufler/</guid>
      <description>&lt;p&gt;
Quick Emacs hit today.&lt;/p&gt;
&lt;p&gt;
After my last video, I received a comment noting that I was using
ibuffer and that there was another package I might want to consider -
&lt;a href=&#34;https://github.com/alphapapa/bufler.el&#34;&gt;bufler&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
I started with basic ibuffer and then started to &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/&#34;&gt;customize it&lt;/a&gt; to group
buffers but that was always somewhat finicky. More often than not I
couldn&amp;#39;t tune it the way I wanted. Most recently, I started using
&lt;a href=&#34;https://github.com/purcell/ibuffer-projectile&#34;&gt;ibuffer-projectile&lt;/a&gt; which group projects for me but lost the other
customizations. In any event, I was more or less happy with things.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/alphapapa/bufler.el&#34;&gt;Bufler&lt;/a&gt; though looks to be a nice alternative. Out of the box it looks
like it groups things pretty well and has a nice Emacs &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;hydra&lt;/a&gt; that you
can bring up with &lt;code&gt;?&lt;/code&gt; to remind you how to do things like kill one or
more buffers.  &lt;/p&gt;
&lt;p&gt;
Right now, I&amp;#39;m using it as an ibuffer replacement but it also has its
own version of switch buffer that I plan to play with as well. &lt;/p&gt;
&lt;p&gt;
The only knit I&amp;#39;ve found thus far is that when you run bufler, it
splits the window and lists the buffers in the new space. If I&amp;#39;m using
ibuffer I want it to use the whole Emacs frame. Otherwise I just use
ivy-switch-buffer (or now bufler-switch-buffer). I couldn&amp;#39;t figure out
a way built in so ended up writing a small function: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun mz/bufler-one-window (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; force-refresh)
  (interactive &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;)
  (bufler-list)
  (delete-other-windows)

)

(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x C-b&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mz/bufler-one-window&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Check out the video for more details.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/KqvjeRf84do&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Zulip - maybe the answer for class communication</title>
      <link>https://cestlaz.github.io/post/zulip/</link>
      <pubDate>Wed, 16 Sep 2020 14:01:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/zulip/</guid>
      <description>&lt;p&gt;
It&amp;#39;s always been a challenge to get students to buy in to an out of
class communication tool. Over the years I&amp;#39;ve tried many including
mailing lists, Piazza, Discourse, Vanilla and other discussion forums,
Slack and probably a few other things.&lt;/p&gt;
&lt;p&gt;
I guess it&amp;#39;s not surprising that it&amp;#39;s a hard sell - prior to the
internet once school was out kids there as no teacher student
interaction until the next school day and kids would only interact
with their direct friends. &lt;/p&gt;
&lt;p&gt;
Still, we have technology and even without great buy in, if nothing
else there&amp;#39;s an advantage to having an electronic means of
distributing things to students.&lt;/p&gt;
&lt;p&gt;
Ultimately I fell back on a plain old mailing list. Discussion/forum
platforms didn&amp;#39;t work for me because it was yet another location that
you had to remember to check. Slack didn&amp;#39;t work because at its core
it&amp;#39;s for live chat and while workers are at their desks all day and
can have a chat open, that doesn&amp;#39;t work with students and catching up
on a complex Slack with threads after the fact is, well, just no. &lt;/p&gt;
&lt;p&gt;
With us going remote in Coronatime needs changed. Slack looked like it
might be more viable. It still had the problem of limited threads but
in addition to students being more &amp;#34;always on,&amp;#34; for better or worse,
live remote teaching benefits form a chat. Why Slack over the built in
Zoom chat? Well, one thing is that the Zoom chat disappears after the
session whereas Slack lives on and can form the base for ongoing
discussion. Second, dedicated chat platforms like Slack are more
robust and featureful.  &lt;/p&gt;
&lt;p&gt;
Over the summer and into this semester, Slack seems to be working very
well for my teacher certification candidates but I ended up using
something else - &lt;a href=&#34;https://zulip.com&#34;&gt;Zulip&lt;/a&gt; for my undergraduate classes and plan to move
my teachers over to it for the next cohort.&lt;/p&gt;
&lt;p&gt;
Why the change? Both Zulip and Slack have free tiers but Zulip can
also be self hosted and is open source. Slack is slicker when it comes
to integrations but Zulip is the clear winner for combined sync and
async conversations due to its threading model combined with flexible
alerts. &lt;/p&gt;
&lt;p&gt;
I put together this short video showing  the basics - check it out:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/xWa56KdgYZM&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
You can use Zulip free on their site with similar limits as for
Slack&amp;#39;s free tier or you can self host. I&amp;#39;m running our Zulip
instances on a Digital Ocean droplet. DO has a &amp;#34;one click&amp;#34; Zulip setup
that was fairly straightforward. You might want to check that out if
you&amp;#39;re comfortable as a Linux admin.&lt;/p&gt;
&lt;p&gt;
So far, I&amp;#39;m liking Zulip very much and thing I&amp;#39;ll be using it as my
primary in and out of class communication tool. I&amp;#39;d like a better
selection of emoji and wish it was easier to both use integrations and
write bots but the thread based interface is really great. &lt;/p&gt;
&lt;p&gt;
I know Slack&amp;#39;s the big name and I do like Slack as well but if you&amp;#39;re
a teacher and looking for an in and out of class chat/communication
platform check Zulip out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 74 Eglot</title>
      <link>https://cestlaz.github.io/post/using-emacs-74-eglot/</link>
      <pubDate>Mon, 31 Aug 2020 13:03:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-74-eglot/</guid>
      <description>&lt;p&gt;
I primarily program in four languages these days -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clojure &lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And most of the time, my Emacs configuration has handled each one
differently. Cider for Clojure, Irony for C++, Elpy and Jedi for
Python and Java I could never figure out. This is of course on top of
tools that work across languages like company for completions, or
flycheck for general language syntax checking. &lt;/p&gt;
&lt;p&gt;
A while ago I heard about lsp-mode - Language Server Protocol
mode. Basically, you set up the mode and it connects to back end
language servers. The idea is to keep configuration down and provide a
consistent interface across langauges while leveraging the types of
support these back ends can provide. I wrote a bit about lsp-mode and
made a video and you can find it &lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-58-lsp-mode/&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
When I first tried LSP it just didn&amp;#39;t work. I tried it again later and
it basically worked but was finicky. Configuration took more work than
I wanted, particularly for customizing per language and even when
working it didn&amp;#39;t work as expected. &lt;/p&gt;
&lt;p&gt;
This past summer, I had to teach using Java so I tried lsp-mode
again. Setup wasn&amp;#39;t too bad and most of the issues were more related
to Java than to lsp-mode but I didn&amp;#39;t like the results. While it might
be great for the professional developer there were too many popups and
made the screen way too busy for teaching. &lt;/p&gt;
&lt;p&gt;
Still, the idea of a single simple configuration was enticing.&lt;/p&gt;
&lt;p&gt;
So, when I decided to get my configuration together for the Fall
semester I decided to try yet again and discovered &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt; for
Emacs. Eglot turned out to be easier to install and gave me more of
the experience I was looking for.&lt;/p&gt;
&lt;p&gt;
To start, I set it up for C++ using&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(use-package eglot :ensure t)
(add-to-list &amp;#39;eglot-server-programs &amp;#39;((c++-mode c-mode) &amp;#34;clangd-10&amp;#34;))
(add-hook &amp;#39;c-mode-hook &amp;#39;eglot-ensure)
(add-hook &amp;#39;c++-mode-hook &amp;#39;eglot-ensure)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Eglot defaults to &lt;a href=&#34;https://github.com/MaskRay/ccls&#34;&gt;ccls&lt;/a&gt; as a C++ language server. I didn&amp;#39;t want to have
to build it but was able to &lt;code&gt;apt-get install clangd-10&lt;/code&gt; and use that
instead by adding clangd-10 to the eglot-server-programs in the second
configuration line.&lt;/p&gt;
&lt;p&gt;
For python I had to install &lt;a href=&#34;https://github.com/palantir/python-language-server&#34;&gt;pyls&lt;/a&gt;, the Python Language Server but that
was easy to do and then I just had to add &lt;code&gt;(add-hook &amp;#39;python-mode-hook
&amp;#39;eglot-ensure)&lt;/code&gt; to my config.&lt;/p&gt;
&lt;p&gt;
Finally, Java was more of an issue I had to get &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt; on my
system. It turns out that lsp-mode installed it for me already so I
just had to point to it:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(defconst my-eclipse-jdt-home &amp;#34;/home/zamansky/.emacs.d/.cache/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.5.800.v20200727-1323.jar&amp;#34;)
(defun my-eglot-eclipse-jdt-contact (interactive)
  &amp;#34;Contact with the jdt server input INTERACTIVE.&amp;#34;
  (let ((cp (getenv &amp;#34;CLASSPATH&amp;#34;)))
    (setenv &amp;#34;CLASSPATH&amp;#34; (concat cp &amp;#34;:&amp;#34; my-eclipse-jdt-home))
    (unwind-protect (eglot--eclipse-jdt-contact nil)
      (setenv &amp;#34;CLASSPATH&amp;#34; cp))))
(setcdr (assq &amp;#39;java-mode eglot-server-programs) #&amp;#39;my-eglot-eclipse-jdt-contact)
(add-hook &amp;#39;java-mode-hook &amp;#39;eglot-ensure)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
So far, I&amp;#39;m liking eglot very much. I&amp;#39;ll probably check lsp-mode out
again somewhere down the line but as of now it&amp;#39;s Cider for Clojure and
Eglot for everything else.&lt;/p&gt;
&lt;p&gt;
The video has a run through and demo. Check it out.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ROnceqt3kpE&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Preparing CS Teachers - tools for remote instruction</title>
      <link>https://cestlaz.github.io/post/teacher-cert-tools/</link>
      <pubDate>Mon, 10 Aug 2020 06:07:26 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-tools/</guid>
      <description>&lt;p&gt;
Our summer intensive was supposed to be in person but COVID-19 changed
that in a hurry. We had to scramble to redesign and figure out how we
were going to run things.&lt;/p&gt;
&lt;p&gt;
We decided to go with the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zoom for live meetings &lt;/li&gt;
&lt;li&gt;Slack for chat&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git and GitHub&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub classroom for assignments &lt;/li&gt;
&lt;li&gt;GitHub repos for code distribution, class website and resource
sharing. &lt;/li&gt;
&lt;li&gt;GitHub discussions for off hour and long form discussion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While Zoom is a great platform it was lacking in a few areas so we
also ended up using: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://padlet.com&#34;&gt;Padlet&lt;/a&gt; as a collaborative writing space for groups&lt;/li&gt;
&lt;li&gt;Assorted whiteboarding tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#39;s the breakdown.&lt;/p&gt;
&lt;p&gt;
We used Zoom as you might imagine - big zoom for direct instruction
and whole class work and lots of breakout rooms. Screen sharing worked
great but the whiteboarding was less than ideal so we turned to screen
sharing with other tools. The big things missing from Zoom were a
collaborative writing/drawing space and flexibility for breakout
rooms. I would have loved to be able to spy on a breakout room or have
more fluidity between them but it still did a pretty good job
considering Zoom wasn&amp;#39;t designed for education. &lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://bigbluebutton.org/&#34;&gt;Big Blue Button&lt;/a&gt; is an open source alternative to Zoom. It&amp;#39;s design for
teaching so it has some of the features that Zoom lacks but it&amp;#39;s not
quite there yet in terms of quality and reliability.&lt;/p&gt;
&lt;p&gt;
Instead of the Zoom chat, we decided to use Slack. Zoom&amp;#39;s chat only
works while Zoom is up and there were times when the cohort was
working &amp;#34;offline.&amp;#34; Also, slack gave us both threads and different
channels as well as arbitrary private chats. &lt;/p&gt;
&lt;p&gt;
In addition to the general class chat we had channels like #git-fu, #java-fu, #fall-is-coming to discuss COVID-19 and the public schools,
#attendance  and a bunch of others. &lt;/p&gt;
&lt;p&gt;
Funny thing - this was the first time any of us had strong Slack
adoption. We&amp;#39;ve tried it before but never got buy in. This time we
did. Maybe because we were together morning through afternoon and when
we broke we were still in the same physical location with out
computers nearby. In any event, Slack was used for both in class and
out of class communication and is still being used now albeit at a
lower volume. &lt;/p&gt;
&lt;p&gt;
Slack also gave us a place, besides the zoom to build
community. Having some fun channels like #duckygram and #cs-educationy-goodness  set a light tone. Every day, Alex would wait
until right before our start to put a gif in the #attendance channel
each day outdoing the ridiculousness of the rest of the class. It was
the cohort that made the community but Slack as a platform helped.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m wondering if a I&amp;#39;ll get better buy in with my undergrads in a few
weeks as we&amp;#39;re starting the semester online but at least for this
cohort, it worked.&lt;/p&gt;
&lt;p&gt;
My only problem with Slack is the price. I have zero budget which
leaves us with the free tier. That means limited integrations  and
limited history. I might check out some self-hosted options like Zulip
and Rocketchat to see if they&amp;#39;re viable alternatives.&lt;/p&gt;
&lt;p&gt;
We originally planned to use GitHub discussions for longer form
communication. It hit most of the buttons for me – threaded
discussion, reply via email, customizable alerts. All good. It&amp;#39;s
lacking tags and search but it looked like it could be a viable long
form discussion platform. We kicked off with it but the class voted
with their feet. They kept going back to Slack so while GitHub was our
main platform for code, GitHub discussions fell by the wayside as
Slack won the day.&lt;/p&gt;
&lt;p&gt;
Along the way we learned some tricks. Even though Topher was paid for
teaching two courses, JonAlf two, and I was just officially
supervising and coordinating, all three of us were pretty much on all
the time. Ones strategy that developed was having one of us man Slack
while another ran the Zoom. I might be running a Zoom based activity
while Topher or JonAlf would answer questions or highlight and
emphasize key points on Slack. I don&amp;#39;t know yet if it helped the class
educationally or was a distraction but we all liked the
flow. Something to look at further. &lt;/p&gt;
&lt;p&gt;
We also had to figure out how not to double or triple respond to
questions. We each adopted an emoji and when a question was asked,
whoever got there first would mark the thread with that emoji letting
the others know we had it covered. &lt;/p&gt;
&lt;p&gt;
Another skill we mastered was the &amp;#34;slack-moji&amp;#34; poll - pre-staging
Slack polls and content to cut and paste over. Actually, there&amp;#39;s a
cool remote class tool, &lt;a href=&#34;https://prismia.chat/&#34;&gt;Primsia&lt;/a&gt; (formerly babylon.hosue) which is much
better at that than Slack but it isn&amp;#39;t up 24x7 and is more set up for
a teacher actively managing class discussion rather than a free form
chat.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d love to see Big Blue Button grow to be a suitable Zoom replacement
as it&amp;#39;s better suited for education and I&amp;#39;m hoping that Zulip proves
to be a good free alternative to Slack but regardless of specific
tool, the combination of video conferencing, chat, long form message,
and whiteboarding make up a pretty good remote classroom. It would be
nice if collaborative coding was easier but there aren&amp;#39;t that many
options there. &lt;a href=&#34;https://repl.it&#34;&gt;Repl.it&lt;/a&gt; is awesome but we decided to have them develop
on their local machines and adding a tool like &lt;a href=&#34;https://floobits.com/&#34;&gt;Floobits&lt;/a&gt; would have
been too much to ask for most of the cohort. &lt;/p&gt;
&lt;p&gt;
We think it all went pretty well. If given the option next summer, I&amp;#39;m
leaning towards a hybrid program as even without COVID-19, remote is
easier for many teachers for geographic and school scheduling
reasons. I figure open in person and maybe do one day or a couple of
half days a week on site and the rest remote. I think we&amp;#39;ll talk about
it as a cohort once the Fall begins and can start thinking about
cohort 2.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tools matter when teaching (and learning)</title>
      <link>https://cestlaz.github.io/post/tools-matter/</link>
      <pubDate>Wed, 22 Jul 2020 07:52:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/tools-matter/</guid>
      <description>&lt;p&gt;
One of our teacher certification cohort members asked for some help on
our Slack the other day. It was about a side project - he was learning
him so Javascript. It&amp;#39;s always very cool to see teachers exploring
things that can help with their craft on their own.&lt;/p&gt;
&lt;p&gt;
The whole situation reminded me  about how important good tooling is
and why, in spite of its popularity, javascript has some severe issues
as a learning language and I&amp;#39;m a guy that actually likes javascript. &lt;/p&gt;
&lt;p&gt;
The project was a small interactive javascript todo application and he was
having trouble getting a button to react. I grabbed his code off
GitHub, fired up a server and took a look. Indeed, there were
issues. Some of the interface worked - you could type in a new item
and hit enter or click an add button and it worked. You could check or
uncheck items and you could delete them individually. Everything
worked except the clear button which did nothing. Weird.&lt;/p&gt;
&lt;p&gt;
Exploring the code, here were some of the key sections:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// there were sections like this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.filter-todo&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clearButton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.clear-button&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// then more code 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// then some of this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filterTodo&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;clearButton&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;clearTodos&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// and more code
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
I just pulled out the lines relevant to what he was doing and to the
error so be aware that it&amp;#39;s all out of context. &lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;document.querySelector&lt;/code&gt; lines get references to DOM elements -
elements on the page. The &lt;code&gt;addEventListener&lt;/code&gt; then links a function to
the event. So, when you click on the &lt;strong&gt;clear&lt;/strong&gt; button on the web site,
it&amp;#39;s supposed to run the function &lt;code&gt;clearTodos&lt;/code&gt; and when you click on
the &lt;strong&gt;filter&lt;/strong&gt; button it will run &lt;strong&gt;fiterTodo&lt;/strong&gt;. There&amp;#39;s more linking of
events to elements in the code.&lt;/p&gt;
&lt;p&gt;
What was really weird was that parts and in fact most of the interface
was working and just the clear button was not. To make matters worse,
looking both at the server output and the actual web page, there was
no indication of anything wrong. Even if you looked at the developers
console in the browser it didn&amp;#39;t really give you a clue.&lt;/p&gt;
&lt;p&gt;
It didn&amp;#39;t take me &lt;strong&gt;too&lt;/strong&gt; long to find the error but that&amp;#39;s only because
I spent hours on similar errors back when I learned javascript. Back
then though I lost hours of time on errors like these and I was
learning JS decades into my career as a computer science teacher and
professional.&lt;/p&gt;
&lt;p&gt;
What was going on?&lt;/p&gt;
&lt;p&gt;
When javascript executes  &lt;code&gt;querySelector&lt;/code&gt; it returns a reference to an
element in the web page. If that element doesn&amp;#39;t exist, it returns
 &lt;code&gt;null&lt;/code&gt;. As it turned out, at least in the version I looked at, there
was no element on the page identified by the class &lt;strong&gt;filter-todo&lt;/strong&gt;. The
result was that after executing&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.filter-todo&amp;#34;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;filterOption&lt;/code&gt; is set to refer to null.&lt;/p&gt;
&lt;p&gt;
Then later, this code: 
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filterTodo&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
crashes the program because you can&amp;#39;t call the &lt;code&gt;addEventListener&lt;/code&gt;
method on &lt;code&gt;null&lt;/code&gt; which is what &lt;code&gt;filterOption&lt;/code&gt; is set to.&lt;/p&gt;
&lt;p&gt;
Therein lies the problem. I commented out the two lines, the program
ran, and the &lt;strong&gt;clear&lt;/strong&gt; button was clickable.&lt;/p&gt;
&lt;p&gt;
The killer was that the tool gave some pretty weird results - it
wasn&amp;#39;t all or nothing. Parts of the interface responded but parts
didn&amp;#39;t. There was no actionable feedback. The only feedback was indeed
this error: &lt;strong&gt;TypeError: filterOption is null&lt;/strong&gt; but this seems wholly
unrelated to the clear button and since most of the interface was
responsive it seemed even weirder.&lt;/p&gt;
&lt;p&gt;
My best guess was that the web browser executed the JS code
until the crash so anything that parts of the user interface that were
wired up prior to that null pointer reference did indeed run.&lt;/p&gt;
&lt;p&gt;
The lack of feedback and this manner of execution can make javascript
really tough on both beginners and self learners. It&amp;#39;s also tough with
a teacher if they don&amp;#39;t really know the ins and outs of the toolset.&lt;/p&gt;
&lt;p&gt;
This was all just a reminder that tools matter. Java, Python, and C++
might not give the best error messages but generally the tooling isn&amp;#39;t
so bad. They could of course, be better, and I&amp;#39;m not arguing that any
of them are ideal learning environments but JS has a long way to
go. On the other hand, languages and environment specifically made for
learning have issues as well. The bottom line in choice of tools is
that there&amp;#39;s no magic bullet and the answer is as usual, &amp;#34;it depends.&amp;#34;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github and Student Feedback</title>
      <link>https://cestlaz.github.io/post/github-student-feedback/</link>
      <pubDate>Mon, 20 Jul 2020 16:12:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-student-feedback/</guid>
      <description>&lt;p&gt;
Beyond the CS specifics We&amp;#39;ve been primarily using three tools in our
summer certification program.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Zoom for video conferencing&lt;/li&gt;
&lt;li&gt;Slack for text based communicaiton&lt;/li&gt;
&lt;li&gt;GitHub for just about everything else&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We use GitHub as a CMS - a place to share code and assignments as well
as collect them. We&amp;#39;re also playing with GitHub discussions although
that&amp;#39;s fallen somewhat to the wayside with Slack being preferred. &lt;/p&gt;
&lt;p&gt;
One of the choices I&amp;#39;m digging more than ever is &lt;a href=&#34;https://classroom.github.com/&#34;&gt;GitHub Classroom&lt;/a&gt; for
assignments. Recently GitHub added a feedback feature powered through
what known as Pull Requests. You just have to check the &amp;#34;feedback&amp;#34;
button when you create an assignment. I also set my notifications so I
receive an email alert whenever a students submits anything.&lt;/p&gt;
&lt;p&gt;
Whenever a student updates an assignment or in Git parlance commits
and pushes up a change, I get an email alert. The email includes: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The repo where the change was made &lt;/li&gt;
&lt;li&gt;A brief message describing the most recent change&lt;/li&gt;
&lt;li&gt;A link the the students GitHub account&lt;/li&gt;
&lt;li&gt;A link to the actual change.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Clicking on the change and I get to a screen like this:&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;&lt;img src=&#34;https://cestlaz.github.io/img/githubdiff.png&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;
A summary of exactly what changed. I see lines that were deleted,
lines that were added and lines that were modified. At the top I see
the one line brief description which the student put in when making
the commit. I can also easily navigate through their assignment both
to see other parts of it as well as earlier versions.&lt;/p&gt;
&lt;p&gt;
If you scroll down the page there&amp;#39;s a place you can leave a comment
which will go to the student. &lt;/p&gt;
&lt;p&gt;
This all makes for a very quick and easy feedback mechanism. You can
also go to the &amp;#34;pull request&amp;#34; section of the repo (link at the top of
the repo page) where you can find all the comments.&lt;/p&gt;
&lt;p&gt;
All in all this provides a very quick and painless way of seeing what
students are up to and a quick way to provide some feedback.&lt;/p&gt;
&lt;p&gt;
The only catch is that this only works when the students actively push
changes up to GitHub. While this group of teachers have been great
that&amp;#39;s sometimes a challenge with high school or college
students. Working on strategies to get this type of buy in from my
first years in the Fall.&lt;/p&gt;
&lt;p&gt;
So, GitHub Classroom&amp;#39;s feedback mechanism? A big win and more great
work from the GitHub education team.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 73 - Ripgrep and updating the blog</title>
      <link>https://cestlaz.github.io/post/using-emacs-72-rg/</link>
      <pubDate>Sun, 14 Jun 2020 11:58:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-72-rg/</guid>
      <description>&lt;p&gt;
As I said in my &lt;a href=&#34;As I mentioned in my &#34;&gt;last post&lt;/a&gt;, I&amp;#39;m moving to a new Hugo theme. I decided
on &lt;a href=&#34;https://github.com/mitrichius/hugo-theme-anubis&#34;&gt;Anubis&lt;/a&gt;. It&amp;#39;s simple and clean. Unfortunately, in this change over,
many things broke. Specifically, all my embedded html. Using earlier
version of Hugo I could directly embed HTML and it would render. Now I
have to bracket the HTML with special org markup - &lt;strong&gt;#+begin_export html&lt;/strong&gt; and &lt;strong&gt;#+end_export html&lt;/strong&gt;. &lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
#+begin_export html
&amp;lt;h1&amp;gt;html stuff to render goes in here &amp;lt;/h1&amp;gt;
#+end_export
&lt;/pre&gt;
&lt;p&gt;
Minimally I had to find all my embedded videos and all my embedded
Tweets. There&amp;#39;s probably a lot more. Fortunately with Emacs this is
pretty easy. I used &lt;a href=&#34;https://github.com/dajva/rg.el&#34;&gt;rg.el&lt;/a&gt; which is an Emacs front end to &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;. If
you don&amp;#39;t know ripgrep, it&amp;#39;s kind of like a super fast, super enhanced grep on
steroids. &lt;/p&gt;
&lt;p&gt;
In Emacs, I was able to do a ripgrep search which created a buffer
containing all the embedded html fragments from all my blog posts
across all the directories. I then used Emacs&amp;#39; &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt; feature which
allowed me to edit that combined buffer and save all the results back
to the original files. &lt;/p&gt;
&lt;p&gt;
All in all it just took a few minutes. There are still some things I
have to clean up from older posts but at least the site is workable now.&lt;/p&gt;
&lt;p&gt;
Check out the video for a walkthrough:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/OcR-Ke2CiPo&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Pro Version Or Education Version</title>
      <link>https://cestlaz.github.io/post/pro-version-or-ed-version/</link>
      <pubDate>Fri, 29 May 2020 19:00:13 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pro-version-or-ed-version/</guid>
      <description>&lt;p&gt;
I woke up to this tweet by Mark Guzdial today:#pro-version-or
ed-version.org#&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;An indication
that CS Ed in US high schools is about vocational training: 2 (of 5)
recommended sessions at the &lt;a
href=&#34;https://twitter.com/csteachersorg?ref_src=twsrc%5Etfw&#34;&gt;@csteachersorg&lt;/a&gt;
conference are on Github and Agile. Is &lt;a
href=&#34;https://twitter.com/CSforALL?ref_src=twsrc%5Etfw&#34;&gt;@CSforAll&lt;/a&gt;
a Silicon Valley jobs program? &lt;a
href=&#34;https://t.co/n8ugnmTU84&#34;&gt;https://t.co/n8ugnmTU84&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Mark Guzdial (@guzdial) &lt;a
href=&#34;https://twitter.com/guzdial/status/1265986599952822272?ref_src=twsrc%5Etfw&#34;&gt;May
28, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
This led to a lively discussion throughout the day with lots of likes
and lots of comments. Two themes emerged. One wondered if the CSTA
conference should be highlighting these talks about professional
sensibilities and the other questioned the use of tools designed for
industry vs those designed for schools.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at the former first. For full disclosure JonAlf and I are
co-presenters of the GitHub session that was highlighted. Truth be
told I had no idea it was highlighted until I read Mark&amp;#39;s tweet
:-). CSTA is a conference for teachers, K12 teachers. Teachers go
to learn new practices. Sure there are sessions about advocacy and
the like but
it&amp;#39;s really more like a multi day professional development session on
steroids. That&amp;#39;s one of the things that makes it so wonderful. If a
session gives teachers something of value it&amp;#39;s worth presenting. It
can be what they teach, how they teach, or something ancillary to
teaching even things as mundane as gradebook management. If it helps
make a CS teacher better, it&amp;#39;s appropriate to include. &lt;/p&gt;
&lt;p&gt;
I can&amp;#39;t say why any particular session was chosen for highlight
but it really isn&amp;#39;t a big deal. There are always sessions on specific lesson
ideas, cross curricular stuff, ethics, standards, equity, CS4All,
APCS, and lots lots more. &lt;/p&gt;
&lt;p&gt;
Now, what I&amp;#39;d like to see would be a banner on the conference page
where every time you go there it displays a random assortment of
sessions that are being offered. &lt;/p&gt;
&lt;p&gt;
What about the second point - professional tools or educational ones. First
let&amp;#39;s lump things together, git is a tool, so is GitHub. Same for
agile - it&amp;#39;s a tools as are programming languages. Now a great
craftsman is a great craftsman but their job is a whole lot easier
with a full chest of quality tools. &lt;/p&gt;
&lt;p&gt;
If a professional tool makes a teacher better it&amp;#39;s worth learning. &lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at agile. I&amp;#39;ve never used terms like scrum or sprint in my
class but pair programming comes out of agile and that&amp;#39;s become a
mainstay of CS classes. Same thing for the short development cycle and
all the testing. These are agile concepts that we take for granted as
education tools. Are we going to use everything about agile in every
CS class? No. Does it belong in CS when CS is embedded in other
subject areas? Who knows but if a teacher gets exposed to it at CSTA
then they can make an informed decision and use it when and as
appropriate. &lt;/p&gt;
&lt;p&gt;
What about git/GitHub? I wouldn&amp;#39;t teach using it when CS is embedded
but I might in a HS programming course and I certainly would in APCS-A
or beyond. I&amp;#39;ve found that there are many positives of using them and
I&amp;#39;ve written about it before on this blog. &lt;/p&gt;
&lt;p&gt;
The truth is that both git and agile provide ways of increasing
student communication and collaboration and these are good things.&lt;/p&gt;
&lt;p&gt;
Even if I decided that my classes shouldn&amp;#39;t use git, I&amp;#39;d still use it
for my web presence and to distribute materials and that too makes it
worth learning.&lt;/p&gt;
&lt;p&gt;
Just because a tool came from industry it&amp;#39;s not
necessarily bad and if it came fro education it&amp;#39;s not necessarily
good. &lt;/p&gt;
&lt;p&gt;
Thonny is a beginner Python IDE. It was designed specifically to be a
learner environment. It&amp;#39;s great for that. Eclipse is a professional
IDE and I hate it for education. Other people disagree with me on both
counts.&lt;/p&gt;
&lt;p&gt;
On the other hand I&amp;#39;ve seen tools written by people in education that
are god awful.&lt;/p&gt;
&lt;p&gt;
Then you also have well designed education tools but they fill a
narrow niche - they&amp;#39;re so specialize that a teacher and student can
only use them in a specific case. A teacher then needs to find
multiple tools for their multiple classes and students need to learn
even more.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s assume we have a bunch of these educational tools and their all
pretty well designed and help students get to whatever it is they&amp;#39;re
supposed to learn. Taken individually each tool seems great but taken
as a whole? Where&amp;#39;s the line? Is it better to have the teacher learn
and support a handful of these and students learn even more or should
they spend more time/efforn to learn one or two tools where the tool
will beuseful beyond the narrow scope of the specialized one.&lt;/p&gt;
&lt;p&gt;
The answer is of course, it depends.&lt;/p&gt;
&lt;p&gt;
I was part of a workshop this past summer and this came up. We were
looking at a pretty sweet specialized tool that worked really well for
one niche area. We also looked at Google Sheets which were less
intuitive but more versatile and universal. Which to use? We never
came up with a compelling answer either way. &lt;/p&gt;
&lt;p&gt;
There&amp;#39;s nothing inherently bad about industry tools and there&amp;#39;s
nothing inherently good about educational ones. It&amp;#39;s true that
industry tools are designed for industry but education tools are by
and large not designed by teachers. They might be designed by people
who teach as part of their job or who have taught but that&amp;#39;s not the
same thing. Sometimes they hit but sometimes they miss their mark.&lt;/p&gt;
&lt;p&gt;
In math class we would typically draw arcs and circles on the board
with a giant chalk compass. It was specifically designed for
education. You know what works better? A shoelace.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zoom alternatives that aren&#39;t from MicroGoogle</title>
      <link>https://cestlaz.github.io/post/bigbluebutton/</link>
      <pubDate>Mon, 25 May 2020 16:33:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/bigbluebutton/</guid>
      <description>&lt;p&gt;
As we scrambled to move online in March we used what we knew, what we
heard of and what we were allowed. This usually meant Zoom, Google
Meet, or Microsoft Teams.&lt;/p&gt;
&lt;p&gt;
I settled on Zoom. It worked and worked pretty well. There were a few
things I felt they could improve on but given that Zoom wasn&amp;#39;t
designed as a teaching tool I&amp;#39;ve been pretty happy with it.&lt;/p&gt;
&lt;p&gt;
Now that the emergency rush has passed we have time to see if there
are some better alternatives. First up is &lt;a href=&#34;https://bigbluebutton.org/&#34;&gt;BigBlueButton&lt;/a&gt;. I&amp;#39;ll write up
another cool platform that&amp;#39;s based on BigBlueButton in some future
post.&lt;/p&gt;
&lt;p&gt;
To start, BBB is open source. That&amp;#39;s a big plus in my book. This means
we can self host it. Now, this can be a problem if installation and
maintenance is a pain but so far, it&amp;#39;s been carefree.&lt;/p&gt;
&lt;p&gt;
Next, it has some nice features. It supports pretty much everything
that Zoom supports including: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;join passwords&lt;/li&gt;
&lt;li&gt;waiting room&lt;/li&gt;
&lt;li&gt;Brady Bunch view &lt;/li&gt;
&lt;li&gt;chat&lt;/li&gt;
&lt;li&gt;reactions (raise hand etc.)&lt;/li&gt;
&lt;li&gt;a shared whiteboard&lt;/li&gt;
&lt;li&gt;screen sharing&lt;/li&gt;
&lt;li&gt;breakout rooms&lt;/li&gt;
&lt;li&gt;optional session recording. &lt;/li&gt;
&lt;li&gt;polling &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and adds a few:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a shared note space&lt;/li&gt;
&lt;li&gt;shared whiteboard is really a presentation that you can upload&lt;/li&gt;
&lt;li&gt;A simple html5 client &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BBB is also based on &amp;#34;classrooms&amp;#34; rather than meetings which as
a teacher seems cleaner and makes more sense.&lt;/p&gt;
&lt;p&gt;
If you want to try it out and I highly recommend you do, you can do so
on their web site.&lt;/p&gt;
&lt;p&gt;
Hosting is also pretty easy. I was originally turned off by the
strangely specific requirement of Ubuntu 16.04 but since Digital
Ocean - my preferred cloud provider lets me directly install that or
many other versions it wasn&amp;#39;t a problem. You&amp;#39;ll also need a box with
4GB memory and 4 cores. &lt;/p&gt;
&lt;p&gt;
You can follow the install instructions on the BBB home page but it
was easier to follow &lt;a href=&#34;https://github.com/bigbluebutton/bbb-install&#34;&gt;these&lt;/a&gt; instructions. Here&amp;#39;s exactly what I did
(culled from the longer explanations on the bbb-install site I just
linked):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create the DO droplet or install an Ubuntu 16.04 mathine.&lt;/li&gt;
&lt;li&gt;Log in and run &lt;code&gt;apt-get update&lt;/code&gt;, &lt;code&gt;apt-get dist-upgrade&lt;/code&gt; and
&lt;code&gt;apt-get upgrade&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set up DNS for the box so you can get to it by name. To do this I
went to Google domains and added an entry for
bigbluebutton.huntercs.org.&lt;/li&gt;
&lt;li&gt;I ran (all one line):&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget -qO- https://ubuntu.bigbluebutton.org/bbb-install.sh | bash -s -- -v xenial-22 -s bbbtest.huntercs.org -e zamansky@gmail.com -g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&amp;gt;}}&lt;/p&gt;
&lt;p&gt;
    This downloads and installs BBB and also uses &lt;strong&gt;certbot&lt;/strong&gt; to set up
    ssl for secure connections.&lt;/p&gt;
&lt;p&gt;
After this was done, I created an admin account:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd greenlight/
docker exec greenlight-v2 bundle exec rake admin:create&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&amp;gt;}}&lt;/p&gt;
&lt;p&gt;
At this point I was up and running so I went to the host and logged in
using the admin credentials that the above command gave me.&lt;/p&gt;
&lt;p&gt;
Next, log in, go to the user profile and change the admin account&amp;#39;s
login and password. I also went to the org site settings and changed
registration so that people had to be invited - this only affects who
can create classrooms. Anyone can join as long as the teacher lets the
in.&lt;/p&gt;
&lt;p&gt;
As a last step you should remove the demos: &lt;code&gt;apt-get purge
bbb-demo&lt;/code&gt;. The home page and install web site has more info on those.&lt;/p&gt;
&lt;p&gt;
You&amp;#39;re now ready to go. Make classrooms, invite your students and
you&amp;#39;re off. &lt;/p&gt;
&lt;p&gt;
Check it out. so far, I&amp;#39;m liking it better than the non free non open
source alternatives offered by Zoom, Microsoft, and Google. &lt;/p&gt;
&lt;p&gt;
Next, well look at another platform  that&amp;#39;s based on BBB that adds
some very cool features for CS Teachers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 72 - Customizing Elfeed</title>
      <link>https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/</link>
      <pubDate>Thu, 21 May 2020 14:47:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/</guid>
      <description>&lt;p&gt;
I made this video write after I made the &lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-71-openwith/&#34;&gt;openwith&lt;/a&gt; one so even though
I don&amp;#39;t mention anything in this video, I wanted to share some updates
on dired and openwith.&lt;/p&gt;
&lt;p&gt;
I got a lot of suggestions on alternate ways to achieve the workflow I
was seeking - being able to open a file using an external viewer. One
person noted that under newer versions of Emacs, the &lt;code&gt;W&lt;/code&gt; key is bound
to the command &lt;code&gt;(browse-url-of-dired-file)&lt;/code&gt; which does exactly what I
wanted. Problem solved with no customizing or extra packages. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a good thing I got a solution when I did - I needed it. I&amp;#39;ve been
reviewing applications for my new Teacher Certification program. It&amp;#39;s
a 21 credit graduate program that results in participants receiving a
brand spanking new New York State Computer Science teaching
license. The applications consist of a bunch of files incuding PDFs,
images (photos), doc and text files and source code samples. I&amp;#39;ve got
all the applications in a Google drive which I&amp;#39;ve downloaded and now I
can just drop into dired and go through each directory, hit &lt;code&gt;enter&lt;/code&gt; for
source code and it&amp;#39;s loaded in an Emacs buffer and &lt;code&gt;W&lt;/code&gt; for everything
else.&lt;/p&gt;
&lt;p&gt;
Now for today&amp;#39;s video. It&amp;#39;s about a small customization I made to the
elfeed RSS reader. It&amp;#39;s also about the advantages and limitations of
Emacs built in documentation. I&amp;#39;m not particularly strong in elisp -
I&amp;#39;m a dabbler at best but even so, using Emac&amp;#39;s built in help I was
able to get to elisp code that was very close to what I wanted to do
and then customize it. It also looks at the limitations - there still
some code that I looked at that I have no clue as to what it does.&lt;/p&gt;
&lt;p&gt;
Specifically, elfeed lets you open a link in an external brower by
hitting &lt;code&gt;b&lt;/code&gt;. That&amp;#39;s how I like reading most of my feeds. I&amp;#39;ll scroll
up and down and hit &lt;code&gt;b&lt;/code&gt; for what I want to read. The trouble is that
when you hit &lt;code&gt;b&lt;/code&gt; focus goes to the browser and at the same time,
elfeed marks the entry as read and advances. I want it not to mark as
read. After I made the video, I decided I also didn&amp;#39;t want elfeed to
advance to the next story. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what I did.&lt;/p&gt;
&lt;p&gt;
I went in to elfeed and instead of typing &lt;code&gt;b&lt;/code&gt; on an entry, I ran
&lt;code&gt;(describe-key&lt;/code&gt;)~ which is bound to &lt;code&gt;C-h k&lt;/code&gt;. I then typed &lt;code&gt;b&lt;/code&gt; which
revealed that it ran &lt;code&gt;elfeed-search-browse-url&lt;/code&gt;. I followed the
hyperlinks in the help to open &lt;code&gt;elfeed-search.el&lt;/code&gt; and found the
function. From there I just copied it over to my Emacs config, tweaked
it and voila, problem solved.&lt;/p&gt;
&lt;p&gt;
The video has all the details. Enjoy.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/G1NGNR40lB4&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 71 Openwith</title>
      <link>https://cestlaz.github.io/post/using-emacs-71-openwith/</link>
      <pubDate>Wed, 13 May 2020 11:45:39 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-71-openwith/</guid>
      <description>&lt;p&gt;
I spend most of my time in Emacs but still use the shell and browser
for some things. One of the things I use my shell for is to launch
libreoffice to view and edit docx files and spreadsheets, evince for
pdf files and imagemagick for image files. Yes, I know I can view all
of these in Emacs but there are a few limitations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Emacs chokes on large files&lt;/li&gt;
&lt;li&gt;I can&amp;#39;t edit the docx file or the image&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, I hop to the shell and launch the program I need on the files in
question. It&amp;#39;s fine but it does mean I end up with two windows for
each operation - the terminal from which I run, say, libreoffice and
libreoffice itself. I will also have my browser and one ore more Emacs
windows open so things can get a bit cluttered.&lt;/p&gt;
&lt;p&gt;
Now, on the Emacs side, one tool that I still haven&amp;#39;t gotten myself to
regularly use is dired. I figured dired could be made to do what I
want - quickly and easily launch programs to view and edit my files.&lt;/p&gt;
&lt;p&gt;
By default, dired opens files in a new Emacs buffer. That&amp;#39;s fine for
text files but not the behavior I want for docx and other files. It
turns out there are a number of good solutions. The one that I&amp;#39;ll
likely stick with is &lt;a href=&#34;https://github.com/jpkotta/openwith/tree/1dc89670822966fab6e656f6519fdd7f01e8301a&#34;&gt;openwith&lt;/a&gt; but there are other options as
well. Check out the video for more:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/_qjJ5UzInRI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>To Zoom or not to Zoom</title>
      <link>https://cestlaz.github.io/post/zoom-or-not/</link>
      <pubDate>Tue, 07 Apr 2020 14:03:13 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/zoom-or-not/</guid>
      <description>&lt;p&gt;
Zoom has been on a wild ride. As teachers scrambled to try to deliver
instruction from there homes to student homes Zoom quickly became a
favorite. It was easy, performed well, and had features that other
services seemed to lack. Features like being able to mute students and
for me a big one - breakout rooms. Now, these features weren&amp;#39;t
flawless as I mentioned &lt;a href=&#34;https://cestlaz.github.io/post/limitations-of-remote-teaching/&#34;&gt;in my last post&lt;/a&gt; but that&amp;#39;s okay. Zoom wasn&amp;#39;t
designed to be a virtual classroom and has worked remarkably well
given that it was designed as a tool for traditional business. &lt;/p&gt;
&lt;p&gt;
Soon though there was blowback. &lt;/p&gt;
&lt;p&gt;
Zoom has privacy issues.&lt;/p&gt;
&lt;p&gt;
Zoom is sharing your data with Facbook.&lt;/p&gt;
&lt;p&gt;
Zoom is insecure.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Zoombombing&#34;&gt;Zoombombing&lt;/a&gt; will destroy our kids.&lt;/p&gt;
&lt;p&gt;
And the love affair was over.&lt;/p&gt;
&lt;p&gt;
I quickly began noticing &amp;#34;Zoom shaming&amp;#34; on Twitter and Facbook. Public
figures and even other teachers shaming teachers for wanting to
continue with Zoom. &lt;/p&gt;
&lt;p&gt;
In NYC, the DOE quickly moved to ban the tool. Showing their usual
level of respect for teachers, they announced this at the very end of
the week and told them they had to figure out how to live without it
by Monday morning. Oh, by the way, technically teachers are hourly
employees. This came on top of them canceling spring break - a break
that many teachers were counting on to both catch their breath and
also to figure out this brave new world, after all they were given
pretty much zero lead time and zero training and have been doing all
this under the gun and yet still have done a yeoman&amp;#39;s job of caring
for their students.&lt;/p&gt;
&lt;p&gt;
But I digress. I don&amp;#39;t really want to talk about the DOE and our
government&amp;#39;s shortcomings here. I want to specifically address Zoom.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s talk about the data sharing. Is that an issue? Sure. I don&amp;#39;t
know the extend of the data that they were sharing but users should
have control over their data and information. Forget about
regulations, just in terms of right and wrong this should all be
transparent and teachers, students, and parents should be able to opt
in or out and there should be no downside to opting out. What gets me
though is that the DOE is all of a sudden concerned about student
data!!! When did that happen. Seems hypocritical that now this is an
issue as opposed to, well, sharing data with the college board,
charter schools, and who knows how many other private entities. &lt;/p&gt;
&lt;p&gt;
Next up, zoombombing and the like. It seems that if you follow
best practices - having students use names and using a conference
password and waiting fooms that&amp;#39;s taken care of.&lt;/p&gt;
&lt;p&gt;
Security? I keep hearing about Zoom&amp;#39;s lack of encryption. I&amp;#39;m not an
encryption expert but there is still transport level end to end
encryption. It&amp;#39;s just that Zoom isn&amp;#39;t encrypting data at the
endpoints. From what I understand this could still leave a conference
open to man in the middle attacks but I&amp;#39;m really not sure how great
the risk is. What I do know is I keep seeing posts and tweets by
people who I&amp;#39;m fairly sure no next to nothing about either encryption
or network security spouting off as experts.  &lt;/p&gt;
&lt;p&gt;
The bottom line is that most teachers are going well above and beyond
to do the best they can for their students. I&amp;#39;ll also say that the DOE
and politicians care for students as a whole but teachers care for
them as individuals and that&amp;#39;s important to remember. Teaching is
already incredibly hard. Teaching a single class doesn&amp;#39;t just involve
standing and teaching for 40 minutes. It involves planning, then
teaching, then reflecting. A synchronous tool like Zoom best
approximates this. It might not be the best way to do things remotely
but it&amp;#39;s a quick way to connect with your students and to give them
something both in terms of content and normalcy while figuring out how
to do it better (hence the importance of that now erased spring
break). If a teacher has to go async or only do chatting async they
still have to do all the planning and reflecting but also might have
to make videos without the benefit of feedback, copious handouts or
who knows what. Maybe Zoom isn&amp;#39;t the best tool but for many teachers
it&amp;#39;s the best tool for right now.&lt;/p&gt;
&lt;p&gt;
Teachers should be given access to all manner of tools and be trusted
to make the appropriate decision given the circumstances. Does Zoom
have issues? Sure. Might it violate policy or regulation? Sure but
these are not normal circumstances.&lt;/p&gt;
&lt;p&gt;
When I was rounding up strays on 9/11, fleeing from Stuy as the towers
fell, ultimately taking them to my apartment in Chelsea only to later
deliver them home I&amp;#39;m sure I violated any number of DOE
regulations. In the days and weeks that followed I&amp;#39;m sure I violated
more as I attempted to work to connect students and families together
and then to deliver the best instruction I could under trying
circumstances. You know what - I bet those students and their parents
didn&amp;#39;t care that I violated any policies. Years later I heard from
parents - parents of kids that I didn&amp;#39;t even teach thanking me for
what I did for them and their children. When you&amp;#39;re in a crisis it&amp;#39;s
about the kids not about regulations. If Zoom is the best tool right
now for a teacher and their kids, let them use Zoom. If there are
issues, fix the issues or transition to something else but only by
giving them the time so that the students aren&amp;#39;t hurt by the process.&lt;/p&gt;
&lt;p&gt;
Trust teachers to do the right thing. A former teacher, friend and
mentor of mine, &lt;a href=&#34;https://cestlaz.github.io/posts/2012-05-09-my-favorite-year-teacher.html/&#34;&gt;Herb Greenhut&lt;/a&gt; once said that it was easy to solve
the education problem: &amp;#34;Hire great teachers and get the F out of the
way.&amp;#34; We&amp;#39;ve got a lot of great teachers. The system should support
them but if they aren&amp;#39;t going to do that, at least &amp;#34;get the F out of
the way.&amp;#34;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 70 Org Protocol</title>
      <link>https://cestlaz.github.io/post/using-emacs-70-org-protocol/</link>
      <pubDate>Fri, 27 Mar 2020 15:15:28 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-70-org-protocol/</guid>
      <description>&lt;p&gt;
I spent part of today cleaning up my Emacs workflow. Specifically, how
I capture emails and links into org-mode&lt;/p&gt;
&lt;p&gt;
I already wrote about how I used org-capture (&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-23-capture-1/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-24-capture-2/&#34;&gt;here&lt;/a&gt;). It&amp;#39;s
pretty clean and easy but there was one thing that always nagged at
me. When I capture from mu4e within Emacs by hitting &lt;code&gt;C-c m&lt;/code&gt; it&amp;#39;s set
up to automatically populate the capture template with a link to the
email labelled with the email&amp;#39;s subject. When I do it from Gmail or
to store a web link as a bookmark, I have to copy and paste the link
in manually.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s where &lt;a href=&#34;https://orgmode.org/worg/org-contrib/org-protocol.html&#34;&gt;org-protocol&lt;/a&gt; comes in. We can use org-protocol to link
between a browser and Emacs. &lt;/p&gt;
&lt;p&gt;
First you have to run Emacs as a server. You can start the Emacs
server using &lt;code&gt;(server-start)&lt;/code&gt; but I always run emacs using a shortcut
key bound to &lt;code&gt;emacsclient -c -a &amp;#34;&amp;#34;&lt;/code&gt;. This runs emacsclient and
connects to my running Emacs server but if the server isn&amp;#39;t running it
starts it. That meant that I only had to add &lt;code&gt;(require &amp;#39;org-protocol)&lt;/code&gt;
to my Emacs config file.&lt;/p&gt;
&lt;p&gt;
I followed the instructions in the documentation by typing in these
lines:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gconftool-2 -s /desktop/gnome/url-handlers/org-protocol/command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/local/bin/emacsclient %s&amp;#39;&lt;/span&gt; --type String

gconftool-2 -s /desktop/gnome/url-handlers/org-protocol/enabled --type Boolean true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
but that didn&amp;#39;t seem to work.&lt;/p&gt;
&lt;p&gt;
I ended up following the instructions I found in &lt;a href=&#34;https://stackoverflow.com/questions/7464951/how-to-make-org-protocol-work&#34;&gt;this post&lt;/a&gt; creating a
file named &lt;code&gt;org-protocol.desktop&lt;/code&gt; in the folder
 &lt;code&gt;~/.local/share/applications&lt;/code&gt; containing:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Desktop Entry&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;org-protocol
Exec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;emacsclient %u
Type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Application
Terminal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false
Categories&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;System;
MimeType&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x-scheme-handler/org-protocol;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
and then running &lt;code&gt;update-desktop-database
~/.local/share/applications/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
This seemed to do the trick. &lt;/p&gt;
&lt;p&gt;
I also modified my link capture template: &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Link&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Sync/orgfiles/links.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Links&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %a %^g\n %?\n %T\n %i&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Finally, to get things basically to work, I installed &lt;a href=&#34;https://github.com/sprig/org-capture-extension&#34;&gt;this&lt;/a&gt;
extension. I configured it to use my &amp;#34;l&amp;#34; or link capture
template. Once everything was installed I went to a web site and
clicked the plugin. I was popped into Emacs with the capture template
up and filled in. I did it again, this time marking text and hitting
the button and again everything worked.&lt;/p&gt;
&lt;p&gt;
Looking at the template, the &lt;code&gt;%a&lt;/code&gt; is replaced by the web page link,
the &lt;code&gt;%i&lt;/code&gt; with the marked text, the &lt;code&gt;%T&lt;/code&gt; with the timestamp and the
cursor is left at the &lt;code&gt;%?&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
I wanted to make one more change. I wanted to also use this for
storing Gmail links. The problem was that I wanted my links to be
sored in a file named &lt;code&gt;links.org&lt;/code&gt; while I wanted my Gmails stored
under my main org file &lt;code&gt;i.org&lt;/code&gt;. By reading the org-protocol page I
found that I could just create a bookmark.&lt;/p&gt;
&lt;p&gt;
Copied mostly from the docs, I made a bookmark with this as the link
(all in one line):&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;javascript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-protocol://capture://m/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
      encodeURIComponent(&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
      encodeURIComponent(document.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
      encodeURIComponent(window.&lt;span style=&#34;color:#a6e22e&#34;&gt;getSelection&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
It worked perfectly. &lt;/p&gt;
&lt;p&gt;
This time I used this as the template:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mail To Do&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Sync/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do and Notes&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* TODO %a\n %?&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:prepend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it. Now I can store emails in Emacs or Gmail as well as
bookmarks without any cut and paste. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video with the walkthrough:&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/FYKcVKg0OCU&#34;&gt;https://www.youtube.com/embed/FYKcVKg0OCU&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 69 Floobits</title>
      <link>https://cestlaz.github.io/post/using-emacs-69-floobits/</link>
      <pubDate>Sat, 21 Mar 2020 10:52:37 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-69-floobits/</guid>
      <description>&lt;p&gt;
Hunter, like most other schools has gone remote. I taught my first two
&lt;a href=&#34;https://cestlaz.github.io/post/teaching-online-day-01/&#34;&gt;online classes&lt;/a&gt; on Thursday. Currently, I&amp;#39;m using Zoom for synchronous
stuff and a mailing list and slack for async. &lt;/p&gt;
&lt;p&gt;
There are still some missing pieces. When we&amp;#39;re all together, it&amp;#39;s
easy to look at a student&amp;#39;s work and talk them through issues. It&amp;#39;s
also easy to get students to work together, at least to a point. With
everyone locked up in their own homes, real time collaboration is
harder. Sure, we can use tools like GitHub issues and pull requests
for async code commentary but what about live help and pairing? If
we want to use an online environment, &lt;a href=&#34;https://repl.it&#34;&gt;repl.it&lt;/a&gt;  - a platform I very
much like fits the bill. On the other hand, what do you use if you
want to work collaboratively in real time using a local editor. &lt;/p&gt;
&lt;p&gt;
That&amp;#39;s where &lt;a href=&#34;https://floobits.com&#34;&gt;Floobits&lt;/a&gt; comes in. Floobits is a platform that provides
for collaborative live editing. It works with Emacs, Neovim, Sublime
Text, Atom, and IntelliJ (and maybe all the Jetbrains IDEs). They
support a free tier which only has public workspaces but that&amp;#39;s fine,
as far as I&amp;#39;m concerned, for educational purposes. &lt;/p&gt;
&lt;p&gt;
Check out the video to see how I set it up:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/-0x4PV1EB5w&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 68 - Tramp and org-publish</title>
      <link>https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish/</link>
      <pubDate>Sat, 14 Mar 2020 20:57:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish/</guid>
      <description>&lt;p&gt;
I maintain a couple of small simple web sites. One provides
information about my undergraduate &lt;a href=&#34;http://info.huntercs.org/scholars/&#34;&gt;honors CS program&lt;/a&gt; and another that
isn&amp;#39;t live yet is a FAQ for my &lt;a href=&#34;http://info.huntercs.org/teacher_ed/faq.html&#34;&gt;CS teacher certification program&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Traditionally I would use ssh to connect to the host machine, fire up
Emacs and edit the html files to update the sites. I always forget
that with Emacs we can do better.&lt;/p&gt;
&lt;p&gt;
One way is with &lt;a href=&#34;https://www.emacswiki.org/emacs/TrampMode&#34;&gt;Tramp Mode&lt;/a&gt;. I was reminded of this by JCS&amp;#39;s recent
&lt;a href=&#34;https://irreal.org/blog/?p=8705&#34;&gt;post&lt;/a&gt;. With Tramp, you can open a file on a remote host and edit it in
place. This means I get my full Emacs config but am editing the file
over there!!! It&amp;#39;s very slick but I always forget about it even though
I had already made &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-25-tramp/&#34;&gt;a video on it&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Tramp is cool but I was still editing the html directly. I figured it
would be easier to just use org-mode but that required figuring out
how to make the html produced by org-mode look nice. Fortunately, it&amp;#39;s
not hard.&lt;/p&gt;
&lt;p&gt;
We can turn off the default CSS used by org-mode
using:&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+OPTIONS&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: html-style:nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Or if we want add custom CSS using one or more of these:&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+HTML_HEAD&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;style1.css&amp;#34; /&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#+HTML_HEAD_EXTRA&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: &amp;lt;link rel=&amp;#34;alternate stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;style2.css&amp;#34; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can also embed html and custom CSS in our org-files.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://orgmode.org/manual/CSS-support.html&#34;&gt;This page&lt;/a&gt; from the org-mode documentation also lists many of the html
components that are styled by default. &lt;/p&gt;
&lt;p&gt;
Armed with custom CSS we can use the org-mode exporting facilities to
convert the file to a web page but the final step is to use
&lt;a href=&#34;https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html&#34;&gt;org-publish&lt;/a&gt;. This lets us export one or more org-mode files and save
the result in some specified directory. You can also publish static
files like CSS files and images to go with the org to html
files. Finally by using the tramp syntax we can publish to a remote
host. &lt;/p&gt;
&lt;p&gt;
The goes through all of this. &lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/tlCOsigPjk8&#34;&gt;https://www.youtube.com/embed/tlCOsigPjk8&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 67 - Emacs vs Vi a rant with some historical perspective</title>
      <link>https://cestlaz.github.io/post/using-emacs-67-emacs-rant/</link>
      <pubDate>Sun, 23 Feb 2020 07:57:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-67-emacs-rant/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been meaning to do my version of the Emacs VI rant for a while. A
few years ago I staged out a video showing what it would be like for a
beginner to start with Emacs, Vim, Atom, and Sublime Text but decided
it would be long, unwieldy and clunky to present - particularly when
it came to customization. &lt;/p&gt;
&lt;p&gt;
I tabled it for a while but recently have been seeing a bunch of
threads, videos and posts talking about Emacs and Vim. Some are really
well done, balanced and sensible like Derek Taylor&amp;#39;s over on
&lt;a href=&#34;https://www.youtube.com/watch?v=VaBdlcYaZLQ&#34;&gt;DistroTube&lt;/a&gt;. On the other hand, I saw plenty of what makes me
nuts. People claiming things like style is objectively better than
the other or was created with speed or ergonomics in mind so is
superior and the like.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my take. I think it&amp;#39;s a little different than some of the other
rants because I look a bit at history and evolution and also at the
day to day reality of editing. Hope you enjoy it.&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/0M6erlK57go&#34;&gt;https://www.youtube.com/embed/0M6erlK57go&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github Org Explorer - now with oauth</title>
      <link>https://cestlaz.github.io/post/github-org-explorer-oauth/</link>
      <pubDate>Sun, 16 Feb 2020 12:53:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-org-explorer-oauth/</guid>
      <description>&lt;p&gt;
A while ago I wrote about a small side project - &lt;a href=&#34;https://cestlaz.github.io/post/github-org-explorer/&#34;&gt;GitHub Org Explorer&lt;/a&gt; -
a small tool to make it easier to manager GitHub repositories based on
organization. I&amp;#39;m using it as a replacement for the GitHub provided
Classroom Assistant. I find it more flexible in terms of exporting
assignments to my own machine and it allows me to delete repos en
masse which is critical after the semester is over.&lt;/p&gt;
&lt;p&gt;
Shortly after I released it I found that GitHub was going to sunset
the basic authentication I was using so I had to convert the
application to support oauth.&lt;/p&gt;
&lt;p&gt;
So, here it is. &lt;/p&gt;
&lt;p&gt;
Along the way I had a few headaches. I wrote about them &lt;a href=&#34;https://cestlaz.github.io/post/my-code-works/&#34;&gt;here&lt;/a&gt;. Mostly
versioning issues surrounding the node ecosystem. I still haven&amp;#39;t
figured it all out but I think I&amp;#39;ve gotten everything working
alright. &lt;/p&gt;
&lt;p&gt;
If you want to check it out, you can grab it off GitHub. Here&amp;#39;s the
repo: &lt;a href=&#34;https://github.com/zamansky/github-org-explorer&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/github-org-explorer&#34;&gt;https://github.com/zamansky/github-org-explorer&lt;/a&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the short runthrough video I made. Logging in looks different
but everything operates the same way:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/e-gNzuBG3mU&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>CS Ed Podcast 2 - Dan Garcia on test creation</title>
      <link>https://cestlaz.github.io/post/cs-ed-podcast-2/</link>
      <pubDate>Thu, 13 Feb 2020 08:41:21 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ed-podcast-2/</guid>
      <description>
&lt;p&gt;
Episode 2 of the &lt;a href=&#34;https://sites.duke.edu/csedpodcast/&#34;&gt;CS Ed podcast&lt;/a&gt; had Dan Garcia talk about
exam creation. &lt;/p&gt;
&lt;p&gt;
This wasn&amp;#39;t a podcast about the value of exams - in class, high stakes
or otherwise. In fact Dan says in the podcast it would be great to &amp;#34;get grades out of
the equation. Grades are gonna be an impediment to learning.&amp;#34; But
recognizes that we have not say in this most of the time (and I&amp;#39;ll add
that though I agree grades can and do perform a function) so we should
be creative in terms of assessment.&lt;/p&gt;
&lt;p&gt;
Dan hit on a lot of important points and there&amp;#39;s no way
I can weave them into a sensible narrative so I&amp;#39;ll just hit a bunch of
points and riff from there.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Multiple choice.
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Dan started right out front saying that he&amp;#39;s come around to being ok
or maybe even liking multiple choice  having referenced the ability
top make &amp;#34;good distractors.&amp;#34;&lt;/p&gt;
&lt;p&gt;
This is something that I think I&amp;#39;ll never agree with. On the one hand,
there is the idea of multiple guess but what really gets me is that
multiple choice questions, by definition, are gotcha questions. You&amp;#39;re
supposed to have distractors to pull you away from the right path. To
make a mistaken answer seem ok. I hate gotcha questions. Besides,
halfway decent multiple choice questions are really hard to write. &lt;/p&gt;
&lt;p&gt;
To me, MC questions are really a sometimes necessary tool to make up
for the fact that teachers are overworked and never have enough time
to grade. This might make them a necessary evil but it doesn&amp;#39;t make
them good. We might have to resort to them if we&amp;#39;re &amp;#34;teaching&amp;#34; a class
of hundreds or perhaps thousands  but we shouldn&amp;#39;t have classes
anywhere near that size. &lt;/p&gt;
&lt;p&gt;
Another problem with MC is that multiple choice tests seem to
frequently test speed rather than knowledge. APCS-A is a good example
of this. You have 90 minutes to answer 40 questions. That&amp;#39;s a bit over
2 minutes per question. That&amp;#39;s a race not an assessment. &lt;/p&gt;
&lt;p&gt;
Finally, I find multiple choice questions hard to write and time
consuming to typeset and format. I guess if I were better at the
distractors this might not be the case but a short
answer version of a MC question is always easier for me to write and
not much harder to grade.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Test creation
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Half a day. Twelve hours. That&amp;#39;s how long Dan says it takes him to
make a test. That sounds about right. There&amp;#39;s no two ways about
it. Creating a good exam is hard work. Creating a bad one is easy and
quick but that&amp;#39;s not a good answer.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s think about this for a minute. A college professor might teach
one or two classes a semester. A college lecturer three, maybe 4. A
high school teacher teaches 5 classes. Typically two or three
different subjects. They basically get 40 minutes at work a day to
prep and that includes EVERYTHING - lesson planning, grading, test
creation, working with students. The whole kit and caboodle. Even with
two preps rather than three that&amp;#39;s an additional 24 hours just to
create those two tests. More since you&amp;#39;ll need multiple versions of
each. &lt;/p&gt;
&lt;p&gt;
Of course we can mitigate this a it by reusing and modifying questions
from old exams and sharing with colleagues but writing exams is a bear. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s no wonder teachers turn to multiple choice test banks.&lt;/p&gt;
&lt;p&gt;
Really glad Dan spent time on this as teachers have to realize that
it&amp;#39;s not just them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
How long is too long?
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I frequently struggle with test duration. It sounds like it&amp;#39;s a common
problem. Dan has his TAs test the tests hoping they can do it in one
sixth the students time. He found, though that his slowest TAs might
take one third of the allocated time.&lt;/p&gt;
&lt;p&gt;
When I started, I heard ratios from math teachers ranging from
students take twice the time I would on my exams up to five times
longer. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s hard to get it right but it&amp;#39;s important that tests are tests of
knowledge and ability not speed. At Stuy where class periods were 43
minutes I&amp;#39;d try for tests that took the typical student 33 - 35
minutes. Just enough time to go over the exam. You might ace the exam,
you might fail but time wouldn&amp;#39;t be the issue.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Content
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
This was a big one. Dan talks about students expectations - are tests
cumulative or just since the last unit. Making sure test content is
proportional to lesson content. Watching out for test morale - letting
kids know hard questions are hard, test flow and much more. Not too
much to say here other than if you haven&amp;#39;t listen to the podcast.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Backstory
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
One content point that I do want to drill down on is Dan&amp;#39;s stating
that we sometimes give too much backstory on questions. &amp;#34;If you want
them to sort a list, make them sort a list! You don’t have to tell a
story about the list….&amp;#34; Too often tests are races and even when they
aren&amp;#39;t a student has to first read the question, understand it, make
sure there are no gotchas, formulate and write down a solution. Giving
a complex backstory from which the students have to glean the real
question in a timed high pressure environment is just too much. There
are other places where you can ask a general question with a big back
story and have students solve the poblem.&lt;/p&gt;
&lt;p&gt;
This made me think of technical interviews which are all
backstory. The truth though is that most kids solve them by pattern
matching. They prep by doing similar problems and look for key
phrases. Have unlimited memory and need fast access - there&amp;#39;s probably
a hash table involved. Something have an easy solution but it&amp;#39;s too
slow - think recurison. Recursion is obvious but too slow - dynamic
programming. It&amp;#39;s a &amp;#34;have I seen this question before&amp;#34; more so than a
real test of a potential employees ability.&lt;/p&gt;
&lt;p&gt;
The other thing it made me think is that while I very much agree with
Dan, it flies  in the face of what teachers have been forced to deal
with in the last couple of decades. It&amp;#39;s all about the word problem
where the kid must sleuth out the question. So many high stakes exams
are as much reading exams as they are content exams. I&amp;#39;m not even
going to get into how this affects non English speakers but let&amp;#39;s just
say this is a real issue.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Tests on computers and other test taking formats
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Towards the end, Dan talks about having an on-computer part of an
exam. I like having the students do live on computer exams but they
also have their issues. I&amp;#39;m not so concerned about cheating. I give
them the resources they can use and truth be told, the end results
don&amp;#39;t differ much from when I&amp;#39;ve used paper exams or other
assessments. I am always concerned about a computer breaking but
fortunately that hasn&amp;#39;t really been a problem.&lt;/p&gt;
&lt;p&gt;
What has been a problem however is the fact that speed can become an
issue. Some kids know how to type others don&amp;#39;t. This can be a HUGE
advantage in a CS0 or CS1 class. When you&amp;#39;re thinking about what
letter to type you&amp;#39;re not thinking about the problem and in general
beginners are very slow. I always tell my second year students to look
at what they can do as an overnight assignment. They realize that
what&amp;#39;s now overnight was a large semester project back in their first
year. This all means that you really have to be careful about the
length of a computer based test. &lt;/p&gt;
&lt;p&gt;
Another thing Dan mentioned was giving group tests. Students would
work in teams. He noted that in the group, The collective score was
always higher than the top individual score. I get the idea and it&amp;#39;s
probably true trend wise but can&amp;#39;t be universally true if your tests
are actually compatible. Given a fair test, surely some students can
ace it in which case the group can only equal the top scorer.&lt;/p&gt;
&lt;p&gt;
This group test reminded me of cooperative learning which was all the
rage back in the day. Of course cooperative learning is no longer &amp;#34;it&amp;#34;
but while it never was the silver bullet it is notable that it had
some good ideas and it sounds like Dan is implementing some of them
albeit without the same name.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
Thoughts on grading
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I&amp;#39;ll disagree here with Dan&amp;#39;s contention that we should all use
Gradescope. I&amp;#39;ve come out against autograders before so I&amp;#39;ll just
summarize here. I&amp;#39;m not entirely against autograders. They&amp;#39;re great
for rudimentary answers and can also provide a level of instant
student feedback. The flip side is that in order to get to know your
students you have to look at their work. You might not learn much from
multiple choice answers but you will if you look at code they&amp;#39;ve
written out or other long form answers. I get that you can&amp;#39;t do this
with huge classes but again, I&amp;#39;ll say we shouldn&amp;#39;t have huge
classes. To use an autograder as a necessity is one thing but to say
it&amp;#39;s better rather than just a time save is another. Now, you can use
autograding tools effectively to cull and sort and draw your attention
to things to look at by hand and that&amp;#39;s a plus but I haven&amp;#39;t seen too
much of that in current tools.&lt;/p&gt;
&lt;p&gt;
Rather than an autograder, I try to use testing frameworks on short
answers  and to provide instant feedback. Specifically I use &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt;
for C++ and &lt;a href=&#34;https://docs.python.org/2/library/unittest.html&#34;&gt;unittest&lt;/a&gt; for Python. They provide students with instant
answer feedback while at the same time introducing them to practical
software engineering sensibilities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
Some of my memorable tests
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
I thought here I&amp;#39;d share a few exams I&amp;#39;ve given that I found
memorable.&lt;/p&gt;
&lt;p&gt;
First was a five question long answer exam. I gave it to my kids
telling them &amp;#34;Answer three of the five questions. You can select any
three but when grading, I will only grade quesitons 1, 2 and 4.&amp;#34; Some
students had some real issues with this. Led to an interesting
discussion as to about choice and consequences. I didn&amp;#39;t do this in
order to mess with the kids. It was back in the day when you had to
send exams to the central copy room to be copied and needed about a
weeks lead time. I didn&amp;#39;t know the direction the class would take so
wrote questions 3,4, and 5 to hedge my bets. By the time we got to the
test, question 4 made sense while 3 and 5 would have been really super
hard.&lt;/p&gt;
&lt;p&gt;
A second test, well quiz I gave once was a single question that was
something like this: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;take the next 20 minutes to share with me your thoughts on cellular
automata. Consider why we studied it. Was it interesting? Why, why
not? What did you learn?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Some students absolutely loved it. Others loathed it. The freedom gave
some kids license to give me super creative interesting answers. Some
really needed more constraints and had tremendous difficulty.&lt;/p&gt;
&lt;p&gt;
Finally, I once gave a semi-gag test. The instructions on the front
said that you had to proceed in order. You WERE NOT TO look ahead. It
was a mix of real CS questions and goof questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sprint up to the blackboard, draw a smiley on the board, then return
to your seat and go on to the next question.&lt;/li&gt;
&lt;li&gt;Stand up, do 10 jumping jacks, sit and proceed to the next question&lt;/li&gt;
&lt;li&gt;Stand up and raise your right hand. When you see someone else with
their hand raised, walk to them and give them a high five. Then
return to your seat nad proceed to the next question.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last page had an answer key and instructed the students to grade
themselves before handing it in.&lt;/p&gt;
&lt;p&gt;
Overall the class enjoyed the exam.&lt;/p&gt;
&lt;p&gt;
What was interesting, was that after class a few student appoached me
either in person or via email saying that they felt really bad but
they looked at the end of the exam when it started so saw the
answers. They felt they cheated and wanted to let me know and
understood if they got  zeros (which of course, I didn&amp;#39;t give them). &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
Final thoughts
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Wow. That was long but I said before that there was a lot to unpack. &lt;/p&gt;
&lt;p&gt;
I left a bunch out of this and it&amp;#39;s already a really long post. I
might write more on test creation and administration at some other
point but the takeaway from this is listen to the &lt;a href=&#34;https://sites.duke.edu/csedpodcast/&#34;&gt;podcast&lt;/a&gt; if you
haven&amp;#39;t already.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 66 - an eshell switcher in elisp</title>
      <link>https://cestlaz.github.io/post/using-emacs-66-eshell-elisp/</link>
      <pubDate>Sat, 08 Feb 2020 08:12:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-66-eshell-elisp/</guid>
      <description>&lt;p&gt;
I thought it was time to give &lt;a href=&#34;https://masteringemacs.org/article/complete-guide-mastering-eshell&#34;&gt;eshell&lt;/a&gt; in Emacs another try. It has some
pretty cool features but for whatever reason, I&amp;#39;ve never really been
able to adopt Emacs as my go to shell.&lt;/p&gt;
&lt;p&gt;
Eshell out of the box is pretty cool but could use some
enhancements. When launching at login it doesn&amp;#39;t know about the path
you set in your .bashrc or .zshrc in my case files. It just seemed to
have problems with paths in general but that was fixed with the
exce-path-from-shell package. The prompt also needed some fixing up
along with some other tweaks. &lt;/p&gt;
&lt;p&gt;
I found &lt;a href=&#34;https://github.com/manateelazycat/aweshell&#34;&gt;aweshell&lt;/a&gt; which looked promising but it wasn&amp;#39;t on melpa so I
had to clone it separately. I also noticed that it basically tied
together some packages I could download myself and added a shell
switcher but didn&amp;#39;t bind the keys.&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d dive into elisp -something I haven&amp;#39;t done in a while to
write my own.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my current complete eshell config:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;(use-package exec-path-from-shell
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (exec-path-from-shell-initialize))


    (use-package fish-completion
    :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
    :config
    (global-fish-completion-mode))
  &lt;span style=&#34;color:#75715e&#34;&gt;;; (use-package eshell-prompt-extras &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; :ensure t&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; :config&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; (setq epe-show-python-info nil)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; )&lt;/span&gt;

  (use-package eshell-git-prompt
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (eshell-git-prompt-use-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git-radar&lt;/span&gt;)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
And here&amp;#39;s the code I ended up with for my shell switcher:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+BEGIN_SRC emacs-lisp
  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cl-lib&lt;/span&gt;)
  (defun select-or-create (arg)
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commentary ARG.&amp;#34;&lt;/span&gt;
    (if (string= arg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New eshell&amp;#34;&lt;/span&gt;)
        (eshell &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
      (switch-to-buffer arg)))
  (defun eshell-switcher (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; arg)
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commentary ARG.&amp;#34;&lt;/span&gt;
    (interactive)
    (let* (
           (buffers (cl-remove-if-not (lambda (n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-local-value&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;major-mode&lt;/span&gt; n) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eshell-mode&lt;/span&gt;)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-list&lt;/span&gt;)) )
           (names (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; (lambda (n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-name&lt;/span&gt; n)) buffers))
           (num-buffers (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; buffers) )
           (in-eshellp (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; major-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eshell-mode&lt;/span&gt;)))
      (cond ((&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; num-buffers &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (eshell (or arg &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)))
            ((not in-eshellp) (switch-to-buffer (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; buffers)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (select-or-create (&lt;span style=&#34;color:#a6e22e&#34;&gt;completing-read&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Select Shell:&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New eshell&amp;#34;&lt;/span&gt; names)))))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
I currently bound eshell-switcher to &lt;code&gt;CTRL-z e&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;
The video goes through the whole process:&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/-dIjFZBDt64&#34;&gt;https://www.youtube.com/embed/-dIjFZBDt64&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Riffing on the CS Ed Podcast - Episode 1 - David Malan</title>
      <link>https://cestlaz.github.io/post/cs-ed-podcast-1/</link>
      <pubDate>Thu, 06 Feb 2020 16:42:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ed-podcast-1/</guid>
      <description>
&lt;p&gt;
I saw a couple of posts the other day about the &lt;a href=&#34;https://sites.duke.edu/csedpodcast/&#34;&gt;CS Ed Podcast&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Kristin Stephens-Martinez of Duke interviewed (or will interview) six
CS educators on a variety of topics. There are four posted so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;David Malan&lt;/li&gt;
&lt;li&gt;Dan Garcia&lt;/li&gt;
&lt;li&gt;Amy Ko&lt;/li&gt;
&lt;li&gt;Mark Guzdial&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before I started I thought I&amp;#39;d listen to a few and then share some
thoughts but I found so much to unpack  in the second episode where
Dan talks about testing that I decided to share my thoughts on the
first episode, then Dan&amp;#39;s and then see if find anything to comment on
in episodes three and beyond.&lt;/p&gt;
&lt;p&gt;
All the podcasts are available via the link above and transcripts are
also provided - a nice touch for a number of reasons. It not only
increases accessibility, it also makes the episodes potentially more
discoverable via search engine and certainly more searchable. For me it was
helpful as I only listen to podcasts while working out - running or in
the gym so being able to search a text page to double check what I
thought I heard while struggling to finish mile six or seven was a
boon.&lt;/p&gt;
&lt;p&gt;
In episode 1, Stephens-Martinez interviewed David Malan of CS50
fame. The interview was mostly about tools used in CS50.&lt;/p&gt;
&lt;p&gt;
Even though I&amp;#39;m not going to comment on CS50 as it wasn&amp;#39;t the direct
topic of the interview I feel I should share my bias in case any comes
through. I&amp;#39;m not a fan of CS50. This is an opinion I formed by talking
to a number of my former students who have taken/TA&amp;#39;d CS50 and/or
courses that follow it combined with my own thoughts and beliefs about
CS Education. That said, I have no first hand exposure to Harvard&amp;#39;s
CS50 nor have I ever met Mr. Malan so I reserve the right to change my
point of view at some point in the future.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Summary stats
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Did I enjoy the podcast? Yes - I&amp;#39;d give it 4/5 on the making running
bearable scale. The interview flowed well and a lot of information
was shared. &lt;/li&gt;
&lt;li&gt;Did I learn anything? Honestly, no. This was probably due to the
topic but more on that below.&lt;/li&gt;
&lt;li&gt;Should you listen? Yes. Again, more below.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Thoughts
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
A theme of the podcast was that Malan wants his students to be exposed
to and end up using real tools but uses the CS50 tools to scaffold
their way. Not having a huge amount of exposure I won&amp;#39;t comment on how
well this works but it&amp;#39;s philosophically similar to my beliefs where I
start my beginners in a simplified environment like Thonny for Python
and have them &amp;#34;graduate&amp;#34; up to a more full featured yet less forgiving
editor. &lt;/p&gt;
&lt;p&gt;
One of the tools they talked about was &lt;a href=&#34;https://github.com/cs50/help50&#34;&gt;help50&lt;/a&gt; - a command line tool to
improve on error messages (there&amp;#39;s also a web interface
availabe). Instead of typing &lt;code&gt;gcc myfile.c&lt;/code&gt; students would type
&lt;code&gt;hepl50 gcc myfile.c&lt;/code&gt; and instead of getting just the cryptic error
message you&amp;#39;d also get an improved message. In my short time playing
with it I couldn&amp;#39;t actually get a better error but I only played with
it for a few minutes. &lt;/p&gt;
&lt;p&gt;
I like the idea of sharing both the original error message as well as
the improved one but can&amp;#39;t really comment further. What I would have
loved to hear, however was how they transition the kids first to use
the tool and then to grow out of it. I&amp;#39;d also be curious to see if
there were differences between adoption of  and graduation from the
tool as well as it&amp;#39;s effectiveness for the Harvard population where
everyone is pre-selected to be high performing in terms of class
performance vs an institution that takes all comers. &lt;/p&gt;
&lt;p&gt;
Another tool I liked was &lt;a href=&#34;https://cs50.readthedocs.io/style50/&#34;&gt;style50&lt;/a&gt; which tells you if and how your code
violates coding standards but doesn&amp;#39;t automatically fix it.&lt;/p&gt;
&lt;p&gt;
This is something I show my classes just using our editors style
checkers. I have Emacs set up to give me a red tick when I violate
style but only says what&amp;#39;s wrong when I move the cursor over and it
doesn&amp;#39;t auto correct. &lt;/p&gt;
&lt;p&gt;
I like this as it raises student awareness but they actually have to
make the change and learn to either code in an approved style or make
a conscious decision to violate style.&lt;/p&gt;
&lt;p&gt;
For me, the missing part of the interview was the &amp;#34;how.&amp;#34; How do you
get the students to adopt the tool and how do you get them to outgrow
them. &lt;/p&gt;
&lt;p&gt;
At the end, podcasts get to share something from tech that they find
cool and Mr. Malan shared containers - Docker images as an
example. The idea that you can package something for students and know
that they all get the same package with the same versions of all the
required tools. That seems to make sense but I think there&amp;#39;s another
side, a downside  to containers both in terms of using them in classes
and in terms of the direction we&amp;#39;re going with containers in tech. All
of that though is a topic for another day.&lt;/p&gt;
&lt;p&gt;
The podcast also covered other tools and if you haven&amp;#39;t listened yet
you should. &lt;/p&gt;
&lt;p&gt;
As I found a lot of rich material in Dan&amp;#39;s interview I&amp;#39;ll almost
certainly write something about that. Also probably on Amy&amp;#39;s about
debugging. Spoiler alert - both are worth listening to. Dan&amp;#39;s runs
about 40 minutes and Amy&amp;#39;s 24. I haven&amp;#39;t listened to Mark&amp;#39;s yet but
expect that to be worth our time as well.&lt;/p&gt;
&lt;p&gt;
One thing I do want to point out is that all six interviews for this
series are of college professors - no K12 teachers. Not sure why that
decision was made but I found it to be interesting. Anyone who knows
me is aware that I&amp;#39;m much more of a teacher as craftsman guy rather
than a &amp;#34;the research says&amp;#34; guy so I have my bias but regardless, I
think that interviewing a professor, a high school teacher, and an
early grade teacher could give some very interesting and contrasting
perspectives.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 65 - Live Python</title>
      <link>https://cestlaz.github.io/post/using-emacs-65-live-python/</link>
      <pubDate>Sun, 02 Feb 2020 13:13:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-65-live-python/</guid>
      <description>&lt;p&gt;
The other day I stumbled upon Emacs&amp;#39;s &lt;a href=&#34;https://github.com/donkirkby/live-py-plugin&#34;&gt;Live Coding&lt;/a&gt; plugin. It takes
interactive coding up to the next level. &lt;/p&gt;
&lt;p&gt;
Normally, when you code Python, if you&amp;#39;re working in a REPL, every
time you hit &amp;lt;Enter&amp;gt; the line you just typed is evaluated. When you&amp;#39;re
working ina source file, you&amp;#39;re just editing until you send the file
into a Python interpreter.&lt;/p&gt;
&lt;p&gt;
With this module, your file is continually evaluated as you type and
it shows you the results in a side window. &lt;/p&gt;
&lt;p&gt;
If you type in:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
print(c&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;c)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The live python window will display something like:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
print(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
If you change one of the variables, everything updates.&lt;/p&gt;
&lt;p&gt;
It gets even cooler when you add loops, functions, and even recursion.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s also support for unit testing.&lt;/p&gt;
&lt;p&gt;
It works, to varying degrees with Emacs, PyCharmm, Sublime Text and
there&amp;#39;s even a browser version. Emacs handles the basics and it seems
that the Sublime Text version adds support for some graphing. PyCharm
has that plus turtle graphics.&lt;/p&gt;
&lt;p&gt;
While this is &lt;strong&gt;very&lt;/strong&gt; cool, to be honest, I don&amp;#39;t know how useful this
is going to be but I&amp;#39;m very excited to play with it in the Fall when
I&amp;#39;ll be teaching Python again.&lt;/p&gt;
&lt;p&gt;
Check out this short video to see it in action:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/bYy90EUAh98&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 64 - Notmuch</title>
      <link>https://cestlaz.github.io/post/using-emacs-64-notmuch/</link>
      <pubDate>Sat, 18 Jan 2020 08:52:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-64-notmuch/</guid>
      <description>
&lt;p&gt;
I&amp;#39;ve been using the gmail web interface for a long time. My first
email or at least the oldest one still in the system dates back to Oct
18, 2004 7:29am. It was a letter to a buddy about an indoor turkey
fryer and if he needed a lift to Fairway the following morning to
shop.&lt;/p&gt;
&lt;p&gt;
Before that, I used my &lt;a href=&#34;http://panix.com&#34;&gt;Panix&lt;/a&gt; shell account - probably with &lt;a href=&#34;https://en.wikipedia.org/wiki/Pine_%2528email_client%2529&#34;&gt;PINE&lt;/a&gt;. Work
email was using my own servers at Stuy along with either PINE or Emacs
using VM mode which has long been deprecated.&lt;/p&gt;
&lt;p&gt;
I haven&amp;#39;t bitten the bullet and left gmail yet but I thought it was
time to move my personal email over to an Emacs client. I currently
use &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/&#34;&gt;MU4E&lt;/a&gt; and am pretty happy with it but figured I&amp;#39;d give another
contender a try - &lt;a href=&#34;https://notmuchmail.org/&#34;&gt;Notmuch&lt;/a&gt;. Both rely on some other backend to pull
email form an imap server. I&amp;#39;m currently using mbsync. I&amp;#39;m not
thrilled with it but then, I&amp;#39;m not thrilled with offlineimap which is,
as best I can figure the only other alternative.&lt;/p&gt;
&lt;p&gt;
In the video I&amp;#39;ll show a bit about notmuch and how it comapres to
mu4e. Both are nice packages and I&amp;#39;d love one email client that
combined the best of both and maybe added a bit more shine.&lt;/p&gt;
&lt;p&gt;
At their cores, both mu4e and notmuch are built on top of &lt;a href=&#34;https://xapian.org/&#34;&gt;xapain&lt;/a&gt; and
leverage search to manage your emails. Here are a few of the key
differences:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Mu4e
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Folder based&lt;/li&gt;
&lt;li&gt;Easier to handle separate email accounts (and keep them separate)&lt;/li&gt;
&lt;li&gt;Better org-mode integration&lt;/li&gt;
&lt;li&gt;Automatically calls your IMAP sync program&lt;/li&gt;
&lt;li&gt;Changes things on the server (moves, deletes etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Notmuch
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Tags based&lt;/li&gt;
&lt;li&gt;Doesn&amp;#39;t touch or change anything on the serer (doesn&amp;#39;t delete or
move things there, just tags locally)&lt;/li&gt;
&lt;li&gt;Combines multiple accounts to appear as one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Both have a nice search based interface.&lt;/p&gt;
&lt;p&gt;
Right now, the fact that notmuch doesn&amp;#39;t seamlessly delete emails
from the server might be a deal breaker for me. I have a limited quota
at Hunter so I really do have to watch the overall amount of storage I
use.&lt;/p&gt;
&lt;p&gt;
For now, I&amp;#39;m going to start pulling down my email and seeing how I
like mu4e for all my email needs. I&amp;#39;ll probably play a bit more with
notmuch as well and who knows….&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my post and video on setting up and using mu4e:&lt;/p&gt;
&lt;p&gt;
https://cestlaz.github.io/posts/using-emacs-39-mu4e/&lt;/p&gt;
&lt;p&gt;
And here&amp;#39;s the current one on notmuch:&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/GlrsoIwJ-UM&#34;&gt;https://www.youtube.com/embed/GlrsoIwJ-UM&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 63 ClojureScript</title>
      <link>https://cestlaz.github.io/post/using-emacs-63-clojurescript/</link>
      <pubDate>Thu, 09 Jan 2020 08:11:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-63-clojurescript/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been playing with ClojureScipt for my web projects recently and
really like it. Much more fun than any of the JavaScript frameworks
I&amp;#39;ve used. &lt;/p&gt;
&lt;p&gt;
Still, getting started was somewhat difficult due to the number of
options in tooling and uneven documentation and learning resources.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video that shows how I use Emacs for ClojureScript
development but the focus of the video is on how to get started with
ClojureScript and Emacs takes a back seat other than an example of my
workflow.&lt;/p&gt;
&lt;p&gt;
On the Clojurscript side I&amp;#39;m using &lt;a href=&#34;https://shadow-cljs.org/&#34;&gt;shadow-cljs&lt;/a&gt; which I like very much
along with &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;tailwindcss&lt;/a&gt; for styling. I also mention &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;NVM&lt;/a&gt; for managing
node/npm etc. which you&amp;#39;ll also need. &lt;/p&gt;
&lt;p&gt;
On the Emacs side you&amp;#39;ll see a bit of &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;cider&lt;/a&gt; along with &lt;a href=&#34;https://github.com/Fuco1/smartparens&#34;&gt;smartparens&lt;/a&gt; and
you can find my full config at &lt;a href=&#34;https://github.com/zamansky/dot-emacs.&#34;&gt;https://github.com/zamansky/dot-emacs.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
I was thinking about also making the following ClojureScript videos if
the communities find value in them and I have time:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to create reusable components like an input field with label.&lt;/li&gt;
&lt;li&gt;Creating a simple Electron app using shadow-cljs.&lt;/li&gt;
&lt;li&gt;Creating something with both  server side and client side.&lt;/li&gt;
&lt;li&gt;Also open to suggestions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don&amp;#39;t pretend to be a cljs or webdev master so please let me know if
I&amp;#39;m doing anything horribly wrong and let me know if you want more.&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/BZNJi5pP8fU&#34;&gt;https://www.youtube.com/embed/BZNJi5pP8fU&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub Org Explorer</title>
      <link>https://cestlaz.github.io/post/github-org-explorer/</link>
      <pubDate>Fri, 03 Jan 2020 14:40:40 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-org-explorer/</guid>
      <description>&lt;p&gt;
I&amp;#39;m a big fan of &lt;a href=&#34;https://classroom.github.com&#34;&gt;GitHub Classroom&lt;/a&gt; and use it for all of my class
assignments. It&amp;#39;s great for organizing, distributing, and collecting
assignments and gets the kids used to using real world tools at the
same time. I&amp;#39;ve written a bunch of posts on how I use it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/github-classroom/&#34;&gt;How I use GitHub Classroom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/communicating-with_students/&#34;&gt;Communicating with Students - meybe GitHub to the rescue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4/&#34;&gt;GitHub as a tool for education&lt;/a&gt; (part of a 4 part series)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As well as a couple of others.&lt;/p&gt;
&lt;p&gt;
Since I like doing things on the command line I&amp;#39;ve been using GitHub&amp;#39;s
&lt;a href=&#34;https://github.com/education/classroom-assistant&#34;&gt;Classroom Assistant&lt;/a&gt; to download repos. It&amp;#39;s a nice tool - I can
download any or all repos for any given assignment at once.&lt;/p&gt;
&lt;p&gt;
Still, this leaves me wanting in three areas. &lt;/p&gt;
&lt;p&gt;
First is roster integration. They have some rudimentary work done on
this but it&amp;#39;s not quite there yet.&lt;/p&gt;
&lt;p&gt;
Second is being able to download repos based on other criteria. For
example, downloading all of the assignments from a single student.&lt;/p&gt;
&lt;p&gt;
Third is deleting repos. GitHub Classroom uses GitHub organizations to
store submissions. You get one per student (or group) per
assignment. This gets really big really fast and it pollutes your
GitHub account with lots of repos that, quite frankly, I don&amp;#39;t want
once the semesters done.&lt;/p&gt;
&lt;p&gt;
If only there was a way to address this….&lt;/p&gt;
&lt;p&gt;
Well, given that the good people at GitHub publish their &lt;a href=&#34;https://developer.github.com/&#34;&gt;APIs&lt;/a&gt; one can
write their own applications to use with or integrate with GitHub. &lt;/p&gt;
&lt;p&gt;
I wrote a small app, still experimental but functional. It&amp;#39;s an
&lt;a href=&#34;https://electronjs.org&#34;&gt;Electron&lt;/a&gt; app (another thanks to GitHub) written in Clojurescript. I
might write about creating it later but for now, I just wanted to
share the app in case it&amp;#39;s useful to anybody.&lt;/p&gt;
&lt;p&gt;
Once you log in you can go to any of your GitHub organizations. Since
GitHub Classrooms are based on organizations this will present you
with all the repos for a given one. Then you can filter via regular
expressions and then either export or delete them. For me it&amp;#39;s the
missing piece. I plan to add roster support some time in the future.&lt;/p&gt;
&lt;p&gt;
If anyone&amp;#39;s interested, here&amp;#39;s the GitHub repo: &lt;a href=&#34; https://github.com/zamansky/github-org-explorer&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/github-org-explorer&#34;&gt;https://github.com/zamansky/github-org-explorer&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
And a short video walkthrough of how it works.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/e-gNzuBG3mU&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 62 Magit Forge</title>
      <link>https://cestlaz.github.io/post/using-emacs-62-magit-forge/</link>
      <pubDate>Tue, 19 Nov 2019 12:25:58 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-62-magit-forge/</guid>
      <description>&lt;p&gt;
Ever since I started looking at Magit as a &amp;#34;git dashboard&amp;#34; instead of
as a &amp;#34;git interface&amp;#34; it&amp;#39;s been yet another Emacs killer app to me. I
just recently started playing with &lt;a href=&#34;https://github.com/magit/forge&#34;&gt;forge&lt;/a&gt; which allows &lt;a href=&#34;https://github.com/magit/magit&#34;&gt;Magit&lt;/a&gt; to
interface and interact with git &amp;#34;forges&amp;#34; like GitHub. This allows you
to work on issues and pull requests without ever leaving Emacs.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video on how easy it is. The video doesn&amp;#39;t show this but the
first time you fire forge up it will prompt you for credentials. &lt;/p&gt;
&lt;p&gt;
Also, if you aren&amp;#39;t familiar with GitHub issues, check out the
post/video I made a few days ago (&lt;a href=&#34;https://cestlaz.github.io/post/git-issues/&#34;&gt;link&lt;/a&gt;) and you can check out my
earlier post/video on Magit as well (&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-47-magit/&#34;&gt;link&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/wgI8r3Nx_BI&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 61 - org-msg</title>
      <link>https://cestlaz.github.io/post/using-emacs-61-org-msg/</link>
      <pubDate>Sat, 16 Nov 2019 05:00:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-61-org-msg/</guid>
      <description>&lt;p&gt;
By living in Emacs I get a consistent interface across all sorts of
tasks - programming, lesson planning, making presentations, preparing
documents, and yes, even email. I&amp;#39;ve been using &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-39-mu4e/&#34;&gt;mu4e&lt;/a&gt; as my Emacs email
client for a while now. Currently, I&amp;#39;m using Emacs for my work email
and Gmail for personal. I&amp;#39;ve been thinking of going whole hog to mu4e
and possibly migrating from Gmail to a new email provider for the
personal stuff but there are still a few pain points with Emacs email:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rich text emails (embedded links, images, etc)&lt;/li&gt;
&lt;li&gt;calendar integration&lt;/li&gt;
&lt;li&gt;contacts &lt;/li&gt;
&lt;li&gt;periodic Maildir sync problems with mbsync&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Calendar integration isn&amp;#39;t a make or break issue and contacts with
mu4e is good enough so that leaves two pain points. Formatted emails
which I think is now pretty much solved (see below) and the Maildir
stuff.&lt;/p&gt;
&lt;p&gt;
On the Maildir side, I&amp;#39;m trying deal with my email across four
machines - work laptop, work desktop, home laptop, home desktop. I
originally synced each one separately and that worked but I was having
archive problems - it seems that I was only archiving on the local
machine so if I archived an email at work and I needed to get to it at
home, I was out of luck. &lt;/p&gt;
&lt;p&gt;
Then, I moved to sharing my Maildir using Syncthing - an opensource
Dropbox-alike. That mostly worked but if I wasn&amp;#39;t careful I&amp;#39;d get
syncing errors where I have to go into my Maildir directory and
manually rename or remove messages - a real pain.&lt;/p&gt;
&lt;p&gt;
If anyone out there has a solution (and &lt;a href=&#34;http://pragmaticemacs.com/emacs/fixing-duplicate-uid-errors-when-using-mbsync-and-mu4e/&#34;&gt;this&lt;/a&gt; fix doesn&amp;#39;t fully work
for me), I&amp;#39;d love to hear about it.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s get back to the formatted email. I was already to create an
email in org mode using &lt;code&gt;org-mu4e-compose-org-mode&lt;/code&gt; which I think is
built in to either org-mode or mu4e but it&amp;#39;s limited. It formats
tables, outlines, and source blocks but I can&amp;#39;t easily make a source
block for something like &lt;strong&gt;dot&lt;/strong&gt; or &lt;strong&gt;ditaa&lt;/strong&gt; and embed the result. I
found a solution recently. It&amp;#39;s &lt;a href=&#34;https://github.com/jeremy-compostella/org-msg&#34;&gt;org-msg&lt;/a&gt; - a terrific package that lets
you compose an email in org-mode. It seems to have better support than
org-mu4e-compose-org-mode. It does the basic formatting, tables, etc
and also executes source blocks. The only thing that was missing for
me was LaTeX formatting but I use that so rarely I don&amp;#39;t really care.&lt;/p&gt;
&lt;p&gt;
The package author, Jeremy Compostella, is also very responsive. When
I first installed org-msg it wasn&amp;#39;t integrating seamlessly with
mu4e. It was still workable but I had to manually insert some
configuration at the top of all my emails. I opened an issue on this
and within a day it was fixed.&lt;/p&gt;
&lt;p&gt;
It also has a very cool preview mode so you can see what you&amp;#39;re
sending. On that, though, I did have an issue but I&amp;#39;m pretty sure it&amp;#39;s
an Emacs / org-mode issue and not an org-msg issue. On my desktop,
when I run the preview, it opens my browser with the email formatted
correctly. When I do the same on my laptop, it runs GitHub Classroom
Assistant - an application I installed and use for other
purposes. I&amp;#39;ve had this happen before with other emacs xdg things. If
anyone else has seen this and better has a solution, I&amp;#39;d love to hear
about that as well.&lt;/p&gt;
&lt;p&gt;
Anyway, here&amp;#39;s a video that shows org-msg in action:&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/cPZe0AGOUJU&#34;&gt;https://www.youtube.com/embed/cPZe0AGOUJU&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 60 - Restclient</title>
      <link>https://cestlaz.github.io/post/using-emacs-60-restclient/</link>
      <pubDate>Fri, 25 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-60-restclient/</guid>
      <description>&lt;p&gt;
I started to work on a web application the other day. It&amp;#39;s nothing
special but if I ever finish it, it will be a pretty complete
project. The backend will be a &lt;a href=&#34;https://restapitutorial.com/&#34;&gt;REST&lt;/a&gt; API and I&amp;#39;m planning on writing
the frontend in Clojurescript. &lt;/p&gt;
&lt;p&gt;
The problem with developing a web application like this is that you
can&amp;#39;t really write the front end until you have enough of the backend
to provide data. Also, writing the backend would be much easier if you
already had a front end to test it with. &lt;/p&gt;
&lt;p&gt;
Pretty annoying.&lt;/p&gt;
&lt;p&gt;
What you basically have to do is use some system to make all the API
calls with all the required data. The most fundamental way to do this
is to use a command line tool like &lt;a href=&#34;https://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;. For example, from a terminal
I might write something like this to make a login call:&lt;/p&gt;
&lt;div class=&#34;src src-curl&#34;&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-curl&#34; data-lang=&#34;curl&#34;&gt;curl --data &amp;#34;email=myemail&amp;amp;password=mypassword&amp;#34; https://localhost:8080/login&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
It works but is clunky and you end up using the mouse a lot to cut and
paste data.&lt;/p&gt;
&lt;p&gt;
Web browsers like Firefox and Chrome also have extensions (&lt;a href=&#34;https://techbeacon.com/app-dev-testing/5-top-open-source-api-testing-tools-how-choose&#34;&gt;link&lt;/a&gt;, &lt;a href=&#34;https://www.guru99.com/testing-rest-api-manually.html&#34;&gt;link&lt;/a&gt;)
but I find them somewhat bulky with their mouse / form based
interfaces.&lt;/p&gt;
&lt;p&gt;
Emacs to the rescue!!!!!!!!&lt;/p&gt;
&lt;p&gt;
I discovered &lt;a href=&#34;https://github.com/pashky/restclient.el&#34;&gt;restclient&lt;/a&gt; for Emacs a couple of years ago but only now
am reaping the benefits. It&amp;#39;s really amazing. I can easily set up REST
querries, use all the editing power of Emacs, and even save the
queries for later.&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t find this until after I made the video but you can even use
restclient in &lt;a href=&#34;https://github.com/alf/ob-restclient.el&#34;&gt;org-mode&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s all very cool.&lt;/p&gt;
&lt;p&gt;
Details in the video:&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/L7Jcoe3oHTs&#34;&gt;https://www.youtube.com/embed/L7Jcoe3oHTs&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;p&gt;
Enjoy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 59 - markdown</title>
      <link>https://cestlaz.github.io/post/using-emacs-59-markdown/</link>
      <pubDate>Fri, 18 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-59-markdown/</guid>
      <description>&lt;p&gt;
Org-mode is my markup of choice. I spend the vast majority of my time working
on text files working in org-mode. Since GitHUb started rendering
org-mode files in their site I&amp;#39;ve also used org-mode for things like
Readme files in my projects. I even force it on my students at
times. When I make an assignment, I seed it with an org-mode file that
they have to modify - that is - fill in things like their names, group
members etc..&lt;/p&gt;
&lt;p&gt;
That said, sometimes I have to work in plain old &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;markdown&lt;/a&gt;. This is
almost always when I&amp;#39;m working on something collaboratively and more
often than not it&amp;#39;s documentation on a project living on GitHub.&lt;/p&gt;
&lt;p&gt;
So, given that I have to work with Markdown, time to use some Emacs
magic to make it easy and fun.&lt;/p&gt;
&lt;p&gt;
To start, Emacs has a &lt;a href=&#34;https://github.com/jrblevin/markdown-mode/tree/f3c54e34cc5228001af36a5301883325319f21d4&#34;&gt;markdown mode&lt;/a&gt; along with a bunch of previewing
and rendering modes. I settled on &lt;a href=&#34;https://github.com/seagle0128/grip-mode/tree/4c7014c8151e522b9dd94f878478087bf92ab10e&#34;&gt;grip mode&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
You can check out the video to see grip-mode along with some of the
other modes I tried here:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/IlhkYmUU-ns&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/ifram&gt;e
&lt;p&gt;
Enjoy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 58 - lsp-mode</title>
      <link>https://cestlaz.github.io/post/using-emacs-58-lsp-mode/</link>
      <pubDate>Mon, 07 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-58-lsp-mode/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been wanting to check out &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; under Emacs for a while
now. LSP stands for &lt;a href=&#34;https://langserver.org/&#34;&gt;Language Protocol Service&lt;/a&gt;. The idea is that you
have a standard interface between your editor and some language
server. If you program in multiple languages and each has an LSP
server you end up, in theory, with a simpler configuration and a
consistent interface.&lt;/p&gt;
&lt;p&gt;
This certainly sounds more appealing than how we did it in the old
days where you have some ad hoc configuraiton for each language you
work in. At times I&amp;#39;m working or dabbling in a whole bunch of
languages. At times, my Emacs configuration has had separate sections
for each of the following languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Emacs Lisp&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;C and C++&lt;/li&gt;
&lt;li&gt;Clojure&lt;/li&gt;
&lt;li&gt;Processing&lt;/li&gt;
&lt;li&gt;Scheme&lt;/li&gt;
&lt;li&gt;Haskell&lt;/li&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;li&gt;OCaml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and more. &lt;/p&gt;
&lt;p&gt;
This can get messy.&lt;/p&gt;
&lt;p&gt;
So, LSP sounds cool but when I&amp;#39;ve tried to get it going in the past
I&amp;#39;ve always had troubles. This time, I tried a different approach. I
decided to declare .emacs.d bankruptcy. I cleared out my .emacs.d
directory and started fresh. Not really fresh - I copied over The
critical parts of my configuration to start with - Swiper, email and
org config and a few other things. Then I got lsp-mode working for
Python and C++. Now I&amp;#39;m going to migrate over more of my old
configuration as I discover I want, miss, or need things. We&amp;#39;ll see
how it goes.&lt;/p&gt;
&lt;p&gt;
The new configuration can be found here:
&lt;a href=&#34;https://github.com/zamansky/dot-emacs&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/dot-emacs&#34;&gt;https://github.com/zamansky/dot-emacs&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Check out the video to see the details:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/zg6JJI-kwhE&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>CSTA 2019 - Using GitHub as a CMS</title>
      <link>https://cestlaz.github.io/post/csta-2019-github/</link>
      <pubDate>Wed, 26 Jun 2019 12:09:48 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/csta-2019-github/</guid>
      <description>&lt;p&gt;
With ISTE ending, the next big event for CS treachers is the annual
&lt;a href=&#34;https://www.csteachers.org/page/2019conference&#34;&gt;CSTA Conference&lt;/a&gt;. I first attended two years ago in Baltimore. Last
year the conference, in Omaha was bigger and better in every way
imaginable. I expect this year to be the best yet.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t go to a lot of conferences so I don&amp;#39;t have much to compare
CSTA with but I like the fact that it&amp;#39;s is about half the size of
SIGCSE. At about 1000 attendees it still feels small enough to be
intimate but at the same time large enough so that there&amp;#39;s something
for everyone and plenty of people to learn and share from and with.&lt;/p&gt;
&lt;p&gt;
Just like last year, I&amp;#39;ll be spending a lot of time at the GitHub
booth so if you want to talk about how to use GitHub to support your
students make sure to stop by and say hello.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll also be giving a session with my long time partner in crime
JonAlf. &lt;/p&gt;
&lt;p&gt;
Most of us know that Git is a version control system and that
GitHub is pretty much the industry standard platform for using
Git. Many of us also know that GitHub for Education has a great
toolset to support using GitHub with your classes. Tools that help
organize, distribute, collect, and assess assignments.&lt;/p&gt;
&lt;p&gt;
Fewer people know that GitHub can be used to really easily create a
web presence and as a way to distribute class material and you don&amp;#39;t
even have to use the command line if you don&amp;#39;t want to. I use GitHub
as a lightweight CMS with my classes, to host full blown web sites,
and also to host this blog.&lt;/p&gt;
&lt;p&gt;
Come join JonAlf and me on Tuesday at 11:15 in West 106C and we&amp;#39;ll
show you how you can use GitHub as a web presence as well.&lt;/p&gt;
&lt;p&gt;
I also want to briefly mention that my better half, Devorah, is going
to be with us at the GitHub booth running a really cool
knitting/crocheting for  charity project (thanks to both CSTA and
GitHub for facilitating this). I&amp;#39;ll write more about it in a day or so
but if you&amp;#39;re going to be at CSTA2019 and you knit or crochet or want
to learn, you can check the project out here:
&lt;a href=&#34;http://blanketstatementproject.com/&#34;&gt;&lt;a href=&#34;http://blanketstatementproject.com/&#34;&gt;http://blanketstatementproject.com/&lt;/a&gt;&lt;/a&gt; (note that the site is hosted on
GitHub and the source is &lt;a href=&#34;https://github.com/blanketstatementproject/blanketstatementproject.github.io&#34;&gt;here&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;
GitHub is also holding a pre-conference reception on July 7 from
5:30 - 8:00. You can sign up &lt;a href=&#34;https://csta-github-meetup.confetti.events/&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Hope to see many of you in a couple of weeks in Phoenix.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 57 Dired Narrow</title>
      <link>https://cestlaz.github.io/post/using-emacs-57-dired-narrow/</link>
      <pubDate>Sun, 07 Apr 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-57-dired-narrow/</guid>
      <description>&lt;p&gt;
One of Emacs power features that I&amp;#39;ve never quite gotten into is
&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html&#34;&gt;dired&lt;/a&gt;, the Directory Editor. I&amp;#39;ve already done a &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-38-dired/&#34;&gt;video on the package&lt;/a&gt;.
It&amp;#39;s really cool and I do use it at times but I still haven&amp;#39;t started
using it for my day to day.&lt;/p&gt;
&lt;p&gt;
Well, I just started using a couple of packages that might change
this. They&amp;#39;re part of a set of dired addons that you can check out at the
&lt;a href=&#34;https://github.com/Fuco1/dired-hacks/tree/2c1234592aee91dcd9401bcd67213e6a4a464fd9&#34;&gt;dired hacks&lt;/a&gt; page. The specific ones I&amp;#39;m talkign about are
&lt;code&gt;dired-subtree&lt;/code&gt; and &lt;code&gt;dired-narrow&lt;/code&gt;. &lt;code&gt;dired-subtree&lt;/code&gt; is cool but it&amp;#39;s
not the game changer. &lt;code&gt;dired-narrow&lt;/code&gt; is. One of my issues with
dired is that I can&amp;#39;t see all the files I&amp;#39;m operating on easily at the
same time. If I&amp;#39;m marking a large number of files to delete I want to
be able to see all of them at once so I&amp;#39;m sure I&amp;#39;m not making a
mistake. &lt;code&gt;dired-narrow&lt;/code&gt; lets me easily do this.&lt;/p&gt;
&lt;p&gt;
Check out the video to see the details:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pZzDayi5lRo&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Evaluating Java IDES for teaching teachers.</title>
      <link>https://cestlaz.github.io/post/java-ides/</link>
      <pubDate>Fri, 08 Mar 2019 13:29:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/java-ides/</guid>
      <description>
&lt;p&gt;
Since Hunter uses C++ as it&amp;#39;s core language, I haven&amp;#39;t used Java much
in the past three years. That&amp;#39;s going to change pretty soon. Once we
start offering our CS teacher Certificate and Masters programs I&amp;#39;ll
once again start teaching with Java as that&amp;#39;s one of the langauges
that we want to prepare our teachers with.&lt;/p&gt;
&lt;p&gt;
That means deciding on a set of tools and so I&amp;#39;ve been spending time
evaluating Java programming environments with an eye on the
beginner since not only do the teachers I work with have to be
comfortable with the tool but more importantly they will have to be
able to support the tool for all of their students.&lt;/p&gt;
&lt;p&gt;
One tool we&amp;#39;re likely to use is &lt;a href=&#34;https://repl.it/&#34;&gt;repl.it&lt;/a&gt;. That&amp;#39;s an online environment
for Java and a bunch of other languages. There&amp;#39;s a lot to like about
it and teachers might go with it or a similar cloud based option in
their classes but it&amp;#39;s important that we also prepare teachers to
build programs locally.&lt;/p&gt;
&lt;p&gt;
So, here&amp;#39;s my criteria and here&amp;#39;s what I found.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
The tool has to install easily on all platforms
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I started with my desktop Linux machine. I&amp;#39;m running LinuxMint which
is pretty mainstream and I installed the Java tools using Mint&amp;#39;s
package manager. The packages are openjdk-11 and it looks like running
Java 10. If the IDE or editor I installed  didn&amp;#39;t work off the bat it
was no good. If it installed and I liked it I&amp;#39;ll pass it off to
friends who use Windows and Macs to see if the install there is
equally seamless.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
The tool has to be easy to run 
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
After install you have to be able to run it easily. No fancy &lt;code&gt;java
-jar blah blah blah&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
I&amp;#39;m not looking for a professional tool
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;Professional tools can be too compex and do too much for students. I
was looking for the sweet spot of giving a nice amount of support but
not giving away the store.&lt;/p&gt;
&lt;p&gt;
Here are the tools I looked at (and you can debate if something
belongs in the other category in some cases):&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-4&#34;&gt;
Editors
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-4&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Emacs&lt;/li&gt;
&lt;li&gt;Gedit&lt;/li&gt;
&lt;li&gt;Vim&lt;/li&gt;
&lt;li&gt;Sublime Text&lt;/li&gt;
&lt;li&gt;Atom&lt;/li&gt;
&lt;li&gt;Jedit&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-5&#34;&gt;
IDES
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-4&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Eclipse&lt;/li&gt;
&lt;li&gt;DrJava&lt;/li&gt;
&lt;li&gt;Geany&lt;/li&gt;
&lt;li&gt;BlueJ&lt;/li&gt;
&lt;li&gt;IntelliJ&lt;/li&gt;
&lt;li&gt;VSCode&lt;/li&gt;
&lt;li&gt;JGrasp&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Editor vs IDE
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
The line between editor and IDE is a blurry one. I tend to think of an
editor as multi-purpose and multi-language where an also useful for
non programming text realted tasks whereas an IDE comes with more
programming bells and whistles. The truth is, though. that some IDES
can do well with non programming tasks and many editors are pretty
close to IDEs.&lt;/p&gt;
&lt;p&gt;
In any event, for a teacher, there&amp;#39;s something to be said for keeping
it &amp;#34;close to the metal&amp;#34; and have them use an editor to edit source
code and compile from the command line. This doesn&amp;#39;t mean they
shouldn&amp;#39;t also see IDEs and perhaps use them with their students but
a teacher should know a little more about what&amp;#39;s going on than just
load a program, write some code, and click run. If a teacher is that
limited you end up in situations similar to that common comment from
people who finish a beginner course on Codecademy - &amp;#34;I finished the
course and I can program in their environment but I don&amp;#39;t know how to
actually make something anywhere else.&amp;#34;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
The Editors
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Here the idea would be start as I mentioned above. Edit files adn then
compile on the command line. Eventually, though, many of these tools
can be used as IDEs&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-8&#34;&gt;
Emacs
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;https://www.gnu.org/software/emacs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve got to start with my tool of choice although I can&amp;#39;t really be
unbiased. I think it gets a bad wrap because it&amp;#39;s old and out of the
box looks plain but, yes, you can use your mouse and it does have
menus. The upside is that it can do everything an IDE can do and a
thousand times more. I do email, read rss feeds, maintain my calendar
and more in Emacs. &lt;/p&gt;
&lt;p&gt;
The downside is that it doesn&amp;#39;t do Java well out of the box and kids
like shinier objects. &lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t think I&amp;#39;d start the teachers with Emacs but I&amp;#39;d probably shift
my instruction to using it at some point and show some of the cooler
features (many highlighted in my &lt;a href=&#34;https://cestlaz.github.io/stories/emacs/&#34;&gt;Emcacs videos&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-9&#34;&gt;
Gedit
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.gnome.org/Apps/Gedit%0A&#34;&gt;https://wiki.gnome.org/Apps/Gedit%0A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This is a plain simple editor. You can bucket in notepad+ and whatever
the basic Mac editor is in here. Nothing special and nothing
fancy. It&amp;#39;s easy enough to load, edit a file and save but not much
more. I&amp;#39;d be fine using it were it not for better options.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-10&#34;&gt;
Vim
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.vim.org/&#34;&gt;https://www.vim.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
No&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-11&#34;&gt;
Sublime Text
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-11&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sublimetext.com/%0A&#34;&gt;https://www.sublimetext.com/%0A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This was the hotness for a while and it&amp;#39;s a pretty slick editor. I
can&amp;#39;t recommend it for teachers though for two reasons. One is that
it&amp;#39;s not free (although it isn&amp;#39;t expensive). The other is that it&amp;#39;s
not open source. There were other hot editors before sublime and when
their companies folded or sunset the editor all those plugins and
customizations had to be redone on a new platform. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-12&#34;&gt;
Atom
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-12&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;https://atom.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Atom&amp;#39;s an editor I want to like. It&amp;#39;s open source and looks pretty
neat but it seems more focused on the JS ecosystem. I couldn&amp;#39;t find
enough Java related plugins to make it better than Gedit although it
was easy to theme and customize the keys. Were I not an Emacs guy I&amp;#39;d
probably use Atom for much of my non-Java development but it doesn&amp;#39;t
seem like a great fit for Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-13&#34;&gt;
Jedit
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-13&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jedit.org/&#34;&gt;http://www.jedit.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This looked like the strongest contender for Java. Not too
complicated. Nice syntax highlighting out of the box. It doesn&amp;#39;t do
completion but that&amp;#39;s arguably a good thing when teaching
programming (incidentally, Emacs doesn&amp;#39;t do completion out of the box
but it can be added so you can up the tools ability as the class moves
along). From my limited explorations you can install plugins like a
Java Linter and you can run a console from inside JEdit which means
you can actually type things like &lt;code&gt;javac file.java&lt;/code&gt; and then run the
program all from within the editor.&lt;/p&gt;
&lt;p&gt;
Jedit also has some nice builtin macros for boilerplate code like
setters and getters.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-14&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-14&#34;&gt;
IDEs
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-14&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div id=&#34;outline-container-headline-15&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-15&#34;&gt;
Eclipse 
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-15&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org&#34;&gt;https://www.eclipse.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve used eclipse before and as a Java environment, it&amp;#39;s actually
pretty nice. You can customize the keys so I set mine to Emacs. It has
a lot of plugins, you can compile and test your program from within
the IDE and do tons of other things. It&amp;#39;s a VERY nice professional
tool.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t like it for teaching for three reasons. First, it does too
much. By giving too much professional support kids rely too much on
the tool. Second, it&amp;#39;s made for big projects using build systems not
small AP class programs consisting of one or two files where you run
javac manually. Yes, you can do this in Eclipse but it seems more
awkward. Third, becasue there&amp;#39;s so much going on you need a HUGE
screen and kids and schools might not have enough screen real estate.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s also a fourth reason which is that I installed Eclipse using
LinuxMint&amp;#39;s package manager and it crashed when running. If I&amp;#39;m going
to recommend a teacher roll out a tool that all of their students are
going to install at home on their own, at the very least it has to
install and run seamlessly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-16&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-16&#34;&gt;
DrJava
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-16&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://www.drjava.org/&#34;&gt;http://www.drjava.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Like Eclipse, I&amp;#39;ve used DrJava before. It&amp;#39;s similar to DrRacket (nee
Scheme) and Dr. Python. It&amp;#39;s close to perfect. You get highlighting,
helpful error finding, can run your program from within Dr. Java and
more.&lt;/p&gt;
&lt;p&gt;
The killer problem is that I can&amp;#39;t get the latest version to
run. Actually the first problem is that it&amp;#39;s just a jar file so you
have to run it with &lt;code&gt;java -jar drjava.jar&lt;/code&gt;. Beyond that, it didn&amp;#39;t
work out of the box. It loaded but compilign and running didn&amp;#39;t After
some mucking around, I got it to compile but it doesn&amp;#39;t run the
programs. &lt;/p&gt;
&lt;p&gt;
This is too bad because when it runs it&amp;#39;s a terrific learning
environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-17&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-17&#34;&gt;
BlueJ
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-17&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://bluej.org/&#34;&gt;https://bluej.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This is another tool that was DOA. I tried the debian package as well
as the jar file. Couldn&amp;#39;t get it working. &lt;/p&gt;
&lt;p&gt;
I have used an older version so I&amp;#39;ll describe that instead just
remember things might be different in the current version.&lt;/p&gt;
&lt;p&gt;
BlueJ does one thing very well - objects. It visually shows object
creation and relationships. I recall that you can create an opject,
click on it&amp;#39;s box in a visual graph pane, inspect it, instantiate new
ones and in general explore and expirement. If you&amp;#39;re big on OOP and
like Object First by all means check BlueJ out. It&amp;#39;s probably best in
class for that approach.&lt;/p&gt;
&lt;p&gt;
On the other hand, it&amp;#39;s a one trick pony. If you, like me, are not all
in on OOP or an Objects first and all the time approach it&amp;#39;s probably
not the tool for you. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-18&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-18&#34;&gt;
Geany
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-18&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.geany.org/&#34;&gt;https://www.geany.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
I hadn&amp;#39;t heard of this one before but it looks like a contender. It
has a  pretty clean interface and it worked out of the box. I
installed it using the package manager.&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;&amp;lt;img src=&amp;#34;/img/geany.png&amp;#34; width=&amp;#34;250px&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
Class browser on the right, files on the left and console (terminal),
compiler status etc on the bottom. It supports some level of
autocomplete but it doesn&amp;#39;t do everything. I&amp;#39;m not sure yet but it
might hit the completion sweet spot.&lt;/p&gt;
&lt;p&gt;
It says it does snippets but I haven&amp;#39;t figured that out yet. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-19&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-19&#34;&gt;
IntelliJ
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-19&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;https://www.jetbrains.com/idea/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
IntelliJ is fro JetBrains. They make a bunch of IDEs each focussed on
a different toolset but all with the same look and feel. You can also
add plugins to each to make them multi-modal. I believe the editor at
the core is JEdit. I&amp;#39;ve used their IDEs in the past and as far as
professional IDEs go I like them. They&amp;#39;re more lightweight than say
Eclipse and don&amp;#39;t need the real estate.&lt;/p&gt;
&lt;p&gt;
Still, I think it&amp;#39;s too much for a beginner. For example, you can
in theory run your program from the build menu but, much like Eclipse,
it takes you to a configuration screen. I was pretty lost and I&amp;#39;m not
a beginner. Much like Eclipse it&amp;#39;s made for projects not small class
programs. &lt;/p&gt;
&lt;p&gt;
I found the Python version of JetBrains IDEs more approachable
probably because the ecosystem is much simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-20&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-20&#34;&gt;
VSCode
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-20&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This one shocked me - I actually found myself liking a Microsoft
product. I guess this really isn&amp;#39;t your father&amp;#39;s Microsoft.&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;&amp;lt;img src=&amp;#34;/img/vscode.png&amp;#34; width=&amp;#34;250px&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
Much like Geany it has a clean interface and like Geany you don&amp;#39;t need
a whole Java build system. It does more completions out of the box
which you may or may not like as well as snippets. A single key will
compile and run your program and on top of all that it has en &amp;#34;Emacs&amp;#34;
setting for keybindings.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not sure if I like Geany or VSCode better but I think both are
really good options. I&amp;#39;d probably lean towards Geany due to the less
robust completions. Were I writing code for real rather than teaching,
I&amp;#39;d probably go the other way.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-21&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-21&#34;&gt;
JGrasp
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-21&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;&amp;lt;img src=&amp;#34;/img/vscode.png&amp;#34; width=&amp;#34;250px&amp;#34;/&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
JGrasp feels much the same as the other contenders - Geany and VSCode
but the interface just looks a bit clunkier to me. I know that&amp;#39;s
purely subjective. &lt;/p&gt;
&lt;p&gt;
The biggest difference I&amp;#39;m seeing out of the box is that JGrasp
doesn&amp;#39;t do completions so depending on where you fall with that you
might want Jgrasp for none, Geany for some, and VSCode for all.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;[EDIT]&lt;/strong&gt; JGrasp has a very cool visualizer built in that will animate
 your proram. Here&amp;#39;s a &lt;a href=&#34;https://www.youtube.com/watch?v=wuQowTV0o6s&#34;&gt;video&lt;/a&gt; of it in action. I&amp;#39;m going to have to
 play with this a bit and see if it pushes JGrasp up over the top for
 me. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-22&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-22&#34;&gt;
Processing
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-22&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://processing.org/&#34;&gt;https://processing.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not going to talk about processing but I felt that it would be
negligent not to mention it at all. Processing is a IDE, wrapper and
graphical library that&amp;#39;s essentially Java under the hood (although
there are Processing bindings in many other languages probably the
most well known now is &lt;a href=&#34;https://p5js.org/&#34;&gt;p5.js&lt;/a&gt;). It&amp;#39;s great if you want to do graphical
work or base your class around the libraries that are available to
processing which include ones for web cameras, hardware access,
networking, sound and more but it&amp;#39;s not the same as an IDE or editor
for traditional Java development.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-23&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-23&#34;&gt;
Notes
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-23&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
Just about all of these tools have multiple themes and are fairly
customizable so don&amp;#39;t go by the screenshots above, on the homepages or
what they look like when you first install them.&lt;/p&gt;
&lt;p&gt;
All of the tools I liked installed right out of the box either by
using the package manager or downloading and extracting from an
archive. I can&amp;#39;t say yet if they install as easily on a Mac or Windows
box but since Linux is usually the unloved stepchild of sortware
packaging and distribution my guess is that if anything it&amp;#39;ll be
easier on those platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-24&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-24&#34;&gt;
Conclusions
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-24&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;
I&amp;#39;ll always be an Emacs guy. Org-mode is too useful and I can get IDE
like behavior for pretty much any language I want to work in. In some
cases like Clojure, I haven&amp;#39;t seen an IDE that can match Emacs and
Cider, it&amp;#39;s premier Clojure development setup. I also haven&amp;#39;t a Git
interface nearly as slick and powerful as &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt; which works under
Emacs.&lt;/p&gt;
&lt;p&gt;
For my teachers though, I&amp;#39;ll probably start with Geany or VSCode,
switch to Emacs for myself at some point in the program and make sure
to spend time on the command line along the way.&lt;/p&gt;
&lt;p&gt;
If I missed any editors or IDEs or have something to add on one of the
ones I mentioned, please share in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How I use Github Classroom</title>
      <link>https://cestlaz.github.io/post/github-classroom/</link>
      <pubDate>Sun, 17 Feb 2019 16:42:48 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-classroom/</guid>
      <description>&lt;p&gt;
It&amp;#39;s been an amazingly unproductive weekend. Mostly because I&amp;#39;ve been
sick with the flu. It sucks but since the rest of the family&amp;#39;s away
anway at least I&amp;#39;m not making everyone miserable.&lt;/p&gt;
&lt;p&gt;
I did manage to stage my next couple of classes and figured that
writing this post wouldn&amp;#39;t take too much energy since it&amp;#39;s mostly a
video.&lt;/p&gt;
&lt;p&gt;
Earlier, I talked about using &lt;a href=&#34;https://cestlaz.github.io/post/github-classroom-travis/&#34;&gt;GitHub and TravicCI&lt;/a&gt; and this time around
I show how I use GitHub classroom to set up, disseminate, and collect
assignments.&lt;/p&gt;
&lt;p&gt;
Here are the important links you&amp;#39;ll need to set things up yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To register an organization (so that you can use private repos for
free): &lt;a href=&#34;https://education.github.com/discount_requests/new&#34;&gt;https://education.github.com/discount_requests/new&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The main GitHub education page with lots of good stuff and links: &lt;a href=&#34;https://education.github.com/&#34;&gt;https://education.github.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub Classroom: &lt;a href=&#34;https://classroom.github.com/&#34;&gt;https://classroom.github.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub Classroom Assistant: &lt;a href=&#34;https://classroom.github.com/assistant&#34;&gt;https://classroom.github.com/assistant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The video goes through the entire process but doesn&amp;#39;t really much into
grading. For grading I usually do something like the following:&lt;/p&gt;
&lt;p&gt;
First I make a file named &lt;strong&gt;repos&lt;/strong&gt; with the names of all the submitted
repos:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd THEDIRECTORYWITHALLTHEREPOS
ls &amp;gt; repos&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Then I&amp;#39;ll use a script that looks something like this:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;cat repos&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      cd /tmp/235-assignment-02-02-16-2019-07-25-00/$i
      NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** Name: &amp;#34;&lt;/span&gt; Readme.org | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/** Name: //g&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
      echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;================= &lt;/span&gt;$NAME&lt;span style=&#34;color:#e6db74&#34;&gt; ====================&amp;#34;&lt;/span&gt;
      make test
      ./test -s
      echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n------------------------------------\n\n&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt; &amp;gt; report&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
First I &lt;code&gt;cd&lt;/code&gt; into the repo. Each repo has a file named &lt;strong&gt;Readme.org&lt;/strong&gt; 
which has a line that looks like this &lt;code&gt;** Name: Students Name&lt;/code&gt;. The
line that starts &lt;strong&gt;NAME=&lt;/strong&gt; pulls out the student&amp;#39;s name. It then echos a
separator line with the sutdent&amp;#39;s name in it, builds and runs the
tests. &lt;code&gt;./test -s&lt;/code&gt; runs the doctest tests. The &lt;code&gt;-s&lt;/code&gt; says to print out
the passing tests as well as the failing ones. The output of the whole
loop is saved to a file named report.&lt;/p&gt;
&lt;p&gt;
From there I can look at the report and get a quick overview of who&amp;#39;s
submissions worked and who&amp;#39;s didn&amp;#39;t. I still have to look at the
students actual code but I usually navigate all of that in Emacs.&lt;/p&gt;
&lt;p&gt;
Finally, for grades, I just use a Google Spreadsheet with a script I
wronte to email grades to the students -
&lt;a href=&#34;https://cestlaz.github.io/posts/google-sheets/.&#34;&gt;https://cestlaz.github.io/posts/google-sheets/.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
You can easily adapt this processto use other languages wether you use Unit
Tests or not. &lt;/p&gt;
&lt;p&gt;
So, GitHub classroom - check it out. &lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/2PuXdb8OLYo&#34;&gt;https://www.youtube.com/embed/2PuXdb8OLYo&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub Helps Me Help Students</title>
      <link>https://cestlaz.github.io/post/github-helps-me-help-students/</link>
      <pubDate>Mon, 11 Feb 2019 18:55:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-helps-me-help-students/</guid>
      <description>&lt;p&gt;
Earlier today I was reminded why I love GitHub in support of my
classes. One of my students posted a question about our current
lab. They posted a synopsis of the problem along with the error
message.&lt;/p&gt;
&lt;p&gt;
Since we&amp;#39;re all working on GitHub the student&amp;#39;s work was already up
online Since I started using &lt;a href=&#34;https://classroom.github.com&#34;&gt;GitHub Classroom&lt;/a&gt; I was able to quickly
navigate to the repo. This might have been enough but to really in to
the students work I cloned the repo and went into Emacs. Using &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-47-magit/&#34;&gt;Magit&lt;/a&gt;,
Emacs&amp;#39;s Git interface I was quickly able to navigate the project and
also see recent changes or in fact any changes to any of the student&amp;#39;s
project files. I didn&amp;#39;t use it this time but &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-42-git-gutter/&#34;&gt;Git Timemachine&lt;/a&gt; gives an
even slicker way to see the history of changes for a specific file.&lt;/p&gt;
&lt;p&gt;
With these tools it took almost no time to get the lay of the land and
figure out where the student hit the wall. From there I posted a hint to nudge the student in the
right direction.&lt;/p&gt;
&lt;p&gt;
GitHub classroom makes the student repo management easy but the other
tools were just plain old Git and Emacs. &lt;/p&gt;
&lt;p&gt;
Of course, for this to work, students have to play their part. If a
student doesn&amp;#39;t push their changes regularly up to GitHub I won&amp;#39;t be
able to see the diffs and help. When they do, it&amp;#39;s a real world tool
that once again has proven to be great at supporting education.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github Classroom and Travis CI</title>
      <link>https://cestlaz.github.io/post/github-classroom-travis/</link>
      <pubDate>Sat, 02 Feb 2019 09:44:29 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-classroom-travis/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been using GitHub with my classes since GitHub&amp;#39;s early days. Over
time I&amp;#39;ve gotten my &lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4/&#34;&gt;workflows down&lt;/a&gt;. I use a combination of shell
scripts - many just written on the fly, GitHub organizations, and some
naming conventions and protocols that have served me well. &lt;/p&gt;
&lt;p&gt;
A few years ago, the &lt;a href=&#34;https://education.github.com/&#34;&gt;GitHub Education team&lt;/a&gt; started &lt;a href=&#34;https://classroom.github.com/&#34;&gt;GitHub
Classroom&lt;/a&gt;. I looked at it at the time. It was pretty cool but I had my
workflow so I didn&amp;#39;t adopt it. I still very much liked GitHub, the
education team, and the product so I kept tabs on the project as time
passed. &lt;/p&gt;
&lt;p&gt;
This semester I decided to go all in on GitHub Classroom. Why? A
combination of my changing my workflow and part due to the GitHub
education tools and community. At it&amp;#39;s core, GitHub classroom does two
things well:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Assignment creation and distribution&lt;/li&gt;
&lt;li&gt;Repo management and organization.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I thought I&amp;#39;d do a couple of posts and videos to show how I&amp;#39;m using
everything. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the first one.&lt;/p&gt;
&lt;p&gt;
Interestingly enough I&amp;#39;m not going to talk at all about GitHub
classroom for the remainder of this post. Instead I&amp;#39;m going to talk
about TravisCI (&lt;a href=&#34;https://travis-ci.com/&#34;&gt;&lt;a href=&#34;https://travis-ci.com/&#34;&gt;https://travis-ci.com/&lt;/a&gt;&lt;/a&gt;,
&lt;a href=&#34;https://travis-ci.org/&#34;&gt;https://travis-ci.org/&lt;/a&gt;). Travis is a platform for continuous
intergration. The idea is pretty simple. After setting things up,
whenever you push code to a repo that Travis is watching, Travis
starts a container for your repo and runs one or more scripts against
the repo. This usually means tests. It turns out that this can be a
useful sanity check for students. It&amp;#39;s true that they can run tests on
their assignments before submitting them but this way it&amp;#39;s done
automatically and after they submit. They can be sure that what
they&amp;#39;ve submitted actually works.&lt;/p&gt;
&lt;p&gt;
First you have to link your GitHub accoutn with Travis. To do this,
just go to travis-ci.org and log in using GitHub. You can then set a
bunch of options including which repos to run Travis on. The interface
at travis-ci.com looks similar but a bit nicer. The .org site is free
for open source or public repos  (as is the .com site, I think) but
the good people at Travis will give you rights to use private repos
for educational purposes for free. &lt;/p&gt;
&lt;p&gt;
The only other thing you have to do is create a &lt;a href=&#34;https://yaml.org/&#34;&gt;YAML&lt;/a&gt; file named
 &lt;code&gt;.travis.yml&lt;/code&gt; in your repo. Here&amp;#39;s one I&amp;#39;m using to test C++ projecs:&lt;/p&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;language&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cpp&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;compiler&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;clang&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;make test&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;./test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This tells Travis to use the clang compiler (as opposed to, say g++)
and then run &lt;code&gt;make test&lt;/code&gt; and then &lt;code&gt;./test&lt;/code&gt;. If all the tests pass you
get a green check and an email and you&amp;#39;re good to go. If they don&amp;#39;t
you get a red X and also an email. Of course for this particular
configuration to work you need &lt;code&gt;Makefile&lt;/code&gt; and everything else needed
to build the tests in the repo. In my case, I&amp;#39;m using &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt; for tests.&lt;/p&gt;
&lt;p&gt;
Travis has support for a whole bunch of languages including Java,
Python, and JavaScript and all of those have nice testing frameworks
so regardless of what you&amp;#39;re teaching with, Travis could be easily
integrated. &lt;/p&gt;
&lt;p&gt;
In this video I show how I&amp;#39;m using TravisCI and also a simple Python
setup. In the next post I&amp;#39;ll get back to GitHub classroom and how
TravisCI integrates into it.&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/-J8A5oWazvE&#34;&gt;https://www.youtube.com/embed/-J8A5oWazvE&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 56 - Dictionaries</title>
      <link>https://cestlaz.github.io/post/using-emacs-56-dictionaries/</link>
      <pubDate>Mon, 28 Jan 2019 16:58:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-56-dictionaries/</guid>
      <description>&lt;p&gt;
One of the great things about Emacs is that it&amp;#39;s not just for writing
programs. Sure, you can set it up as an IDE for just about every
programming language under the sun but that&amp;#39;s just the tip of the
iceberg. I use Emacs for just about all my text processing. This
includes writing blog posts, reading and writing emails, creating
lesson plans and pretty much anything and everything having to do with
text.&lt;/p&gt;
&lt;p&gt;
Emacs has some nice packages that make it really easy to integrate
dictionary and thesaurus lookups into your work flow.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a short video showing you how to set things up:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Jtgulzjq7hk&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 55 - Irony Completions</title>
      <link>https://cestlaz.github.io/post/using-emacs-55-irony-completions/</link>
      <pubDate>Mon, 21 Jan 2019 08:27:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-55-irony-completions/</guid>
      <description>&lt;p&gt;
Last year I put together a &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-32-cpp/&#34;&gt;post and video&lt;/a&gt; on some basics of Emacs for
C++ development. In the video I didn&amp;#39;t quite get completions fully
working. I also used ggtags in that video but find myself using
&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-33-projectile-jump&#34;&gt;dumb-jump&lt;/a&gt; more frequently.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a quick video showing how to set up &lt;a href=&#34;https://github.com/Sarcasm/irony-mode&#34;&gt;irony-mode&lt;/a&gt; which uses
libclang for completions. It&amp;#39;s pretty slick. Now the only thing I
think I&amp;#39;m missing is header file completions. If you&amp;#39;ve got a good
setup for that, please share.&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GRdZuc1Z4WI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 54 Org Tables</title>
      <link>https://cestlaz.github.io/post/using-emacs-54-org-tables/</link>
      <pubDate>Mon, 14 Jan 2019 11:34:13 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-54-org-tables/</guid>
      <description>&lt;p&gt;
As you know I use Emacs for all sorts of things. In addition to
coding, I use it for email, my schedule, note taking, and much much
more. As part of my job at Hunter, I read and evaluate some of the
Macaulay Honors College applications. I also have to evaluate all the
applicants to my CS honors program. I described how I use Org-mode and
Emacs to help with that &lt;a href=&#34;https://cestlaz-nikola.github.io/posts/using-emacs-44-pdf/&#34;&gt;here&lt;/a&gt;. Processing the Macaulay applications
though is somewhat different. &lt;/p&gt;
&lt;p&gt;
I was given a list of student names and IDs as well as online access
to their applications. If I wasn&amp;#39;t an Emacs user I&amp;#39;d probably dump the
list into a spreadsheet and go from there. It turns out, Org-mode has
a really nice table editor with just the spreadsheet functionality
that I needed. I had the ability to perform basic calculations on the
data while also keeping the power of Emacs for editing purpose.&lt;/p&gt;
&lt;p&gt;
Check out the video to see how it all works. &lt;/p&gt;
&lt;p&gt;
For more information, you can check out this &lt;a href=&#34;https://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html&#34;&gt;tutorial&lt;/a&gt; on Org-mode
table formulas and the Org-mode &lt;a href=&#34;https://orgmode.org/manual/The-Spreadsheet.html#The-Spreadsheet&#34;&gt;documentation.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Enjoy!&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5vGGgfs0q3k&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 53 Emailing Org Agenda</title>
      <link>https://cestlaz.github.io/post/using-emacs-53-emailing-org-agenda/</link>
      <pubDate>Sat, 03 Nov 2018 08:55:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-53-emailing-org-agenda/</guid>
      <description>&lt;p&gt;
I use both org-mode and Google Calendar for scheduling. I like Google
Calendar because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;#39;s pretty universal so I can issue and accept calendar invites.&lt;/li&gt;
&lt;li&gt;It works well with my phone and other mobile devices.&lt;/li&gt;
&lt;li&gt;The rest of my family doesn&amp;#39;t live in Emacs :-(.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I prefer using org-mode beacuse:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Emacs&lt;/li&gt;
&lt;li&gt;I prefer, for the most part, to control my data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I partially sync the two platforms. I&amp;#39;ve already talked about &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-26-gcal/&#34;&gt;syncing
Google Calendar and org-mode&lt;/a&gt;. Right now, I&amp;#39;m just pulling from Google
rather than also pushing up from org-mode because I&amp;#39;m still getting
double entry issues. This means that I have my entire schedule in
Emacs but only part of it in my Google calendar.&lt;/p&gt;
&lt;p&gt;
To help resolve the problem, I do a few things. First, I sync my
orgfiles on all my computers. I used to do this with Dropbox but am
now moving over to &lt;a href=&#34;https://syncthing.net/&#34;&gt;Syncthing&lt;/a&gt;. I also like to set up a &lt;a href=&#34;http://digitalocean.com&#34;&gt;Digital Ocean&lt;/a&gt;
droplet so that I have a single machine that&amp;#39;s always on.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve set things up to have that droplet send me an email with my
agenda. It turns out that org has commands to do things with Emacs
from the command line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;org-batch-agenda&lt;/li&gt;
&lt;li&gt;org-batch-store-agenda-views&lt;/li&gt;
&lt;li&gt;org-batch-agenda-csv &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They can be run from the command line to output a formatted agenda as
a string:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;emacs --batch -l ~/.emacs.d/init.el  -eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(org-batch-agenda &amp;#34;a&amp;#34; org-agenda-span 14)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
or as csv:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;emacs --batch -l ~/.emacs.d/init.el  -eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(org-batch-agenda-csv &amp;#34;a&amp;#34; org-agenda-span 14)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gcal&lt;/td&gt;
&lt;td&gt;Stuy recruiting&lt;/td&gt;
&lt;td&gt;2018-10-29&lt;/td&gt;
&lt;td&gt;15:40-16:40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gcal&lt;/td&gt;
&lt;td&gt;RBS Workshop 3&lt;/td&gt;
&lt;td&gt;2018-10-29&lt;/td&gt;
&lt;td&gt;17:30-21:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gcal&lt;/td&gt;
&lt;td&gt;FDR High School&lt;/td&gt;
&lt;td&gt;2018-10-30&lt;/td&gt;
&lt;td&gt;7:45- 8:45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;soe-cal&lt;/td&gt;
&lt;td&gt;ACERT -  LUNCH  SEMINAR&lt;/td&gt;
&lt;td&gt;2018-10-30&lt;/td&gt;
&lt;td&gt;12:00-14:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gcal&lt;/td&gt;
&lt;td&gt;Maxim Vengerov Carnegie Hall&lt;/td&gt;
&lt;td&gt;2018-10-30&lt;/td&gt;
&lt;td&gt;20:00-21:00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Note that you have to specify the location of the startup file
(~/emacs.d/init.e;) since when you run emacs in batch mode it won&amp;#39;t
load your normal config by default&lt;/p&gt;
&lt;p&gt;
In the video you&amp;#39;ll see how I use my DigitalOcean dropplet, set up
with the Postfix mail server and Syncthing to send me an email with my
agenda every morning.&lt;/p&gt;
&lt;p&gt;
The command I actually use to send the email is:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;/usr/bin/emacs --batch -l ~/.emacs  -eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(org-batch-agenda &amp;#34;a&amp;#34; org-agenda-span 14)&amp;#39;&lt;/span&gt; 2&amp;gt;/dev/null | mail -s &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mike&amp;#39;s Agenda for &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\%A \%D&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; zamansky@gmail.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which I put in a crontab entry to get it to run every day.&lt;/p&gt;
&lt;p&gt;
If people want, I can make a runthrough of setting up the actual
dropplet and SyncThing.&lt;/p&gt;
&lt;p&gt;
Enjoy!&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wus8R1TWYZ4&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 52 - Eyebrowse</title>
      <link>https://cestlaz.github.io/post/using-emacs-52-eyebrowse/</link>
      <pubDate>Tue, 30 Oct 2018 14:35:15 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-52-eyebrowse/</guid>
      <description>&lt;p&gt;
I was originally going to do a video on how I set things up so that I
get an email every morning with my org-mode agenda but that&amp;#39;s going to
be something of an ordeal. I have to create a droploet on Digital
Ocean, set up SyncThing and a mail server and lots of other things.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll get to that video at some point but in the meantime I saw &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/9rvboq/what_emacs_packages_have_upped_your_game_recently/&#34;&gt;this
thread&lt;/a&gt; on the Emacs subreddit.&lt;/p&gt;
&lt;p&gt;
It asked about packages people used to &amp;#34;up their Emacs game.&amp;#34; I&amp;#39;ve
done videos on some of the packages mentioned and there were some
packages that I&amp;#39;d never heard of that I now have to check out. &lt;/p&gt;
&lt;p&gt;
One of the packages, &lt;a href=&#34;https://github.com/wasamasa/eyebrowse&#34;&gt;eyebrowse&lt;/a&gt; was one that I&amp;#39;ve been meaning to play
with for a while. Eyebrowse allows you to easily keep track of
window/buffer configurations. It&amp;#39;s pretty easy and pretty cool.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a quick video overview:&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/s6IXj0bS7L8&#34;&gt;https://www.youtube.com/embed/s6IXj0bS7L8&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>