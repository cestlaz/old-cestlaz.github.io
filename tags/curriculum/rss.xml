<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>curriculum on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/curriculum/</link>
    <description>C&#39;est la Z (curriculum)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Mar 2022 12:17:11 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/curriculum/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Truth Tables and Logic Gates - where to teach them.</title>
      <link>https://cestlaz.github.io/post/truth-tables/</link>
      <pubDate>Mon, 14 Mar 2022 12:17:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/truth-tables/</guid>
      <description>&lt;p&gt;
A question was raised on Facebook last week asking about teaching
truth tables and logic gates in an intro class in programming
Python. The teacher who posed the question certainly appreciates the
value  of these topics but was wondering both how best to motivate the
topics and if they were really appropriate in an intro programming
course as opposed to, say, and intro computer architecture or
electronics course or even a more general intro CS survey course.&lt;/p&gt;
&lt;p&gt;
This came up for me when I started at Hunter. One of my classes was
and is a CS0. It was mostly an intro to programming in Python with a
touch of C++ at the end but it also included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binary/hex/ASCII&lt;/li&gt;
&lt;li&gt;an intro to assembly&lt;/li&gt;
&lt;li&gt;Truth tables and logic gates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These topics were put in the class to prepare students for Hunters
Systems/Architecture classes in the CS sequence. Classes they wouldn&amp;#39;t
see for a year or more.&lt;/p&gt;
&lt;p&gt;
I worked the binary and hex into a small project and ASCII was already
covered in CS1 and I had my CS0 kids in CS1 so I left it for
then. Assembly? I also left that for CS1 and talked a bit about it
when we looked at the debugger and C++. I felt that was a much more
appropriate platform rather than a random couple of lessons out of
nowhere on assembly. In CS1, we were able to look at the assembly code
generated by a simple C++ program  and it actually meant
something.&lt;/p&gt;
&lt;p&gt;
Truth tables and logic? I just left them out.&lt;/p&gt;
&lt;p&gt;
I was in a similar situation as my friend who asked the question and
even though I couldn&amp;#39;t make an official change in the syllabus, I made
the decision to leave things out anyway.&lt;/p&gt;
&lt;p&gt;
Why did I do this?&lt;/p&gt;
&lt;p&gt;
Because you have to pay attention to the entire sequence when deciding
what topics to put in which course.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s talk about truth tables. Truth tables aren&amp;#39;t really a topic but
rather a table to keep track of truth values from boolean
expressions. It&amp;#39;s a useful tool and pretty much the same idea as
charting variables for tracing code and charting values for graphs -
something they&amp;#39;ve likely done in math, science, and even history
classes in high school. They&amp;#39;ve also seen truth tables in high
school. I can&amp;#39;t speak for localities out side of New York State but
basic logic and truth tables are covered and just about all my
students went to high school in New York state.&lt;/p&gt;
&lt;p&gt;
My kids need basic logic - &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;not&lt;/code&gt; mostly for use in
conditionals. They already know it and we review as needed but truth
tables just aren&amp;#39;t necessary for my kids. There&amp;#39;s another argument
that I&amp;#39;ve been given by my department for teaching truth tables again
anyway but I&amp;#39;ll get to that and refute it later.&lt;/p&gt;
&lt;p&gt;
Logic gates, the other topic I just blow off. Logic gates make sense
to teach in a computer architecture course, a systems course, any
couse where you&amp;#39;re doing low level stuff and even a general CS course
where you want to demystify what&amp;#39;s going on under the hood. In those
contexts you can do some interesting and I&amp;#39;d say exciting things. You
can show a half adder or full adder circuit to show the basics of how
computers can do math. You can also show a flip-flip - rudimentary
memory and other rudimentary circuits. This can be great in a
&amp;#34;demystify&amp;#34; course and certainly in a course that&amp;#39;s going to do a deep
dive into the low level but in an intro programming course? Not so
much.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s just something out of place. You cover it for a couple of lessons
and then the kids forget it. One could make the case that early
exposure, even if it&amp;#39;s cursory, helps students understand harder
things later on but I don&amp;#39;t buy that in this case. I buy that in the
case of recursion. There, I think early exposure is helpful. That&amp;#39;s
because recursion involves some deep thinking. In this case, the logic
gates material covered isn&amp;#39;t really deep. It&amp;#39;s basically just
present. It is what it is - there&amp;#39;s nothing deep to think about, at
least on in the intro class.&lt;/p&gt;
&lt;p&gt;
In a way, it reminded me of something I noticed years ago in Algebra 2
and Trigonometry.  Towards the end, apropos of nothing, there&amp;#39;s a unit
on the circle. It doesn&amp;#39;t really fit in the course and it doesn&amp;#39;t
really introduce anything new that&amp;#39;s meaningful but it&amp;#39;s there
nonetheless. Kids have to know it because they have to know it. Most
of the course, right or wrong you can reasonably justify - the
identities and algebra will help in calculus, for instance, but the
circle unit is just there.&lt;/p&gt;
&lt;p&gt;
Why?&lt;/p&gt;
&lt;p&gt;
The best I could figure is that it was placed in back in the day. Back
then, Alg2/Trig was a terminal course - it was the last math class
that most students would take. This was before the precalc let alone
calculus craze. Someone or some people felt that since this was the
last chance, students should at least see some circle stuff so it got
added in. Then, it just stayed there. Later, when Alg2 was no longer
the last math course, the topic made less sense. It also became more
clear that the circle unit didn&amp;#39;t really prepare students for anything
to come yet it remained.&lt;/p&gt;
&lt;p&gt;
This is why you have to look at the big picture. Not just an individual
class but what came before and what comes after. &lt;/p&gt;
&lt;p&gt;
Back to logic gates.&lt;/p&gt;
&lt;p&gt;
The big argument I heard from the CS department was that they needed
that for the Systems/Architecture sequence which is a 2 class, 6
credit part of the CS major.&lt;/p&gt;
&lt;p&gt;
The conversation would go like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Me: Should we really be teaching logic gates in CS0?&lt;/p&gt;
&lt;p&gt;
Them: Yes, it&amp;#39;s essential.&lt;/p&gt;
&lt;p&gt;
Me: Why?&lt;/p&gt;
&lt;p&gt;
Them: They need to know it in CS160 (the first of the sys classes).&lt;/p&gt;
&lt;p&gt;
Me: So do they?&lt;/p&gt;
&lt;p&gt;
Them: No, we always have to reteach it.&lt;/p&gt;
&lt;p&gt;
Me: So if you&amp;#39;re reteaching it anyway, what&amp;#39;s the point?&lt;/p&gt;
&lt;p&gt;
Them: …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I teach around 20 to 30 students each year in my CS0. Given that we
have over 1,000 CS majors overall, I teach a tiny fraction. My class
is also an honors section.&lt;/p&gt;
&lt;p&gt;
All the other CS0 students &lt;strong&gt;are&lt;/strong&gt; taught logic gates and truth tables
yet the CS160 professors still have to reteach the material in
CS160. What&amp;#39;s the point? Time could be much better spent in CS0 diving
more deeply into material more relevant to the CS0 experience.&lt;/p&gt;
&lt;p&gt;
So, I just didn&amp;#39;t teach those topics.&lt;/p&gt;
&lt;p&gt;
I felt this was the right move but it could also have been really bad
so i tracked my students. Each year, I surveyed them as to their CS160
experience. How&amp;#39;d they do in the class? Were logic gates taught
assuming zero background? Was it hard or harder for them? Etc.&lt;/p&gt;
&lt;p&gt;
Turns out, I made the right call. Every year my kids did fine (actually, much
better than fine). Every year the teachers retaught logic gates in
CS160 from scratch and every year my students felt they missed nothing
by not covering it in CS0.&lt;/p&gt;
&lt;p&gt;
I started writing this post because a friend asked about motivating
logic gates in an intro programming class. Sorry to say, I didn&amp;#39;t
answer that question at all but it got me further thinking about
pipeline and sequence and how we frequently don&amp;#39;t look at our students
education as a whole. Neither as a whole in our subject area or, even
more importantly as w real whole - a whole student and whole person.&lt;/p&gt;
&lt;p&gt;
We really should.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do you need to know assembly to be a computer scientist?</title>
      <link>https://cestlaz.github.io/post/assembly/</link>
      <pubDate>Wed, 19 Jan 2022 06:47:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/assembly/</guid>
      <description>&lt;p&gt;
Another recent discussion online asked &amp;#34;do you need to know assembly
language to be a computer scientist?&amp;#34;&lt;/p&gt;
&lt;p&gt;
Sides quickly formed. On one side, it was a strict requirement. Some
going so far as saying you &lt;strong&gt;had&lt;/strong&gt; to start with it or at worst a
language like C. On the other side you had people claiming that it&amp;#39;s
wholly unnecessary for most CS graduates like many of the classes we
require of a CS major (I&amp;#39;m looking at you Calc II and beyond).&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t dispute that many people with CS degrees have great tech
careers and never program in assembly. Further, the idea that a low
level assembly programmer describes what a &amp;#34;computer scientist looks
like&amp;#34; or &amp;#34;should look like&amp;#34; is pretty off base.&lt;/p&gt;
&lt;p&gt;
On the other hand, I&amp;#39;d argue that a well educated computer scientist
should have some knowledge of low level concepts which can probably
best be explored through some exposure to assembly language.&lt;/p&gt;
&lt;p&gt;
To start, what is a computer scientist? As a field we still haven&amp;#39;t
worked that one out. Certainly, people employed as professors in
computer science departments are pretty much, by definition, computer
scientists but that&amp;#39;s the minority of CS majors.&lt;/p&gt;
&lt;p&gt;
To me, and this isn&amp;#39;t really a great formal definition, a person who
employs the creative and problem solving techniques associated with
computer science in their day to day can certainly call themselves a
computer scientist.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a wishy washy definition, I know but to me, it works. Someone
employed as a software engineer &lt;strong&gt;can&lt;/strong&gt; be a computer scientist or they
might not be. It depends on their job and how they approach it. Say
said SE is given screen descriptions, layouts and what to do when
events happen and they write code to implement this, they&amp;#39;re not being
a computer scientist. Likewise, if they implement an algorithm
specifically given to them for a task. On the other hand, if the same
person designs the interface making creative decisions involving
accessibility and usability or solves a problem using or designing an
algorithm then implementing one, then they would be, in my view acting
as a computer scientist.&lt;/p&gt;
&lt;p&gt;
Of course, in the general sense a SE could be a real software
engineer, software architect, or many more things as well.&lt;/p&gt;
&lt;p&gt;
So, does a computer scientist &lt;strong&gt;need&lt;/strong&gt; to actively know assembly?
No. That said, do they benefit from knowing something about it? I&amp;#39;d
say yes.&lt;/p&gt;
&lt;p&gt;
Years ago, I was watching a special with Itzhak Perlman, arguably the
greatest violinist of a generation and one of my favorites. He was
talking to and playing with a bunch of &lt;a href=&#34;https://en.wikipedia.org/wiki/Klezmer&#34;&gt;klezmer&lt;/a&gt; musucians. Or rather, I
should say trying to play with. Klezmer is something of a Jewish jazz
with a lot of improvisation. Perlman understood this, could
meaningfully converse about it with the other musucians but he had the
hardest time trying to keep up with them. Nobody could seriously say
that Izhak Perlman wasn&amp;#39;t and isn&amp;#39;t a brilliant musician and artist
but he really couldn&amp;#39;t play improvisational jazz. His training and art
are just in a different corner of the music world. That said, he was
certainly well versed in it. He knew jazz even though he didn&amp;#39;t
perform it.&lt;/p&gt;
&lt;p&gt;
I also saw this at a Bobby Mcferrin concert. He was performing with a
small string orchestra. I think maybe it was Gidon Kremer&amp;#39;s Kremerate
Baltica but I don&amp;#39;t remember. At one point he was calling out the
individual orchestra members to do some improv. It did not go
well. Again, these were all clearly master artists and they certainly
knew and were comfortable with Jazz, just not performing it on the
fly.&lt;/p&gt;
&lt;p&gt;
In case you really want to see what I&amp;#39;m talking about, I&amp;#39;ll give one
more example:&lt;/p&gt;


&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6mRT61rRSGc?t=37&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/iframe&gt;
&lt;p&gt;
Having some knowledge of assembly, or more specifically, how low level
things work is what I call a &amp;#34;latin&amp;#34; of CS. Understanding things like
memory or how a processor works help an individual understand buffer
overflows or why data types matter, why floating point calculations
are innacurate or why a hash table has to be sparse. They may never
program in assembly but some knowledge will make them a stronger
computer scientist. I would say the same for my other CS latin -
theory. They might not use it day to day but it will help shape their
decisions and make them a stronger software engineer or whatever.&lt;/p&gt;
&lt;p&gt;
So, can you be a gainfully employed tech person and never have seen
anything low level? Of course. Can you do computer science stuff and
say the same? Sure. But a well educated, well rounded computer
scientist will have had some exposure to low level concepts and have
some base level understanding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What is a Syllabus and why does it matter?</title>
      <link>https://cestlaz.github.io/post/whats-a-syllabus/</link>
      <pubDate>Fri, 14 Jan 2022 07:14:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/whats-a-syllabus/</guid>
      <description>&lt;p&gt;
Over in the Facebook CS Ed groups there was a discussion of the
forthcoming code.org APCS-A curriculum. As far as I can tell, the
curriculum isn&amp;#39;t actually available yet so I can&amp;#39;t really comment on it
but the discussion started with a concern about some of the
announcement. It made me think of what a curriculum was when I started
teaching, what it is now, and the ramifications of the change.&lt;/p&gt;
&lt;p&gt;
Back when I started, I might get a math curriculum, a section of which
might have looked like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Day&lt;/th&gt;
&lt;th&gt;Topic&lt;/th&gt;
&lt;th&gt;Chapters&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5,6&lt;/td&gt;
&lt;td&gt;solving simple linear equations&lt;/td&gt;
&lt;td&gt;3.1 - 3.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;solving more complex linear equations&lt;/td&gt;
&lt;td&gt;3.5, 3.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8-10&lt;/td&gt;
&lt;td&gt;graphing linear equations&lt;/td&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
etc.&lt;/p&gt;
&lt;p&gt;
That was it. As a teacher, you knew the topic. If you had to get an
idea as to the depth of which to cover you looked at the text and
other resources you had in school and consulted with your
colleagues. You knew yourself, your school and your students and you designed
lessons to suit.&lt;/p&gt;
&lt;p&gt;
This is a far cry from what you&amp;#39;ll see today. Going back to the
forthcoming code.org apcs-a curriculum.  &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the blurb that code.org provides:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CSA curricula have traditionally been focused on the building blocks
required to design solutions to problems through programming. Creating
this new curriculum with equity in mind means reimagining the
structure and pedagogy to excite and inspire students from
underrepresented racial and ethnic groups and young women while
teaching the technical building blocks and preparing students for the
AP® exam. Code.org’s CSA curriculum:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incorporates culturally responsive and equitable teaching strategies
and frameworks by considering cultural references and learning styles
throughout the curriculum — from the vocabulary, to the visuals, to
the sequence of concepts taught.&lt;/li&gt;
&lt;li&gt;Acknowledges diversity of experiences and interests. Students
investigate real-world problems during class activities and make
connections to their own work. Projects are carefully designed to be
instructive yet open-ended, enabling students to demonstrate mastery
of concepts and engage in their passions without making assumptions
about their cultural background or life experiences.&lt;/li&gt;
&lt;li&gt;Brings to life a “Software Engineering for All” narrative. This
narrative helps students envision themselves as software engineers,
and the curriculum uses videos featuring presenters from different
backgrounds who work in technology to help students visualize
opportunities for their own futures.&lt;/li&gt;
&lt;li&gt;Helps students develop and model valuable, real-world career
skills. In addition to skills like tracing code segments and
documenting code, Code.org’s approach to CSA incorporates
collaboration and career skills that go beyond the AP® CSA course
requirements. For example, our curriculum includes a student-friendly
code review tool, which is a common quality assurance practice in the
technology industry.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There&amp;#39;s nothing inherently wrong with any of this but it is worth
noting that the APCS-A class is indeed a course concerned with &amp;#34;building blocks
required to design solutions to problems through programming.&amp;#34; It is
based on a college CS1 class which is all about programming to solve
problems. Like it or not, that&amp;#39;s the course.&lt;/p&gt;
&lt;p&gt;
Now, having a culturally responsive course etc. etc. is all good and I
guess that since APCS-A is usually implemented a full year course to
cover a half year of college material there should, in theory, be room
for all the additions but that&amp;#39;s not really here nor there.&lt;/p&gt;
&lt;p&gt;
The thing is, APCS-A is supposed to be about programming. A well
taught APCS-A will be culturally responsive etc. but that&amp;#39;s the
implementation. Unless something changed, that&amp;#39;s not actually in the
course as defined by the college board or the college classes on which
it&amp;#39;s based.&lt;/p&gt;
&lt;p&gt;
This says to me that when code.org publishes its curriculum, it will
most likely resemble the products pushed by most modern curriculum
providers - really not just a curriculum but a collection of very
detailed units and lessons.&lt;/p&gt;
&lt;p&gt;
Now, I do think that some of the things mentioned in the
code.org blurb like collaboration, software engineering, and other
topics like ethical ramifications &lt;strong&gt;should&lt;/strong&gt; be in curricula but even
so, the exact lessons should be teacher designed and tuned to their
school and students. &lt;/p&gt;
&lt;p&gt;
Again, nothing wrong with any of this. It can be a great and valuable resource,
particularly for an inexperienced teacher.&lt;/p&gt;
&lt;p&gt;
But then, there is something wrong overall and it&amp;#39;s with the direction
those with influence are taking as a profession. &lt;/p&gt;
&lt;p&gt;
Teachers are less and less expected as much to know their subjects, their
students, and how to teach but rather to follow the script. This
approach might get those students past the standardized exam but in
the long run it&amp;#39;s not giving students what they need nor deserve.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen this every year in my undergraduate CS classes. Since APCS
Principles was launched many of my students have come in having taken
the classed and &amp;#34;passed&amp;#34; the exam. Truth be told, the majority of them
come in basically knowing nothing. This wouldn&amp;#39;t be a problem if they
didn&amp;#39;t come in thinking they knew quite a bit.  You can contrast that
with the students that come in having taken APCS-A. These students, by
and large, do indeed have a reasonably solid introduction to
programming under their belts. Further investigation usually reveals
what &amp;#34;curriculum&amp;#34; they learned under and the CS background of the
teacher.&lt;/p&gt;
&lt;p&gt;
Some will argue that we need the crutch of the scripted lesson in
order to get started. Fair enough. I don&amp;#39;t disagree with this basic
premise but the truth is that history seems to indicate that we&amp;#39;re not
going to get beyond this. My favorite example is the old Cisco
networking class. Some teachers knew legit networks and decided to
teach the class - that was great. Some didn&amp;#39;t and just had their
students use the Cisco provided computer based modules which, in my
opinion, weren&amp;#39;t so great. Of those that didn&amp;#39;t start with a
networking background, just about all I&amp;#39;ve met never moved beyond
where they started in networking knowledge.&lt;/p&gt;
&lt;p&gt;
I fear we&amp;#39;re already seeing that in CS. School supervisors don&amp;#39;t know
any better so they see that they can check off the computer science
box. Many teachers probably don&amp;#39;t know better because their short term
training is focusing on how easy CS is and how you don&amp;#39;t have to learn
anything to teach it rather than the truth - it&amp;#39;s just like anything
else, it takes time and effort to really master. &lt;/p&gt;
&lt;p&gt;
I already know that my view isn&amp;#39;t the popular one but I&amp;#39;ll say it over
and over until I retire - CS teachers really do need to know CS and
providers that provide short form &amp;#34;training&amp;#34; and scripted content,
unless they push with even more vigor, the next steps, are ultimately
going leave us in no better shape than we started. Kids in well to do
schools with administrations that can afford to bring in knowledgeable
experts and the gap will widen with the poorest getting the low
end scripted curricula.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching non required topics - the command line</title>
      <link>https://cestlaz.github.io/post/non-required-topics/</link>
      <pubDate>Fri, 08 Oct 2021 08:56:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/non-required-topics/</guid>
      <description>&lt;p&gt;
The other day I saw Allen Holub lamenting on how students don&amp;#39;t learn
the command line.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;All my students this semester have gone through at least a year of programming classes, and some of them do not know how to do even basic stuff on the command-line. This strikes me as a huge flaw in the curriculum. Maybe the first CS class should be How Devs Use Computers 101.&lt;/p&gt;&amp;mdash; Allen Holub (@allenholub) &lt;a href=&#34;https://twitter.com/allenholub/status/1444393138492116992?ref_src=twsrc%5Etfw&#34;&gt;October 2, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
This reminded  me of the recent article and
discussion on how students &lt;a href=&#34;https://www.pcgamer.com/students-dont-know-what-files-and-folders-are-professors-say/&#34;&gt;don&amp;#39;t know what files and folders are&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Neither of these are surprising. Back in the day, computer science
classes were populated with self selecting stereotypes and in order to
get anything done you had to be familiar with your tools.&lt;/p&gt;
&lt;p&gt;
I wrote about this &lt;a href=&#34;https://cestlaz.github.io/posts/2015-01-15-kids-know-nuttin/&#34;&gt;years ago&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Nowadays, CS is trying to be more open and inviting and with more
modern tools you no longer need to know about files
and folders let alone a Unix command line.  Back in the day, even if
you used a program like Microsoft Word you&amp;#39;d have some idea of a file
folder structure but now with the cloud and tools like Google Docs you
just search for your documents.&lt;/p&gt;
&lt;p&gt;
The issue is that many CS teachers want students to know the command
line but it&amp;#39;s not part of the formal curriculum. What&amp;#39;s more, the
value of command line expertise is debatable and pretty hard to assess.&lt;/p&gt;
&lt;p&gt;
Personally, I&amp;#39;m a big command line wonk. I think you gain tremendous
power and flexibility if you use it but I also recognize that there
are many career tech professionals, particularly these days that will
never use it and arguably won&amp;#39;t really benefit from it. They live in
their IDE that supports their language. It integrates with their
build, test, and debugging tools and their company&amp;#39;s commuication
platform is also right there on the side. Now, many people in tech
could still benefit from command line expertise but try convincing a
first or second year undergrad where they not only don&amp;#39;t see added
value but also see that a large chunk of the text world also doesn&amp;#39;t
see the value.&lt;/p&gt;
&lt;p&gt;
So, if you do believe that the command line is important and want
students to learn it, how do you do it?&lt;/p&gt;
&lt;p&gt;
There are plenty of tutorials, videos and other learning material
including clever games like &lt;a href=&#34;https://gitlab.com/slackermedia/bashcrawl&#34;&gt;bashcrawl&lt;/a&gt; and I guess you could &amp;#34;force&amp;#34;
students to use the command line while in the classroom but nothing&amp;#39;s
going to stop them from using the file browser tool or an installed
IDE. Even if you severely limit the tools in lab machines, you have no
control over what they use at home and while the command line might be
more powerful, it&amp;#39;s not nearly as learner friendly.&lt;/p&gt;
&lt;p&gt;
Then there&amp;#39;s assessment. How do you do that? You could give
memorization type questions on exams but that&amp;#39;s a really bad
idea. Since the command line is process not product, this is a tough
nut to crack.&lt;/p&gt;
&lt;p&gt;
To be honest, I&amp;#39;ve struggled with this year after year and don&amp;#39;t have
a great solution. I try to encourage the command line and model how it
can be useful as much as I can but I know I&amp;#39;m only reaching a minority
of my students. In the end, I don&amp;#39;t really care if any of them
ultimately become hardcore CLI users but I really do want all of them
to gain enough exposure so that they can make an informed decision as
to its value and then make up their own minds.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quarter Century Courses</title>
      <link>https://cestlaz.github.io/post/quarter-century-courses/</link>
      <pubDate>Tue, 15 Sep 2020 07:09:25 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/quarter-century-courses/</guid>
      <description>&lt;p&gt;
I was talking in our Curriculum Development class last week about the
courses I&amp;#39;ve created over the years. From the first computer graphics
course to the current teacher education courses. JonAlf pointed out
that we missed an &amp;#34;important&amp;#34; occasion last spring - the twenty fifth
offering of my computer graphics class at Stuy. I haven&amp;#39;t taught it in
almost 10 years but it&amp;#39;s been running continuously for a quarter
century since it first ran back in the mid 90s. Systems will hit that
mark this year and the intro course I designed a couple of years from
now.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s pretty cool.&lt;/p&gt;
&lt;p&gt;
Looking back at all the courses I&amp;#39;ve designed and taught it&amp;#39;s
interesting to see what I got right, what I got wrong, and why. Some
courses evolved slowly over time. The intro course fits that bill. On
the other hand, Systems had a complete reboot a few years in and has
been reasonably stable since. Interestingly enough Graphics has
probably been the most stable over the years. That&amp;#39;s not to say that
it hasn&amp;#39;t been tweaked here and there but overall, it&amp;#39;s largely the
same now as it was a quarter century ago. It&amp;#39;s been re-evaluated many
times but it just turns out that when I was teaching it I felt that it
was still hitting the right notes and my successor seems to feel
similarly. &lt;/p&gt;
&lt;p&gt;
Funny because graphics was designed with the least thought of all of
my courses. I probably didn&amp;#39;t feel that way at the time, but it&amp;#39;s
true. I had only been teaching around 5 year - a beginner at best and
didn&amp;#39;t really know what I was doing. Even 10 years in you&amp;#39;re still an
advanced beginner in terms of teaching. Most teachers, if they don&amp;#39;t
burn out, hit there stride at 15 - 20 and after that become truly
experienced. &lt;/p&gt;
&lt;p&gt;
I basically created graphics because I was teaching 4 APCS/AB classes
and one geometry and &lt;strong&gt;hated&lt;/strong&gt; grading proofs!!!! I needed to create one
more CS class. I decided on graphics because I knew I could teach it
and thought the students might enjoy it. Systems was created using
similarly deep contemplations. I got better and spent much more time
and effort designing future courses.&lt;/p&gt;
&lt;p&gt;
For the graphics class I had a few choices to make but not many. The
students mostly only knew Pascal from APCS so the language wasn&amp;#39;t an
issue like it would become later on and since we were working on DOS
machines running Turbo Pascal there wasn&amp;#39;t any option to use any fancy
library like OpenGL. The course basically started with the ability to
draw a point and then went though: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lines&lt;/li&gt;
&lt;li&gt;lines in 3D and 3D transformations&lt;/li&gt;
&lt;li&gt;polygons (triangles)&lt;/li&gt;
&lt;li&gt;A motion description language interpreter (stack and tree based
shape hierarchies)&lt;/li&gt;
&lt;li&gt;lighting and shading&lt;/li&gt;
&lt;li&gt;ray tracing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The motion description language piece had an entire unit that was
really an intro to compilers / interpreters. &lt;/p&gt;
&lt;p&gt;
In retrospect, the course really did make sense. It was taught to
second term seniors so it was a terminal course. It combined the
programming, algorithms and data structures from APCS, math they
did in trig, precalc (and baby calc), and a bit of physics. It as also
project based and they wrote programs that made pretty pictures so
that helped stave off senioritis. &lt;/p&gt;
&lt;p&gt;
While the course has remained largely the same, there has been some
evolution. When Systems students started learning C we ended up
supporting that as well in graphics and now the course is more
language agnostic. We also played with topics and unit length. We
spend less time on the compiler piece now and treat that more like a
black box and have at times looked at additional topics like texture
mapping. There&amp;#39;s also been a good deal of work put in to safety nets
and scaffolding. When you have a course where the main assessment is
one BIG semester long project you&amp;#39;ve got to make sure students don&amp;#39;t
end up falling into a hole they can&amp;#39;t climb out of.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not a surprise that the first couple of courses I designed -
graphics and systems were somewhat arbitrary. Graphics turned out to
be a solid design and just needed some fine tuning but Systems got a
complete reboot. Over the years, I learned more about curriculum
design and feel pretty comfortable designing new experiences now. Of
course, this is thirty years into my career as a teacher. &lt;/p&gt;
&lt;p&gt;
Maybe I&amp;#39;ll talk about the design of other classes here in the future
but for now, you can look at one of my first student&amp;#39;s graphics
project and read about it &lt;a href=&#34;https://cestlaz.github.io/post/class-legends/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/Ca_8q3ct6J4&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A new book on teaching CS in K12 - and I wrote a chapter!!</title>
      <link>https://cestlaz.github.io/post/in-a-book/</link>
      <pubDate>Mon, 15 Jun 2020 07:08:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/in-a-book/</guid>
      <description>&lt;p&gt;
I was involved in a really exciting project a few months ago and now
that it&amp;#39;s available, it&amp;#39;s time to tell everyone about it.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a new book on teaching CS in K12 - &lt;a href=&#34;https://www.shuchigrover.com/atozk12cs/&#34;&gt;Computer Science in K12&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
I got an email a few months ago from &lt;a href=&#34;https://twitter.com/shuchig&#34;&gt;Shuchi Grover&lt;/a&gt;. Okay, actually a
DM over twitter. I hadn&amp;#39;t officially met Shuchi although I&amp;#39;m pretty
sure we&amp;#39;ve been at the same table or group in a conference or two but
I did know her from reputation. Shuchi was putting together a book on
teaching CS in K12 and asked if I was interested in contributing a
chapter. I was flattered and honored and since I&amp;#39;ve never written a
chapter in a book I agreed. &lt;/p&gt;
&lt;p&gt;
The book&amp;#39;s made up of 26 chapters with a who&amp;#39;s who of authors
including teachers, professors, researchers, and other CS Ed adjacent
professionals. Check out the full &lt;a href=&#34;https://www.shuchigrover.com/atozk12cs/authors/&#34;&gt;cast of characters&lt;/a&gt;. It was cool to
see many friends involved in the project. It should be a welcome
addition since I don&amp;#39;t think there&amp;#39;s anything like in currently out. &lt;/p&gt;
&lt;p&gt;
I haven&amp;#39;t read the full book - I&amp;#39;m anxiously awaiting my copy to
arrive but with chapter titles ranging from concepts like &amp;#34;Data Structures&amp;#34; and
&amp;#34;Repetition and Recursion&amp;#34; to techniques like &amp;#34;Questions and Inquiry&amp;#34;
and &amp;#34;Guided Exploration Through Unplugged Activities&amp;#34; it should be a
really valuable resource to teachers rather than just a book to use in
a class and keep on the shelf.&lt;/p&gt;
&lt;p&gt;
I worked on the chapter on functions. Once again I was paired with my
long time partner in crime JonAlf Dyrland-Weaver. Jens Monig, whom I
hadn&amp;#39;t known prior also worked on the chapter contributing the drag
and drop material - something that neither JonAlf nor I felt
particularly comfortable with doing ourselves.&lt;/p&gt;
&lt;p&gt;
One weird thing, though it makes sense, was that I never interacted
with most of the other authors - just my chapter co-authors and
Shuchi. Nothing wrong with it but given the number of friends working
on the book and a chance to meet new friends it would have been great
to have something like a meetup at SIGCSE had it happened. On the
other hand, working with Shuchi was terrific. This not only gave me a
chance to contribute to a book but it also got us together and now I
look forward to future collaborations.&lt;/p&gt;
&lt;p&gt;
The other big take away for me was that writing the chapter was
fun. I&amp;#39;ve been playing with the idea of writing a book on teaching CS
but wasn&amp;#39;t sure I&amp;#39;d enjoy the process. Now I think I might and I might
get started in August when I think I&amp;#39;ll finally have some project
time. What do all of you think? &lt;/p&gt;
&lt;p&gt;
For now, check out &lt;a href=&#34;https://www.shuchigrover.com/atozk12cs/&#34;&gt;Computer Science in K-12&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Just released on Amazon in &lt;a href=&#34;https://www.amazon.com/Computer-Science-K-12-Z-Programming/dp/1734662700/&#34;&gt;Color&lt;/a&gt; and &lt;a href=&#34;https://www.amazon.com/dp/1734662719/&#34;&gt;Black and White&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teachers Pay Teachers - part 2 - the report</title>
      <link>https://cestlaz.github.io/post/teachers-pay-teachers-2/</link>
      <pubDate>Mon, 20 Jan 2020 10:03:27 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teachers-pay-teachers-2/</guid>
      <description>&lt;p&gt;
Continuing from yesterday, what about the &lt;a href=&#34;https://www.govtech.com/computing/Report-Most-Teacher-Created-Online-English-Materials-Subpar.html&#34;&gt;article&lt;/a&gt; and &lt;a href=&#34;https://fordhaminstitute.org/national/research/supplemental-curriculum-bazaar&#34;&gt;report&lt;/a&gt; on pay
and free teacher resources.&lt;/p&gt;
&lt;p&gt;
The report looked at three sources - one pay and two free. They came
up with a number of results but I think they largely missed the point.&lt;/p&gt;
&lt;p&gt;
Their bottom line conclusion was that &amp;#39;Overall, reviewers rate most
of the materials as “mediocre” or “probably not worth using”.&amp;#39; They
also didn&amp;#39;t seem to find that neither the for profit or free sources
were universally better.&lt;/p&gt;
&lt;p&gt;
The one thing I can agree with though is that a consistent rating
system for the types of resources found on these sites would be very
helpful.&lt;/p&gt;
&lt;p&gt;
I think the main problem with the report has to do with what they were
looking for. They concluded things like the resources didn&amp;#39;t line up
well with standards, didn&amp;#39;t have good assessments, didn&amp;#39;t address
cultural diversity and a few other &amp;#34;didn&amp;#39;t dos,&amp;#34;  As I said, I think they
missed the point.&lt;/p&gt;
&lt;p&gt;
It felt to me that the reviewers were looking for rote
experiences. Download a lesson and follow the script.&lt;/p&gt;
&lt;p&gt;
In spite of what reformers would have you think, that isn&amp;#39;t
teaching. A teacher new to a class might start with a well worked out
curriculum and largely follow it verbatim but as they develop their
chops they&amp;#39;ll want the curriculum and all related materials to become
their own.&lt;/p&gt;
&lt;p&gt;
A downloaded resource, taken as is, will likely not address a specific
classes cultural diversity, at least not more than in the general
sense because it was designed for the authors class and that&amp;#39;s a good
thing. It&amp;#39;s up to the person doing the downloading to take the
resource and then adapt it for their students in their situation. This
is why most of the items that the report considers bad to me are both
inevitable and fine. There is no universal lesson that you can cut and
paste to all schools. To expect it is rubbish.&lt;/p&gt;
&lt;p&gt;
On the CS side, there&amp;#39;s a good amount of sharing of materials as well
as providers well, providing content. Some is free some not but there
is a lot available. Forgetting about whole curricula resources, three
lesson / experience sites  I&amp;#39;m
reasonably familiar with are the SIGCSE &lt;a href=&#34;http://nifty.stanford.edu/&#34;&gt;Nifty Assignments&lt;/a&gt; and now the
CSTA&amp;#39;s &lt;a href=&#34;https://sites.google.com/site/cstaniftyassignments/&#34;&gt;corresponding project&lt;/a&gt; along with &lt;a href=&#34;https://www.engage-csedu.org/&#34;&gt;Engage CS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
The biggest problem with the Nifty sites is that they&amp;#39;re arranged
chronologically by the conference year they were presented. There are
no tags nor easy way to search.  Engage CS gives you some level of
searching like for course level, keyword, resource type, and more.&lt;/p&gt;
&lt;p&gt;
The sites present resources in a format that&amp;#39;s superficially
 consistent but the truth is, once you get past the headings they can
 be written up in radically different ways.&lt;/p&gt;
&lt;p&gt;
To me, that&amp;#39;s not a problem. Each resource was written by some
educator with the intent of sharing but since each author is unique so
to will be the content they produce. &lt;/p&gt;
&lt;p&gt;
The real value of all these resources are to get ideas - lesson
motivations, code samples, project ideas etc.. Sure, I wish they were
more discoverable via search - better tagged and yes, even better
rated but the value is from reading what some other teacher has done
and then pulling out aspects that can work for you.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve rarely used a Nifty Assignment nor something from EngageCS
explicitly but I have gotten value from both sites (CSTA Nifty
assignments are newer and I&amp;#39;ve been at all the CSTA sessions so
haven&amp;#39;t actually used the site). &lt;/p&gt;
&lt;p&gt;
Would I ever use a resources &amp;#34;as published?&amp;#34; Perhaps - if
it was really well aligned with how I do things. &lt;/p&gt;
&lt;p&gt;
Would I pay? Probably not. I&amp;#39;m not against paying for resources from a
philosophical point of view. Charge a fair price and give a reasonable
assurance that what you&amp;#39;re selling has value and provide some value
beyond the free sites. I haven&amp;#39;t used Teachers Pay Teachers and
probably won&amp;#39;t look at Amazon&amp;#39;s thing when it&amp;#39;s launched but to me,
they would have to bring value in terms of curation and search. If
they do at a fair price, then they may be worth using.&lt;/p&gt;
&lt;p&gt;
When I started teaching there was no public internet. None of this
existed. Teachers kept binders or books of lesson plans and if you
were lucky you could borrow from a friend or colleague. New York&amp;#39;s DOE
at one point had a few teachers in each subject area submit lesson
plans for &amp;#34;lesson books&amp;#34; which they published for each core
subject. My chairman wrote some of the math ones and those materials
largely got me through my first year. &lt;/p&gt;
&lt;p&gt;
Today we have an embarrassment of riches. That comes with the price
that we have to actually read and evaluate all of the materials we&amp;#39;re
presented with but I&amp;#39;ll take today&amp;#39;s resources over what I started with
any day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teachers Pay Teachers  - part 1 - should they</title>
      <link>https://cestlaz.github.io/post/teachers-pay-teachers/</link>
      <pubDate>Mon, 20 Jan 2020 08:43:37 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teachers-pay-teachers/</guid>
      <description>&lt;p&gt;
There was a bit of buzz a couple of months ago when Amazon announced
an online marketplace for educational resources. It wasn&amp;#39;t a new
concept - on the pay side, &lt;a href=&#34;https://www.teacherspayteachers.com/?msclkid=a426c2c1625613061bc19ce4cdcb6a0a&amp;amp;utm_source=bing&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=Search%2520-%2520Branded%2520-%2520Desktop&amp;amp;utm_term=teachers%2520pay%2520teachers&amp;amp;utm_content=Brand%2520Name&#34;&gt;Teachers Pay Teachers&lt;/a&gt; has been around for a
while and in terms of free, there are many online resources but
they&amp;#39;re not necessarily well organized or curated. What was the buzz?
Should teachers be charging their peers for class materials or should
they be providing them for free.&lt;/p&gt;
&lt;p&gt;
I was going to blog about it then but never got around to it The other
day, someone posted &lt;a href=&#34;https://www.govtech.com/computing/Report-Most-Teacher-Created-Online-English-Materials-Subpar.html&#34;&gt;this&lt;/a&gt; article which questioned the quality of both
free resources and pay ones. The article, based on &lt;a href=&#34;https://fordhaminstitute.org/national/research/supplemental-curriculum-bazaar&#34;&gt;this report&lt;/a&gt; by the
Fordham Institute looked at ELA resources. The report also only looked
at Teachers Pay Teachers and two free sites - ReadWriteThink and Share
My Lesson excluding many other teacher resources that could be, for
all we know, better curated and more discoverable. As an aside, I was
turned off by the reports referring to their evaluators as &amp;#34;experts&amp;#34;
which is a description I personally would question. Still, there&amp;#39;s
some good fodder for thought.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll get to the report in the next post but for now let&amp;#39;s tackle the
question that started the initial buzz - should teachers be charging
each other for materials?&lt;/p&gt;
&lt;p&gt;
It depends. If you&amp;#39;re paid by a school to develop materials they
belong to the school. In NY you can take a sabbatical to build a
course so anything you build during that time would be DOE property
and therefore you couldn&amp;#39;t sell it. Same thing if you&amp;#39;re being paid
off hours to develop materials. The gray area comes when you&amp;#39;re lesson
planning. Most real planning and development happens outside of
school hours. In an typical school day teacher are typically
allocated around 40 minutes to do all their planing, grading,
and paperwork so realistically most materials as well as planing,
paperwork, and grading are done off hours. This being the case, I&amp;#39;m of
the belief that those materials belong to the teacher (although I&amp;#39;ve
met some DOE educrats who would disagree).&lt;/p&gt;
&lt;p&gt;
So, should they sell it? Well, they have every right to. That said, my
personal feelings and practice is that if you&amp;#39;ve developed something
for yourself and have not spent extra time or effort to prepare it for
others then I think you should make it freely available to your
peers. On the other hand, if you spend extra time and effort to make
it useful for and usable by others then by all means charge if you&amp;#39;d
like.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll tackle the report in the next post and we&amp;#39;ll look at some of the
resources available on the CS side.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Implicit Curricula</title>
      <link>https://cestlaz.github.io/post/implicit-curricula/</link>
      <pubDate>Sun, 07 Apr 2019 16:23:43 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/implicit-curricula/</guid>
      <description>&lt;p&gt;
The state got back to us the other week on our CSEd programs. Still no
approval. &lt;/p&gt;
&lt;p&gt;
One of the requirements is that we have 12 graduate CS
credits in our program and that in those courses these five major
areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Algorithms and programming&lt;/li&gt;
&lt;li&gt;Computing systems&lt;/li&gt;
&lt;li&gt;Data and analysis&lt;/li&gt;
&lt;li&gt;Impacts of computing&lt;/li&gt;
&lt;li&gt;Networks and the internet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;as described in the &lt;a href=&#34;https://k12cs.org/&#34;&gt;K12 CS Framework&lt;/a&gt;. Even though many of the items
described in the framework fit better in an education side course NY
is requiring that it&amp;#39;s all covered in CS courses offered by a CS
department.  The state has more information &lt;a href=&#34;http://www.nysed.gov/college-university-evaluation/computer-science-certificate-coursework-guidance&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
To be honest, I&amp;#39;m not a fan of the K12 Framework and others have also
voiced their concerns about it. Ultimately I think many states will
use it as a certification guide and it will open the door to
substandard preservice programs that will certify teachers lacking in
CS content knowledge.&lt;/p&gt;
&lt;p&gt;
Still, the programs we designed at Hunter more than covered all the
required bases. &lt;/p&gt;
&lt;p&gt;
So, why did the state come back asking for clarification? Because not
everything was explicit in our sample syllabi. As we all know, Syllabi
are usually rather terse documents with just a couple of lines per
topic, maybe also an assignment and some readings. If they contained
all the richness of all the lessons they&amp;#39;d be volumes rather than the
usual page or two. So, to provide the requested clarifications I&amp;#39;ve been spending
the weekend breaking them out to show more detail.&lt;/p&gt;
&lt;p&gt;
This got me thinking about the concept of implicit items in 
curricula. Much of the richness of a lesson comes not from the
description of the topic in the syllabus but also from related and
ancillary items that aren&amp;#39;t specifically listed - implicit items. One
example I wrote about before is &lt;a href=&#34;https://cestlaz.github.io/posts/2010-01-10-towers-of-hanoi.html/&#34;&gt;the Towers of Hanoi&lt;/a&gt;. When I teach it,
on the one hand, it&amp;#39;s a lesson about a recursive solution to a problem
but on the other hand there&amp;#39;s all sorts of other richness to the
lesson. We talk about&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proof&lt;/li&gt;
&lt;li&gt;Run time&lt;/li&gt;
&lt;li&gt;Hard problems&lt;/li&gt;
&lt;li&gt;Moores law and the limits f computing power&lt;/li&gt;
&lt;li&gt;Alternate approaches to problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;None of which is in a typical Towers of Hanoi lesson plan nor in most
text books yet to me they&amp;#39;re the most important, interesting parts of
the lesson. &lt;/p&gt;
&lt;p&gt;
Another example is when I talk about changing the data structure
rather than the code when I teach &lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-26-change-the-data/&#34;&gt;search&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
In our Ed proposals one such place was when we move from using an
online IDE to a local development environment and discuss all sorts of ramifications
another is when we create a web application in our topics class and
things like authentication and security are discussed.&lt;/p&gt;
&lt;p&gt;
I spent most of this weekend going through our proposals and  making
sure it was clear everywhere we covered something relating to those &amp;#34;5
areas&amp;#34; of computer science.&lt;/p&gt;
&lt;p&gt;
The unfortunate thing is that of curricular material and  knowledge
isn&amp;#39;t easy to collect and share with others.&lt;/p&gt;
&lt;p&gt;
I and others have written about lesson ideas on our blogs but there&amp;#39;s
no searchable, shareable, discoverable  place for either basic lesson
material or these rich implicit items. I wrote about &lt;a href=&#34;https://www.engage-csedu.org/&#34;&gt;EngageCS&lt;/a&gt; and
&lt;a href=&#34;http://nifty.stanford.edu/&#34;&gt;Nifty Assignments&lt;/a&gt; &lt;a href=&#34;https://cestlaz.github.io/post/adapting-a-nifty-assignment/&#34;&gt;before&lt;/a&gt; but they&amp;#39;re really core lesson ideas and
aren&amp;#39;t really easy to find grab and use.&lt;/p&gt;
&lt;p&gt;
I guess the closest project moving in this direction is probably
&lt;a href=&#34;https://cssplice-cm.github.io/&#34;&gt;CSSplice Curriculum Materials Working Group&lt;/a&gt; that I found out about
from &lt;a href=&#34;https://twitter.com/AustinCorgiBart&#34;&gt;Cory Bart&lt;/a&gt; at this past SIGCSE.&lt;/p&gt;
&lt;p&gt;
Check out the project link and if you&amp;#39;ve got a great lesson with lots
of implicit learnings going on, please share it in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sequencing Topics</title>
      <link>https://cestlaz.github.io/post/sequencing-topics/</link>
      <pubDate>Sat, 26 Jan 2019 16:06:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sequencing-topics/</guid>
      <description>&lt;p&gt;
Monday&amp;#39;s the start of the Spring semester. Other than the 8:00am start
I&amp;#39;m looking forward to it. My 8:00am class is the honors/lab component
that goes with CS1. I taught it last semester and during each of the
past two years at Hunter. My second class is the follow up  - more OOP
/ C++, data structures and some algorithms.&lt;/p&gt;
&lt;p&gt;
The material is old hat. I&amp;#39;ve taught it in Java more times than I can
count and also in C++ albeit many years ago. What&amp;#39;s new is that I&amp;#39;m
teaching my Hunter kids and I&amp;#39;m doing it in a college framework - two
days a week, 1:15 a session. I&amp;#39;m not thinking too much about how I&amp;#39;ll
teach each class - I usually figure that out in the moment - not
actually in the class but week to week based on the flow of the
class. &lt;/p&gt;
&lt;p&gt;
Right now, I have to make final decisions on sequencing, at least for
the start of the class. We got ahead of the game by covering most of
the C++ topics - inheritance, templates, overloading etc. at the end
of last semester so that
leaves all the data structures, algorithms, dynamic structures, and
memory management, recursion, and sorting and searching. If I have
time I&amp;#39;d also love to get into some graph stuff. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the plan, at lest for now.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll start with recursion. They had the basics last term but now
we&amp;#39;ll talk about search - I usually focus this around a maze
solver. After this we&amp;#39;ll place recursion on hold - at least in terms
of class time and move to linked lists and dynamic memory. We&amp;#39;ll
follow this with sorting. The idea is that students have trouble
getting comfortable with both recursion and also with dynamic
structures first time through. Rather than ploughing  through from
recursion to the recursive sorts I&amp;#39;m hoping that putting the dynamic
lists in between will give recursion some time to marinate in the
background. Likewise I&amp;#39;m hoping that the dynamic memory stuff can
marinate through the sorting unit for when we revisit it with stacks,
queues, and trees after sorting.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if this is the optimal way of sequencing the topics but I
think it will work pretty well.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll see as the semester progresses. If things are going swimmingly I
can always call an audible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When does a new course really get developed</title>
      <link>https://cestlaz.github.io/post/when-does-a-new-course-get-developed/</link>
      <pubDate>Mon, 07 Jan 2019 08:49:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/when-does-a-new-course-get-developed/</guid>
      <description>&lt;p&gt;
Following up on my last post I thought I&amp;#39;d talk a bit more about
course development. According to most powers that be it&amp;#39;s all done
ahead of time. Organizations and companies with curricula to sell
package it all up ahead of time lesson by lesson unit by unit. When
I create a new course at Hunter, they demand a sample syllabus during
the approval process with a week by week outline, assignments reading
and more. When I created CAPE for Google back in 2010 even though the
programs man advocate knew the real deal he and I spoke many times
about needing something on paper to satisfy the higher ups. &lt;/p&gt;
&lt;p&gt;
To me most of this is nonsense. When I create a new course I have an
idea and a direction but little else. Of course there&amp;#39;s much work to
be done between idea and implementation but for me  a detailed
curriculum that early is mostly a waste of time. Why? Because it all
changes once you get in the classroom.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll do the bare minimum to get by the gatkeepers. If they want a week
to week, I give them a week to week but I won&amp;#39;t stress over it. I
then get to work on what I feel I need prior to running a course. A
framework and the first few lessons in detail.&lt;/p&gt;
&lt;p&gt;
Developing the framework means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;understanding enough of the content to teach the course. &lt;/li&gt;
&lt;li&gt;deciding on how you will teach or run the course&lt;/li&gt;
&lt;li&gt;developing rough outlines for units, possible assignments etc.&lt;/li&gt;
&lt;li&gt;finding and understanding resources like possible texts and tools
and also things like data sources mentioned in my previous post.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And of course there&amp;#39;s more. I&amp;#39;ll also work out the first unit in day
by day detail. &lt;/p&gt;
&lt;p&gt;
Another important aspect is that this framework design is where you
put in your safety nets. What&amp;#39;s the backup plan if unit 2 takes too
long or students just aren&amp;#39;t getting unit 3. Another important aspect
is to prepare too much material. In my experience it usually takes
longer to teach something than you originally plan but I still think
it&amp;#39;s better to plan too much rather than too little.&lt;/p&gt;
&lt;p&gt;
Why do I only plan out the first unit in details? Because i know
things will change once the rubber hits the road. Even if it doesn&amp;#39;t
change, developing specific lessons without regard to your current
students seems rather odd. It reminds me of how &lt;a href=&#34;http://www.bill-irwin.com/&#34;&gt;Bill Irwin&lt;/a&gt; learned his
role in &lt;a href=&#34;https://en.wikipedia.org/wiki/Eight_Men_Out&#34;&gt;Eight Men Out&lt;/a&gt;. Irwin&amp;#39;s amazing but apparently never played
baseball. He played Eddie Collins, the White Sox second
baseman. Having not played himself, his action scenes were
choreographed like a dance. The director would yell action and he&amp;#39;d do
his dance. If the ball happened to go where it was supposed to you
ended up with a bang bang play. If not, cut, retake. It worked for the
movie but it&amp;#39;s not a great idea for a teacher. How can you plan day 5
of a class when the first four days and all the richness of the live
classes and time between hasn&amp;#39;t occurred. &lt;/p&gt;
&lt;p&gt;
Of course this means a lot of work under the gun but no one ever said
that developing a new course was easy. It&amp;#39;s reassuring that I&amp;#39;m not
the only one who does the real class development in real time:&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Building the course as the semester goes, but the barebones syllabus is here. Thanks to &lt;a href=&#34;https://twitter.com/guzdial?ref_src=twsrc%5Etfw&#34;&gt;@guzdial&lt;/a&gt;, we are using GP as the main language. Reading things like Pattern on the Stone, chapters from Constructionism book by Harel &amp;amp; Papert.  &lt;a href=&#34;https://t.co/CNgEQfcO1Z&#34;&gt;https://t.co/CNgEQfcO1Z&lt;/a&gt;.&lt;/p&gt;&amp;mdash; Aman Yadav (@yadavaman) &lt;a href=&#34;https://twitter.com/yadavaman/status/1082280379153829888?ref_src=twsrc%5Etfw&#34;&gt;January 7, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
Finally having survived the first run through it&amp;#39;s time to &lt;a href=&#34;http://wiki.c2.com/?PlanToThrowOneAway&#34;&gt;throw it
away&lt;/a&gt;. Not really but it&amp;#39;s time to take lessons learned and work them
into the class. From there, it&amp;#39;s incremental improvements.&lt;/p&gt;
&lt;p&gt;
So there you have it, a summary of my approach to course creation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Owning The Curriculum</title>
      <link>https://cestlaz.github.io/post/owning-the-curriculum/</link>
      <pubDate>Sat, 05 Jan 2019 19:41:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/owning-the-curriculum/</guid>
      <description>&lt;p&gt;
I spent a couple of days last week hunkered down working designing a
CS Ethics course and of course it got me thinking about designing
courses in general. &lt;/p&gt;
&lt;p&gt;
One of the topics I&amp;#39;ve ranted on is my disdain for canned
curricula. I&amp;#39;ve never been a fan. This isn&amp;#39;t to say I don&amp;#39;t want to
leverage other people&amp;#39;s work. I&amp;#39;ll take sample curricula, lessons, and
all the resources I can get my hands on but I&amp;#39;d never just deliver
them as is. Even back when I started as a math teacher and I had the
NYCDOE lesson plan books to use as samples, I&amp;#39;d use those lessons as
sources to develop my own.&lt;/p&gt;
&lt;p&gt;
I was reminded why I do this as I was developing my ethics course. I
want the course to have a significant amount of programming and for
some of the projects US census data and the NYC data mine look to be
good sources of data. I was led to these sources from some project
ideas I found online but those projects provided the data pre
processed. Had I been using these sources as a canned curriculum
things would be fine until something changed. Either the resource went
away or the direction of the class required something different. In
either event, had I been happy to merely use someone elses canned
materials I wouldn&amp;#39;t be prepared.&lt;/p&gt;
&lt;p&gt;
It turns out that you&amp;#39;ve got to do some digging before you can
effectively use a resource like the US census data. Maybe you can use
the &lt;a href=&#34;https://factfinder.census.gov/faces/nav/jsf/pages/index.xhtml%5D&#34;&gt;American Fact Finder&lt;/a&gt;. With it you can download a refined data set
as a CSV but you&amp;#39;ll still have to figure out how to use the tool and
which data sets you need. Another approach is to &lt;a href=&#34;https://www.census.gov/programs-surveys/acs/data/data-via-ftp.html&#34;&gt;download the data via
FTP&lt;/a&gt; but then you have to figure out how the files are arranged. &lt;/p&gt;
&lt;p&gt;
All of this is to say that you can&amp;#39;t just go to census.gov and
trivially get what you need and you certainly can&amp;#39;t just send students
there and say &amp;#34;good luck.&amp;#34; I spent more hours that I&amp;#39;d care to admit
last week figuring out the ins and outs of a variety of data sources
and I&amp;#39;ve got many more hours ahead. It&amp;#39;s taking a lot of time but at
the end of the day, I&amp;#39;ll own the knowledge. &lt;/p&gt;
&lt;p&gt;
At the end of the day the first time you offer a course most of your
pre planning is going to go out the window. You need a framework, a
direction, and a start but first time through you don&amp;#39;t know how or
where things will really go. If you&amp;#39;re using someone else material,
good luck when things take an unexpected turn. If you own the course,
you&amp;#39;ll be prepared.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What CS should we teach in HS</title>
      <link>https://cestlaz.github.io/post/what-cs-in-hs/</link>
      <pubDate>Sun, 23 Sep 2018 16:54:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/what-cs-in-hs/</guid>
      <description>&lt;p&gt;
I wanted to chime in on Alfred Thompson&amp;#39;s post last week on &lt;a href=&#34;http://blog.acthompson.net/2018/09/deciding-what-to-include-in-high-school.html&#34;&gt;what to
include in a HS CS class&lt;/a&gt; but was working on moving blogging platforms
so didn&amp;#39;t get a chance so I&amp;#39;ll say a few words here.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;ve been here before you probably know I&amp;#39;m not a fan of &lt;a href=&#34;https://cestlaz.github.io/posts/standards-who-for/&#34;&gt;the
standards&lt;/a&gt; and I certainly am no fan of the College Board and the AP
program so what&amp;#39;s my take?&lt;/p&gt;
&lt;p&gt;
The truth is, my take doesn&amp;#39;t matter. Not in terms of specifics
anyway. Every school is different. Different kids, teachers, parents,
community, and culture so while there might be some things from the
program I designed at Stuy that work at another school there will be
plenty of things that don&amp;#39;t. I&amp;#39;m now designing first year experiences
at Hunter and while I take lessons earned away from my Stuy
experience, I&amp;#39;m now teaching different kids in a different environment
so the answer to the question &amp;#34;what do I teach them and how?&amp;#34; is different.&lt;/p&gt;
&lt;p&gt;
The important thing to consider are the questions you should ask and
the answers you come up with.&lt;/p&gt;
&lt;p&gt;
The first question is &amp;#34;why?&amp;#34; Why are you doing CS in your school? Is
it for kids already interested in CS? Is it &amp;#34;for all?&amp;#34; In either case,
what do you want them to get out of it?&lt;/p&gt;
&lt;p&gt;
Is it for employment after high school? If so you might want to
consider locally used tools and technologies and also look at more
vocational tech like DevOps, SysAdmin and networking.&lt;/p&gt;
&lt;p&gt;
Is it in support of other classes while in high school or college? You
might want to look at aspects of CS that cross over into other disciplines.&lt;/p&gt;
&lt;p&gt;
You&amp;#39;ll then have other questions dealing with resources, class size,
required classes vs electives and so on.&lt;/p&gt;
&lt;p&gt;
At some point schools get to the point of figuring out what specific
topics to include. Many teachers now veer to an assortment of hot
topics that interest them or alternatively go the other way and try to
do whatever the students want. I&amp;#39;m not a  big fan of either. Don&amp;#39;t get
me wrong, if I worked in a rich private institution with tiny class
sizes and lots of resources I&amp;#39;d love to be student directed after the
basics but that&amp;#39;s a luxury that public school educators can&amp;#39;t really
afford. I&amp;#39;m also not a fan of the &amp;#34;hot topic&amp;#34; approach. &lt;/p&gt;
&lt;p&gt;
At Stuy, I tried to look at the complete sequence as a program. I
wanted the designation of &amp;#34;Stuy CS graduate&amp;#34; to mean something so I
looked at what the kids trajectories were after graduation and I tried
to develop a program that best launched them on that trajectory. That
meant designing an intro class that could both launch CS minded kids
into our more advanced classes and also give non-CS kids everything
they needed for their next levels. &lt;/p&gt;
&lt;p&gt;
The motivation and design of the intro course is a topic unto itself
but I&amp;#39;ll share what I considered when designing our post AP CS
courses. One of the first guidelines I follow is &amp;#34;don&amp;#39;t give them a
course that they&amp;#39;ll have to take later anyway.&amp;#34; A second is &amp;#34;set up
courses that support the students in what they&amp;#39;ll have to take later&amp;#34;
and finally &amp;#34;fill in the gaps.&amp;#34; &lt;/p&gt;
&lt;p&gt;
With this in mind, we ended up with a Graphics course, Systems course
and a two semester Software Development class and it&amp;#39;s worked pretty
well. &lt;/p&gt;
&lt;p&gt;
Had I been at another school and designed it&amp;#39;s sequence it would
likely look different. I would have developed the program the same
way but would likely have ended up with something different albeit
with similar themes.&lt;/p&gt;
&lt;p&gt;
I get emails and calls now and then from schools asking for advice on
building their CS programs. Some want the easy way out - they want a
drop in curriculum with little regard for the fit or worse, they want
APCS because it&amp;#39;s AP. Those conversations usually don&amp;#39;t go
anywhere. Other schools ask for help and ask for a curriculum. I&amp;#39;ll
say I can&amp;#39;t help with that but I&amp;#39;d love to talk and to get to know the
school and together we can come up with the right program. That&amp;#39;s a
longer process and is more work. It&amp;#39;s also more likely to result in a
good sustainable program and building those are both better and a lot
more fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Time To Create An Ethics Course</title>
      <link>https://cestlaz.github.io/posts/time-to-create-an-ethics-course/</link>
      <pubDate>Sat, 21 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/time-to-create-an-ethics-course/</guid>
      <description>&lt;p&gt;
I think it&amp;#39;s time for me to start developing a CS Ethics class.&lt;/p&gt;
&lt;p&gt;
An ethics course isn&amp;#39;t a replacement for having teachers that live and
model good behavior and weave ethical issues throughout the curriculum
but still, adding a separate course on top of that has its merits.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not in a rush to create this course. I might be done in a month or
it might take a couple of years. When I&amp;#39;m done, I&amp;#39;ll add it as an
option in my CS Teacher education programs but hopefully it will be an
attractive course for undergrad CS majors as well.&lt;/p&gt;
&lt;p&gt;
While it&amp;#39;s easy enough to come up with possible topics - privacy,
moral responsibilities, biased algorithms, net neutrality and on and
on I&amp;#39;m looking for this course to have a serious coding component. I
want the students to build things to really understand the
implications of what they&amp;#39;re studying.&lt;/p&gt;
&lt;p&gt;
One topic I definitely want to cover is &lt;a href=&#34;https://news.harvard.edu/gazette/story/2011/10/youre-not-so-anonymous/&#34;&gt;anonimity&lt;/a&gt;. I&amp;#39;d love to find
the right combination of data sets and have the class discover that
some hidden information in the sets isn&amp;#39;t nearly as hidden as it seems
to be. When I was at Stuy, I was thinking about
having the kids give me permission to use their class schedules since
even with names removed we could probably identify many kids by
electives and overlapping classes. I have no idea what I&amp;#39;ll be able to
do at Hunter. If I can come up with something good I think this will
form the basis of a pretty amazing part of the class.&lt;/p&gt;
&lt;p&gt;
Another project I&amp;#39;d love to put together is something dealing with a
biased algorithm. Again, I don&amp;#39;t know where this will go, maybe
something where I can seed the class so that different groups
implement some project differently and we can then analyze each groups
biases, hidden or otherwise.&lt;/p&gt;
&lt;p&gt;
Beyond these two, I&amp;#39;m not sure.&lt;/p&gt;
&lt;p&gt;
How about you? Anyone out there have any good ideas for programming
projects for an ethical CS course? If so, please share. It might be a
while but when I do finish putting this together I&amp;#39;ll be sure to
publish whatever the end result is.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NYC CS4All - This Is Not The CS We&#39;re Looking For</title>
      <link>https://cestlaz.github.io/posts/this-is-not-the-cs-were-looking-for/</link>
      <pubDate>Fri, 29 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/this-is-not-the-cs-were-looking-for/</guid>
      <description>&lt;p&gt;
It&amp;#39;s no secret that I&amp;#39;m something of an old curmudgeon in the K12 CS
Education world and I&amp;#39;ve been critical of a number of initiatives and
organizations over the years but I&amp;#39;ve been pretty quiet on the CS4All
movement in NYC Department of Education. I&amp;#39;ve had and any number of
concerns though.&lt;/p&gt;
&lt;p&gt;
This past week at the inaugural meeting of New York City&amp;#39;s CSTA
chapter we got a taste of the &lt;a href=&#34;http://blueprint.cs4all.nyc/&#34;&gt;NYC CS4All Blueprint&lt;/a&gt;. A highlight was
this video:&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe src=&amp;#34;&lt;a href=&#34;https://player.vimeo.com/video/224494221&#34;&gt;https://player.vimeo.com/video/224494221&lt;/a&gt;&amp;#34; width=&amp;#34;640&amp;#34; height=&amp;#34;360&amp;#34; frameborder=&amp;#34;0&amp;#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;p&gt;
Along with the &lt;a href=&#34;http://blueprint.cs4all.nyc/resources/3/%0A&#34;&gt;supporting web page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
TL;DR - in a elementary school CS class, the students kept tapping out
drumbeats on the desk because they had drumming class the period
prior. Now the drumming teacher is teaching rhythms that match
segments of HTML so the students can tap and chant the line as a
memory aid.&lt;/p&gt;
&lt;p&gt;
Sure, it&amp;#39;s nice when teachers can work together to support each other
but at the end of the day this is a mnemonic aid to memorize
HTML. Nothing particularly innovative here. Mnemonics like this are
great until there are too many to keep track of or ones that are too
similar.&lt;/p&gt;
&lt;p&gt;
The part that saddened me was that this  was the video that was
chosen  as a highlight, an exemplar. It was OK but there was
nothing new or innovative. What was worse was that there was no
computer science.&lt;/p&gt;
&lt;p&gt;
The kids were memorizing HTML. As we watched the video, my neighbor
nudged me and asked &amp;#34;why are they memorizing HTML?&amp;#34; I would ask the
same question. Now, I do think that HTML or some other mechanism to
create content that can be shared with the world is important. Having
students get there work out in the word can be tremendously rewarding
and motivating. Also, although I&amp;#39;m not sold on it, some say that HTML
is a good stepping stone to CS but still.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s try an experiment.&lt;/p&gt;
&lt;p&gt;
Imagine that lesson but instead of HTML the kids were learning
Microsoft word so instead of a chant for &lt;code&gt;&amp;lt;a href=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; you have a
chant for putting a link into a word document or instead of a chant
for &lt;code&gt;&amp;lt;b&amp;gt;somethingbold&amp;lt;/b&amp;gt;&lt;/code&gt; you have a chant like
&lt;code&gt;control-b-typestuff-then-control-b&lt;/code&gt;. Same lesson, same technique,
still no CS. You could also say that this was just one video and maybe
most of the year is about real CS. Maybe, but then why highlight this
on the CS4All web site as a featured resource.&lt;/p&gt;
&lt;p&gt;
This was disappointing but not surprising.&lt;/p&gt;
&lt;p&gt;
Some will say that kids aren&amp;#39;t ready for hardcore CS at that
age. That&amp;#39;s fine. We can have that discussion but if CS is appropriate
for whatever grade was in the video then it should be real CS. We can
also have endless discussing about what that is but memorizing HTML is
not it.&lt;/p&gt;
&lt;p&gt;
I wondered if the video was representative so I looked at &lt;a href=&#34;http://blueprint.cs4all.nyc/resources/5/&#34;&gt;another&lt;/a&gt;. It
turned out this was also a lesson on HTML and again the video could of
been about any number of subject areas. I will give this one credit
for highlighting that you can do &amp;#34;unplugged&amp;#34; activities but it wasn&amp;#39;t
really a CS activity.&lt;/p&gt;
&lt;p&gt;
Then there was &lt;a href=&#34;http://blueprint.cs4all.nyc/resources/15/&#34;&gt;this one&lt;/a&gt;. No video here but how we structure a CS
lesson. We have this outline:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Warm-up&lt;/li&gt;
&lt;li&gt;Mini lesson&lt;/li&gt;
&lt;li&gt;Independent work time&lt;/li&gt;
&lt;li&gt;Share session&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or, as we used to say back in the stone age:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do Now&lt;/li&gt;
&lt;li&gt;Instructional activity&lt;/li&gt;
&lt;li&gt;practice&lt;/li&gt;
&lt;li&gt;summary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nothing new and nothing CS here. I used that model when I taught math
but deviated from it more and more as I developed my CS teaching
chops.&lt;/p&gt;
&lt;p&gt;
Finally I looked at &lt;a href=&#34;http://blueprint.cs4all.nyc/resources/24/%0A&#34;&gt;this one&lt;/a&gt;. For full disclosure I have to say that
Eric, the teacher, is a friend of mine and I &lt;strong&gt;&lt;strong&gt;know&lt;/strong&gt;&lt;/strong&gt; he&amp;#39;s a dynamite
teacher and I know he knows his stuff.&lt;/p&gt;
&lt;p&gt;
This video, however was all about differentiation. Just like the other
resources, there&amp;#39;s nothing wrong with them per se but there&amp;#39;s not
really about CS. You could reskin them for any subject.&lt;/p&gt;
&lt;p&gt;
I also agree with a lot of what Eric says in the video but as CS
Standards take hold and standardized exams become the norm we&amp;#39;ll find
that individualized instruction and meeting students where they are
is in direct conflict with the testing that comes with standards. I&amp;#39;ll
talk more about that in my standards rant that I keep putting off
writing.&lt;/p&gt;
&lt;p&gt;
Sure, the resources site has  a page with concepts like algorithms and
many schools, for better or worse, in the upper grades just fall back
on AP offerings but the more I dig the more it&amp;#39;s apparent to me that
CS4All in NY will be more about getting something into every classroom
rather than something appropriate and good.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ethics, Cybersecurity, ethics, curricula  and standards</title>
      <link>https://cestlaz.github.io/posts/ethics-cybersecurity-curricla-standards/</link>
      <pubDate>Wed, 02 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/ethics-cybersecurity-curricla-standards/</guid>
      <description>&lt;p&gt;
This morning, I read &lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred Thompson&lt;/a&gt;&amp;#39;s post on &lt;a href=&#34;http://blog.acthompson.net/2017/08/cybersecuritythis-summers-computer.html&#34;&gt;teaching
cybersecurity&lt;/a&gt;. as Alfred says, it&amp;#39;s something of a CS Ed buzzword this
summer.&lt;/p&gt;
&lt;p&gt;
Another hot topic in K12 CS Ed this summer is the inclusion of ethics
in our CS courses courtesy of efforts like the #ethicalCS twitter chat every
Wednesday at 8:00 Eastern time  hosted by &lt;a href=&#34;https://twitter.com/ed_saber&#34;&gt;Saber Khan&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Discussions about both topics include &amp;#34;where should we be doing this?&amp;#34;
&amp;#34;What should we be doing?&amp;#34; and of course &amp;#34;How?&amp;#34; &lt;/p&gt;
&lt;p&gt;
This got me thinking about designing curriculum from the top down -
that is, as dictated by outside forces: principals, superintendents,
states, industry or bottom up: a teacher sees a need and designs
something for their students.&lt;/p&gt;
&lt;p&gt;
The best classes I&amp;#39;ve seen are those designed by a passionate teacher
from the ground up. I met  &lt;a href=&#34;https://twitter.com/dougbergmanUSA&#34;&gt;Doug Bergman&lt;/a&gt; at this past year&amp;#39;s CSTA conference. He&amp;#39;s terrific. I
think he came to the conference wanting to find out more about what
cybersecurity really meant. By the second day, he was raving about all
the amazing possibilities. I&amp;#39;d love to be in the class he develops.&lt;/p&gt;
&lt;p&gt;
On the other hand, when topics or standards are forced down from
above, I&amp;#39;ve seen something entirely different.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve observed and been involved in cybersecurity discussions  with CS
teachers. The discussion goes something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Well, we do memory allocation in course XYZ so we can give a
homework assignment there.&lt;/li&gt;
&lt;li&gt;We can rewrite the story (theme) for the assignment in our data
structures class.&lt;/li&gt;
&lt;li&gt;We already do a crypto assignment in algorithms so we&amp;#39;re already
doing it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I&amp;#39;ve seen the same with groups of math teachers discussing
implementing common core. They talk about resequencing topics,
rewriting a few word problems or homework assignments but at the core,
the feeling is &amp;#34;we already know how to teach math.&amp;#34;&lt;/p&gt;
&lt;p&gt;
It gets worse when there&amp;#39;s a standardized or high stakes test at the
end of the tunnel and you get the &amp;#34;you need this for the test&amp;#34; type
units.&lt;/p&gt;
&lt;p&gt;
This might not be as big of a problem in K12 CS right now because so many
teachers are just learning their craft but in established fields such
as math or college CS, when an edict comes from above telling a
teacher how to teach, unless the teacher really believes in it, the
teacher will only pay lip service to it. If it isn&amp;#39;t an issue in CS Ed
right now, it will eventually become one as our field develops legs.&lt;/p&gt;
&lt;p&gt;
This is arguably a bigger issue with Ethical CS than cybersecurity. If
the teacher doesn&amp;#39;t really believe it&amp;#39;s an important topic, we&amp;#39;ll get
lip service at best and in the case of ethics, unless the teacher
really believes it and models it, the students will be able to tell
that it&amp;#39;s a show.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t have an answer other than what my friend and mentor Herb
Greenhut told me many years ago &amp;#34;Solving the education problem is
easy. Hire good teachers and get the f*ck out of the way.&amp;#34;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designing a course with constraints</title>
      <link>https://cestlaz.github.io/posts/design-course-with-constraints/</link>
      <pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/design-course-with-constraints/</guid>
      <description>
&lt;p&gt;One of the hats I wear at Hunter is to build a new &lt;a href=&#34;https://cestlaz.github.io/posts/2016-03-29-hunter-cs.html&#34;&gt;CS Honors program&lt;/a&gt;
and to bring my particular brand of insanity to &lt;a href=&#34;https://cestlaz.github.io/posts/hunter-cs-important&#34;&gt;Hunter College CS&lt;/a&gt; as a
whole.&lt;/p&gt;
&lt;p&gt;
Yesterday was my last class for the semester so I thought I&amp;#39;d write a
bit about the course.&lt;/p&gt;
&lt;p&gt;
For the Fall semester, I taught an intro programming course to the
entire cohort. For some in the cohort, this was their first exposure
to CS. Others had one or more classes under their belt. It was a
Python based programming class and a big part of it was to start
building the cohort into a community. I&amp;#39;m going to work on tweaking
what I taught for next time around but the constraints of designing
such a course are pretty common – an intro course where the students
all want to be there the level of previous experience varies to some degree.&lt;/p&gt;
&lt;p&gt;
Second semester was more of a challenge. The &amp;#34;next&amp;#34; course was CSCI
135, CS 100 - like APCS but in C++. I could teach that but since some
of my students had APCS credit, they didn&amp;#39;t need 135. This would break
up the group. There was also the issue of the students getting credit
for the course without showing any proficiency in C++.&lt;/p&gt;
&lt;p&gt;
Fortunately, Hunter requires students in 135 to take CSCI 136. A 1
credit programming lab. It meets once a week in a computer lab and the
students complete a weekly programming assignment. The lab meets for 2
hours. The instructor goes over anything that&amp;#39;s needed for the lab
that hasn&amp;#39;t been covered yet and then the students work independently
(with the instructors support) on the lab. Overall it works well. It
makes sure the students are spending at least a couple of hours a week
coding in a supported environment.&lt;/p&gt;
&lt;p&gt;
How did 136 help me? I taught a 3 credit course where 1 day was
basically the lab component (what the students were to do in 136) and
one day was enrichment - the stuff I was going to do with them. This
enabled us keeping the cohort together and it also made sure that by
taking the class, the honors cohort members with AP credit would
indeed get up to speed in C++.&lt;/p&gt;
&lt;p&gt;
I was happy with the basic structure. I was able to cover some topics
in project development, testing, debugging, and software engineering but the
designing and teaching the class proved to be challenging for a number
of reasons.&lt;/p&gt;
&lt;p&gt;
One was timing. The lab class meets 1 day a week for 1 hour. My class,
2 days a week for 1 hour 15. This meant that if we were to keep the
lab to one day either the students would have less time or I&amp;#39;d have to
impose on them to stay late or come early. I wasn&amp;#39;t happy with that
but given the inconsistency in the way the other sections handled lab
timings, I think it worked out OK.&lt;/p&gt;
&lt;p&gt;
Some of the other difficulties included:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
The language was C++:
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;Since the labs were to be done in C++, I had to use that as the
language for the class. That meant no &amp;#34;fun&amp;#34; libraries or frameworks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
The labs were solo assignments:
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;Since the labs were solo projects and there was one per week it made
it very difficult to structure group experiences. I wanted to cover
things like group development, code review, working off of other
peoples code bases but this proved difficult with an outside separate
lab being handed down each week.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Someone else dictated the language sequence:
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;The labs were designed to support what the students were learning in
135 and were only distributed a day or two before the week was to
start. This meant that I couldn&amp;#39;t plan too far ahead and had to adjust
frequently. This should be easier next year.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Labs didn&amp;#39;t match the supplemental material:
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;The best example of this was when we were talking about testing. We
ended up using &lt;a href=&#34;https://github.com/philsquared/Catch&#34;&gt;Catch&lt;/a&gt; as a testing framework. The problem was that
right afterwards the lab (and also 135 project) didn&amp;#39;t lend themselves
to using a testing framework like catch.&lt;/p&gt;
&lt;p&gt;
There were more challenges but overall I think the class went fairly
well. I&amp;#39;ll know more when I get feedback from the students and when we
all look back next year with some perspective.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s been an interesting experience designing a class that had to
interleave with another, existing class. I&amp;#39;ve designed many classes
over the years and I know that whatever you plan, it probably changes
once you&amp;#39;re actually in the classroom and working with the kids, or as
Mike Tyson said: &amp;#34;Everyone has a plan until they get punched in the
mouth.&amp;#34; This has been a little more of a challenge but I think the
first go through went well and that the course will get better and be
better defined as we go through a couple more iterations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Starting with scheme</title>
      <link>https://cestlaz.github.io/posts/staring-with-scheme/</link>
      <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/staring-with-scheme/</guid>
      <description>&lt;p&gt;
Scheme is one of the languages used in Stuy&amp;#39;s intro CS course. Like
any other language, there are pros and cons of using it to introduce
students to CS. Here are some of the reasons why I like Scheme as a
first language and why despite that,  I don&amp;#39;t recommend it in many
cases.&lt;/p&gt;
&lt;p&gt;
Scheme certainly isn&amp;#39;t mainstream. That&amp;#39;s not the main reason why I
like it but it is a side benefit. It&amp;#39;s less likely kids come into
class knowing it which creates a level playing field. The few times
I&amp;#39;ve had a student with a background in Scheme, they&amp;#39;ve been good,
helpful kids rather than ones that tried to show off and dominate the
class.&lt;/p&gt;
&lt;p&gt;
I like scheme because it&amp;#39;s simple. It looks different than other
languages but is &lt;code&gt;(+ 3 4)&lt;/code&gt; really that different than &lt;code&gt;add(3,4)&lt;/code&gt; or
&lt;code&gt;3+4&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;
We can tell kids &amp;#34;everything&amp;#39;s a function.&amp;#34; While technically not
true, and I tell my students that it isn&amp;#39;t, it&amp;#39;s close enough for our
purposes. Everything&amp;#39;s a function and the way we write a function is:&lt;/p&gt;
&lt;div class=&#34;src src-scheme&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; a b &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Apply function &lt;strong&gt;&lt;strong&gt;f&lt;/strong&gt;&lt;/strong&gt; on arguments &lt;strong&gt;&lt;strong&gt;b c …&lt;/strong&gt;&lt;/strong&gt;. So we have &lt;code&gt;(+ 2 3)&lt;/code&gt; to
add 2 and 3, &lt;code&gt;(and a b)&lt;/code&gt; for logical and &lt;code&gt;(= 3 4)&lt;/code&gt; to test to see if 3
is equal to 4, etc. We also have the same basic notation for things
like conditionals. In java, we might write:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In scheme, it would be:&lt;/p&gt;
&lt;div class=&#34;src src-scheme&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt; a &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Even though we&amp;#39;re fudging the rules, we can lay out a handful of rules
for the kids such as lambda and define follow a similar form to create and
name functions:&lt;/p&gt;
&lt;div class=&#34;src src-scheme&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;add2 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b) (+ a b)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
where &lt;code&gt;(lambda (a b) (+ a b))&lt;/code&gt; returns a function that adds &lt;strong&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/strong&gt; and
&lt;strong&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/strong&gt; and &lt;code&gt;define&lt;/code&gt; associates it with the identifier &lt;strong&gt;&lt;strong&gt;add2&lt;/strong&gt;&lt;/strong&gt;. Now we
can use the function: &lt;code&gt;(add2 5 10)&lt;/code&gt; which evaluates to 15.&lt;/p&gt;
&lt;p&gt;
With lambda, define, if, and a few more basics, it&amp;#39;s off to the
races. The simple, consistent syntax makes things easy for the kids
and the constrained tool set lets us focus their way of thinking.&lt;/p&gt;
&lt;p&gt;
Of course this wouldn&amp;#39;t work had DrScheme (now &lt;a href=&#34;https://racket-lang.org/&#34;&gt;Racket&lt;/a&gt;) not
existed. That gave us a nice learning IDE to work in.&lt;/p&gt;
&lt;p&gt;
Using Scheme, we can not only cover the basics like conditionals,
abstraction and such but also deeper concepts like recursion, map,
filter, and reduce. When we move on from Scheme, the kids also have a
frame of reference for all the other languages and paradigms they use.&lt;/p&gt;
&lt;p&gt;
There are downsides, however. Outside help is harder to come by and
there is some pushback from parents and it isn&amp;#39;t as pretty and flashy
as some other tool-sets. Scheme worked at Stuy for a number of
reasons. When I created the class that used it, there were no good
pre-AP classes in the school and I had a pretty good reputation as a
teacher. The class also used multiple tools with &lt;a href=&#34;https://ccl.northwestern.edu/netlogo/&#34;&gt;NetLogo&lt;/a&gt; being the
primary other one and tackled a variety of CS and non CS topics.
First time through, reputation and buzz filled the classes and after
that, the class developed a solid enough reputation to fill itself.&lt;/p&gt;
&lt;p&gt;
It also didn&amp;#39;t hurt that our program developed from the inside
out. First, we had APCS-AB on the books as a junior year course, then
I added our post AP senior year electives. Since it was easy to show
what the kids were already graduating with, it was easy to diffuse any
pushback from not using mainstream tools in the first class.&lt;/p&gt;
&lt;p&gt;
Scheme worked at Stuy and I feel that it still does. Would I use
Scheme for a first experience in a drop in program at an after-school
where kids might not come back if they don&amp;#39;t get to a payoff
immediately? Probably not. Would I recommend it at a school where I
want to integrate CS with some of the other subjects quickly, again,
probably not (except for integration with algebra where &lt;a href=&#34;http://www.bootstrapworld.org/&#34;&gt;Bootstrapworld&lt;/a&gt;
is a terrific program).&lt;/p&gt;
&lt;p&gt;
In any event, if you&amp;#39;re a high school CS teacher and  haven&amp;#39;t played
with scheme  or some other functional language, I highly recommend
it - you might not actually ever teach it or use it but it can really
help develop you as a programmer and an educator.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Selecting a starting language - why not Javascript</title>
      <link>https://cestlaz.github.io/posts/starting-with-js/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/starting-with-js/</guid>
      <description>&lt;p&gt;
I was catching up with the team at Stuy the other day and they
mentioned that they were periodically getting pushback on their choice
of languages, particularly in the intro class. The pushback was mostly
in the form of &amp;#34;why don&amp;#39;t you start them with Javascript?&amp;#34;&lt;/p&gt;
&lt;p&gt;
Back in the day, when I created our intro class where we use Scheme,
NetLogo and then later Python, I&amp;#39;d get similar pushback but then it
was &amp;#34;why not Java?&amp;#34;, &amp;#34;why not C?&amp;#34;, or &amp;#34;whu not C++?&amp;#34;&lt;/p&gt;
&lt;p&gt;
We had a good discussion on this and I shared my thoughts as to why I
don&amp;#39;t like Javascript as a first language and I thought I&amp;#39;d share some
of them here. I&amp;#39;ll try to get around to the rationale behind Scheme
and NetLogo in a later post.&lt;/p&gt;
&lt;p&gt;
To start, let me say that I &lt;strong&gt;&lt;strong&gt;Love&lt;/strong&gt;&lt;/strong&gt; Javascript -
particularly when approaching it as a functional language. I also
think every school and situation is different so there are likely
times when Javascript is the right beginner language for the job.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s dive in.&lt;/p&gt;
&lt;p&gt;
Why are some of the pluses for Javascript as an intro language.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubiquity and availability:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have a browser, you have Javascript - it&amp;#39;s also available
through online IDEs and online lightweight sites like &lt;a href=&#34;https://jsfiddle.net/&#34;&gt;JSFiddle&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interactivity:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can tweak websites almost live, use the HTML5 canvas pretty
interactively and mode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;#39;s mainstream&lt;/li&gt;
&lt;li&gt;It&amp;#39;s quick to get up and running&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is all true, but there are also downsides.&lt;/p&gt;
&lt;p&gt;
One of my big problems with Javascript is the lack of simple solid
educational tooling. I love to use tools like &lt;a href=&#34;http://www.drjava.org/&#34;&gt;DrJava&lt;/a&gt;, &lt;a href=&#34;http://drpython.sourceforge.net/&#34;&gt;DrPython&lt;/a&gt;, and
&lt;a href=&#34;https://racket-lang.org/&#34;&gt;Racket&lt;/a&gt; (formerly DrScheme) with beginners. All simple learning
IDEs. True, you can use a simple online IDE but I haven&amp;#39;t found them
to have as strong a learning interface. They also, generally, keep you
in an oversimplified programming sandbox. There&amp;#39;s no clean transition
from the sandbox to the real deal - particularly given the non-trivial
state of js build tools and environments. These simple learning IDEs
set the stage and then we can transition to more powerful development environments.&lt;/p&gt;
&lt;p&gt;
I also prefer, where possible, to have kids learn locally so that they
can learn something about the underlying operating system even if
only at a user level.&lt;/p&gt;
&lt;p&gt;
A problem relating to the lack of tooling is the fact that a JS
program can fail to run and not give you any meaningful feedback at
all - this is a problem for a beginner.&lt;/p&gt;
&lt;p&gt;
Javascript also has all sorts of wonkiness. We have &lt;code&gt;=&lt;/code&gt;, and &lt;code&gt;==&lt;/code&gt;
which is pretty conventional, but then there&amp;#39;s also &lt;code&gt;===&lt;/code&gt;. We have
potentially confusing scoping issues and also some other real
weirdness:&lt;/p&gt;
&lt;div class=&#34;src src-js&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For more, check out the this &lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;video&lt;/a&gt;. Start watching at about 1:20 -
it&amp;#39;s a riot.&lt;/p&gt;
&lt;p&gt;
All of this weirdness actually makes sense - just not to a beginner.&lt;/p&gt;
&lt;p&gt;
Javascript also gives plenty of freedom - there are many ways to do
things. This can be great for the developer but not necessarily ideal
for the learner. Loops, recursion, mapping functions - you name it,
Javascript&amp;#39;s got it. I like simpler languages for beginners because
it&amp;#39;s easier to get them thinking and problem solving in certain ways
when there tool set is somewhat restricted (more on that when I write
about Scheme).&lt;/p&gt;
&lt;p&gt;
Finally, the fact that Javascript&amp;#39;s a mainstream language can be a
minus. Given its popularity, a beginner class could have at  least a
few kid who&amp;#39;ve at least played with the language. This can lead them
to think they know more than they do and more importantly, this can
be intimidating to the real newbies who develop the impression that
&amp;#34;everyone knows this but me.&amp;#34; A less mainstream language puts everyone
on a level playing field.&lt;/p&gt;
&lt;p&gt;
Let me say again that I love javascript as a language and before a
student graduates Stuy they can learn all about Javascript, front end
development, some functional programming, and more. It&amp;#39;s just not the
right language to start with - at least not at Stuy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Essential topics for an intro course (not)</title>
      <link>https://cestlaz.github.io/posts/essentials-for-an-intro-course/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/essentials-for-an-intro-course/</guid>
      <description>&lt;p&gt;
What essential topics should we teach in our intro courses? This seems
to be a recurring topic recently.&lt;/p&gt;
&lt;p&gt;
It can be an important topic but, unfortunately, too often, it seems
that people have too myopic a view&lt;/p&gt;
&lt;p&gt;
I remember thinking about this years ago when APCS moved from C++ to
Java. Both languages have good and bad points both for practical and
educational use. A big loss in the move to Java was memory management
and the topics you could cover when memory issues arose.&lt;/p&gt;
&lt;p&gt;
Of course one might say that memory management shouldn&amp;#39;t be in the
first year of CS. That&amp;#39;s fine, as long as you put it back in somewhere
later on - something that didn&amp;#39;t seem to happen universally.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the myopic view - far too few look at the overall picture.&lt;/p&gt;
&lt;p&gt;
C++ to Java ended up in removing a topic. I&amp;#39;ve also seen the reverse.
I was talking to a friend about intro topics. He told me that it was
critical to cover (insert topic here) in an intro course. Why, I
asked? Because the kids absolutely needed to know that material in the
third year course he was teaching.&lt;/p&gt;
&lt;p&gt;
I pressed a bit – &amp;#34;how many kids actually remember (insert topic
here) and do you have to reteach anything.&amp;#34; The answer - pretty much
no one remembered and he always retaught the subject.&lt;/p&gt;
&lt;p&gt;
Did this mean that no one taught the topic in the earlier class?
Unlikely. More likely is that the topic was taught without purpose or
context, just because it was supposed to be taught and thus the
knowledge wasn&amp;#39;t retained. Sounds to me like the topic wasn&amp;#39;t in the
right place to begin with. Maybe it should have just been taught in
that 300 level course to begin with.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://twitter.com/alfredtwo?ref_src=twsrc%255Etfw&#34;&gt;Alfred Thompson&lt;/a&gt; wrote a post earlier today asking about &lt;a href=&#34;http://blog.acthompson.net/2017/01/how-important-are-number-bases-for-pre.html&#34;&gt;teaching
number bases&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Is it important? Maybe. Is it essential for an intro course? Probably
not.&lt;/p&gt;
&lt;p&gt;
Binary makes sense when you start talking about low level stuff. If
your intro course never gets close to the machine then why muddy the water
with a topic that&amp;#39;s out of place. The topic probably won&amp;#39;t be
appreciated and retention and understanding will be low.&lt;/p&gt;
&lt;p&gt;
If your intro course gets close to the machine or if you decide to
talk about compiled code or similar topics, you have an entre to talk
binary which leads to the convenience of hexadecimal. At Stuyvesant,
it was much more sensible to talk about number bases in our systems
course when we looked at C code in a debugger rather than in our intro
our AP course.&lt;/p&gt;
&lt;p&gt;
You also might work on some application where bitmaps or similar as
useful. That might be another good time to talk about number bases.&lt;/p&gt;
&lt;p&gt;
Is it important for a CS person to understand binary and it&amp;#39;s relation
to digital computers? Certainly. Does it have to be studied day one?
Certainly not.&lt;/p&gt;
&lt;p&gt;
We need to keep an eye on the big picture. You can&amp;#39;t get everything
into a single class or a single yea. The question to ask is - do our students know what they have to by the time they
leave our charge?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lesson plans - scripts to springboards</title>
      <link>https://cestlaz.github.io/posts/lesson-plans/</link>
      <pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/lesson-plans/</guid>
      <description>&lt;p&gt;
I spent last Saturday up at the Microsoft offices in Times Square
observing a &lt;a href=&#34;https://www.tealsk12.org/&#34;&gt;TEALS&lt;/a&gt; training session. My fried &lt;a href=&#34;https://twitter.com/nathanielgranor&#34;&gt;Nathaniel Granor&lt;/a&gt;, Teals
Regional Manager in the east has invited me a number of times and this
time I was able to make it.&lt;/p&gt;
&lt;p&gt;
If you don&amp;#39;t know, TEALS is a program that takes volunteers in the
tech industry and places them in classrooms. Unlike other programs,
the TEALS volunteers work with the teachers while the kids learn some
CS. The idea is that the teacher will learn about CS from the
volunteer and the volunteer will learn something about teaching.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not the same as having a strong, knowledgeable CS teacher in the
classroom but until we get there, TEALS is doing great work giving
kids something that they need and otherwise wouldn&amp;#39;t get.&lt;/p&gt;
&lt;p&gt;
At one point, Nathaniel started to talk to the volunteers about lesson
plans emphasizing the fact that TEALS would provide all the lesson materials and
the plans so these new to teaching tech volunteers wouldn&amp;#39;t have to
make curricular decisions.&lt;/p&gt;
&lt;p&gt;
The lesson plan form was pretty traditional and pretty formulaic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;warm up&lt;/li&gt;
&lt;li&gt;hook&lt;/li&gt;
&lt;li&gt;instruction&lt;/li&gt;
&lt;li&gt;practice&lt;/li&gt;
&lt;li&gt;Assessment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Very similar to what I was shown back in the day during my two day
&amp;#34;teaching boot camp&amp;#34; that kicked off my career [fn:: full disclosure: I
came in to teaching with zero education credentials and took the
minimum number of ed classes for my license after I started.] and very
appropriate as an effective and efficient way to prepare these
volunteers for their first days.&lt;/p&gt;
&lt;p&gt;
This got me thinking about my lesson planning over the years.&lt;/p&gt;
&lt;p&gt;
When I started, I was teaching math but I wasn&amp;#39;t really a math
guy - I was CS all the way. I had to remember the math from high
school, learn the new topics, and figure out how to teach it.&lt;/p&gt;
&lt;p&gt;
I had a very supportive department but they were busy with their own
classes and this was pre internet. Fortunately, the NYC DOE published
lesson plan books. They were basically bound volumes of xerox copies
of hand written and typed lesson plans provided by experienced
teachers.&lt;/p&gt;
&lt;p&gt;
I spent many hours copying them, studying  them, and then later
tweaking them.&lt;/p&gt;
&lt;p&gt;
They were a life saver back then. How was the teaching? OK. Not
great. I got the material to the kids but I was nothing special. This
is where I started to form my bias against the scripted teaching
that&amp;#39;s being pushed down today.&lt;/p&gt;
&lt;p&gt;
As I developed my chops, I started to design my own experiences for my
classes and things improved. By the time I was done teaching math -
maybe 4 years in, I was just scratching the surface of being a math
teacher.&lt;/p&gt;
&lt;p&gt;
One year in, I started teaching CS along with math at Seward
Park. When I was bumped to Stuy, I went back to math for  a year and a
half and then it was all CS all the time.&lt;/p&gt;
&lt;p&gt;
For CS, we didn&amp;#39;t have lesson plan books so I had to craft everything
from scratch. It was a lot of work but the results were much better.&lt;/p&gt;
&lt;p&gt;
At first, I would actually write out lesson plans a la math lesson
plans. A &amp;#34;do now,&amp;#34; &amp;#34;instructional objectives,&amp;#34; &amp;#34;applications,&amp;#34;
&amp;#34;Homework,&amp;#34; etc. The only thing I never formally wrote out was a
&amp;#34;medial summary.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Over time, my lessons got better but my lesson plans looked worse and
worse.&lt;/p&gt;
&lt;p&gt;
There were times a lesson plan might look something like this:&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/lesson-plans/plan.jpg&#34; alt=&#34;/img/lesson-plans/plan.jpg&#34; title=&#34;/img/lesson-plans/plan.jpg&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
OK, not exactly but as I developed at my craft, I didn&amp;#39;t need a laid
out script to follow line for line  rather, just a set of little
reminders and maybe some printed out code. If we were going to develop
a complicated algorithm or derivation, though, I would still write out
all the steps.&lt;/p&gt;
&lt;p&gt;
This doesn&amp;#39;t mean that as my career progressed I planned any less. It
might appear that I&amp;#39;m winging it but even if little to nothing is
written down, there is a plan and there&amp;#39;s always a lot of pre work
before class begins.&lt;/p&gt;
&lt;p&gt;
Now, to bring this back to TEALS.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s interesting how what&amp;#39;s good in one context is not so much in
another.&lt;/p&gt;
&lt;p&gt;
What TEALS is doing is great - they&amp;#39;ve got to get a lot of
technologists in to classrooms quickly but once there, they&amp;#39;ll be with
real, hopefully experienced teachers. What they&amp;#39;re doing gets them
ready to go. It&amp;#39;s a starting point, not an end.&lt;/p&gt;
&lt;p&gt;
On the other hand, when I see scripted curriculum being sold as the
special sauce, be it in CS teacher &amp;#34;training,&amp;#34; Teach for America
summer prep or in the name of charter school uniformity, I run the
other way.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s prepare curricular  materials for important programs like TEALS
and for beginning teachers just starting out but let&amp;#39;s not confuse a
scripted lesson that can be delivered by one and all to be anything
close to the work of a master educator and craftsman.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Navajo Math Circles</title>
      <link>https://cestlaz.github.io/posts/navajo-circles/</link>
      <pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/navajo-circles/</guid>
      <description>&lt;p&gt;
Yesterday, I saw the New York Premiere of &lt;a href=&#34;http://www.zalafilms.com/navajo/&#34;&gt;Navajo Math Circles&lt;/a&gt;, a
documentary on a &lt;a href=&#34;http://www.mathcircles.org/&#34;&gt;Math Circle&lt;/a&gt; put in place to support and enrich the
currently under-served community in the Navajo educational system.&lt;/p&gt;
&lt;p&gt;
At their core, Math Circles are math outreach and enrichment
programs. I&amp;#39;m most familiar with the &lt;a href=&#34;https://www.nymathcircle.org/&#34;&gt;New York Math Circle&lt;/a&gt;. I&amp;#39;m friends
with many of their teachers and organizers and my son took part in
their summer program for a couple of years.&lt;/p&gt;
&lt;p&gt;
Over in the southwest, these Math Circles have been bringing together
students, frequently across great distances each day to explore
problem solving and creativity through mathematics.&lt;/p&gt;
&lt;p&gt;
As someone who&amp;#39;s worked hard to bring educational opportunities to the
have nots, I love the program. Some of the highlights include the kids
working on open ended problems, focusing on process and techniques
more than specific results, working both collaboratively but also
developing self sufficiency, and more. I also love the fact that
they&amp;#39;ve started teacher math circles to help to bring some of that
math circle magic to the everyday classroom.&lt;/p&gt;
&lt;p&gt;
I enjoyed the film and recommend you check it out to see what&amp;#39;s
possible and I want to share my two big takeaways.&lt;/p&gt;
&lt;p&gt;
First, early on in the film, one of the people running the program
talked about developing a math enrichment program through and with
Navajo traditions and culture. This is HUGE and I feel it&amp;#39;s something
we&amp;#39;re losing. America is so diverse from coast to coast and here in
New York City you can see radically different ways of life living
right across the street from each other. Everyone pays lip service to
&amp;#34;making the work interesting and relevant to the student&amp;#34; but few
people walk the walk. These folk do.&lt;/p&gt;
&lt;p&gt;
Second, I left the documentary with a sour taste in my mouth. Not
because of the program but because the Navajo Math Circle project and
projects like it are scraping together what little resources they can
to try to do what the school systems should be doing to begin with.&lt;/p&gt;
&lt;p&gt;
As we move to scripted lessons, national standards, curricula dictated
or at least influenced by large private concerns and standardized
tests, our schools are moving further and further away from community
and local culture.&lt;/p&gt;
&lt;p&gt;
In the documentary, one student pointed out that in math class, they
have to use the textbook. They learn the process and then have to
solve the problems. In Math Circle, there are no textbooks.&lt;/p&gt;
&lt;p&gt;
Afterwards, the students in from the Math Circle did some Q&amp;amp;A. I asked
them to elaborate - what&amp;#39;s the difference between there Math Circle
experiences and their in school ones. I got:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Math Circle is fun!!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think that says it all.&lt;/p&gt;
&lt;p&gt;
I know many great teachers who try to bring culture and community to
their classes. One of my son&amp;#39;s best teachers, &lt;a href=&#34;http://www.heinemann.com/authors/828.aspx&#34;&gt;Paula Rogovin&lt;/a&gt; did it all
the time. Many of my friends and colleagues try to do so as well but
the powers that be make it harder and harder.&lt;/p&gt;
&lt;p&gt;
Until we win back public education it&amp;#39;s important to support programs
like Math Circles (and, if I do say so myself, programs like our own
&lt;a href=&#34;http://cstuy.org&#34;&gt;CSTUY&lt;/a&gt;) and it&amp;#39;s also critical that we work to try to bring community
and culture to our regular classes.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>