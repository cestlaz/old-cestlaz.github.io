<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software engineering on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/software-engineering/</link>
    <description>C&#39;est la Z (software engineering)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Apr 2018 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/software-engineering/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Pull Requests and Other People&#39;s Code</title>
      <link>https://cestlaz.github.io/posts/pull-requests/</link>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/pull-requests/</guid>
      <description>&lt;p&gt;
One of the things I&amp;#39;ve heard for years from former students - both
those looking for jobs and those looking to hire is that colleges
don&amp;#39;t really do a good job preparing students for careers in
tech. Sure they teach the algorithms and the theory but ther are a lot
of missing pieces, particularly on the practical end. I&amp;#39;m certainly
not advocating turning CS programs into coding schools but there are
many low cost opportunities to bring practical real world best
practices in to the CS classroom. I most recently wrote about &lt;a href=&#34;http://cestlaz.github.io/posts/testing-part2%0A&#34;&gt;unit
testing&lt;/a&gt; and had earlier about using &lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4&#34;&gt;GitHub as an educational
tool&lt;/a&gt;. I&amp;#39;ve been happy with the way I introduce students to Git and
how we use GitHub in my classes but I&amp;#39;ve never found a smooth way to
introduce Pull Requests. A pull request is basically a mechanism by
which one can suggest a change to a project even if you don&amp;#39;t own
it. The project owner can then decide to merge it in or not.&lt;/p&gt;
&lt;p&gt;
Being comfortable with the pull request work flow is an important part
of contributing to open source projects. The basic process is that you
make a copy of the project you want to work on by forking it, make
your changes, then issue a pull request back to the project. For a
beginner, there are a lot of moving parts. Instead, I teach my
students branching and merging within a project. It&amp;#39;s much easier and
arguably more useful for day to day projects. I&amp;#39;d like my kid to learn the
pull request mechanics but I haden&amp;#39;t thought of a good way to do it.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve also wanted to give kids more real world experiences in class and
one experience they rarely get is working in other people&amp;#39;s code
bases. In school you largely write your own projects be they group or
solo or work off a hopefully tried and true code base provided by the
instructor. In the real world you&amp;#39;re frequently working off of someone
elses code and it&amp;#39;s rarely in a polished state.&lt;/p&gt;
&lt;p&gt;
I finally found a way to kill both birds with one stone. A couple of
weeks ago my class&amp;#39; lab was rather lengthy. It involved reading in a
source file and reformating it in a sensible way. I knew most of the
students wouldn&amp;#39;t finish it in the allotted time and even if they did,
this was an easy assignment to extend. On lab day I had students
create a new repo for this lab (normally they just add a folder in a
their &amp;#34;labs&amp;#34; repo) and get as much done as they could. The rule was
simple - push what you&amp;#39;ve got up to GitHub at the end of class and
then you can&amp;#39;t push anything else. I also made it clear that I didn&amp;#39;t
expect a completed lab..&lt;/p&gt;
&lt;p&gt;
We continued the lab in the next class session. This time. I randomly
assigned repos to students so that they would fork someone elses
lab. They then had to complete the lab on the other students code base
and then issue a pull request back to the original&lt;/p&gt;
&lt;p&gt;
This was the first time I&amp;#39;ve tried this so it was a little
klunky. I&amp;#39;ll do a much better job specifying the assignment and
instructions next time around but even so I think the class went
well. By the end of the class the students had sucesfully forked a
project, issued a pull request, and merged one in to their own
project. The only think I wasn&amp;#39;t happy with was that many of the
merges happened automatically. I have to figure out how to set things
up so that there are merge conflicts since I want my students to
experience that.&lt;/p&gt;
&lt;p&gt;
Overall,  I was very happy with the way things worked out. The
students were able to experience important real workd software
engineering techniques without removing any of the academic CS in the
class.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do It The Dumb Way</title>
      <link>https://cestlaz.github.io/posts/do-it-the-dumb-way/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/do-it-the-dumb-way/</guid>
      <description>&lt;p&gt;
There&amp;#39;s so much to like in the shape drawing lessons I talked about
in my &lt;a href=&#34;http://cestlaz.github.io/posts/refactoring/&#34;&gt;refactoring&lt;/a&gt; post that I thought I&amp;#39;d share a little more here.&lt;/p&gt;
&lt;p&gt;
It can be argued that the most important things for a program to do is work. The
most clever, elegant, creative program is worthless if it doesn&amp;#39;t
produce the desired result. All too often, beginners and hot shot beginners in particular try to
be too clever too early and get themselves into trouble.&lt;/p&gt;
&lt;p&gt;
When doing the shape drawing lessons the first couple of shape are
pretty easy&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;

| ****            |    | *               |
| ****            |    | **              |
| ****            |    | ***             |
| ****            |    | ****            |
| ****            |    |                 |
|                 |    |                 |
&lt;/pre&gt;
&lt;p&gt;
but things get more interesting with the right justified triangle:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
----*       *
---**      **
--***     ***
-****    ****
*****   *****
&lt;/pre&gt;
&lt;p&gt;
For this triangle, students want to come up with the formula for the
number of spaces. They usually figure out something like this with
&lt;code&gt;h-i-1&lt;/code&gt; spaces and &lt;code&gt;i+1&lt;/code&gt; stars:&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The formulas become harder to figure out as the shapes become more
complex and sometimes students get stymied.&lt;/p&gt;
&lt;p&gt;
The truth is that while they&amp;#39;re struggling to find the perfect
solution, it&amp;#39;s sometimes better to do it the dumb way.&lt;/p&gt;
&lt;p&gt;
Consider drawing a trapezoid like this example of height 5 and
starting width 12:&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
************
**********
********
******
****
&lt;/pre&gt;
&lt;p&gt;
A student could come up with the &amp;#34;formulas&amp;#34; for spaces and stars but
sometimes there&amp;#39;s a more straightforward way.&lt;/p&gt;
&lt;p&gt;
Consider the number of spaces on each line on the left hand side of
the shape. First line is 0 then 1, 2 etc. Why not start a variable
&lt;code&gt;spaces&lt;/code&gt; at 0 and increment it on each loop iteration.&lt;/p&gt;
&lt;p&gt;
For the number of stars, it&amp;#39;s starting at the width and being reduced
by 2 each time.&lt;/p&gt;
&lt;p&gt;
This leads to a solution similar to this (using the line routine from
the earlier refactoring post):&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This solution is simple to construct, simple to understand, and quite
frankly, hard to get wrong.&lt;/p&gt;
&lt;p&gt;
It can also lead a student to discovering a pattern or &amp;#34;formula&amp;#34; such
as what was used to solve the earlier problems.&lt;/p&gt;
&lt;p&gt;
This might seem to some as a cheap way out, the dumb approach -
creating extra variables and have them count along the way but I
don&amp;#39;t. There&amp;#39;s nothing wrong with simple and straightforward. Yes, you
could come up with an elegant formula but the bottom line is you need
something to count 0,1,2,3… so create a variable to do it. You need
something to count 12,10,8,… create one for that as well.&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m not advocating writing 100 if statements rather than a loop
but I think you get the idea.&lt;/p&gt;
&lt;p&gt;
The best solution is one that works and Sometimes the &amp;#34;dumb&amp;#34; approach is the best approach.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Part 2</title>
      <link>https://cestlaz.github.io/posts/testing-part2/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-part2/</guid>
      <description>&lt;p&gt;
A few weeks ago I wrote about &lt;a href=&#34;https://cestlaz.github.io/posts/testing-testing/#.Wq7Ud3XwZhE&#34;&gt;introducing testing&lt;/a&gt; in CS classes,
specifically using a testing framework. In that post I talked about
the plan but now I can talk about the results.&lt;/p&gt;
&lt;p&gt;
My class interleaves with Hunter&amp;#39;s CSCI 13500 - Software Analysis and
Design I class. One day each week, my students have complete a hands
on lab focusing on whatever is being covered in the 13500 class. I
decided to use one of those labs as a first foray into testing.&lt;/p&gt;
&lt;p&gt;
I had each student use a classmates lab solution. They were to examine
their solution and write a test suite for the lab using the &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt;
C++ testing framework.&lt;/p&gt;
&lt;p&gt;
I think this proved to be a valuable exercise.&lt;/p&gt;
&lt;p&gt;
Partway into the exercise, a few students independently had an issue -
they couldn&amp;#39;t even build the tests.&lt;/p&gt;
&lt;p&gt;
The code looked right. Something like this:&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It looked like at textbook example of a test case but it wouldn&amp;#39;t even
compile.&lt;/p&gt;
&lt;p&gt;
In all cases, the original student code compiled and ran and gave the
correct result. All the students had code similar to this:&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This stumped everyone for a while - why wouldn&amp;#39;t the test even
compile.&lt;/p&gt;
&lt;p&gt;
The answer was &amp;#34;data types.&amp;#34; The lab specification required that
getValue was supposed to return a &lt;code&gt;double&lt;/code&gt; but in all the problem
cases, the student returned a &lt;code&gt;std::string&lt;/code&gt;. The lab appeared to work
since &lt;code&gt;std::cout&lt;/code&gt; handles strings as well as numeric data types but
once they put it in to a test case that actually checked types the
problem was apparent and easy to fix.&lt;/p&gt;
&lt;p&gt;
As it turns out, I was pretty excited about this – even before
finishign the tests, the act of writing tests revealed a problem. This
is a good thing.&lt;/p&gt;
&lt;p&gt;
From there, it was pretty easy for students to finish writing the
tests for their classmates labs.&lt;/p&gt;
&lt;p&gt;
Fast forward a week. This was the first lab where I required
the students to submit their own test suite as part of their lab. This
didn&amp;#39;t seem to slow anyone down by an appreciable and time will tell
if this leads to better development practices but it certainly made my
life easier. I was able to quickly move from repo to repo and type:&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make tests
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./tests -s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;... watch the tests run
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--- watch the program run&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Easy peasy.&lt;/p&gt;
&lt;p&gt;
Not only did it make it faster for me, it also gave me insights into
their programs by seeing their decisions in terms of test writing.&lt;/p&gt;
&lt;p&gt;
Is it a win?&lt;/p&gt;
&lt;p&gt;
At the very worst, they&amp;#39;re learning an
industry practice and at best, it&amp;#39;s going to help them improve as
software engineers. Add on the fact that it&amp;#39;s making my life as a
teacher easier both in terms of understanding the students work and in
terms of speed of evaluation. Sounds like a win to me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing, Testing</title>
      <link>https://cestlaz.github.io/posts/testing-testing/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-testing/</guid>
      <description>&lt;p&gt;
With CS4All being the buzzword of the day we&amp;#39;re paying a lot of
attention to the fact that when we teach a CS class for all students,
most of them won&amp;#39;t end up studying CS or going directly
into a tech heavy field.&lt;/p&gt;
&lt;p&gt;
Among those that do study CS though, there is another division. Those
studying CS as an academic exercise or to go on to graduate studies
and those who are going in to the tech sector. For those going into
the tech field, it&amp;#39;s important that they&amp;#39;re prepared in terms of
software development, design, and all those goodies not covered in CS
classes.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not advocating removing the good stuff currently in most colleg CS
curricua, although I will say that most CS programs I&amp;#39;ve reveiwed could benefit by
trimming some requriements and adding some electives. I am advocating
doing more than telling your students &amp;#34;comment your code,&amp;#34; - a refrain
many undergrads have heard frequently with little guidance.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m advocating to begin by bringing in tools and practices that either
don&amp;#39;t detract from current CS classes or in fact can add to or
streamline them.&lt;/p&gt;
&lt;p&gt;
Last year I wrote about &lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4/&#34;&gt;using Git and GitHub&lt;/a&gt; in my classes. Students
have to submit projects anyway and frequently have to work in teams so
using Git and a Git hosting service can actually make both student&amp;#39;s
and instructor&amp;#39;s class experiences better while introducing them to an
industry best practice.&lt;/p&gt;
&lt;p&gt;
Today I want to talk about testing.&lt;/p&gt;
&lt;p&gt;
Students are always told to test their code but frequently not given
tremendous guidance. The results can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;projects that don&amp;#39;t compile&lt;/li&gt;
&lt;li&gt;projects that compile and run but not the way they&amp;#39;re supposed to.&lt;/li&gt;
&lt;li&gt;wonky input or interfaces&lt;/li&gt;
&lt;li&gt;projects that don&amp;#39;t work for all cases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
On the instructor side, we have to evaluate the student&amp;#39;s
submissions and deal with all of this. Some teachers use auto graders
to help. I have mixed feelings on them. On the one hand they can speed
up grading but on the other hand it&amp;#39;s important for me as the teacher
to actually dive into the student&amp;#39;s code. In any case, using an auto grader
is actually somewhat similar to running a test suite.&lt;/p&gt;
&lt;p&gt;
Why not have the students create their own test suites? If done right,
this should encourage students to evaluate their own code more
carefully and also cut down on the time it takes the intructor to
evaluate a given submission.&lt;/p&gt;
&lt;p&gt;
This means that we have to use a testing framework with a very low
cost of entry.&lt;/p&gt;
&lt;p&gt;
I ended up finding &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt; for C++. It&amp;#39;s really simple and just a
single include file. This means that students don&amp;#39;t have to actually
install anything on their machines. Here&amp;#39;s the example from the
project page:&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; alt=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; title=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
Basically, the students can just start writing tests.&lt;/p&gt;
&lt;p&gt;
Python also has a couple of low friction testing options. One is to
use the built in &lt;a href=&#34;https://docs.python.org/3/library/doctest.html&#34;&gt;doctest&lt;/a&gt; facility. Basically you put sample runs in the doc
string at the top of a function with the expected output:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This might seem a little cumbersome, particularly if you look at the
example at the link. It also requires the tests go on top of each
function and that the tests will print out as part of the docstring.&lt;/p&gt;
&lt;p&gt;
The other easy Python option is the built in &lt;a href=&#34;https://docs.python.org/3/library/unittest.html&#34;&gt;unittest&lt;/a&gt; module.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an example of testing strings from the link above:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I havn&amp;#39;t played with Java testing in years but I&amp;#39;d guess there&amp;#39;s
something similarly light weight.&lt;/p&gt;
&lt;p&gt;
Tomorrow I&amp;#39;m hoping to finish the groundwork on using C++ doctest with
my class and I&amp;#39;ll write another post afterwards. Probably after SIGCSE
since I&amp;#39;ll be attending that from Wednesday on.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll see how this goes but I&amp;#39;m guessing it will work well. If it
does, it should make my life as a grader easier and also get the kids
on track to using test frameworks - something they&amp;#39;ll need wherever
they end up.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>