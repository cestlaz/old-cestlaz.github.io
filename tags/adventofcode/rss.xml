<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>adventofcode on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/adventofcode/</link>
    <description>C&#39;est la Z (adventofcode)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Dec 2017 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/adventofcode/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Tools can shape how we think</title>
      <link>https://cestlaz.github.io/posts/advent-2017-4-6/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-2017-4-6/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been having fun with this years &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; competition. So
far, I&amp;#39;ve been able to keep up but with I expect that to change in
another couple of days since I&amp;#39;ll be traveling for the weekend.&lt;/p&gt;
&lt;p&gt;
After solving a problem, I like looking over some of the other
solutions on the Advent of Code &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;subreddit&lt;/a&gt;. Even with similar
agorithmic solutions there&amp;#39;s a decent amount of variation in the
actual code and solutions in different languages can look radically
different.&lt;/p&gt;
&lt;p&gt;
That got me thinking about how the tools we know and use both shape the ways we
approach solving problems and creating things and either limit or
empower us to go from a mental model of a solution or creation to an
actual artifact.&lt;/p&gt;
&lt;p&gt;
Relating to this are the common themes that come up in the CS
Education world. The idea that it&amp;#39;s computer science not programming
and certainly not merely coding. That&amp;#39;s true but the tools and
languages we use shape the whole thinking part and can also give the
students a valuable practical tool that they can leverage to great
advantage in both future classes and work and life endeavors.&lt;/p&gt;
&lt;p&gt;
I decided to do this rant as a video. I hope you enjoy it:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/x8cZgEogWNw&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2017 - Day 1</title>
      <link>https://cestlaz.github.io/posts/advent-2017-1/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-2017-1/</guid>
      <description>&lt;p&gt;
It&amp;#39;s once again time for &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt;. That one a day programming
competition that&amp;#39;s been running now for three years.&lt;/p&gt;
&lt;p&gt;
Here are some thoughts on &lt;a href=&#34;http://adventofcode.com/2017/day/1&#34;&gt;day 1&lt;/a&gt;. The core of the problem is that you
have a large string of digits and you have to calculate a
checksum. This is done by adding the sum of a subset of the
digits. Only the ones that are identical to the digit to their
right. To make it a little more interesting, the last digit wraps
around to the first for checksum purposes.&lt;/p&gt;
&lt;p&gt;
For example, the input &lt;strong&gt;&lt;strong&gt;2234335&lt;/strong&gt;&lt;/strong&gt; leads to the calculate &lt;code&gt;2 + 3&lt;/code&gt; or
&lt;code&gt;5&lt;/code&gt;. The input &lt;strong&gt;&lt;strong&gt;234445662&lt;/strong&gt;&lt;/strong&gt; leads to &lt;code&gt;4+4+6+2&lt;/code&gt; or &lt;code&gt;16&lt;/code&gt;. We add 4 for
twice because the first four is adjacent the second and the second the
third. We add the 2 at the end because it wraps around to match the
one at the front.&lt;/p&gt;
&lt;p&gt;
We first read in the data and strip off the trailing newline&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;origdata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;origdata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; origdata&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; origdata&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Then, since we can access the elements of the string as a list (or
array) it&amp;#39;s a simple loop to calculate the sum:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(l&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(data[i]) &lt;span style=&#34;color:#75715e&#34;&gt;# Don&amp;#39;t forget to turn the string into an int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# data[-1] is the python way of getting the last element - here we check the wraparound&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; data[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Checksum: &amp;#34;&lt;/span&gt;,s)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Pretty straightforward but I don&amp;#39;t like the special case of checking
the last element for the wraparound. Sometimes it&amp;#39;s possible to get
rid of edge cases like this by &lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-26-change-the-data.md&#34;&gt;changing the data&lt;/a&gt;. We can do that here
by simply appending a copy of the first character to the end of the
list.&lt;/p&gt;
&lt;p&gt;
This leads to a slightly cleaner solution:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(l&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(data[i]) &lt;span style=&#34;color:#75715e&#34;&gt;#don&amp;#39;t forget to turn the string into an int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Checksum: &amp;#34;&lt;/span&gt;,s)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
This is pretty much what I&amp;#39;d expect from a Python programmer that&amp;#39;s
just starting out. We can use a couple of more advanced Python
features to make what I consider a more elegant solution.&lt;/p&gt;
&lt;p&gt;
Python&amp;#39;s &lt;strong&gt;&lt;strong&gt;zip&lt;/strong&gt;&lt;/strong&gt; function takes two lists and interleaves them.
&lt;code&gt;zip(&amp;#34;abc&amp;#34;,&amp;#34;def&amp;#34;)&lt;/code&gt; will yield &lt;code&gt;[ (a,d), (b,e), (c,f)]&lt;/code&gt;. If the lists
are of different length, it just zips up until the shorter list is
exhausted. We can use array slicing to zip the input string with it&amp;#39;s
neighbor by using &lt;code&gt;new_list = zip(data,data[1:])&lt;/code&gt;. For the string &amp;#34;122344&amp;#39;
zipping gives us &lt;code&gt;[(1,2),(2,2),(2,3),(3,4),(4,4)]&lt;/code&gt;. We can put this in
a list comprehension that only keeps the tuples representing an
element with an identical neighbor and also converts it to an int:
&lt;code&gt;new_list = [int(a) for a,b in new_list if a==b]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
Finally, we can just calculate the sum. This leads to the following
complete solution:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;checksum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum([ int(a) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a,b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(data,data[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;b])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(checksum)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
List comprehensions for the win!!!!&lt;/p&gt;
&lt;p&gt;
Each Advent of Code problem has two parts. You unlock the second by
solving the first. Here, the wrinkle is that instead of checking each
digit with it&amp;#39;s neighbor to the right, you check it with the one
that&amp;#39;s halfway around the list.&lt;/p&gt;
&lt;p&gt;
With loops, the solution is just a quick modification of part 1. We
just add half the length and use mod to find the digit to compare with:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(l&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;data[(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;l]: &lt;span style=&#34;color:#75715e&#34;&gt;# check halfway around instead of adjacent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(data[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;part 2loop version: &amp;#34;&lt;/span&gt;,s)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
I wanted to see if I could do this with a list comprehension
though. The trick was to figure out how to make two lists to zip
together to get the pairs to check then add. Here&amp;#39;s the solution:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[l&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;checksum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum([ int(a) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a,b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(data,d2)&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;b])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(checksum)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The insight was that we could just make a second list that starts
halfway through and then wraps around. I did this by adding
&lt;code&gt;data[l//2:] + data&lt;/code&gt;. &lt;code&gt;l//2&lt;/code&gt; is the integer division of the length (in
Python3). &lt;code&gt;data[l//2:]&lt;/code&gt; represents the second half of data (from the
midway point to the end). Technically I should have only added the second
half of data: &lt;code&gt;data[l//2:] + data[:l//2]&lt;/code&gt; where &lt;code&gt;data[:l//2]&lt;/code&gt; gives us
the first half of the list but since zip will just stop when it
exhausts the shorter list, this wasn&amp;#39;t necessary.&lt;/p&gt;
&lt;p&gt;
Day 2 also has a nice list comprehension based solution. Maybe I&amp;#39;ll
write that up later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>It gets easier (or advent of code 2016 day 19)</title>
      <link>https://cestlaz.github.io/posts/it-gets-easier-advent19/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/it-gets-easier-advent19/</guid>
      <description>&lt;p&gt;
Today&amp;#39;s &lt;a href=&#34;http://adventofcode.com/2016/day/19&#34;&gt;Advent of Code&lt;/a&gt; problem was a variant on the &lt;a href=&#34;http://mathworld.wolfram.com/JosephusProblem.html&#34;&gt;Josephus
problem&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
I recalled that there was a formula to figure out the
sole survivor but I decide to run a simulation rather than looking it
up. I also decided to write it up in C++, well, really C with cout
instead of printf.&lt;/p&gt;
&lt;p&gt;
Part 1 was the traditional problem. Part 2 was a variant where at each
iteration, you remove the elf opposite the elf being processed (see
the &lt;a href=&#34;http://adventofcode.com/2016/day/19&#34;&gt;problem description&lt;/a&gt; for details).&lt;/p&gt;
&lt;p&gt;
For both solutions I coded up a circular doubly linked list:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;make_ring&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;current,&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;first;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;first &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; node));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;first&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;current&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;first;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;  (i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; node));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;prev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;current;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;current&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;current&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;current&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;first;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;first&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;prev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;current;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; first;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
You can see my complete solutions &lt;a href=&#34;https://github.com/zamansky/advent2016/blob/master/day19.cpp&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
I was thinking about how I wrote the code – I just rolled it off the
top of my head. The same was true for the earlier AoC problems where I
had to implement a breadth first search or something similar.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not making a statement about my amazing coding abilities - linked
lists and graph searches are pretty basic, but rather than having done
the CS thing for so long, these fundamentals have become somewhat
routine. I haven&amp;#39;t really written C code in years but other than a
couple of typos (and a stupid mistake in calculating steps) things
worked right off the bat.&lt;/p&gt;
&lt;p&gt;
I remember a time when I was in college or even a young professional
when I would use an array and an index as a stack or queue - not
because it made more sense but rather, because I wasn&amp;#39;t fully
comfortable with memory manipulation and linked lists. The same could
be said for my first few years working with anything more than the
simplest recursion.&lt;/p&gt;
&lt;p&gt;
All of this is to say that it does get easier.&lt;/p&gt;
&lt;p&gt;
Things that seem trivial to us now seemed
insurmountable when we were beginners. Last year, I wrote about an overnight homework
assignment I gave to my class that would have been a final project a
year earlier (the post is &lt;a href=&#34;http://cestlaz.github.io/posts/2015-02-11-taking-stock-self-assess.html/#.WFiGl99iekA&#34;&gt;here&lt;/a&gt; but the homework links are no longer
active) and a few weeks ago I recall a fellow CS teacher talking about
how much longer it takes his students to write a chunk of code than it
takes the teacher.&lt;/p&gt;
&lt;p&gt;
New things are challenging and take time but with practice and
persistence techniques that were once daunting can become tools ready
at our disposal to use on a whim.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2016 - Check your data</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-check-data/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-check-data/</guid>
      <description>&lt;p&gt;
I&amp;#39;m spending the weekend up in Michigan. Visiting my brother and is
family. We&amp;#39;re here to see the &lt;a href=&#34;http://umgass.org&#34;&gt;UMGASS&lt;/a&gt; production of Gilbert and
Sullivan&amp;#39;s &lt;a href=&#34;http://www.umgass.org/current-production&#34;&gt;The Sorcerer&lt;/a&gt;. Batya also came up from Cornell to join us so
the two families are all togehter for the first time in about 10
years.&lt;/p&gt;
&lt;p&gt;
This hasn&amp;#39;t left much time for &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; but I did manage to
finish yesterday&amp;#39;s challenge this morning.&lt;/p&gt;
&lt;p&gt;
What took me so long? Much like last year, it was &lt;a href=&#34;http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/&#34;&gt;because I&amp;#39;m an
idiot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
The &lt;a href=&#34;http://adventofcode.com/2016/day/9&#34;&gt;problem&lt;/a&gt; seemed pretty straighforward. I coded a solution and it
worked for all the test cases. I tried it on my data set but
the grader said the answer was wrong. I went through the problem a
number of times as well sa my code. I figured I either mis-interpreted
the question or had some bug. I found neither to be true.&lt;/p&gt;
&lt;p&gt;
After some frustration, I went over to the Advent of Code &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;subreddit&lt;/a&gt;
grabbed a couple of posted solutions (trying not to look at them) and
ran both on my data - those solutions got the same answer on my data
set as I did.&lt;/p&gt;
&lt;p&gt;
This morning, I asked Batya to look over my code and the problem (it&amp;#39;s
always good to have a daughter that&amp;#39;s smarted than you are) but she
saw no problems.&lt;/p&gt;
&lt;p&gt;
Finally, I emailed my buddy JonAlf since I know he completed the problem. He sent back his answer along
with his data set and I got the same answer as he did on his data.&lt;/p&gt;
&lt;p&gt;
What could be the problem.&lt;/p&gt;
&lt;p&gt;
His data set was about 12k characters long, mine was 4k. Something had
to be wrong here. I went back to the Advent of Code site and grabbed
the data set again. This time, I went to the page and did a &amp;#34;save-as&amp;#34;
to save it - last time, I cut and pasted.&lt;/p&gt;
&lt;p&gt;
The cut and paste version was 4k, the save-as was 12k. This time it
worked and was accepted and I also finished part 2 in short order.&lt;/p&gt;
&lt;p&gt;
The moral of the story – make sure you check the integrity of your
data set - you&amp;#39;ll never get the right answer if you&amp;#39;re working with
the wrong data.&lt;/p&gt;
&lt;p&gt;
In case anyone&amp;#39;s interested, you can find my AoC code &lt;a href=&#34;https://github.com/zamansky/advent2016&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #2</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-2/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-2/</guid>
      <description>&lt;p&gt;
Today we&amp;#39;re looking at &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; 2016 &lt;a href=&#34;http://adventofcode.com/2016/day/2&#34;&gt;number 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
To change things up, I thought I&amp;#39;d do a video where I live code a solution.&lt;/p&gt;
&lt;p&gt;
The solution I present is pretty straightforward - use a 2D array (or
technically, an array of strings) to represent the keypad, parse the
input, and follow the input instructions to build the code.&lt;/p&gt;
&lt;p&gt;
One of the things I really like about Advent of Code is that every
problem has two parts and depending on how you solved part 1, you may
or may not have extra work to do for part 2.&lt;/p&gt;
&lt;p&gt;
A couple of years ago, I wrote about one of the coding techniques I
try to convey to my students. The idea of &lt;a href=&#34;http://cestlaz.github.io/posts/2014-02-26-change-the-data.md&#34;&gt;changing the data&lt;/a&gt; to take
away edge and special cases.&lt;/p&gt;
&lt;p&gt;
Part two of this problem is a perfect time to use that technique.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video, I hope you enjoy it:&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EC8gSrYQ11g&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #1</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-1/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-1/</guid>
      <description>&lt;p&gt;
I recently &lt;a href=&#34;http://cestlaz.github.io/posts/advent-of-code-2016/&#34;&gt;posted&lt;/a&gt; about &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; - a series of programming
problems relseased one a day. While they vary in terms of level of
difficulty, a number of them make nice problems for introductory to
mid level programming classes.&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d share some of my thoughts on a few of them starting with
the first problem from this years competition.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode.com/2016/day/1&#34;&gt;Take a minute to read it over.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
At first glance, it might seem to a young programmer that this problem
requires a two dimensional array - all about (x,y) coordinates but
then there&amp;#39;s a problem - there are no limits on coordinates and we
can&amp;#39;t make an unlimited size array.&lt;/p&gt;
&lt;p&gt;
After thinking a bit, hopefully the programmer realizes that all they
need to do is keep track of the how the &lt;strong&gt;&lt;strong&gt;(x,y)&lt;/strong&gt;&lt;/strong&gt; location changes over
time. In the solution below, we start at &lt;strong&gt;&lt;strong&gt;(0,0)&lt;/strong&gt;&lt;/strong&gt; and count the steps as
we update two variables &lt;strong&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
When we finish processing the moves, we have our current location in
&lt;strong&gt;&lt;strong&gt;(x,y)&lt;/strong&gt;&lt;/strong&gt; and we have the number of steps taken to get there.&lt;/p&gt;
&lt;p&gt;
The solution below hsa a couple of niceties that a beginning
programmer might not know or use (and I&amp;#39;m not arguing that what&amp;#39;s written is
superior in any way, it&amp;#39;s just what I ended up writing).&lt;/p&gt;
&lt;p&gt;
I make use of tuple destructuring:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x,y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
which assigns &lt;strong&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/strong&gt; to the first item in the tuple and &lt;strong&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/strong&gt; the
second. I used that a number of times&lt;/p&gt;
&lt;p&gt;
I also use a list  I call &lt;strong&gt;&lt;strong&gt;dirs&lt;/strong&gt;&lt;/strong&gt; to hold dx and dy values for the
four direcitons:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dirs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
This made it easier to to update the location based on the 4
directions. I could also have just used if statements.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s all the code:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x,y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# assume our starting location is 0,0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# we start with d=0 -&amp;gt; facing north&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# as we turn left or right, we can just increment or decrement d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# and dirs[d] will give us the appropriate dx and dy to update&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# our locatoin for the next step&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dirs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is only needed for part 2  - We track visited locations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# by adding them to the dictionary. If we try to add a location&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# that&amp;#39;s already been visited we know that we&amp;#39;ve found our final&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# location&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# locs={}  # uncomment this line for part 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;totalsteps&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; l:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# the first char in i is the direction to turn in (L or R)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# the rest represents the number of steps.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;steps&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int(i[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dir&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (d&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (d&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(dx,dy) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dirs[d]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(steps):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(x,y) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dx, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dy)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;totalsteps&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;totalsteps&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment this block for part 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# each time we have a new location, see if it&amp;#39;s already in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# locs, if it isn&amp;#39;t, add it.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# if it is, we&amp;#39;re visiting somewhere twice so we&amp;#39;re done.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if ((x,y) not in locs):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#    locs[(x,y)]=1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#else:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#    print((x,y))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#    print(abs(x)+abs(y)) # the answer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#    sys.exit(0)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#    break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(x,y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(abs(x)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;abs(y)) &lt;span style=&#34;color:#75715e&#34;&gt;# the answer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Overall, a nice little problem for beginning and intermediate
students.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2016</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016/</link>
      <pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016/</guid>
      <description>&lt;p&gt;
Once again, it&amp;#39;s time for &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; - a series of small
programming problems released once a day.&lt;/p&gt;
&lt;p&gt;
I wrote a bit about it &lt;a href=&#34;http://cestlaz.github.io/posts/2015-12-15-advent.html/&#34;&gt;last&lt;/a&gt; &lt;a href=&#34;http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/#.WEMqBB9ieYQ&#34;&gt;year&lt;/a&gt; and you can still find last years
problems &lt;a href=&#34;http://adventofcode.com/2015/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s only day three but so far, all of the problems look really nice
for students in APCS-A or any similar intro course. I&amp;#39;m thinking of
looking at a couple of the problems this week with my class at Hunter.&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t think about this much last year but one thing I really like
about the competition is that each problem comes in two parts. You&amp;#39;re
first presented with the problem and the input and once you put in the
correct answer, you&amp;#39;re presented with part two.&lt;/p&gt;
&lt;p&gt;
This can be annoying at times, particularly when it requires a large
code rewrite but it also means that well designed, not too specific
solutions are rewarded.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not quite the same as changing the specs on a project mid way but
it does encourage thinking about more than just solving a super
specific problem.&lt;/p&gt;
&lt;p&gt;
Check out &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; and see if it&amp;#39;s something you or your classes
might enjoy.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>