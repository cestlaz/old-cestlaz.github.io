<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jobs on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/jobs/</link>
    <description>C&#39;est la Z (jobs)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Apr 2022 14:41:05 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/jobs/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Should CSforAll focus on entrepreneurship and jobs?</title>
      <link>https://cestlaz.github.io/post/cs-for-jobs/</link>
      <pubDate>Thu, 14 Apr 2022 14:41:05 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-for-jobs/</guid>
      <description>&lt;p&gt;
Is CSforAll a jobs program? This came up again the other day.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I&amp;#39;m using a recent review as an excuse to ask more general questions.&lt;br&gt;&lt;br&gt;Is &lt;a href=&#34;https://twitter.com/hashtag/CSforAll?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#CSforAll&lt;/a&gt; a jobs program or preparing future citizens? &lt;br&gt;&lt;br&gt;Does learning about CS belong just to STEM education?&lt;br&gt;&lt;br&gt;Should we only teach CS to Ss with math background, or can we teach CS to Ss who hate math? &lt;a href=&#34;https://t.co/k030BHoZ93&#34;&gt;https://t.co/k030BHoZ93&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mark Guzdial (@guzdial) &lt;a href=&#34;https://twitter.com/guzdial/status/1511340494462279684?ref_src=twsrc%5Etfw&#34;&gt;April 5, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
With one of the referenced tweets talking about CS salaries.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Median pay in tech jobs:&lt;br&gt;&lt;br&gt;Snap: $327,710&lt;br&gt;Google (Alphabet): $295,884&lt;br&gt;Facebook (Meta): $292,785&lt;br&gt;&lt;br&gt;All the more reason for public schools to teach computer science so that underserved populations have a chance at these jobs.&lt;/p&gt;&amp;mdash; Hadi Partovi (@hadip) &lt;a href=&#34;https://twitter.com/hadip/status/1512592779083280388?ref_src=twsrc%5Etfw&#34;&gt;April 9, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
I think Hadi&amp;#39;s numbers are a little high but that&amp;#39;s not really the
point.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve actually been meaning to write about this for a while going back
to &lt;a href=&#34;https://www.thisisgoingtobebig.com/blog/2019/1/6/sevens-dont-get-funded&#34;&gt;this really great post&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/ceonyc&#34;&gt;Charlie O&amp;#39;Donnell&lt;/a&gt; titled &lt;a href=&#34;https://www.thisisgoingtobebig.com/blog/2019/1/6/sevens-dont-get-funded&#34;&gt;Sevens Don&amp;#39;t Get
Funded&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen arguments on all sides of this issue. On the one hand,
people in the tech industry are big on the jobs side of things. This
is in part because the more people who go into tech the more resources
they have for their companies. I also think that a lot of the people
on the tech side have seen tech work for them and allow for successful
careers so they see CS education as providing others with a similar
path. I also see a number of teachers with this view - they&amp;#39;re
teaching kids in poverty and see this as a potential way out. Nothing
wrong with this point of view and for CSforAll to really get anywhere
it&amp;#39;s certainly helpful to have a region&amp;#39;s business leaders on board.&lt;/p&gt;
&lt;p&gt;
On the other side, I have many colleagues at Hunter and other
intuitions who get offended at the merest mention that anything we
teach be in any way practical as it hurts the purity of our academic
mission. Needless to say, I&amp;#39;m not in  this extreme camp but I do think
that CS should be much more than a jobs program.&lt;/p&gt;
&lt;p&gt;
This tension has been there from the begining. Are we teaching K12 CS
for aspiring CS majors who will go into academia? Those who will be
software engineers? Everybody else? Or a combination.&lt;/p&gt;
&lt;p&gt;
To complicate matters, at least in my experience is that the business
push very frequently comes with a push for entrepreneurship. We need
more kids starting their own tech companies. I suspect much of this is
well meaning. They see the next big thing and would love to see a
group of founders from the other side of the tracks figure it out.&lt;/p&gt;
&lt;p&gt;
In my time in CS Ed in NYC I&amp;#39;ve seen a tremendous push for
entrepreneurship. Many programs that have touted themselves as CS
programs were really entrepreneurship programs with a little tech and
this concerns me.&lt;/p&gt;
&lt;p&gt;
This is where Charlie&amp;#39;s piece got me thinking.&lt;/p&gt;
&lt;p&gt;
Charlie says he gets around 2000 pitches in his inbox a year but only
makes around 10 investments. This seems consistent with ratios I&amp;#39;ve
seen for other venture capitalists. This means if you&amp;#39;re going to get
that investment on your startup idea you&amp;#39;ve got to really stand out or
to quote the article:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It might be that your company is a seven (out of 10)  — a perfectly acceptable, but
not particularly exciting seven.&lt;/p&gt;
&lt;p&gt;
If you’re trying to be one of the best ten things I see in a
year—worth risking LP capital on, then a seven just isn’t going to
make it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Even if you are funded, the majority of startups don&amp;#39;t succeed. I&amp;#39;ve
read that 10% of startups provide nearly all the returns for a fund
and other similar numbers indicating that failure is much more likely
than success.&lt;/p&gt;
&lt;p&gt;
Now, if you&amp;#39;re a venture capitalist and looking at the big picture
from the top, the more entrepreneurs the better but if you&amp;#39;re a kid
from the lower economic rungs I don&amp;#39;t know if we should be pushing
entrepreneurship as the ticket out.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m reminded of a friend of mine who does outreach, recruiting, and
interviewing for his alma mater which is  one of the hardest
institutions to gain acceptance to in the USA. On the one hand, he had
a great experience and wants to share that with others. On the other
hand, he also recognizes that for even the best student he pitches to,
he&amp;#39;s likely to be building them up for disappointment.&lt;/p&gt;
&lt;p&gt;
As a teacher who&amp;#39;s worked with fragile kids, I can tell you that
you&amp;#39;ve got to tread lightly here. Setting kids up for failure is more
than bad, it&amp;#39;s dangerous.&lt;/p&gt;
&lt;p&gt;
If it were up to me, I&amp;#39;d put the &amp;#34;you can start a company&amp;#34; out there
but in the background and if you want to focus on jobs then put the
focus there, on the job - the fact that you&amp;#39;ll be able to put bread
on the table regardless of how the economy turns and yes, you will be
able to start your dream company if you want but you don&amp;#39;t have to do
it out of the gate. Build your network, your skills, and, very
importantly for kids climbing out of poverty, your safety nets and
then start that company.&lt;/p&gt;
&lt;p&gt;
So, where do I stand overall with this? Basically the same place I
stood when I designed Stuy&amp;#39;s intro to CS course or, as more than a
couple of friends have termed the course &amp;#34;stuff Z likes.&amp;#34; Yes, I want
to motivate kids to go further in CS but I know the majority won&amp;#39;t and
probably shouldn&amp;#39;t, after all, it takes a village. I want to provide
that motivation while also providing value to the rest. &lt;/p&gt;
&lt;p&gt;
At a very broad, basic level, people in different disciplines look at
the world through different lenses. K12 CS should expose students with
what the world can look like through a CS lens and how all the
different lenses can relate, complement, and support each other. It
should also teach practical tech related skills that should benefit
all students. I&amp;#39;m not talking &amp;#34;using a word processor&amp;#34; here but more
so programming. Digital citizenship should also be included. With all
this it should also expose all the students with enough info so that
those that want to go further in tech or CS are both excited to and
prepared to do so.&lt;/p&gt;
&lt;p&gt;
At Stuy, we found that this could be done in a one semester 10th grade
class. We&amp;#39;ve hand a huge number of kids end up going into tech and CS
and come back later to tell us that it wasn&amp;#39;t on their radar at all
until they took the required course. I&amp;#39;ve also had plenty of kids who
went into other fields proclaim that their intro CS experience at Stuy
was still one of their most valuable classes ever. Of course, if
you&amp;#39;re offering more classes over more grade it opens many other
possibilities - embedding in other subjects, integrating classes and
more.&lt;/p&gt;
&lt;p&gt;
At the end of the day we&amp;#39;ll have a larger pool and a more diverse pool
of students going into tech and for the majority of students, who
won&amp;#39;t do pure tech, they&amp;#39;ll be more tech savvy, be able to use the
mental and practical tools of the trade to suport them in whatever
their endeavors turn out to be. &lt;/p&gt;
&lt;p&gt;
So, CSforAll in K12 isn&amp;#39;t about jobs. It&amp;#39;s about exposure and teaching
some fundamentals. Setting kids up so that they will have a better
idea as to if they want to go into tech and if they do they&amp;#39;ll be
better prepared while at the same time giving all students the
fundamentals of CS both in terms of problem solving and looking at the
world and practical skills. &lt;/p&gt;
&lt;p&gt;
The funny thing, is that on the higher ed side, I think they have to
go the other way and become more responsive to job demands. In spite
of the way so many CS programs are designed, the majority of kids have
no intention of going on to a higher degree and CS is one of the few
disciplines where there is a direct path from college to a well paying
job and that shouldn&amp;#39;t be ignored. You can keep your academic rigor
and purity but at the same time the programs that acknowledge that
the majority of their students will benefit from specific tools and
skills will better serve their students. Practical and real world are
not dirty words.&lt;/p&gt;
&lt;p&gt;
So, I&amp;#39;ve rambled on for a while and probably been a little all over
the place but you know what, education is all over the place. We&amp;#39;re
talking about taking young people and preparing them for life and
their life journeys. That means different things for different people
and so it should be with K12 CS. Not entirely a jobs program but yes,
jobs are on the radar. Not entirely CS for CS but that&amp;#39;s there too. So
is integration and support of other subject areas and more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Whiteboard interviews</title>
      <link>https://cestlaz.github.io/posts/whiteboard-interviews/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/whiteboard-interviews/</guid>
      <description>&lt;p&gt;
A few days ago, I saw a &lt;a href=&#34;https://theoutline.com/post/1166/programmers-are-confessing-their-coding-sins-to-protest-a-broken-job-interview-process%0A&#34;&gt;piece&lt;/a&gt; on &lt;a href=&#34;https://twitter.com/dhh&#34;&gt;David Heinemeier Hansson&amp;#39;s&lt;/a&gt; tweet on
whiteboard interviews:&lt;/p&gt;
&lt;div class=&#34;html-block&#34;&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Hello, my name is David. I would fail to write bubble sort on a whiteboard. I look code up on the internet all the time. I don&amp;#39;t do riddles.&lt;/p&gt;&amp;mdash; DHH (@dhh) &lt;a href=&#34;https://twitter.com/dhh/status/834146806594433025&#34;&gt;February 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;
I&amp;#39;m not a huge fan of the whiteboard interview but I think many of the
tweets missed the point. Most of the whiteboard interviews I&amp;#39;m
aware of involve algorithmic problem solving while the tweets, at
least the ones I&amp;#39;ve seen all refer to things that indeed one would
look up. Things like API calls - not things that whiteboard interviewers
typically care about.&lt;/p&gt;
&lt;p&gt;
Tim Bray takes that point of view and shared his thoughts in a
&lt;a href=&#34;https://www.tbray.org/ongoing/When/201x/2017/03/04/Whiteboard-Interviews&#34;&gt;recent blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
The idea behind the whiteboard interview isn&amp;#39;t all bad. The
interviewer has an opportunity to see how the candidate thinks and
works through a problem and in an ideal situation the interviewer is,
at least to a point, coaching the candidate to help them through the
process. It seems to me that the problem lies more in the types of
questions asked and the skill of the interviewer rather than the idea
that candidates work through a problem live.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d imagine that whiteboard interview success skew towards candidates
who work well in isolation in a short period of time, have a good
amount of exposure to these types of algorithmic problems. Also those
who have practiced and trained specifically for the interview will
have a huge edge. For people new to the process, it can be very
stressful.&lt;/p&gt;
&lt;p&gt;
Once a candidate has accepted a position, they&amp;#39;ll likely be working
with a team, with additional resources, and with time to solve
problems. This is a very different environment.  The whiteboard
interview, much like the SAT is thus something of an arbitrary
gatekeeper that a candidate must prepare for and conquer rather than a
skill that they must develop that will make them a more productive
team member.&lt;/p&gt;
&lt;p&gt;
This whole process tends to advantage those with the time and
background to prepare - this is one of the places where the argument
that whiteboard interview hurt diversity come from.&lt;/p&gt;
&lt;p&gt;
I could be totally wrong but I seem to recall that the whiteboard
interview, at least in terms of external visibility grew out of the
legendary Google puzzle interview questions.&lt;/p&gt;
&lt;p&gt;
A tech giant like Google can interview however they like and they&amp;#39;ll
still get the talent. They go to the most selective institutions where
candidates have already been culled for success. If they then interview 100
candidates and 10 of them would be good fits, as long as a couple
thrive through the whiteboard interview process, they&amp;#39;ll get their
engineer. They&amp;#39;ll miss out on a lot of great talent but they can cast
such a large net they&amp;#39;ll fill there seats with productive employees.&lt;/p&gt;
&lt;p&gt;
On the other hand, smaller companies will certainly miss out on great
talent if they follow the same approach.&lt;/p&gt;
&lt;p&gt;
Is there a better way?&lt;/p&gt;
&lt;p&gt;
Some companies pre-assign mini projects and then discuss that at the
interview. Pairing could also be a lower stress alternative to the
technical interview. Another option would be to look at a candidates
existing projects.&lt;/p&gt;
&lt;p&gt;
An interesting question is &amp;#34;why do so many companies use the
whiteboard interview?&amp;#34; I can&amp;#39;t say for certain but I wouldn&amp;#39;t be
surprised if it was a simple as &amp;#34;because Google does it.&amp;#34;&lt;/p&gt;
&lt;p&gt;
For over 100 years, Stuyvesant high school required students study
mechanical drawing (drafting). The relevance of the subject lessened over the
decades and what was taught in many ways has become a joke. A typical
class during the CAD parts of the class might be going over the
&lt;strong&gt;&lt;strong&gt;cylinder&lt;/strong&gt;&lt;/strong&gt; command in CadKey. That&amp;#39;s like spending a day studying
the &lt;strong&gt;&lt;strong&gt;edit&lt;/strong&gt;&lt;/strong&gt; menu in Microsoft Word in an English class. If you can&amp;#39;t
tell, I&amp;#39;m not a fan. Drafting at Stuyvesant is the vestigial organ of
the course of study.&lt;/p&gt;
&lt;p&gt;
My point isn&amp;#39;t to bash drafting at Stuy but rather that there have
been any number of schools that require their students take drafting
even though it doesn&amp;#39;t prepare students for, nor lead them to anything
else in the schools curriculum (which now can be said for Stuy&amp;#39;s
drafting requirement). I&amp;#39;ve spoken to teachers and principals at these
schools and we go back and forth as I press them for the reason for
the requirement and ultimately, they tell me that their school
requires drafting &amp;#34;because Stuyvesant does.&amp;#34;&lt;/p&gt;
&lt;p&gt;
Why do so many small companies employ the whiteboard interview?
Because the big kids do. The trouble is that the big kids can get away
with it, the smaller players on the other hand, are hurting
themselves. Even the bigger players would be well served to
try to come up with an interview process that better assesses fit
rather than a course filter that while it does pull in talent misses
talent as well.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>