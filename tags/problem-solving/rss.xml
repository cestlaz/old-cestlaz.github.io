<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>problem solving on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/problem-solving/</link>
    <description>C&#39;est la Z (problem solving)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Dec 2017 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/problem-solving/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Breaking down problems and writing</title>
      <link>https://cestlaz.github.io/posts/whats-next/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/whats-next/</guid>
      <description>&lt;p&gt;
This question appeared on Facebook a few days ago:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Does anyone have an effective way to teach students how to break down
a problem into steps and then solve each step one by one? I think my
students are struggling with a large question and breaking it in
subsequent parts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There were some good suggestions. I wanted to add something but didn&amp;#39;t
have time then so I thought I&amp;#39;d write it up now.&lt;/p&gt;
&lt;p&gt;
As an aside, it took me forever to find the post again over on
Facebook. If there&amp;#39;s a way to mark posts or save a direct link I&amp;#39;d
love to hear it. I had to look through all the CS Ed groups I belong
to manually until I found it again.&lt;/p&gt;
&lt;p&gt;
When I read the program I was reminded of a PD session we had to
attend back at Stuyvesant. Back then the fad was &lt;a href=&#34;https://en.wikipedia.org/wiki/Writing_across_the_curriculum&#34;&gt;Writing Across the
Curriculum&lt;/a&gt;. Every teacher in every class was to give some significant
writing assignment, evaluate it and provide feedback. Let&amp;#39;s forget the
fact that most of us never had any training or preparation to do so.&lt;/p&gt;
&lt;p&gt;
On that PD day the guest speaker was &lt;a href=&#34;https://en.wikipedia.org/wiki/William_Zinsser&#34;&gt;William Zinsser&lt;/a&gt;. The first thing
he said was that what we were being asked to do by our principal was
bunk. He then proceeded to give advice on  simple good writing.&lt;/p&gt;
&lt;p&gt;
The procedure he recommended following was to ask yourself (or have
the student ask themselves) &amp;#34;what does my audience need to know next?&amp;#34;
That&amp;#39;s your next sentence. Then ask the question again. Rinse and
repeat until done.&lt;/p&gt;
&lt;p&gt;
It was simple and it made sense. It also applied to introductory CS
problems. When starting out, students have a limited CS / programming
tool box so a good question for them to ask when trying to solve a
problem is not only &amp;#34;what do I need to do next? but also &amp;#34;what can I
do next?&amp;#34;&lt;/p&gt;
&lt;p&gt;
When students have a limited CS vocabulary and set of idioms - loops,
conditionals, functions, whatever, there will only be so many things
they can do to move a problem along. If they go through the things the
&lt;strong&gt;&lt;strong&gt;can&lt;/strong&gt;&lt;/strong&gt; do they will likely fall on to what they &lt;strong&gt;&lt;strong&gt;should&lt;/strong&gt;&lt;/strong&gt; do.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s similar to doing a proof in geometry. Students have a set of
givens. Given that set, what can they do? They only know so many
theorems at the beginning.&lt;/p&gt;
&lt;p&gt;
Over time, they&amp;#39;ll recognize patterns and develop as problem solvers.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re part of the AP CS A teachers facebook group you probably saw
the question. Many good answers were posted. I just wanted to add this
thought to the collection.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>