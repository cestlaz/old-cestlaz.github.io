<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pedagogy on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/pedagogy/</link>
    <description>C&#39;est la Z (pedagogy)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Sep 2021 13:31:22 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/pedagogy/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>A Memorable Lesson (at least for one student)</title>
      <link>https://cestlaz.github.io/post/a-memorable-lesson/</link>
      <pubDate>Fri, 10 Sep 2021 13:31:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/a-memorable-lesson/</guid>
      <description>&lt;p&gt;
Back to calling an audible.&lt;/p&gt;
&lt;p&gt;
Around seven years ago I was visiting with some former students at
Google in Mountain View. One of them from way back in the late 90s,
Pawel, out of the blue said there was one lesson I taught that was
particularly memorable. Not memorable in the &amp;#34;that was fun&amp;#34; way like
maybe my Halloween adventures but memorable in that he felt he got a
lot more out of it than a normal lesson. Pawel mentioned a few of the
things he still remembered about a lesson he saw over two decades
earlier. &lt;/p&gt;
&lt;p&gt;
It was, in fact, one of the first big CS audibles that I can
remember calling. &lt;/p&gt;
&lt;p&gt;
It was second semester APCS - probably right after the AB exam. I
guess I&amp;#39;d been teaching around seven years so I&amp;#39;d classify myself as
an advanced beginner. I also hadn&amp;#39;t done any serious programming and
problem solving since I started teaching.&lt;/p&gt;
&lt;p&gt;
Was I a fraud?&lt;/p&gt;
&lt;p&gt;
Impostor syndrome was creeping in.&lt;/p&gt;
&lt;p&gt;
Back then I had a bunch of students who participated in the &lt;a href=&#34;http://usaco.org/&#34;&gt;USACO&lt;/a&gt; and
would discuss the programming from their competitions. While I talked
a good game, I started to wonder if I could back it up. Should I
really be telling these kids about best practices for problem solving
ad programming if I just talked the talk and couldn&amp;#39;t walk the walk?&lt;/p&gt;
&lt;p&gt;
To test myself, I decided to work through some of the competition problems. I figured
that I didn&amp;#39;t have to be able to solve the hardest of the hard ones
since only the best of the best solved in that stratosphere but if I
should be able to solve or at least approach most of the advanced
problems.&lt;/p&gt;
&lt;p&gt;
After some problem solving and coding I felt much better about
myself. I wasn&amp;#39;t living a lie.&lt;/p&gt;
&lt;p&gt;
I particularly liked the Digit Pals problem. Question 4 from the
1996-1997 &lt;a href=&#34;https://www.angelfire.com/ca2/lorddave/usa974.html&#34;&gt;National Championship&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Fast forward to class a few days later. Early in the period, for some
reason, I wasn&amp;#39;t happy with where things were going so I decided to
totally change directions. I decided I&amp;#39;d do a lesson that was
basically a walkthrough of my problem solving and coding process for
Digit Pals.&lt;/p&gt;
&lt;p&gt;
I started by looking at the problem, working through example and then
some of the things we discussed included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;data representation (2D array)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the high level logic of removing a digit pal (recursive flood fill)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the high level logic of sliding down and over&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how to solve the whole thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the overall solver, I decided to go with a straightforward, blind,
recursive search. I figured it would be fast enough for two
reasons. First, I figured that since, if you remove the digit pal at
any location, it&amp;#39;s the same as removing that pal from any of it&amp;#39;s
locations so that there would likely be many many solutions and
second, there was a line in the problem statement saying that your
solution might not work on large cases. In any event, when all was
said and done and they released the test data, my solution worked
within time constraints.&lt;/p&gt;
&lt;p&gt;
After the design phase, I went to the live coding with a focus on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;compiling and testing every concept. That is, a single loop, a
single if, a function etc.. This may sound excessive but I&amp;#39;ve been
doing this forever and it&amp;#39;s served me well as a hobbyist and as a
professional.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implementing the data structure first - a 2D array and then a way
to print it so that I could always tell the state of my program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;incremental development - first remove a pal, then slide down, then
over, then the solver.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When it was all over the problem was solved. I&amp;#39;d like to think that
the students got something out of the audible. I learned years later
that at least one student did. As a teacher, I also got a lot out of
it. That day might not have been my first live coding lesson but it&amp;#39;s
the earliest one I remember. It was all impromptu but it got me
thinking more deeply about how I approach problem solving and
programming as well as how to teach both. Even all the little things
like my compulsive compiling and testing.&lt;/p&gt;
&lt;p&gt;
Funny - I have no idea what I was originally going to teach that day
but that audible turned into both a lesson I&amp;#39;ve repeated many times
as well as concrete techniques that I&amp;#39;ve used over and over through
the years.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Should every assignment be open ended?</title>
      <link>https://cestlaz.github.io/post/creative-projects/</link>
      <pubDate>Sun, 05 Sep 2021 06:43:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/creative-projects/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://blog.acthompson.net/2021/09/are-you-assigning-projects-or-recipes.html&#34;&gt;This post&lt;/a&gt; by my friend &lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred&lt;/a&gt; caught my eye yesterday. It&amp;#39;s a good
post - some good examples of inserting student creativity even into small
intro level assignments. While I like the post and agree with the
sentiment of open ended, student driven projects, I had to take issue
with the lead quote Alfred used: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“If you assign a project and get back 30 of the same thing, that’s not
a project, that is a recipe.”&lt;/p&gt;
&lt;p&gt;
– Chris Lehmann&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Open ended projects and student driven assignments are great and
important but so are ones with similar or identical solutions and
they&amp;#39;re also not recipes.&lt;/p&gt;
&lt;p&gt;
First, there&amp;#39;s a certain level of utility in a uniform assignment. If
the assignment is &amp;#34;write a program to convert Fahrenheit to Celsius&amp;#34;
you know that all the students know the conversion as you can provide
it and it also allows them to easily check their work, either through
an autograder or with each other. Yes, I know, some students students
could be tempted to cut corners and copy solutions but usually
attempts to control cheating do more to constrain students doing
things the right way than to prevent the cheaters from cheating.&lt;/p&gt;
&lt;p&gt;
Also, some student, particularly early on need the structure of a set
assignment and don&amp;#39;t do as well with a &amp;#34;do anything assignment.&amp;#34;
Saying &amp;#34;just make a converter&amp;#34; can be much more stressful and
difficult than convert from pounds to kilograms.&lt;/p&gt;
&lt;p&gt;
As to recipes? Not necessarily. Let&amp;#39;s take this small assignment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given two variables &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt;, write a code fragment that will swap
the values represented by &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt;. That is, if at the start, &lt;strong&gt;a&lt;/strong&gt;
represented &lt;strong&gt;5&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; represented &lt;strong&gt;10&lt;/strong&gt;, after your code, &lt;strong&gt;a&lt;/strong&gt; would
represent &lt;strong&gt;10&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; would represent &lt;strong&gt;5&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
You could even add a hint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HINT:&lt;/strong&gt; Consider using an extra third variable in your solution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This isn&amp;#39;t a recipe, it&amp;#39;s an assignment. Even with the hint it doesn&amp;#39;t
tell the students exactly what to do, just the desired outcome. It&amp;#39;s
not a recipe but most or all of the solutions will look remarkably
similar.&lt;/p&gt;
&lt;p&gt;
By contrast, a swap &amp;#34;recipe&amp;#34; might read:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a new variable named &lt;strong&gt;extraBucket&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign the value currently in &lt;strong&gt;b&lt;/strong&gt; to &lt;strong&gt;extraBucket&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign the value currently in &lt;strong&gt;a&lt;/strong&gt; to &lt;strong&gt;b&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign the value currently in &lt;strong&gt;extraBucket&lt;/strong&gt; to &lt;strong&gt;a&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a recipe. A student would literally just rewrite the steps
into the solution but even this might have it&amp;#39;s place in a class.&lt;/p&gt;
&lt;p&gt;
A more advanced assignment that leads students through building and
understanding something like a merge or quicksort could be set up
similarly. Not in any way a recipe but rather a valuable exercise
where all the students end up with very similar solutions. This is not
necessarily a bad thing, in fact it was all the rage a few years ago
as it could be set up as a discovery or experiential learning
experience. I also poo pooed that as being the silver bullet but as
with most teaching techniques, it has its place. &lt;/p&gt;
&lt;p&gt;
Then there are opportunities to introduce student creativity even when
the assignments are, at their core, all the same. I recall a session
at either SIGCSE or CSTA by &lt;a href=&#34;https://www.bootstrapworld.org/&#34;&gt;Bootstrapworld&lt;/a&gt;. They were describing one
of their classes major projects. It was a game. I forget the details
but at the core, all the student projects were the same. They differed
only in the graphics they used and the story around the game. That&amp;#39;s
where Boostrapworld interjected student creativity but the core CS and
math of the student projects were all the same. Did the fact that all
the assignments were essentially the same make this bad or a recipe?
Certainly not. Students go to express themselves uniquely but at the
same time the assignment was constrained and focused on what the
Bootstrapworld designers wanted.&lt;/p&gt;
&lt;p&gt;
So, there you have it. There&amp;#39;s nothing wrong with assignments where
the student results are largely the same. There&amp;#39;s also nothing wrong
with student projects that are 100% open ended. It&amp;#39;s all about the
teacher having multiple tools and using them as appropriate for their
students. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why it takes so long to become a better teacher</title>
      <link>https://cestlaz.github.io/post/feedback-loop/</link>
      <pubDate>Fri, 06 Aug 2021 06:54:15 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/feedback-loop/</guid>
      <description>&lt;script type=&#34;text/javascript&#34;
  src=&#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;
I&amp;#39;ve written about how long it takes to become a &lt;a href=&#34;https://cestlaz.github.io/post/five-year-class/&#34;&gt;master teacher&lt;/a&gt; and
that even after 9 or 10 years most teachers are really just advanced
beginners. A big reason for that is our long feedback loop. You do
something and you can&amp;#39;t do it again for a year.&lt;/p&gt;
&lt;p&gt;
I was listening to a podcast on my morning run by the Hudson River and
something came up about differences between quantities of items. The difference
between having n versus n+1 of something changes based on the value of n. If, for example, you have 1 versus 2 shoes - that&amp;#39;s a BIG
difference. On the other hand, if you have 100 vs 101 shoes, not so
much.&lt;/p&gt;
&lt;p&gt;
This got me thinking about how I framed things when teaching
big-O notation. In big-O you generally just look at the dominant
term. If you have an algorithm that runs in \(O(n^2+n)\) time you
usually just say \(O(n^2)\) because \(n^2\) is the dominant term. If you n
is small, let&amp;#39;s say 2, the difference between 2 and 4 is big so the n
part of \(n^2+n\) seems important but as n gets large, say 10,000, then
the difference between 100,000,000 and 100,010,000 is negligible for
our purposes.&lt;/p&gt;
&lt;p&gt;
I try to introduce this concept when teaching big-O but listening to
the podcast and reflecting gave me some thoughts as to how I can do it
better.&lt;/p&gt;
&lt;p&gt;
The trouble is, I won&amp;#39;t be able to for a while. I introduced big-O to
our teachers in our summer intensive. My next opportunity to cover the
topic will be sometime this Spring with my first year undergrads. Same
topic, but different audience so it won&amp;#39;t be quite the same. The next
time I get to do this with teachers is next summer. All this supposes
that I remember the changes I&amp;#39;m thinking about making and work them
in. I&amp;#39;m writing myself a few notes but even then, who&amp;#39;s to say if I&amp;#39;m
going to remember the nuance that I&amp;#39;m thinking now?&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the teaching feedback loop - get an idea, try it, and then
can&amp;#39;t iterate for a year. Get a new idea and you can&amp;#39;t try it until
the topics comes up which could be a long time from now.  True, some
things like a new pedagogical trick can be tried out more quickly but
even then you can&amp;#39;t just do it. You&amp;#39;ve got to find where it works
within your current classes and still have to account for the
countless differences that make up your classes when you&amp;#39;re ready for
the next iteration.&lt;/p&gt;
&lt;p&gt;
None of this is good or bad, just the nature of our profession. Just
something that I was thinking about this morning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hunter College CS Teacher Certification Summer 2021</title>
      <link>https://cestlaz.github.io/post/teacher-cert-cohort-2/</link>
      <pubDate>Mon, 02 Aug 2021 08:58:21 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-cohort-2/</guid>
      <description>&lt;p&gt;
Last Friday concluded the summer portion of Hunter&amp;#39;s CS Teacher
Certification program. It was an intense month. All day every day from
June 28th through July 30. On the one hand between &lt;a href=&#34;https://cestlaz.github.io/post/no-csta2021/&#34;&gt;burnout and covid
fatigue&lt;/a&gt; it was a tough month and I&amp;#39;m dealing with some much needed
recovery this week. On the other hand, working with JonAlf, Topher,
new team member Genady along with around 25 amazing teachers and
teacher candidates made it a highlight of the year.&lt;/p&gt;
&lt;p&gt;
last year, the cohort was entirely in service teachers. This year we
added three Masters students into the mix. I know we had the states
first certified CS teachers with last years cohort but I&amp;#39;m also
wondering if we&amp;#39;ll have the state&amp;#39;s first newly minted teachers with a
Masters in CS Ed when they finish come May.&lt;/p&gt;
&lt;p&gt;
Hopefully, this years cohort members are all getting some rest and
relaxation through August and then we&amp;#39;ll kick off again with the
school year when they&amp;#39;ll complete the program in Fall and Spring.&lt;/p&gt;
&lt;p&gt;
There were some changes from last time around. This time, we were only
able to run 3 classes during the summer - Programming, Data
Structures, and Methods 1. Last year we ran four - these three plus
topics in CS. It was nice getting 12 credits done all at once but the
switch to 3 classes was probably a good thing. A less good thing
though was that on the state&amp;#39;s insistence we had to teach the courses
independently as opposed to in an integrated fashion. The idea was
that this way, people wouldn&amp;#39;t have to take all three but the reality
was that we had a cohort moving through the program as one.&lt;/p&gt;
&lt;p&gt;
While for the most part, the programming and data structures should be
independent we lost a good deal of value not being able to integrate
methods in at the same time. Still overall, based on our perceptions
and student ratings, things worked well.&lt;/p&gt;
&lt;p&gt;
In the fall the cohort will continue with Ethics and Computer Science
along with Curriculum Development and then two final classes in the
Spring.&lt;/p&gt;
&lt;p&gt;
This will give us close to 50 certified teachers in NY state which,
while not close to enough is a good start. We&amp;#39;re hoping to more than
double that with next years cohort.&lt;/p&gt;
&lt;p&gt;
The biggest obstacle we have is that our program requires some
fundamental knowledge in a text based programming language and as it
turns out, very few teachers currently teaching CS in NYC have
that. To help address this, we&amp;#39;ll start offering free workshops in the
Fall to get current teachers up to speed so they&amp;#39;ll be more than ready
for our program come cohort three.&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re a CS teacher in NYC, keep an eye out for those when the
school year starts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designated Slacker</title>
      <link>https://cestlaz.github.io/post/designated-slacker/</link>
      <pubDate>Fri, 16 Jul 2021 12:42:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/designated-slacker/</guid>
      <description>&lt;p&gt;
Our teacher certification program is in full swing. All day every
day through the end of the month. We finished off the first course
about a week ago and are currently covering data structures and
methods - teaching methods that is.&lt;/p&gt;
&lt;p&gt;
All day every day is pretty intense and doing it on Zoom doesn&amp;#39;t
help so we try to change things up. As with many Zoom based classes,
we make use of breakout rooms for small group work. We also use Slack
for text based communication. Personally, I prefer Zulip but didn&amp;#39;t
have a chance to switch things over. &lt;/p&gt;
&lt;p&gt;
Of course we visit them while in breakout rooms we also use Slack
polls while they&amp;#39;re in the rooms since the visits take time and
sometimes we just want a quick temperature check.&lt;/p&gt;
&lt;p&gt;
The problem is that we&amp;#39;re finding that often, the rooms ignore the
slack. This wasn&amp;#39;t a surprise. Whenever we visit rooms, they&amp;#39;re always
engrossed and engaged in the task. Usually one of them is screen
sharing and they&amp;#39;re all in deep discussion. More often than not they
don&amp;#39;t notice us at all until we say something - that&amp;#39;s actually kind
of cool.&lt;/p&gt;
&lt;p&gt;
In any event, we decided to try to address the issue. We asked that
each breakout room have one person who&amp;#39;s job would explicitly be
mannign Slack so that when we sent something we&amp;#39;d get a response.&lt;/p&gt;
&lt;p&gt;
Topher suggested that we call said person the &amp;#34;designated slacker.&amp;#34;
Who doesn&amp;#39;t want to be that????&lt;/p&gt;
&lt;p&gt;
That is all.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching Styles</title>
      <link>https://cestlaz.github.io/post/teaching-styles/</link>
      <pubDate>Tue, 20 Apr 2021 08:31:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teaching-styles/</guid>
      <description>&lt;p&gt;
My friend Emmanuel lamented over on Facebook on &amp;#34;Learning Styles,&amp;#34; or
more specifically on how it&amp;#39;s still given credence. We all chimed in
in agreement but not an hour later I saw a Twitter thread where
education thought leaders extolled the virtues of Learning Styles all
over again. I pointed out that it&amp;#39;s a great example as to why so many
teachers scoff at &amp;#34;the research&amp;#34; and &amp;#34;research backed practices.&amp;#34;
We&amp;#39;ve seen it all before. We&amp;#39;re told we have to teach one way or we&amp;#39;re
failures only to be told a few years later that we have to do
something else. It&amp;#39;s not necessarily the research (although I question
a good deal of what I&amp;#39;ve read) but also the interpretations and
implementations. There are just too many factors that are never
considered.&lt;/p&gt;
&lt;p&gt;
One factor that I&amp;#39;ve rarely seen mentioned but one I think about
frequently, particularly as I work with teachers is &amp;#34;teaching styles.&amp;#34;
I&amp;#39;m not talking about any deep science here but we know that teachers
are people and people have tendencies, strengths, weaknesses, and
preferences. These are factors that are so important to teaching but
rarely considered. It&amp;#39;s always &amp;#34;teach this way&amp;#34; and never what works
for you.&lt;/p&gt;
&lt;p&gt;
Think about how ridiculous that is. In what other field do we ignore
the individual strengths, tendencies and even comfort level of the
professional. In sports, we know that there are &amp;#34;player&amp;#39;s coaches&amp;#34; and
&amp;#34;disciplinarians&amp;#34; and players and teams might take better to one or
the other. Likewise, a coaches act can grow stale over time as the
team evolves. Similarly a great coach works their system to the
strengths of the players and doesn&amp;#39;t rigidly try to make players
conform to a system where they just don&amp;#39;t fit. Now that doesn&amp;#39;t mean
that a coach won&amp;#39;t try to develop a players weaknesses or try to move
towards their favored system but the greats look at the skills and
personalities of all involved. It also doesn&amp;#39;t mean that you can&amp;#39;t
evolve. Former NY Giants coach Tom Coughlin was a rigid
disciplinarian and almost lost the team and his job prior to their Super Bowl run
in 2007. He evolved - became more of a players coach. He didn&amp;#39;t change
his stripes. He was still a stickler for rules and details but he
brought in a new human dimension to his coaching game. &lt;/p&gt;
&lt;p&gt;
Back to teaching. &lt;/p&gt;
&lt;p&gt;
While you want teachers to have a large set of tools in the box they
are going to be better with some than with others. Of course you can&amp;#39;t
ignore the students and how they respond but it&amp;#39;s not a one way
street. Take my friend Jim. He&amp;#39;s one of the best two or three natural
teachers I know. I describe him as &amp;#34;the teacher I aspire to be.&amp;#34; He&amp;#39;s
amazing. Stylistically though he&amp;#39;s what I call traditional teacher
dominant. He presents, there are questions comments and answer, seat
work. Pretty old school stuff. He doesn&amp;#39;t fit the constructivist mold
nor the cooperative one but he&amp;#39;s the best. I remember talking to our
principal a number of years ago. They said &amp;#34;I can&amp;#39;t bring
superintendents and DOE officials to Jim&amp;#39;s class when they visit and
want to see what we&amp;#39;re doing. He&amp;#39;s great but they just wouldn&amp;#39;t
understand and we&amp;#39;d get a lower school rating.&amp;#34; He&amp;#39;s the best but he
doesn&amp;#39;t fit Danielson. Now before you give me the &amp;#34;but it doesn&amp;#39;t
count, he teaches at Stuy&amp;#34; I&amp;#39;ll share that prior to teaching at Stuy
he taught at an overall low performing neighborhood school and
experience notwithstanding, he was the best then too.&lt;/p&gt;
&lt;p&gt;
What makes Jim the best? He has his preferred style and he adjusts to
what his students need. He&amp;#39;ll take an assortment of tools out of his
belt - some discovery stuff here, some group work there but he&amp;#39;ll work
it in to augment his strengths rather than being something he&amp;#39;s not
and as a result being inauthentic.&lt;/p&gt;
&lt;p&gt;
For my part I too am traditional teacher dominant. I&amp;#39;m not anywhere
close to Jim&amp;#39;s level. I consider myself an above average in class
teacher who brings other things to the table and makes up for it with
honesty, sincerity, and loyalty. I&amp;#39;m 100% &lt;strong&gt;not&lt;/strong&gt; a Danielson teacher
nor am I a cooperative learning one which was all the rage when I
started my career. I&amp;#39;ll try to get new ideas and learn new techniques
and pick and choose and overall it&amp;#39;s worked pretty well.&lt;/p&gt;
&lt;p&gt;
All of this is to say that when teaching teachers or coaching them,
don&amp;#39;t try to turn them into you or into John Keating, Jaime Escalante,
or what have you (note to self, write up teacher movie rant some
day). Help them to look at who they are and what they bring to the
table. Mix that with the needs of their students and the cosntraints
of their teaching situation and help them to be the best they cab be.&lt;/p&gt;
&lt;p&gt;
Teaching styles, for lack of a better name is too frequently missing
from the education equation. It&amp;#39;s totally removed by those who want
scripted curricula and cookie cutter instruction and barely mentioned
anywhere else but teaching styles are an important component of great
teaching and I wish more people acknowledged this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick Sort over Zoom</title>
      <link>https://cestlaz.github.io/post/qsort-over-zoom/</link>
      <pubDate>Thu, 18 Mar 2021 12:10:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/qsort-over-zoom/</guid>
      <description>&lt;p&gt;
I haven&amp;#39;t been blogging much this year. Not sure why - probably pandemic
fatigue. It&amp;#39;s also affected my blog reading - more scanning, less deep
reading. I&amp;#39;ve also been trying to spend mode time off screen learning
how to paint (with,let&amp;#39;s say  mixed results :-) ) leaving less time
and energy to blog. Hopefully I&amp;#39;ll pick up on both ends as more people
get vaccinated and we can get to a more normal life. &lt;/p&gt;
&lt;p&gt;
In any event, I tried a new motivation for Quicksort today so I
thought I&amp;#39;d share.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve approached teaching the Quicksort in a variety of ways (&lt;a href=&#34;https://cestlaz.github.io/post/try-something-new/&#34;&gt;here&lt;/a&gt;,
&lt;a href=&#34;https://cestlaz.github.io/posts/quick-sort-starting/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/posts/2014-03-12-select-to-sort/&#34;&gt;here&lt;/a&gt;) but never had a great lead in activity. Merge sort
was easy in person since you can &amp;#34;Tom Sawyer&amp;#34; &lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-27-dumbass/&#34;&gt;shuffling a deck of
cards&lt;/a&gt; in class. We adapted this activity pretty well to &lt;a href=&#34;https://cestlaz.github.io/post/merge-over-zoom/&#34;&gt;work over Zoom&lt;/a&gt;
this past summer in our teacher certification program. Quicksort
however, haven&amp;#39;t found a good one. &lt;/p&gt;
&lt;p&gt;
Thinking about how to leverage remote, I had an idea to try - use
polls. I use &lt;a href=&#34;https://zulip.com/&#34;&gt;Zulip&lt;/a&gt; for class discussions. It&amp;#39;s like Slack but is open
source, can be self hosted, you can post from email,  and has much
better threading. I wrote a small bot to quickly create emoji
polls. &lt;/p&gt;
&lt;p&gt;
First I asked for the students to share their birtdays - just month
and day in the form MMDD so if you were born on March 12th you would
write 0312 in the chat. &lt;/p&gt;
&lt;p&gt;
Then, I picked one birthday at random, let&amp;#39;s say 0515. &lt;/p&gt;
&lt;p&gt;
I then created a poll: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐶 My birthday is earlier in the year than 0515&lt;/p&gt;
&lt;p&gt;
🐱 My birthday is later in the year than 0515&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The bot tags the post with the emoji and the class can click on their
choice. &lt;/p&gt;
&lt;p&gt;
We then talk about what we now know - &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We now know the exact location of 0515 with respect to all the
dates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The data set is now partially ordered (everything less than 0515 to
the left, greater to the right).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also drew out some diagrams showing what was happening &lt;/p&gt;
&lt;p&gt;
This is also one iteration of the Quicksort. &lt;/p&gt;
&lt;p&gt;
We do this again on one side and continue to discuss. &lt;/p&gt;
&lt;p&gt;
From here we finish developing the algorithm and we&amp;#39;re off to the
races.&lt;/p&gt;
&lt;p&gt;
As usual, I won&amp;#39;t know for a while how well this worked or if it did
at all but the students seemed to be engaged and so far I think it
helped get a good feel for how the algorithm worked. &lt;/p&gt;
&lt;p&gt;
Using Zulip or other chat polls in this case made the motivating
activity easy and seamless. I&amp;#39;m not sure that this particular activity
would be as easy to implement in person unless you used some
technology like clickers. &lt;/p&gt;
&lt;p&gt;
We finished off the class discussing how we should test our
implementations. They&amp;#39;re going to test the sorts on a variety of data
sets including sets where all values are the same or are already
sorted. Given our naive pivot selection this should lead to some
pretty bad runtimes – fodder to motivate the next class.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Less Engagement For More</title>
      <link>https://cestlaz.github.io/post/less-engagement-for-more/</link>
      <pubDate>Wed, 14 Oct 2020 09:01:20 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/less-engagement-for-more/</guid>
      <description>&lt;p&gt;
I think many of us are finding student engagement to be one of the
more challenging aspects of remote teaching. I sure am.&lt;/p&gt;
&lt;p&gt;
In person it&amp;#39;s much easier to have in class discussions. You can read
faces and body language, move around the room, encourage cross
discussion and, well, you know, teach in the usual sense. &lt;/p&gt;
&lt;p&gt;
Much harder on Zoom. &lt;/p&gt;
&lt;p&gt;
The default behavior isn&amp;#39;t a room of people all together but rather a
bunch of individual teacher student connections. The sense, at least
to me, is that it&amp;#39;s more a whole bunch of simultaneous individual
meetings rather than one big all together group. This makes cross talk
harder.&lt;/p&gt;
&lt;p&gt;
Next we have cameras. I wish I had more kids turn them on. I don&amp;#39;t
force them but it&amp;#39;s really hard talking to a bunch of names and it
really makes it feel like less of a class. When you&amp;#39;ve got a grid
mixed of people and blanks engagement is made even more difficult. Of
course I have no idea as to how engaged or disengaged camera off kids
are. They might be really engaged and involved. It&amp;#39;s just hard to
tell and hard to assess.&lt;/p&gt;
&lt;p&gt;
So, business as usual from an in person class isn&amp;#39;t working - time to
try something new. &lt;/p&gt;
&lt;p&gt;
Instead of questioning and working to start a discussion in class as
per usual, I&amp;#39;m reworking some questions more into small group prompts
with discussion points and something to report back on, sometimes as a
group directly and sometimes through some shared platform like a
Padlet. So far results are promising. This means a lot of short quick
breakouts throughout the class.&lt;/p&gt;
&lt;p&gt;
The upside is that the students should be more engaged in the small
group discussion. That seems to be the case based on what they&amp;#39;re
reporting back  and what I see when I drop in. &lt;/p&gt;
&lt;p&gt;
The downsides include the added time as we get in and out of breakout
rooms and while it&amp;#39;s more engagement overall, it&amp;#39;s less engagement
with the teacher and harder for me to use engagement as an
assessment. I know I can drop in on breakout rooms but dropping in
changes the dynamic - it&amp;#39;s very different from lurking in a regular
classroom and observing what&amp;#39;s going on. I also can&amp;#39;t get to all the
breakout rooms as each visit is clunky and takes time - more time than
doing similarly in a live class. On the additional time this takes,
I&amp;#39;m not really concerned about that. Remote takes longer, that&amp;#39;s
life. &lt;/p&gt;
&lt;p&gt;
Overall, this looks to be a promising approach so I&amp;#39;ll see where it
leads.&lt;/p&gt;
&lt;p&gt;
Since this started I&amp;#39;ve sat in on or read a bunch of remote best
practice and none of them came close to leading me to switching things
up in this way. I came to try this through honest self reflection,
observing how my classes were going and talking to my peers. The truth
is, this might be great for me but doesn&amp;#39;t work for other teachers and
other teachers might not have the engagement challenges at all. &lt;/p&gt;
&lt;p&gt;
If anything this left me stronger int he belief that best practices
are not best practices at all. They&amp;#39;re practices. It&amp;#39;s up to the
teacher to figure out what&amp;#39;s best for their students and themselves.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quarter Century Courses</title>
      <link>https://cestlaz.github.io/post/quarter-century-courses/</link>
      <pubDate>Tue, 15 Sep 2020 07:09:25 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/quarter-century-courses/</guid>
      <description>&lt;p&gt;
I was talking in our Curriculum Development class last week about the
courses I&amp;#39;ve created over the years. From the first computer graphics
course to the current teacher education courses. JonAlf pointed out
that we missed an &amp;#34;important&amp;#34; occasion last spring - the twenty fifth
offering of my computer graphics class at Stuy. I haven&amp;#39;t taught it in
almost 10 years but it&amp;#39;s been running continuously for a quarter
century since it first ran back in the mid 90s. Systems will hit that
mark this year and the intro course I designed a couple of years from
now.&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s pretty cool.&lt;/p&gt;
&lt;p&gt;
Looking back at all the courses I&amp;#39;ve designed and taught it&amp;#39;s
interesting to see what I got right, what I got wrong, and why. Some
courses evolved slowly over time. The intro course fits that bill. On
the other hand, Systems had a complete reboot a few years in and has
been reasonably stable since. Interestingly enough Graphics has
probably been the most stable over the years. That&amp;#39;s not to say that
it hasn&amp;#39;t been tweaked here and there but overall, it&amp;#39;s largely the
same now as it was a quarter century ago. It&amp;#39;s been re-evaluated many
times but it just turns out that when I was teaching it I felt that it
was still hitting the right notes and my successor seems to feel
similarly. &lt;/p&gt;
&lt;p&gt;
Funny because graphics was designed with the least thought of all of
my courses. I probably didn&amp;#39;t feel that way at the time, but it&amp;#39;s
true. I had only been teaching around 5 year - a beginner at best and
didn&amp;#39;t really know what I was doing. Even 10 years in you&amp;#39;re still an
advanced beginner in terms of teaching. Most teachers, if they don&amp;#39;t
burn out, hit there stride at 15 - 20 and after that become truly
experienced. &lt;/p&gt;
&lt;p&gt;
I basically created graphics because I was teaching 4 APCS/AB classes
and one geometry and &lt;strong&gt;hated&lt;/strong&gt; grading proofs!!!! I needed to create one
more CS class. I decided on graphics because I knew I could teach it
and thought the students might enjoy it. Systems was created using
similarly deep contemplations. I got better and spent much more time
and effort designing future courses.&lt;/p&gt;
&lt;p&gt;
For the graphics class I had a few choices to make but not many. The
students mostly only knew Pascal from APCS so the language wasn&amp;#39;t an
issue like it would become later on and since we were working on DOS
machines running Turbo Pascal there wasn&amp;#39;t any option to use any fancy
library like OpenGL. The course basically started with the ability to
draw a point and then went though: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;lines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lines in 3D and 3D transformations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;polygons (triangles)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A motion description language interpreter (stack and tree based
shape hierarchies)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lighting and shading&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ray tracing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The motion description language piece had an entire unit that was
really an intro to compilers / interpreters. &lt;/p&gt;
&lt;p&gt;
In retrospect, the course really did make sense. It was taught to
second term seniors so it was a terminal course. It combined the
programming, algorithms and data structures from APCS, math they
did in trig, precalc (and baby calc), and a bit of physics. It as also
project based and they wrote programs that made pretty pictures so
that helped stave off senioritis. &lt;/p&gt;
&lt;p&gt;
While the course has remained largely the same, there has been some
evolution. When Systems students started learning C we ended up
supporting that as well in graphics and now the course is more
language agnostic. We also played with topics and unit length. We
spend less time on the compiler piece now and treat that more like a
black box and have at times looked at additional topics like texture
mapping. There&amp;#39;s also been a good deal of work put in to safety nets
and scaffolding. When you have a course where the main assessment is
one BIG semester long project you&amp;#39;ve got to make sure students don&amp;#39;t
end up falling into a hole they can&amp;#39;t climb out of.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not a surprise that the first couple of courses I designed -
graphics and systems were somewhat arbitrary. Graphics turned out to
be a solid design and just needed some fine tuning but Systems got a
complete reboot. Over the years, I learned more about curriculum
design and feel pretty comfortable designing new experiences now. Of
course, this is thirty years into my career as a teacher. &lt;/p&gt;
&lt;p&gt;
Maybe I&amp;#39;ll talk about the design of other classes here in the future
but for now, you can look at one of my first student&amp;#39;s graphics
project and read about it &lt;a href=&#34;https://cestlaz.github.io/post/class-legends/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/Ca_8q3ct6J4&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Preparing CS Teachers - tools for remote instruction</title>
      <link>https://cestlaz.github.io/post/teacher-cert-tools/</link>
      <pubDate>Mon, 10 Aug 2020 06:07:26 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-tools/</guid>
      <description>&lt;p&gt;
Our summer intensive was supposed to be in person but COVID-19 changed
that in a hurry. We had to scramble to redesign and figure out how we
were going to run things.&lt;/p&gt;
&lt;p&gt;
We decided to go with the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Zoom for live meetings &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slack for chat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git and GitHub&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GitHub classroom for assignments &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub repos for code distribution, class website and resource
sharing. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub discussions for off hour and long form discussion&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While Zoom is a great platform it was lacking in a few areas so we
also ended up using: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://padlet.com&#34;&gt;Padlet&lt;/a&gt; as a collaborative writing space for groups&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assorted whiteboarding tools.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#39;s the breakdown.&lt;/p&gt;
&lt;p&gt;
We used Zoom as you might imagine - big zoom for direct instruction
and whole class work and lots of breakout rooms. Screen sharing worked
great but the whiteboarding was less than ideal so we turned to screen
sharing with other tools. The big things missing from Zoom were a
collaborative writing/drawing space and flexibility for breakout
rooms. I would have loved to be able to spy on a breakout room or have
more fluidity between them but it still did a pretty good job
considering Zoom wasn&amp;#39;t designed for education. &lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://bigbluebutton.org/&#34;&gt;Big Blue Button&lt;/a&gt; is an open source alternative to Zoom. It&amp;#39;s design for
teaching so it has some of the features that Zoom lacks but it&amp;#39;s not
quite there yet in terms of quality and reliability.&lt;/p&gt;
&lt;p&gt;
Instead of the Zoom chat, we decided to use Slack. Zoom&amp;#39;s chat only
works while Zoom is up and there were times when the cohort was
working &amp;#34;offline.&amp;#34; Also, slack gave us both threads and different
channels as well as arbitrary private chats. &lt;/p&gt;
&lt;p&gt;
In addition to the general class chat we had channels like #git-fu, #java-fu, #fall-is-coming to discuss COVID-19 and the public schools,
#attendance  and a bunch of others. &lt;/p&gt;
&lt;p&gt;
Funny thing - this was the first time any of us had strong Slack
adoption. We&amp;#39;ve tried it before but never got buy in. This time we
did. Maybe because we were together morning through afternoon and when
we broke we were still in the same physical location with out
computers nearby. In any event, Slack was used for both in class and
out of class communication and is still being used now albeit at a
lower volume. &lt;/p&gt;
&lt;p&gt;
Slack also gave us a place, besides the zoom to build
community. Having some fun channels like #duckygram and #cs-educationy-goodness  set a light tone. Every day, Alex would wait
until right before our start to put a gif in the #attendance channel
each day outdoing the ridiculousness of the rest of the class. It was
the cohort that made the community but Slack as a platform helped.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m wondering if a I&amp;#39;ll get better buy in with my undergrads in a few
weeks as we&amp;#39;re starting the semester online but at least for this
cohort, it worked.&lt;/p&gt;
&lt;p&gt;
My only problem with Slack is the price. I have zero budget which
leaves us with the free tier. That means limited integrations  and
limited history. I might check out some self-hosted options like Zulip
and Rocketchat to see if they&amp;#39;re viable alternatives.&lt;/p&gt;
&lt;p&gt;
We originally planned to use GitHub discussions for longer form
communication. It hit most of the buttons for me – threaded
discussion, reply via email, customizable alerts. All good. It&amp;#39;s
lacking tags and search but it looked like it could be a viable long
form discussion platform. We kicked off with it but the class voted
with their feet. They kept going back to Slack so while GitHub was our
main platform for code, GitHub discussions fell by the wayside as
Slack won the day.&lt;/p&gt;
&lt;p&gt;
Along the way we learned some tricks. Even though Topher was paid for
teaching two courses, JonAlf two, and I was just officially
supervising and coordinating, all three of us were pretty much on all
the time. Ones strategy that developed was having one of us man Slack
while another ran the Zoom. I might be running a Zoom based activity
while Topher or JonAlf would answer questions or highlight and
emphasize key points on Slack. I don&amp;#39;t know yet if it helped the class
educationally or was a distraction but we all liked the
flow. Something to look at further. &lt;/p&gt;
&lt;p&gt;
We also had to figure out how not to double or triple respond to
questions. We each adopted an emoji and when a question was asked,
whoever got there first would mark the thread with that emoji letting
the others know we had it covered. &lt;/p&gt;
&lt;p&gt;
Another skill we mastered was the &amp;#34;slack-moji&amp;#34; poll - pre-staging
Slack polls and content to cut and paste over. Actually, there&amp;#39;s a
cool remote class tool, &lt;a href=&#34;https://prismia.chat/&#34;&gt;Primsia&lt;/a&gt; (formerly babylon.hosue) which is much
better at that than Slack but it isn&amp;#39;t up 24x7 and is more set up for
a teacher actively managing class discussion rather than a free form
chat.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d love to see Big Blue Button grow to be a suitable Zoom replacement
as it&amp;#39;s better suited for education and I&amp;#39;m hoping that Zulip proves
to be a good free alternative to Slack but regardless of specific
tool, the combination of video conferencing, chat, long form message,
and whiteboarding make up a pretty good remote classroom. It would be
nice if collaborative coding was easier but there aren&amp;#39;t that many
options there. &lt;a href=&#34;https://repl.it&#34;&gt;Repl.it&lt;/a&gt; is awesome but we decided to have them develop
on their local machines and adding a tool like &lt;a href=&#34;https://floobits.com/&#34;&gt;Floobits&lt;/a&gt; would have
been too much to ask for most of the cohort. &lt;/p&gt;
&lt;p&gt;
We think it all went pretty well. If given the option next summer, I&amp;#39;m
leaning towards a hybrid program as even without COVID-19, remote is
easier for many teachers for geographic and school scheduling
reasons. I figure open in person and maybe do one day or a couple of
half days a week on site and the rest remote. I think we&amp;#39;ll talk about
it as a cohort once the Fall begins and can start thinking about
cohort 2.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing CS teachers - Curricula don&#39;t add richness, teachers do</title>
      <link>https://cestlaz.github.io/post/teacher-cert-topics-curriculum/</link>
      <pubDate>Fri, 07 Aug 2020 07:25:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-topics-curriculum/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve frequently been asked for curricula. I&amp;#39;ll hear from a school or
someone otherwise involved in a school or education and they&amp;#39;ll ask
for a course they can drop in and teach.&lt;/p&gt;
&lt;p&gt;
I explain it doesn&amp;#39;t work that way. A syllabus or curriculum is only
so good. A great curriculum with a bad teacher will still be bad but a
great teacher can do a lot to salvage a horrible curriculum.&lt;/p&gt;
&lt;p&gt;
A curriculum only goes so far. At it&amp;#39;s most sparse, it&amp;#39;s a list of
topics. At the other end we frequently see worked out prescribed
lessons that can be a boon to a beginner but in the end constrains
great teachers. &lt;/p&gt;
&lt;p&gt;
As a side note, this was something I noticed years ago when touring
elementary schools for my own children. We saw one school where
everything was in lockstep - every classroom looked basically the
same. Every teacher taught the same subject at the same time as every
other teacher each day and what they taught and how they taught it was
tightly controlled. We opted for  a school where the teachers were
much more free to actually teach. The school in question was well
regarded and the more we dug in the more we realized that the
strictness the principal imposed helped bring the bad teachers up to a
certain level and got most students through the standardized tests but
there was no joy. Great teachers weren&amp;#39;t allowed to teach. It was a
perfect example of a Bloomberg era stat mill. &lt;/p&gt;
&lt;p&gt;
Anyway back to CS.&lt;/p&gt;
&lt;p&gt;
I was thinking about this while we watched the summer cohort&amp;#39;s topic
presentations. Three of the topics were ones that I teach annually -
AI Search, NLP, and Cipher decryption. Some of the others I&amp;#39;m planning
on mixing in next year. The presentations and supporting materials
were all terrific but in every case, the teachers chose to spin and
emphasize aspects different to those I would emphasize.&lt;/p&gt;
&lt;p&gt;
In the case of the cipher decryption lesson, the cohort emphasized the
machine learning type aspect. I spin the lesson more towards a
recommender system. Neither is better or worse. My guess is that we
each selected aspects that were exciting to us and riffed on
those. Similarly the other groups brought up nuances and emphases that
differed from mine. &lt;/p&gt;
&lt;p&gt;
It was terrific.&lt;/p&gt;
&lt;p&gt;
If you look at a syllabus, the search topic might just say &amp;#34;Depth
First Search.&amp;#34; It might be in the recursion section of the class and
thus lead you to teaching a recursive solution or it might be in
the data structure / stack section and lead you to implement your own
stack. If the curriculum is fleshed out it&amp;#39;ll give more specifics but
will it talk about states and state space? How about implicit data
structures? &lt;/p&gt;
&lt;p&gt;
There&amp;#39;s so much richness to a well taught course that&amp;#39;s never captured
by a curriculum and that includes tangents, side stories and limitless
discoveries. &lt;/p&gt;
&lt;p&gt;
When I talk to my students decades later it&amp;#39;s usually not those lines
on the syllabus they remember but the richness that lives in the ether
of a well taught class.&lt;/p&gt;
&lt;p&gt;
So cool that our certification program created an environment where
we&amp;#39;ve been able to mix the spices from so many different chefs and
each of us is leaving with something new and richer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing CS Teachers - what to leave in, what to leave out</title>
      <link>https://cestlaz.github.io/post/teacher-cert-methods-choosing/</link>
      <pubDate>Thu, 06 Aug 2020 07:37:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-methods-choosing/</guid>
      <description>&lt;p&gt;
Teachers always make decisions in their courses - what to leave in,
what to leave out. I&amp;#39;ve seen programming and data structure classes
where everything is written from scratch and others where a few things
are explained and the students just use built in types like the
java LinkedList  or Arrays.sort() method.&lt;/p&gt;
&lt;p&gt;
Do too much from scratch and you&amp;#39;ll never finish the curriculum. Do to
little and the students won&amp;#39;t really understand what&amp;#39;s going on and
walk a path towards being programmers or coders rather than computer
scientists. Most teachers work somewhere between the extremes.&lt;/p&gt;
&lt;p&gt;
We not only had to make these decisions for our CS content but also
for our methods. We decided to leave out two particular
methods that are very popular - pair programming and Parsons
problems. We did mention both in passing and did a little talk on pair
programming but the treatment was far less than say live coding,
subgoal labeling or the many other teaching techniques we decided to
explicitly cover. &lt;/p&gt;
&lt;p&gt;
Why did we leave out these two topics? &lt;/p&gt;
&lt;p&gt;
Partly pragmatism and pragmatism is something that&amp;#39;s always left out
when talking about teaching. Let&amp;#39;s look at Parsons problems. If you&amp;#39;re
unfamiliar with them, they&amp;#39;re basically scrambled code
fragments. Students have to put them in order. They&amp;#39;re cool puzzles
and a nice change of pace. but you have to create them and get them to
your students. That didn&amp;#39;t fit all that well with us. By the time we
got to content that would benefit from Parsons problems our pace or approach
didn&amp;#39;t really fit using them. It&amp;#39;s also worth noting that we haven&amp;#39;t
seen any good online Parson problem generator systems which would be
both a boon to problem creation and potentially distribution and
assessment. &lt;/p&gt;
&lt;p&gt;
There just wasn&amp;#39;t that much bang for the buck in giving them more than
lip service. Since our cohort was composed of experienced teachers, we
were confident that they can find the appropriate Parsons problems
resources and use them where appropriate in their classes.&lt;/p&gt;
&lt;p&gt;
On pair programming we had similar pragmatic issues - it didn&amp;#39;t fit
all that well given how tight the program was and we had to figure out
how bet to do it remotely on the fly. We also knew that the cohort had
all been to at least some NYC CS4All training and so were at least
exposed to the idea. Still, we, or more accurately, Topher, who&amp;#39;s had
great success getting student buy in did do a brief talk on the
subject. Some of the things we covered were: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to motivate pair programming in a collaborative way&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What activities can you give the navigator while the driver&amp;#39;s
setting up the environment to involve them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How in the &amp;#34;real world&amp;#34; some developers love PP and some hate it
and that there are many variations on the theme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You&amp;#39;d not always going to get student buy in.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That last point is &lt;strong&gt;very&lt;/strong&gt; important. Teachers are going to try things
that don&amp;#39;t always work and unfortunately, the system of evaluation
doesn&amp;#39;t promote such necessary experimentation. What&amp;#39;s more every time
you go to a professional development or training session or head
something online it&amp;#39;s about how the presented did it and it worked
perfectly and if you follow the same recipe it&amp;#39;ll work for you. It
might, but then, it might not. It&amp;#39;s all about building the toolbox of
tricks and using them when appropriate and even then, not every lesson
is going to be John Keating or Jaime Escalante on the big screen.&lt;/p&gt;
&lt;p&gt;
So, in the end we made choices. We&amp;#39;re they the right ones? I think
so. Next time around the cohort will be different and the
circumstances a little as well. Will we make the same choices? Maybe,
we&amp;#39;ll have to wait and see. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS Teacher Certification - Topics in CS</title>
      <link>https://cestlaz.github.io/post/teacher-cert-topics/</link>
      <pubDate>Wed, 05 Aug 2020 07:13:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-topics/</guid>
      <description>&lt;p&gt;
Officially, the last course of the summer was &amp;#34;Modern Topics in
Computer Science.&amp;#34; The idea was that K12 CS teachers on the one hand
need depth beyond the typical terminal high school course, hence data
structures and also breadth so that they could create electives, mix
teasers in to the regular courses, or help precocious students with
independent or semi-independant explorations. &lt;/p&gt;
&lt;p&gt;
If someone was teaching this in a typical fall or spring semester
course, they&amp;#39;d probably have a list of topics and spend a couple of
weeks on each. We wanted to do it a little differently. &lt;/p&gt;
&lt;p&gt;
The original thought was to integrate some of the topics in with the
earlier computer science but there weren&amp;#39;t too many opportunities due
to the compressed nature of the program. Instead, a few days before we
wrapped up data structures we gave the cohort a list of potential
topics and asked them to select one. Since the cohort had all already
been teaching CS and had differing content backgrounds we also
encouraged them to choose a topic not on the list.&lt;/p&gt;
&lt;p&gt;
When it was time for them to begin work on the topics part of the
intensive, they all shared their desired topic. Fortunately, things
worked out. We ended up with two solo students and a bunch of small
teams. The teams were tasked with learning about the topic and
designing a lesson or unit covering it. This could be for their
current students or some other hypothetical group. Each group would
also have to create a program or programs to show an implementation
and or use of the topic. Once they chose their topics, we picked a few
out of the remaining selections as topics that we&amp;#39;d present. &lt;/p&gt;
&lt;p&gt;
The next few days were Topher, JonAlf and I delivering our topics and
the cohort working in groups. When they worked, we&amp;#39;d drop in and
support. The final two days consisted of the groups presenting their
work.&lt;/p&gt;
&lt;p&gt;
The topics they selected were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data Mining&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Public Key Encryption&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blockchain&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Natural Language Processing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Classic AI - Decision Trees&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL / Cyber Security&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visualization&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Machine Learning / Cipher Decryption&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Genetic Algorithms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Classic AI - Search&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We weren&amp;#39;t sure exactly what to expect but we were blown away both in
terms of the CS content as well as what they prepared in terms of
lessons and units. &lt;/p&gt;
&lt;p&gt;
Since this is just year one of the program we thought we&amp;#39;d get ahead
of the game and set up a site where we could host and share these
units and other resources so check them out &lt;a href=&#34;https://github.com/hunter-teacher-cert/Teacher-Resources/blob/master/README.org&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
We didn&amp;#39;t have a strict format for the cohort to use so each one is a
little different but each link&amp;#39;s README.md file will get you started.&lt;/p&gt;
&lt;p&gt;
As I said, we were blown away by their work but super proud that we
also have the bonus of being able to make their work available to the
general CS Ed community. If you&amp;#39;re looking to create a unit in any of
these, check them out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing CS Teachers - adding methods to our madness</title>
      <link>https://cestlaz.github.io/post/teacher-cert-methods/</link>
      <pubDate>Tue, 04 Aug 2020 06:47:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-methods/</guid>
      <description>&lt;p&gt;
Our summer intensive was, well, pretty intensive. We met all day every
day for a month and knocked out four classes. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Programming (CS1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data Structures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methods&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you ever took or taught a summer session class, you know that time
is tight and generally you cover a little less than in a fall or
spring semester class. N credits in 5 weeks just isn&amp;#39;t the same as
those same N credits spread over 13. &lt;/p&gt;
&lt;p&gt;
How did we recapture some time? First, we had some pre-work and second
we integrated some of the courses. We couldn&amp;#39;t really do it with
programming and data structures and we were less successful at
integrating the topics than we liked but it made the most sense with
methods, in fact, I think the methods part of the class was more
successful as a result of it&amp;#39;s integration with the other subjects
than it would have been as a stand alone.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what we did.&lt;/p&gt;
&lt;p&gt;
We first thought about covering methods as we taught topics - that is,
present something using some teaching technique, cover the topic and
then also dive in to the technique. This turned out to be a
mistake. The teachers that came in with a strong CS background  seemed
fine but for the ones newer to the subject matter, it was too much at
once. We had to alter course.&lt;/p&gt;
&lt;p&gt;
So we did.&lt;/p&gt;
&lt;p&gt;
We continued to model various methods and sometimes made a side remark
here or there but focused on the CS. After a few days in, we were
ready to spend a day on pedagogy. We broke the class into groups and
had them reflect on the content we taught - how did we teach it? Why
did we approach it the way we did? Did it work? This led to some rich
discussion of both CS teaching techniques and teaching in general. We
were very happy with how it all went.&lt;/p&gt;
&lt;p&gt;
We then went back to content but added more side bits here and there
about the teaching methods - as they became more comfortable with the
CS we were able to integrate more methods talk in with the CS talk. At
our next formal pedagogy lesson, we again talked about new techniques
that were modeled but also looked at alternative approaches and
took a deeper look at our individual cohort members student
populations. &lt;/p&gt;
&lt;p&gt;
Some of the methods we discussed included: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Live Coding &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subgoal labeling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make predictions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modifying existing code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;code tracing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;diagramming&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scaffolded assignments (code skeletons)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rubber Duck Debugging&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code sharing (presenting)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;writing implementations of library code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;slack techniques (reacts polls, channels, ) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;thought-grooming/sparking warm-up Qs/tasks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;relevant quotes at warm-up&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and more but the list doesn&amp;#39;t really do the discussion justice. Take
&amp;#34;live coding&amp;#34; for example - that&amp;#39;s not just writing code in front of
the class. There&amp;#39;s a rich discussion here - how do you narrate? Is it
truly live or from a note sheet? How about discussing workflow while
modeling it? How about live coding subgoals? The actual class is much
richer than just &amp;#34;live coding.&amp;#34;&lt;/p&gt;
&lt;p&gt;
In addition to integrating methods into the teaching of content, we
also merged it with the topics course for some of the assessment. For
topics, each group created a class or unit on some area of CS and
included in the documents they prepared and presentation was a
discussion of how it might bet taught. I know that they all came in as
experienced teachers so weren&amp;#39;t starting with nothing but man, they
knocked it out of the park. I&amp;#39;ll be talking more about the topics in a
later post.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll probably say this a lot in my summer intensive wrap up posts but
it was such a treat working with a cohort of great educators and also
to have two of the best teachers I know to work with as the teaching
team.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tools matter when teaching (and learning)</title>
      <link>https://cestlaz.github.io/post/tools-matter/</link>
      <pubDate>Wed, 22 Jul 2020 07:52:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/tools-matter/</guid>
      <description>&lt;p&gt;
One of our teacher certification cohort members asked for some help on
our Slack the other day. It was about a side project - he was learning
him so Javascript. It&amp;#39;s always very cool to see teachers exploring
things that can help with their craft on their own.&lt;/p&gt;
&lt;p&gt;
The whole situation reminded me  about how important good tooling is
and why, in spite of its popularity, javascript has some severe issues
as a learning language and I&amp;#39;m a guy that actually likes javascript. &lt;/p&gt;
&lt;p&gt;
The project was a small interactive javascript todo application and he was
having trouble getting a button to react. I grabbed his code off
GitHub, fired up a server and took a look. Indeed, there were
issues. Some of the interface worked - you could type in a new item
and hit enter or click an add button and it worked. You could check or
uncheck items and you could delete them individually. Everything
worked except the clear button which did nothing. Weird.&lt;/p&gt;
&lt;p&gt;
Exploring the code, here were some of the key sections:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// there were sections like this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.filter-todo&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clearButton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.clear-button&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// then more code 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// then some of this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filterTodo&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;clearButton&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;clearTodos&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// and more code
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
I just pulled out the lines relevant to what he was doing and to the
error so be aware that it&amp;#39;s all out of context. &lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;document.querySelector&lt;/code&gt; lines get references to DOM elements -
elements on the page. The &lt;code&gt;addEventListener&lt;/code&gt; then links a function to
the event. So, when you click on the &lt;strong&gt;clear&lt;/strong&gt; button on the web site,
it&amp;#39;s supposed to run the function &lt;code&gt;clearTodos&lt;/code&gt; and when you click on
the &lt;strong&gt;filter&lt;/strong&gt; button it will run &lt;strong&gt;fiterTodo&lt;/strong&gt;. There&amp;#39;s more linking of
events to elements in the code.&lt;/p&gt;
&lt;p&gt;
What was really weird was that parts and in fact most of the interface
was working and just the clear button was not. To make matters worse,
looking both at the server output and the actual web page, there was
no indication of anything wrong. Even if you looked at the developers
console in the browser it didn&amp;#39;t really give you a clue.&lt;/p&gt;
&lt;p&gt;
It didn&amp;#39;t take me &lt;strong&gt;too&lt;/strong&gt; long to find the error but that&amp;#39;s only because
I spent hours on similar errors back when I learned javascript. Back
then though I lost hours of time on errors like these and I was
learning JS decades into my career as a computer science teacher and
professional.&lt;/p&gt;
&lt;p&gt;
What was going on?&lt;/p&gt;
&lt;p&gt;
When javascript executes  &lt;code&gt;querySelector&lt;/code&gt; it returns a reference to an
element in the web page. If that element doesn&amp;#39;t exist, it returns
 &lt;code&gt;null&lt;/code&gt;. As it turned out, at least in the version I looked at, there
was no element on the page identified by the class &lt;strong&gt;filter-todo&lt;/strong&gt;. The
result was that after executing&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.filter-todo&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;filterOption&lt;/code&gt; is set to refer to null.&lt;/p&gt;
&lt;p&gt;
Then later, this code: 
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filterTodo&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
crashes the program because you can&amp;#39;t call the &lt;code&gt;addEventListener&lt;/code&gt;
method on &lt;code&gt;null&lt;/code&gt; which is what &lt;code&gt;filterOption&lt;/code&gt; is set to.&lt;/p&gt;
&lt;p&gt;
Therein lies the problem. I commented out the two lines, the program
ran, and the &lt;strong&gt;clear&lt;/strong&gt; button was clickable.&lt;/p&gt;
&lt;p&gt;
The killer was that the tool gave some pretty weird results - it
wasn&amp;#39;t all or nothing. Parts of the interface responded but parts
didn&amp;#39;t. There was no actionable feedback. The only feedback was indeed
this error: &lt;strong&gt;TypeError: filterOption is null&lt;/strong&gt; but this seems wholly
unrelated to the clear button and since most of the interface was
responsive it seemed even weirder.&lt;/p&gt;
&lt;p&gt;
My best guess was that the web browser executed the JS code
until the crash so anything that parts of the user interface that were
wired up prior to that null pointer reference did indeed run.&lt;/p&gt;
&lt;p&gt;
The lack of feedback and this manner of execution can make javascript
really tough on both beginners and self learners. It&amp;#39;s also tough with
a teacher if they don&amp;#39;t really know the ins and outs of the toolset.&lt;/p&gt;
&lt;p&gt;
This was all just a reminder that tools matter. Java, Python, and C++
might not give the best error messages but generally the tooling isn&amp;#39;t
so bad. They could of course, be better, and I&amp;#39;m not arguing that any
of them are ideal learning environments but JS has a long way to
go. On the other hand, languages and environment specifically made for
learning have issues as well. The bottom line in choice of tools is
that there&amp;#39;s no magic bullet and the answer is as usual, &amp;#34;it depends.&amp;#34;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Merge Over Zoom - A Hunter CS Certification Program Update</title>
      <link>https://cestlaz.github.io/post/merge-over-zoom/</link>
      <pubDate>Thu, 16 Jul 2020 19:00:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/merge-over-zoom/</guid>
      <description>&lt;p&gt;
We&amp;#39;ve been talking sorting and searching in our teacher certification
program and today was all about the merge sort. One of the strategies
we use when teaching it in person involves sorting a deck of cards by
&lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-27-dumbass/&#34;&gt;Tom Sawyering&lt;/a&gt; it with the class. It&amp;#39;s fun and it&amp;#39;s effective but you
can&amp;#39;t do it over Zoom. What to do? We didn&amp;#39;t want to just jump into
the nuts and bolts of merge sort. We could - we&amp;#39;ve got a great group
of teachers who could handle it but we&amp;#39;re not just talking about
content in the program we&amp;#39;re also talking about pedagogy.&lt;/p&gt;
&lt;p&gt;
How could we adapt a divide and conquer algorithm where we split a
deck of cards and pass it out to the class to a remote environment.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what we came up with.&lt;/p&gt;
&lt;p&gt;
I started with a story about how I pitched Hunter about having a party
with this first cohort when they all earn their NY State CS Teaching
Certificates (assuming we could have a party in person). They said yes
but to keep costs down I had to get them a list of possible
restaurants to order from sorted by lowest price. We decided to use
Chinese restaurants and the price of pork dumplings. &lt;/p&gt;
&lt;p&gt;
I had a long list and was going to have to go to the seamless page for
each one and get the price and then sort them. Not fun.&lt;/p&gt;
&lt;p&gt;
Since I&amp;#39;m running the program but have two instructors - JonAlf and
Topher working with me, we decided I could &amp;#34;volunteer&amp;#34; each to do half
the list. They weren&amp;#39;t happy so they looked for Teaching Assistants to
pawn the work off on but having none went to the students. We
continued with the split until a bunch of students each had to look up
one and only one restaurant to find the price of the pork. We then
passed the restaurants and prices back up the chain and voila - merge
sort. .&lt;/p&gt;
&lt;p&gt;
We basically were able to replicate the in class card sorting
experience with something that we could do over Zoom. It went over
pretty well. &lt;/p&gt;
&lt;p&gt;
We&amp;#39;re going to talk more about what we did and why and the idea of
actively engaging students in different ways over virtual conference
technologies tomorrow. &lt;/p&gt;
&lt;p&gt;
It was all pretty cool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hunter&#39;s CS Teacher Certification program Week 2</title>
      <link>https://cestlaz.github.io/post/teacher-cert-week-2/</link>
      <pubDate>Sun, 12 Jul 2020 10:31:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-week-2/</guid>
      <description>&lt;p&gt;
Time for some thoughts after week 2.&lt;/p&gt;
&lt;p&gt;
Since this is the inaugural edition of our program and there was no
way to really know what the cohort would be like we&amp;#39;ve been adjusting
on the fly. This was expected but we&amp;#39;re finally starting to settle
in. We&amp;#39;re still finding more zoom heavy days but as we move towards
the end of our data structures segment there should be fewer of those.&lt;/p&gt;
&lt;p&gt;
The cohort is progressing nicely. They&amp;#39;re working hard - we&amp;#39;ve got
some members who are former CS majors or otherwise came in with a
strong CS background but many were relative beginners. They&amp;#39;re all
coming along. We have to remind them that some topics just take
time. I&amp;#39;ve taught these subjects for years at Stuy but also at Hunter
College and NYU and recursion just takes time. So do Linked Lists and
dynamic data structures. It&amp;#39;s typical for CS majors not to be really
comfortable with them for a couple of years. I think I was near the
end of my college days before I&amp;#39;d roll out a pointer based solution to
a problem with the same comfort as with an array. So, the long and
short is that they&amp;#39;re doing great.&lt;/p&gt;
&lt;p&gt;
When we started, we tried to integrate a discussion of pedagogy with
the CS but found that we were expecting too much as the CS was new to
a large portion of the group. We decided instead to model assorted
teaching techniques but keep the analysis and discussion mostly to the
CS. Last Friday though we spent most of the morning looking back at
the pedagogy. It was a rich discussion. We loved that many of the
teachers commented on &amp;#34;when we modeled&amp;#34; one technique or another. We
ended up spending a good amount of time talking about scaffolding and
code skeletons, code reading and tracing, live coding and a bunch of
others. What was also cool was that some of the techniques we modeled
didn&amp;#39;t come up in our discussion originally (we had to interject them)
and some things we did unintentionally were also highlighted by the
cohort. &lt;/p&gt;
&lt;p&gt;
It was a fun and productive morning. &lt;/p&gt;
&lt;p&gt;
Another thing that came out of the discussion was our use of
technology but I&amp;#39;m saving that for another post. &lt;/p&gt;
&lt;p&gt;
Finally, I&amp;#39;m remembering that a month long summer intensive is, well,
intensive. It&amp;#39;s really draining. After Friday&amp;#39;s session was done and
JonAlf, Topher and I debriefed, I just crashed for the night and
pretty much took Saturday off save making one video that we&amp;#39;ll need on
Monday. It&amp;#39;s also hard on the students - 12 credits in one month. &lt;/p&gt;
&lt;p&gt;
That said, we&amp;#39;re chugging along and they&amp;#39;re doing great. More
confident than ever that we&amp;#39;re going to have a 21 new leaders in CS Ed
in NY come the program&amp;#39;s conclusion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Limitations Of Remote Teaching</title>
      <link>https://cestlaz.github.io/post/limitations-of-remote-teaching/</link>
      <pubDate>Mon, 30 Mar 2020 14:41:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/limitations-of-remote-teaching/</guid>
      <description>&lt;p&gt;
While tools like Zoom, Slack and others are a tremendous boon as we&amp;#39;re
forced to do all our teaching remotely the limitations become apparent
as we settle in and try to go beyond the basics of an offsite meeting.&lt;/p&gt;
&lt;p&gt;
Today was &lt;a href=&#34;https://cestlaz.github.io/post/code-review-2/&#34;&gt;code review&lt;/a&gt; day in my CS1 class. It&amp;#39;s a lesson that I enjoy
teaching and I think my students get a lot out of it. Today we had to
do it remote. The mechanics were largely the same:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Pair off the kids.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have them write out a commentary on their partners code without discussion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pair off again&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have one review the others code but this time via discussion and
note taking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get everyone together and discuss&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Zoom supported all the basics. Splitting the class was pretty easy via
the breakout room interface and students were able to flag me when
they wanted to bring me in to their breakout. It was also pretty easy
to move newcomers into a room. There were some interface nits that
Zoom has to address like how when I entered and left a breakout room I
ended up losing part of the breakout window interface but I figured
out a workaround.&lt;/p&gt;
&lt;p&gt;
The big difference and limitation was that I couldn&amp;#39;t just lurk. In
a live in person class, I get a top down view. I can basically see what all the
pairs are doing. I can&amp;#39;t get the details from a distance but I can
basically see what&amp;#39;s going on. I can also sidle over near a group to
see how they&amp;#39;re doing without being obtrusive. I can also see some of
the students screens and notebooks to get the gist of what&amp;#39;s going on
and focus in on individual conversations.&lt;/p&gt;
&lt;p&gt;
You can&amp;#39;t do these things with Zoom and I daresay you can&amp;#39;t with any
remote conferencing platform. When I wasn&amp;#39;t in a breakout room I was
alone in the main room. When I was in a breakout room it was obvious I
joined and that in and of itself changed the room dynamic. I also
couldn&amp;#39;t see anything the kids were writing on paper or on screen
unless they explicitly shared it. &lt;/p&gt;
&lt;p&gt;
All of this changes the dynamic big time and limits my effectiveness
as a teacher. &lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t take this to mean I&amp;#39;m down on Zoom. I&amp;#39;m really loving the tool
and without it or similar products my students would be getting &lt;strong&gt;much&lt;/strong&gt; 
less during this crisis. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s just a reminder that teaching is a contact sport and as much as
some people will tell you otherwise the best instruction is in person
in a small class with a knowledgeable dynamic teacher. We&amp;#39;re not
getting back there this semester but here&amp;#39;s hoping that we get back by
Fall.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Necessity is the mother of invention</title>
      <link>https://cestlaz.github.io/post/mother-of-invention/</link>
      <pubDate>Mon, 23 Mar 2020 18:59:40 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/mother-of-invention/</guid>
      <description>&lt;p&gt;
I didn&amp;#39;t expect to read a Fred Wilson post on &lt;a href=&#34;https://avc.com/2020/03/teaching-online/&#34;&gt;teaching online&lt;/a&gt; but
that&amp;#39;s what I found when I visited &lt;a href=&#34;https://avc.com/&#34;&gt;his blog&lt;/a&gt; this morning. Don&amp;#39;t get me
wrong - I suspect that Fred has the makings of a great teacher, it&amp;#39;s
just not what I expected to find. There have been many posts about
education but I don&amp;#39;t recall any about teaching or more specifically
the art of teaching. I did find &lt;a href=&#34;https://avc.com/2011/07/teaching/&#34;&gt;this post&lt;/a&gt; though which actually speaks
to some of the thoughts today&amp;#39;s post got churning.&lt;/p&gt;
&lt;p&gt;
Fred describes what sounds like a typical &amp;#34;lecture style&amp;#34; lesson he&amp;#39;s
delivered numerous times. This time, it would be delivered via
Zoom. Now, Zoom is great but it&amp;#39;s harder to do an interactive
lecture - ie active learning online than it is to do in person which
is what I&amp;#39;m guessing led him to set up some starter Google sheets and
use these shared documents for an active project based class.&lt;/p&gt;
&lt;p&gt;
At the end of the post, now that he came up with what sounds like
a much stronger approach. Fred wonders if he&amp;#39;ll ever teach this class
any other way. &lt;/p&gt;
&lt;p&gt;
The first thing I thought was that this would be even better in
person. I don&amp;#39;t know the specifics but I could think of a number of
ways of running this. All in person with time to work on the
spreadsheets is one. Giving some pre-work and the sheets and then pick
up somewhere in the middle is another. In person gives the feel - the
live interaction where a teacher can read the class but there&amp;#39;s no
reason why we can&amp;#39;t also leverage tech tools like shared Google
sheets in a live classroom.&lt;/p&gt;
&lt;p&gt;
Then I got thinking about necessity being the mother of
invention. Nothing stops us from changing things up, from trying
something in normal times but when the norm is disrupted sometimes it
spurs creativity or changes focus. I
try to continually evolve as a teacher but I&amp;#39;m no better than anyone
else and get caught in ruts. I force myself to try new
things. Sometimes they work and it&amp;#39;s great and sometimes &lt;a href=&#34;https://cestlaz.github.io/post/try-something-new/&#34;&gt;they
don&amp;#39;t&lt;/a&gt;. Live and learn. On the other hand, when all if a sudden you can&amp;#39;t do things the
usual way the brain works on alternatives. &lt;/p&gt;
&lt;p&gt;
One example was the lesson where I
&amp;#34;invented&amp;#34; live coding. It was a direct result of a forced change -
for some reason, and I don&amp;#39;t recall why, I couldn&amp;#39;t do things the way I
wanted that day so I winged it. Years later, I was chatting with a
former student and he, out of the blue mentioned that that lesson had
a profound influence on him. &lt;/p&gt;
&lt;p&gt;
Right now, I&amp;#39;m teaching using Zoom, slack, videos and email. Not being
in a room with my kids sucks. I feel less connected and it&amp;#39;s much
harder to read the class. What am I doing? On the one hand, I&amp;#39;m not
trying to change that much at once as I want my students to have some
stability in an uncertain time but I am working on new things. The
nice thing is that whatever I come up with I can share with my fellow
teachers here and take with me back into the classroom. &lt;/p&gt;
&lt;p&gt;
This was my big takeaway but the post also reminded me of why I turn
to teachers before I turn to &amp;#34;the research&amp;#34; or policy makers on how to
teach. Fred described the evolution of a lesson and a teaching
technique. What he essentially described is what teachers do every day
and we have to do it accounting for all the variables that the
research can&amp;#39;t. We teach multiple classes a day every day of the
week. We try things, assess the results, rinse and repeat. I get that
all teachers don&amp;#39;t do this but the good ones do.&lt;/p&gt;
&lt;p&gt;
The final thought I had was with the reality that while coming up with
interesting active learning experiences is great it also takes a lot
of time and there&amp;#39;s not much time when you&amp;#39;re teaching five classes a
day five days a week to 150 kids along with grading, advising, and
everything else. This is why I tell young teachers that you always
want to evolve and improve but not every lesson is going to be a home
run and that&amp;#39;s okay.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s particularly important for teachers to remember this now as
across the nation they&amp;#39;re re-inventing their syllabi on the fly to
move from in person to online and they&amp;#39;re doing it without time,
training, and in some cases tools. &lt;/p&gt;
&lt;p&gt;
Do the best you can and continue to develop your toolset. Not every
new online experience will be great but if they&amp;#39;re sincere, your kids
will know. In the end we&amp;#39;ll all be okay and back to normal but with a
whole bunch of new tricks up our sleeves.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remote Classes</title>
      <link>https://cestlaz.github.io/post/remote-classes/</link>
      <pubDate>Tue, 03 Mar 2020 09:34:40 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/remote-classes/</guid>
      <description>&lt;p&gt;
Over at &lt;a href=&#34;https://avc.com&#34;&gt;AVC&lt;/a&gt; Fred Wilson just posted about &lt;a href=&#34;https://avc.com/2020/03/outschool-can-help-your-school-prepare-for-unexpected-closures/&#34;&gt;Outschool&amp;#39;s efforts&lt;/a&gt;
to support students and teachers in the event of school closures due
to the Coronavirus. All the details and relevant links are in the
post. &lt;/p&gt;
&lt;p&gt;
I looked a bit into Outschool when Fred first &lt;a href=&#34;https://avc.com/2019/05/outschooling/&#34;&gt;wrote about them&lt;/a&gt; but
never had a chance to do a deep dive.&lt;/p&gt;
&lt;p&gt;
Now, internet based teaching is not going to be as effective as in
person teaching but I was thinking about how far things have come.&lt;/p&gt;
&lt;p&gt;
After superstorm Sandy, Stuy was closed for about a week. Instead of
losing all the time my classes and I decided to try to do us some
internet schooling. We used Google tools and things went pretty well. &lt;/p&gt;
&lt;p&gt;
I wrote about what we did and some concluding thoughts &lt;a href=&#34;https://cestlaz.github.io/posts/2012-10-31-sandy-bridge.html/&#34;&gt;here&lt;/a&gt; and
&lt;a href=&#34;https://cestlaz.github.io/posts/2012-11-02-back-to-work/&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Back then - 2012 - the technology was close but not quite there. Now,
with tools like &lt;a href=&#34;https://zoom.us&#34;&gt;Zoom&lt;/a&gt; and I&amp;#39;m guessing &lt;a href=&#34;https://outschool.com/&#34;&gt;Outschool&lt;/a&gt;, which is probably
more fine tuned for education rather than meetings you have some nice
all in one or at least most in one solutions. I had to use a YouTube
broadcast and separate documents and chats. Today&amp;#39;s tools tie all of
those together along with screen sharing. Maybe Outschool even has a
shared virtual blackboard - that would be pretty cool. Add in
something like Trello and GitHub and we&amp;#39;re really cooking.&lt;/p&gt;
&lt;p&gt;
It really reminds me that &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Wave&#34;&gt;Google Wave&lt;/a&gt; was really a product ahead of
it&amp;#39;s time. &lt;/p&gt;
&lt;p&gt;
As I said above, internet teaching will not be as effective as
live. It&amp;#39;s more of a show and do rather than an interactive class and
I go through some of the other issues in the my two posts linked above
but we&amp;#39;re getting better. Certainly way better than closing a school
and doing nothing. &lt;/p&gt;
&lt;p&gt;
Hats off to Outschool for providing their services to the community. I
hope few have to use them but am thankful they&amp;#39;re there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teacher Centric Teaching</title>
      <link>https://cestlaz.github.io/post/teacher-centric-teaching/</link>
      <pubDate>Tue, 14 Jan 2020 08:27:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-centric-teaching/</guid>
      <description>&lt;p&gt;
Every few years the experts give us some new magic bullet, some new
 &lt;del&gt;teaching fad&lt;/del&gt; research based pedagogical technique. Teachers are
 trained in it, forced to use it - frequently as a one size fits
 all. If we do, we&amp;#39;re good teachers, if we don&amp;#39;t we get the dreaded
 ineffective on our annual ratings.&lt;/p&gt;
&lt;p&gt;
I was reminded of this when reading &lt;a href=&#34;https://twitter.com/guzdial&#34;&gt;Mark Guzdial&lt;/a&gt;&amp;#39;s recent blog post on
&lt;a href=&#34;https://computinged.wordpress.com/2020/01/13/computing-education-lessons-learned-from-the-2010s-what-i-got-wrong/&#34;&gt;things he got wrong&lt;/a&gt; in Computing Education. It&amp;#39;s a really great
post. Mark mentioned &lt;a href=&#34;https://en.wikipedia.org/wiki/Constructivism_(philosophy_of_education)&#34;&gt;constructivism&lt;/a&gt; and it made me think of a few
years ago when constructivism was all the rage. If you didn&amp;#39;t set your
class up for &lt;a href=&#34;https://en.wikipedia.org/wiki/Discovery_learning&#34;&gt;discovery learning&lt;/a&gt; all the time you were clearly a bad
teacher. I&amp;#39;d sit on on CS PD sessions, listen to principals and
supervisors talk about what they wanted to see in classes and on and
on.&lt;/p&gt;
&lt;p&gt;
If you weren&amp;#39;t a constructivist educator you weren&amp;#39;t a good educator.&lt;/p&gt;
&lt;p&gt;
Of course a few years earlier it was something else.&lt;/p&gt;
&lt;p&gt;
Back when I started it was cooperative learning and
cooperative learning isn&amp;#39;t just group work - you had to follow the
formula. Each student in a group had a role, there were specific
stages of work and everything had to be just so.&lt;/p&gt;
&lt;p&gt;
There were other fads along the way. &lt;/p&gt;
&lt;p&gt;
If you were lucky and had a good supervisor you didn&amp;#39;t have to worry
about the fads, the research, the nonsense. You could focus on your
development as a teacher. They might work with you on questioning, for
instance - regardless of the flavor of the month, a teacher will ask
questions and facilitate discussion and they will surely insulate you
from whatever nonsense the bean counters want to see as long as you&amp;#39;re
doing right by your students. On the other hand, a bad supervisor
would mean stressful set up observations.&lt;/p&gt;
&lt;p&gt;
Even without Mark&amp;#39;s post, I&amp;#39;ve been thinking about this a lot since
we&amp;#39;re about to launch our CS Teacher Certification programs at
Hunter so I&amp;#39;ve been thinking about these fads from a teacher
preparation point of view. &lt;/p&gt;
&lt;p&gt;
Many of these fads have some value - they&amp;#39;re tools in the toolbelt to
be used as needed. The problem is that supervisors, and in my
experience, professional development and teacher preparation programs
make teaching 100% about the student. While the student is in fact the
customer and who&amp;#39;s development is the goal of our work, you can&amp;#39;t
ignore other factors. Environment and resources are two of these other
factors and a big one is the teachers individual strengths,
weaknesses, and tendencies.&lt;/p&gt;
&lt;p&gt;
Cooperative Learning never really worked for me - at least not whole
hog. As a &amp;#34;Cooperative Learning teacher&amp;#34; I&amp;#39;d be meh at best. On the
other hand, I&amp;#39;ve taken plays from the cooperative learning playbook
and applied them as I&amp;#39;ve seen useful. Sometimes it didn&amp;#39;t work,
sometimes to great effect.&lt;/p&gt;
&lt;p&gt;
As a teacher, I always took the advice of one of my early fencing
mentors. I was receiving conflicting advice from multiple well
respected coaches and more experienced fencers. My mentor said &amp;#34;listen
to what they all have to say, think about it, figure out what best
will work for you and do that.&amp;#34;&lt;/p&gt;
&lt;p&gt;
As to running my teacher prep programs, I&amp;#39;m going to do my best to
make sure that we do recognize that teachers bring different things to
the table and it will my job to help them maximize their
effectiveness. This means that we can&amp;#39;t blindly follow the favored
teaching techniques du jour but rather we have to look at all sorts of
methods and combine them with our teachers strengths, abilities, and
tendencies, and their specific classroom situations.&lt;/p&gt;
&lt;p&gt;
It should be fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with texts part 1 - cleaning the data</title>
      <link>https://cestlaz.github.io/post/cleaning-textx/</link>
      <pubDate>Fri, 15 Nov 2019 16:18:51 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cleaning-textx/</guid>
      <description>&lt;p&gt;
I run periodic professional development sessions here in New York with
my partner in crime JonAlf Dyrland-Weaver. I call them PD for &amp;#34;APCS-A,
similar or beyond&amp;#34; and they&amp;#39;re designed to fill a professional
development gap. We try to run them once a month but it&amp;#39;s a little
less frequent than that.&lt;/p&gt;
&lt;p&gt;
The NYCDOE has taken on the monster task of CS for all and since
they&amp;#39;re trying to get to everyone they have to run a bazillion
sessions but all at an introductory level. Beyond that, most PD is
tied to a curriculum, program, or product. We decided to run sessions
for teachers who are ready for more both pedagogically and content
wise while not affiliating with any specific provider. We&amp;#39;re just
about the CS and the teaching of CS.&lt;/p&gt;
&lt;p&gt;
Yesterday we had our first session of the year and the content topic
was text processing. Along the way, we used it as an opportunity to
highlight subgoal labeling as a teaching technique.&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot you can do in both CS0 and CS1 with text and document
processing. By the end of yesterday&amp;#39;s session we had discussed a bunch
of possibilities based on the text processing technique known as a
&amp;#34;bag of words&amp;#34; which basically takes a text and just considers all the
words it contains. What are the words and how many times does each
word occurs. No consideration of order, grammar, or anything else. Just
words and counts. We also talked a bit about more advanced possibilities
like playing with an inverted index. I&amp;#39;ll talk about both of those in
a future post. &lt;/p&gt;
&lt;p&gt;
For today, let&amp;#39;s talk about what we have to do before we even begin -
preprocessing the data.&lt;/p&gt;
&lt;p&gt;
We grabbed a bunch of texts from &lt;a href=&#34;https://www.gutenberg.org/&#34;&gt;Project Gutenberg&lt;/a&gt;. Specifically, &amp;#34;Moby
Dick&amp;#34;, a translation of my favorite play &amp;#34;Cyrano de Bergerac&amp;#34; and the
Book of Psalms from the Bible. I also made a copy of the first chapter
of &amp;#34;Moby Dick&amp;#34; so we had a shorter corpus to play with and typed up
the first scene of &amp;#34;Macbeth&amp;#34; - all thirteen lines of it.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s easy enough to read in the data in a language like Python:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cyrano.txt&amp;#34;&lt;/span&gt;)
raw_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
but if you&amp;#39;re using a bag of words you&amp;#39;ve got to do some cleaning.&lt;/p&gt;
&lt;p&gt;
To start, all Project Gutenberg texts contain a whole bunch of front
and back matter with lots of words. If you don&amp;#39;t get rid of them
you&amp;#39;ll get extra words in your bag. I forgot to do this and was a bit
surprised to see phrases like &amp;#34;Pay a trademark license&amp;#34; in the Book of
Psalms.&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s easy enough to just cut the tops and bottoms of each file off
with an editor and that&amp;#39;s when we can read our data into our program
and the fun begins.&lt;/p&gt;
&lt;p&gt;
First we had to turn everything into lower case;&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lower_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
and then the big part - we want to get rid of all the punctuation. We
first tried something like this:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;stuff_to_remove &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.:;&amp;#39;0123456789&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;cleaned_letters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lower_data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stuff_to_remove]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;cleaned_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cleaned_letters)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
The second line is a list comprehension. It iterates through each
letter in lower_data and copies it into the resultant list only if the
letter is not in our stuff_to_remove list.&lt;/p&gt;
&lt;p&gt;
For example, if we had &lt;code&gt;lower_data = &amp;#34;abc123def g&amp;#34;&lt;/code&gt; we&amp;#39;d get a result
of &lt;code&gt;[&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;,&amp;#34;d&amp;#34;,&amp;#34;e&amp;#34;,&amp;#34;f&amp;#34;,&amp;#34; &amp;#34;,&amp;#34;g&amp;#34;]&lt;/code&gt;. We then use the join in line 3
to turn it back into a string &lt;code&gt;&amp;#34;abcdef g&amp;#34;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
This worked pretty well but we found that there were problems. There
were characters that we didn&amp;#39;t account for like long dashes that
connected words and we didn&amp;#39;t have an easy way to put them in our
removal string.&lt;/p&gt;
&lt;p&gt;
This led to take 2. Instead of deciding what to throw away, let&amp;#39;s
decide what to keep;&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;stuff_to_keep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abcdefghijklmnopqrstuvwxyz &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;cleaned_letters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lower_data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stuff_to_remove]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;cleaned_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cleaned_letters)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
This worked better (and yes, I know I could have used isalpha() but I
didn&amp;#39;t remember it at the time) but still had problems. We had words
that were formerly separated by punctuation with no spaces that were
now combined into new invalid words. We also had things like chapter
headings in our text and other stray words that we probably wanted to
get rid of.&lt;/p&gt;
&lt;p&gt;
All of this led to rich conversation among the teachers present and
can do the same in class. What do you clean? What do you keep? Is it
worth the effort to write all sorts of cleaning code to get rid of a
couple of stray bits of bad data or can we get the results we want by
leaving it in? There&amp;#39;s no universally right answer and that&amp;#39;s part of
the beauty of doing things like this with a class - it&amp;#39;s something
that can make them think.&lt;/p&gt;
&lt;p&gt;
Once we made our final cleaning decisions it&amp;#39;s a simple matter to
convert the long string of text into a list of words:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;wordlist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cleaned_string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
Now we&amp;#39;re ready to start building our bag of words but that&amp;#39;s a post
for another day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My test grading policy</title>
      <link>https://cestlaz.github.io/post/grading-policy/</link>
      <pubDate>Wed, 09 Oct 2019 17:13:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/grading-policy/</guid>
      <description>&lt;p&gt;
I was working on writing a midterm the other day so figured I&amp;#39;d talk a
bit about my test grading policy.&lt;/p&gt;
&lt;p&gt;
Before getting to the specifics, let me set the stage. I spent most of
my career at Stuyvesant - a public magnet school in
NYC. There are many great students who are interested in learning but
there&amp;#39;s also a focus on grades. and this leads to a non-insignificant portion of
the student body that is grade obsessed and will do everything and
anything for every point possible. &lt;/p&gt;
&lt;p&gt;
We called it grade grubbing. &lt;/p&gt;
&lt;p&gt;
Grade grubbing goes beyond asking for points you think you deserve and
it comes in many forms. It&amp;#39;s when you BS your way through an essay or
paper and put in as many key phrases as possible and hope the teacher
only sees those when scanning through hundreds of papers. It&amp;#39;s taking
that same paper and only showing the key correct phrases during an
appeal and ignoring the contradictory key phrases a few lines
below. It&amp;#39;s when you write an answer in a somewhat ambiguous way that
if marked wrong allows for an appeal. It&amp;#39;s appealing a low grade
because &amp;#34;I always get over 95&amp;#34; and it even involves cheating
sometimes and changing answers after the fact.&lt;/p&gt;
&lt;p&gt;
Now, this isn&amp;#39;t the majority of the class. It&amp;#39;s only a small percent
but it&amp;#39;s pretty annoying and it had a bit of influence on my testing
policy.&lt;/p&gt;
&lt;p&gt;
So, what&amp;#39;s my policy? It&amp;#39;s pretty simple. &lt;/p&gt;
&lt;p&gt;
Rule 1 - once I return the test you can&amp;#39;t ask me anything about your
exam until either we go over the exam in class or if we don&amp;#39;t until
after I&amp;#39;ve shared the answer key with the class. If you do ask me
about the exam before we&amp;#39;ve gone over it you forfiet your right to ask
for any points back on any mismarked questions. &lt;/p&gt;
&lt;p&gt;
Rule 2 - If you appeal a question for points - that is come up and say
&amp;#34;I got this question right&amp;#34; and it turns out that you are correct, you
get your points. If, on the other hand, the quesiton is incorrect, I
reserve the right to take off the points deducted a second time. That
is, if you originally lost 5 points you could now lose up to 10.&lt;/p&gt;
&lt;p&gt;
This might sound harsh and somewhat jerky but it really isn&amp;#39;t. Due to
the nature of CS exams students can always be 100% certain that their
answer is correct because they can always try it out on a
computer. That&amp;#39;s the point. If something is marked wrong, I want the
student to take the time to see what&amp;#39;s going on before appealing the
grade. Questions that can&amp;#39;t be absolutely tested are of course excempt
from this policy.&lt;/p&gt;
&lt;p&gt;
If a student comes up to me and says &amp;#34;hey, i know this is wrong - I
tested it and I&amp;#39;m not asking for points, I just don&amp;#39;t understand
what&amp;#39;s going on&amp;#34; I would never deduct more points and in fact have
sometimes lowered deductions.&lt;/p&gt;
&lt;p&gt;
As it turns out, I&amp;#39;ve never actually ended up taking off extra points.&lt;/p&gt;
&lt;p&gt;
The whole idea is to stop the reflexive grade grubbing and get
students to think about the problems and solutions. It also helps in
keeping teacher harrassment to a minimum :-). &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching techniques - industry to classroom and classroom to industry</title>
      <link>https://cestlaz.github.io/post/industry-techniques-in-class/</link>
      <pubDate>Fri, 27 Sep 2019 12:34:04 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/industry-techniques-in-class/</guid>
      <description>&lt;p&gt;
There are things we do in school and there are things we do in
industry and they&amp;#39;re not always the same. In school we might use a
learning language or an IDE which gives additional support and at
times even take away language features while at work you might you
might make heavy use of continuous integration tools. &lt;/p&gt;
&lt;p&gt;
On the other hand, sometimes we use the same things. Java is used in
schools and in industry, StackOverflow consulted in both and many
schools use professional IDEs like Eclipse.&lt;/p&gt;
&lt;p&gt;
While the things I mentioned above, whether the same or different are
on the tooling side, there are also things on the technique side that
are used both in school and in industry.&lt;/p&gt;
&lt;p&gt;
The most well publicized concept is probably &lt;a href=&#34;https://en.wikipedia.org/wiki/Pair_programming&#34;&gt;Pair Programming&lt;/a&gt; - the
idea of having two programmers develop using a shared
computer. There&amp;#39;s more to it than that and tons of variations but
that&amp;#39;s the crux of the idea. Proponents claim it increases programmer
efficiency and lowers error rates but others would rather not follow
the practice. Some feel that it&amp;#39;s great in certain environments like
when onboarding a new team member.&lt;/p&gt;
&lt;p&gt;
We hear CS Teachers talk about pairing in their classes all the time -
&amp;#34;It&amp;#39;s an industry technique&amp;#34; but to me the interesting thing is that I
think many teachers, particularly more senior ones came up with pair
programming independent of it as an industry technique. It came out of
not having enough computers. This invariably leads to kids pairing
up. Now, you&amp;#39;ll say &amp;#34;but pair programming isn&amp;#39;t just two kids sharing
a computer.&amp;#34; I agree but when good teachers do group work it isn&amp;#39;t
just kids left to their own devices working in a group. Over time,
teachers who &amp;#34;discover&amp;#34; pair programming come up with ways to make it
effective in their classrooms.&lt;/p&gt;
&lt;p&gt;
The other interesting thing is that pair programming serves different
purposes at work vs in schoo. At work it&amp;#39;s supposed to increase
programming efficiency and help them develop better code more
quickly. In the classroom, besides addressing the lack of computers,
it&amp;#39;s used as a tool to provide feedback to students, have them support
each other, and create a cooperative supportive environment.&lt;/p&gt;
&lt;p&gt;
Another technique CS teachers use is subgoal labeling. The gist here
is that you write down or label smaller goals within your
program. It&amp;#39;s an idea I used for years but only relatively recently
learned its name.&lt;/p&gt;
&lt;p&gt;
The interesting thing here is that I used this idea as a professional
programming well before I ever taught and I don&amp;#39;t recall it ever being
used in any of my classes. &lt;/p&gt;
&lt;p&gt;
The idea just made sense. I&amp;#39;d write a function and pepper it with
comments indicating the parts s or subgoals I&amp;#39;d need to write code for
to complete the function. I don&amp;#39;t know if subgoal labelling is or ever
was a prevelent technique in professional programming but the related
idea of writing function stubs is. The idea here is that as you
develop your program write out an empty placeholder function, a stub,
when you realize you need it and fill it in later. This is something
of a subgoal but at the function level.&lt;/p&gt;
&lt;p&gt;
So, here we have two practices. One that is certainly used in both
the classroom and in industry and one that likely is. The practices
seem to be examples of convergent evolution. Developed independently
but with similar albeit somewhat different benefits.&lt;/p&gt;
&lt;p&gt;
There have to me more practices like this. If you know any, please
share.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pig Latin - a beginner lesson with some depth</title>
      <link>https://cestlaz.github.io/post/piglatin/</link>
      <pubDate>Wed, 25 Sep 2019 17:11:29 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/piglatin/</guid>
      <description>&lt;p&gt;
I recently did a unit where I had my students convert words into &lt;a href=&#34;https://en.wikipedia.org/wiki/Pig_Latin&#34;&gt;Pig
Latin&lt;/a&gt;. I like the problem because to start it only requires strings,
functions and if statements but there is some depth to the unit.&lt;/p&gt;
&lt;p&gt;
We start with simplified rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If the word starts with a vowel, add &amp;#34;ay&amp;#34; to the end of the word&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If it starts with a consonant move the first latter to the end and
add &amp;#34;ay&amp;#34;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;don&amp;#39;t worry about anything else&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Students usually start with something like this:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
as students realize it&amp;#39;s much easier to check for vowels rather than
consonants. &lt;/p&gt;
&lt;p&gt;
Some students discover that you can do any of the following instead of
the big compound &lt;strong&gt;or&lt;/strong&gt; :&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This allows us to talk a little about lists (and tuples if you like)
as well as now strings are similar to them in certain ways.&lt;/p&gt;
&lt;p&gt;
By itself, this is a nice little beginner project but it gets better. &lt;/p&gt;
&lt;p&gt;
Since we talked a bit about lists and strings in the refinement, we
then talk about using python&amp;#39;s &lt;code&gt;split()&lt;/code&gt; method that parses a string
on whitespace. We also talk about the &lt;code&gt;for&lt;/code&gt; loop. Ultimately this
leads us to writing a function to convert a sentence into Pig Latin:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
But this doesn&amp;#39;t work with real sentences. Let&amp;#39;s focus on two
problems. The first is that it won&amp;#39;t handle the period at the end of
the sentence properly. It would take that last word, let&amp;#39;s say &lt;strong&gt;dog.&lt;/strong&gt; 
and convert it to &lt;strong&gt;og,day&lt;/strong&gt; rather than &lt;strong&gt;ogday.&lt;/strong&gt;. It also doesn&amp;#39;t
handle capital letters. There are other issues but they have similar
solutions to the ones we&amp;#39;ll use for these two.&lt;/p&gt;
&lt;p&gt;
This is where things get fun. &lt;/p&gt;
&lt;p&gt;
To handle the period, students frequently jump to modifying the &lt;strong&gt;if&lt;/strong&gt; 
conditions in &lt;code&gt;piglatinify&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
or something similar.&lt;/p&gt;
&lt;p&gt;
This is a straighforward working solution but it&amp;#39;s also a great place to introduce the idea of changing the data
instead of using complex conditionals to handle special cases (earlier
posts &lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-26-change-the-data/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://cestlaz.github.io/posts/advent-of-code-2016-2/&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;
If we take out the period we can do our regular piglatinify and then
add it back in. This leads us to a solution like this:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can do something similar to deal with words that start with upper
case letters:&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You can approach other special cases similarly.&lt;/p&gt;
&lt;p&gt;
So, there you have it. A fun little problem that you can do with your students
early on in a CS0 with surprising depth.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Is Good Teaching</title>
      <link>https://cestlaz.github.io/post/what-is-good-teaching/</link>
      <pubDate>Tue, 17 Sep 2019 17:13:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/what-is-good-teaching/</guid>
      <description>&lt;p&gt;
I had a conversation with my principal during my last year at
Stuy. She said &amp;#34;whenever the superintendent or high level education
people come and ask to see our best teachers I can never bring them to
Jim&amp;#39;s class.&amp;#34; Everyone knows that Jim is the best. I describe him as
&amp;#34;the teacher I aspire to be.&amp;#34;  What&amp;#39;s the problem? The problem is that
Jim didn&amp;#39;t teach the way the powers that be wanted him to teach. He
didn&amp;#39;t do discovery learning, kids didn&amp;#39;t work in groups, there&amp;#39;s
typically nothing that you could check off on the &amp;#34;best way to teach&amp;#34;
list. Jim&amp;#39;s an old school teacher. Teacher dominant. He leads the
discussion, asks questions, circulates while the kids work on
problems etc. Why does it work? A combination of things. He know his
math, charisma, force of personality, empathy, and a lot of other
factors. One could dismiss it as saying &amp;#34;it&amp;#39;s Stuy, it&amp;#39;s easy&amp;#34; but he
was the best at a high needs school before he was the best at Stuy.&lt;/p&gt;
&lt;p&gt;
I was thinking about this for a few reasons. One is I watched &lt;a href=&#34;https://www.youtube.com/watch?v=g1ib43q3uXQ&amp;amp;list=WL&amp;amp;index=52&amp;amp;t=0s&#34;&gt;this&lt;/a&gt;
video by &lt;a href=&#34;https://twitter.com/Felienne&#34;&gt;Felienne Hermans&lt;/a&gt;. It&amp;#39;s a good video, many good points. I
particularly like when she talked about talking to a room of teachers
about a new &amp;#34;discovery&amp;#34; about learning only to find that teachers have
known it for decades. Basically, Felienne pushes back on the discovery
learning and let them play that&amp;#39;s dominated the CS Education
space. She talks about her success with direct instruction. Another is
that we&amp;#39;re starting to see more acceptance and voices for
direct instruction in the CS Ed space as a whole. &lt;/p&gt;
&lt;p&gt;
Personally, I think this is a good thing, after all, it&amp;#39;s more my
style. On the other hand, I don&amp;#39;t want the pendulum to swing too
far. I was talking to a history teacher at Stuy when they brought in
the Danielson &lt;del&gt;nonsense&lt;/del&gt; Framework. She&amp;#39;s a good teacher but she was
sheepish about Danielson. She said that Danielson worked for her - it
aligned with the way she taught and made her seem like the absolute
best. She was and is an excellent teacher but we all have holes in our
game. She didn&amp;#39;t want to be held  up as an exemplar of great teaching
where she knew that chances are there will be a successor to Danielson
and chances are something else will be in vogue and she won&amp;#39;t be so
officially terrific anymore. &lt;/p&gt;
&lt;p&gt;
Right now, direct instruction is coming back. Who knows if it will
become the darling of the policy makers but regardless, a teaching
style or technique&amp;#39;s value can&amp;#39;t be determined without considering
other factors. The teacher&amp;#39;s personal style, the students, the
resources, class time, and much more. &lt;/p&gt;
&lt;p&gt;
So, what is a teacher to do? Add all the tools to your toolbox. I&amp;#39;m
not big on cooperative learning but I&amp;#39;ve peppered it in now and
then. Sometimes, it&amp;#39;s best to have the students discover things,
something you&amp;#39;ve got to tell them. Sometimes they should work on
things solo, sometimes in teams. I&amp;#39;ve taught classes that were all
projects and classes that had limited projects. Acquire all the tools
and use them as YOU think best. It&amp;#39;s the teacher with the skin in the
game. Not the policy makers, thought leaders, researchers, and
influences. More importantly it&amp;#39;s the teacher that knows their
students best - where they are, what they need and how to do the best
they can given the limited resources they have. &lt;/p&gt;
&lt;p&gt;
I&amp;#39;m obviously not excusing teachers who do one side lectures or who
just phone it in but the majority of teachers work hard to do it right
and should be given the freedom to do just that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Different languages, different techniques, different solutions</title>
      <link>https://cestlaz.github.io/post/different-languages/</link>
      <pubDate>Mon, 02 Sep 2019 17:33:51 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/different-languages/</guid>
      <description>&lt;p&gt;
I spent this weekend diving back into Clojure or more specifically,
Clojurescript. For those who don&amp;#39;t know, Clojure is a Lisp that runs
on the JVM. The solution it particularly seeks to &amp;#34;solve&amp;#34; is
immutability. Clojurescript is Clojure that compiles to Javascript for
web applications. Tooling aside, it&amp;#39;s all pretty neat.&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t do anything earth shaking, just a quick implementation of
Conway&amp;#39;s game of life and Snake. While the code isn&amp;#39;t particularly
good, you can check them out here (&lt;a href=&#34;https://github.com/zamansky/clojure-snake&#34;&gt;Snake&lt;/a&gt;, &lt;a href=&#34;http://github.com/zamansky/clojure-life&#34;&gt;Life&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;
The Life implementation got me thinking about the value of studying
different languages or more specifically, different paradigms. A
student who implements the game of life in Java will likely implement
something very similar in C++ as both languages are Object Oriented /
imperative. An implementation in Clojure or Haskell will likely look
very different.&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look a little deeper.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%2527s_Game_of_Life&#34;&gt;Conway&amp;#39;s Game of LIfe&lt;/a&gt; is a Cellular Automaton and when teaching a CS
class in Java or C++ it&amp;#39;s a really nice application of 2D arrays. On
each turn, for each cell in the world, you calculate its living
neighbors. If the cell is alive and it has 2 or 3 living neighbors, it
stays alive to the next turn. If the cell isn&amp;#39;t alive but has 3 living
neighbors it will become alive. Otherwise the cell dies (or remains
dead).&lt;/p&gt;
&lt;p&gt;
In a Java type language, given a 2D array &lt;code&gt;this_turn&lt;/code&gt; with the current
world and you might get something like:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s a really nice application of 2D arrays and I&amp;#39;ve done it with my
classes frequently over the years.&lt;/p&gt;
&lt;p&gt;
Another language I&amp;#39;ve done &lt;strong&gt;life&lt;/strong&gt; in is NetLogo. In NetLogo, you have
a world represented by an x,y grid with each cell in the grid known as
a patch. You write a program and all the patches run it
independently. A life solution might look like this:&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-netlogo&#34; data-lang=&#34;netlogo&#34;&gt;ask patches [ 
  set n count nieghbors with [color =  red] ;; red cells will be alive
  ifelse color = red 
    [ ifelse n=2 or n = 3
        [set nextcolor red]
        [set nextcolor black]
    ] 
    [
      ifelse n=3
        [ set nextcolor red ]
        [ set nextcolor black ]  
    ]
ask patches [set color nextcolor]&lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
My NetLogo is a little rusty so my syntax might be off but the idea is
to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;have each patch count it&amp;#39;s living neighbors and figure out it&amp;#39;s
next state - alive (red) or dead (black)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;have each patch set its color to the new state&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
This is a very different solution. In NetLogo you never think about
looping over the cells. It&amp;#39;s much higher level. You think about each
location as it&amp;#39;s own entity whereas in the Java solution you&amp;#39;re
getting much more into the nitty gritty. &lt;/p&gt;
&lt;p&gt;
NetLogo and Java are very different languages and using them
encourages you to solve problems in different ways. you&amp;#39;d likely
never create a 2D array in NetLogo - you&amp;#39;d exploit the word as your
array. Likewise you&amp;#39;d exploit the patches to distribute the work. In
Java you&amp;#39;d probably wouldn&amp;#39;t create a class to represent each patch in
the array and then run each in a thread. That would be overkill for
the problem at hand.&lt;/p&gt;
&lt;p&gt;
Well, what about Clojure?&lt;/p&gt;
&lt;p&gt;
Clojure isn&amp;#39;t set up for 2D arrays, at least not as cleanly as a
language like C++ or Java. One could use Java Interop - that is, the
ability of Clojure to directly use Java but that would defeat the
purpose of using Clojure. Clojure is all about lists, vectors, and
maps. Instead of a 2D array of the world, I made a list (vector) where
each element contained the location of a living cell. This is
certainly more space efficient. It also let me operate on the world as
a sequence of transformations to the data:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Calculate all the possible next cells (the cells in the list plus
all their neighbors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each possible next cell, count it&amp;#39;s living neighbors and
determine if the cell is alive in the next iteration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replace the list of cells with these new cells. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;generate [state]
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Generate and return the next state&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[potential-cells (for [[x y] state [dx dy] cell-bloc-3x3]
                          [(+ x dx) (+ y dy)])
        next-state (for [cell potential-cells]
                     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;alive?&lt;/span&gt; cell state) cell))]
    (into &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{} (remove nil?(into &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{} next-state)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You can see the complete code &lt;a href=&#34;https://github.com/zamansky/clojure-life/blob/master/src/life.cljs&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
This again is a very different way of thinking about the problem. In
Java we looped over the world and made adjustments. Here we
transformed the current set of cells into the next generations set of
cells in a pipeline like fashion.&lt;/p&gt;
&lt;p&gt;
Another feature of Clojure that results from its focus on immutability
is that in programs like these the computational part of the program
and the presentation part (the graphics) are totally separate. We
first transform the data and then the UI displays the current
data. Clojure does this very nicely and maybe I&amp;#39;ll write a post on
it but for now, I just want to point out that this is very different
from NetLogo. In fact, I completely finished the program for life
before I even thought about the interface. In NetLogo the interface is
an integral part of the language.&lt;/p&gt;
&lt;p&gt;
The point of all of this is that languages designed around different
paradigms are worth exploring even if you never do real work in
them. Even if you don&amp;#39;t like or use Clojure you can take lessons from
it&amp;#39;s functional side and how it handles immutability and you can add
those techniques to your toolkit when using C++ or Java. It doesn&amp;#39;t
mean you should write Java to look like Clojure but having a complete
toolkit of paradigms to draw from and apply when appropriate can only
be good for us and for our students.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do It First</title>
      <link>https://cestlaz.github.io/post/do-it-first/</link>
      <pubDate>Mon, 10 Jun 2019 08:00:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/do-it-first/</guid>
      <description>&lt;p&gt;
Reading Garth Flint&amp;#39;s end of year &lt;a href=&#34;https://gflint.wordpress.com/2019/06/07/last-day-of-school-and-done-with-java/&#34;&gt;post&lt;/a&gt; and Alfred Thompson&amp;#39;s &lt;a href=&#34;http://blog.acthompson.net/2019/06/how-well-can-you-code-projects-you.html&#34;&gt;follow up&lt;/a&gt;
had me thinking about a couple of things. &lt;/p&gt;
&lt;p&gt;
One was spurred when Garth
wrote &amp;#34;They also have to figure out the math before they code.&amp;#34; This
made me think about all the details we sometimes &lt;a href=&#34;https://cestlaz.github.io/posts/2014-11-21-little-details.html/&#34;&gt;take for for
granted&lt;/a&gt;. Things that are hard for our students that we just know. It&amp;#39;s
frequently math that we might find trivial but it could also be much
simpler things.&lt;/p&gt;
&lt;p&gt;
When I write Java code I have a snippet that provides most of my main
boilerplate. For a beginner, just typing in all the details and
getting them right might be a chore. Heck, even typing is something we
take for granted. Beginners who can type have a distinct
advantage. They can focus on the code rather than on the keys. That
boilerplate code might take ten minutes of typing alone and that&amp;#39;s not
adding in any typos or understanding errors. &lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t have anything to add here that I didn&amp;#39;t address in earlier
posts and Garth&amp;#39;s post has some great points so if you haven&amp;#39;t read it
yet, I recommend you take the few minutes to do so.&lt;/p&gt;
&lt;p&gt;
The other thoughts were spurred from this part of Garth&amp;#39;s post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;did only two of the six assignments myself.  With the others I saw
 the solution so did not code them up.  I should have coded them up
 just so I could answer questions better for the students.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Alfred expounded on this in his post and there was a good twitter
conversation around it as well.&lt;/p&gt;
&lt;p&gt;
As a general rule as teachers we should have solved the problems
before we assign them and not just theoretically be able to solve
them. Actually writing up the solutions can also clue us in on some of
the difficulties that our students might face. Particularly if we
really try to look at the assignment using our student&amp;#39;s eyes. &lt;/p&gt;
&lt;p&gt;
Neal Plotnick tweeted: &lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The lack of
experience with coding for Ts combined with canned, cloud based
curricula has allowed classrooms to be created with Ts pushing
assignments out and relying on automated grades. I don’t have a CS
degree but I made sure to code my python assignments first.&lt;/p&gt;&amp;mdash;
neil plotnick (@NeilPlotnick) &lt;a
href=&#34;https://twitter.com/NeilPlotnick/status/1137340790554996736?ref_src=twsrc%5Etfw&#34;&gt;June
8, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
And this is a real concern for me. I get it - we&amp;#39;re building a plane
while flying it and that places teachers in situations where they have
to learn on the fly and at times they&amp;#39;ll  have to assign problems
before they have  solutions. Long term, however, this is a big problem
and I suspect it&amp;#39;s not going to go away. &lt;/p&gt;
&lt;p&gt;
On the other side of the coin though are times when it&amp;#39;s best not to
have a solution before the class. Sure, if you&amp;#39;re teaching a merge
sort or doing a unit on inheritance you probably should have your
ownb written solutions but there are a whole bunch of topics which
lend themselves to doing things on the fly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;debugging&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;software engineering practices&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how to approach &amp;#34;random&amp;#34; problems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;practical &amp;#34;programming&amp;#34; techniques&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;can all benefit from an on the fly lesson. &lt;/p&gt;
&lt;p&gt;
Coding or teaching on the fly, when used appropriately allows the
teacher to model best practices in real situations. Of course this is
difficult to truly replicate if you teach the same class again later
in the day or if you revisit the class next year but it can be a
valuable tool. When you get a bug - a real bug not a planted one in
your code, you can really model techniques to solve the problem and
you can involve the class in finding that solution.&lt;/p&gt;
&lt;p&gt;
This can all be pretty scary. You can end up going down the wrong path
and never finish building whatever you&amp;#39;re building but overall it can
be a very valuable experience for the students. &lt;/p&gt;
&lt;p&gt;
The other consideration is that you can teach a great lesson this way
but it would probably get a low rating on Danielson or whateve
nonsense rubric your district uses for teacher evaluation.&lt;/p&gt;
&lt;p&gt;
None of this is to say that you don&amp;#39;t want to prepare. Most of the
time I&amp;#39;ll have solutions worked out or if not, I&amp;#39;ll have written
similar solutions countless times before but that said, there&amp;#39;s
sometimes value in exploring in the wild or as one of my early
supervisors put it &amp;#34;calling an audible.&amp;#34;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Choosing A Textbook</title>
      <link>https://cestlaz.github.io/post/choosing-a-textbook/</link>
      <pubDate>Sun, 31 Mar 2019 10:41:16 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/choosing-a-textbook/</guid>
      <description>&lt;p&gt;
Now and again there are requests on the assorted CS Education forums
asking about which text book to use. These requests are usually for
APCS-A. There are usually a number of &amp;#34;I&amp;#39;m very happy with …&amp;#34;
replies but I thought I&amp;#39;d take a bit of a deeper dive into what
teachers might want to consider when evaluating a textbook.&lt;/p&gt;
&lt;p&gt;
It was never an issue when I started as a math teacher. The choice was
generally already made and the school had one book for each subject
level. Sometimes there were two if the school was transitioning from
one book to another.&lt;/p&gt;
&lt;p&gt;
The older books were in general more rigorous and at the same time
more terse. The newer ones were more accessible but never seemed to
give enough guidance for kids to approach the harder
problems on their own. &lt;/p&gt;
&lt;p&gt;
In general, most teachers I know used them primarily as a source for
homework problems.&lt;/p&gt;
&lt;p&gt;
In the CS world, it seems like we have more options. &lt;/p&gt;
&lt;p&gt;
When I first starting teaching APCS-AB at Stuy we had to buy new books
as the enrollment had just shot up. There weren&amp;#39;t many books that
covered both the programming and the data structures but I found one
nad it was a good one:&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;&lt;img src=&#34;https://pictures.abebooks.com/isbn/9780314933072-uk.jpg&#34; alt=&#34;https://pictures.abebooks.com/isbn/9780314933072-uk.jpg&#34; title=&#34;https://pictures.abebooks.com/isbn/9780314933072-uk.jpg&#34; /&gt;&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
It was both accessible and was thorough. It wasn&amp;#39;t a great source of
exercises but it was no worse than the other options.&lt;/p&gt;
&lt;p&gt;
When we moved to C++ it was pretty easy as the same book was still
available, albeit now in two parts:
&amp;lt;div&amp;gt;
&amp;lt;figure class=&amp;#34;z_image_right&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/31pkP2rZj5L._BO1,204,203,200_.jpg&#34; alt=&#34;https://images-na.ssl-images-amazon.com/images/I/31pkP2rZj5L._BO1,204,203,200_.jpg&#34; title=&#34;https://images-na.ssl-images-amazon.com/images/I/31pkP2rZj5L._BO1,204,203,200_.jpg&#34; /&gt;&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;
    &amp;lt;img src=&amp;#34;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51BS6W1XRRL._SX394_BO1,204,203,200_.jpg&#34; alt=&#34;https://images-na.ssl-images-amazon.com/images/I/51BS6W1XRRL._SX394_BO1,204,203,200_.jpg&#34; title=&#34;https://images-na.ssl-images-amazon.com/images/I/51BS6W1XRRL._SX394_BO1,204,203,200_.jpg&#34; /&gt;&amp;#34; width=&amp;#34;150px&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
&amp;lt;/div&amp;gt;
When we went to Java we couldn&amp;#39;t find a book that covered both the
programming and the data structures but settled on this one: &lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;&lt;img src=&#34;https://i.ebayimg.com/images/g/N4oAAOSw4bVTmzOV/s-l1600.jpg&#34; alt=&#34;https://i.ebayimg.com/images/g/N4oAAOSw4bVTmzOV/s-l1600.jpg&#34; title=&#34;https://i.ebayimg.com/images/g/N4oAAOSw4bVTmzOV/s-l1600.jpg&#34; /&gt;&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;&lt;/p&gt;
&lt;p&gt;
Nowadays, particularly with data structures no longer being in issue
at most high schools there are many more choices and even back then
there was more to consider than I&amp;#39;m sure I realized.&lt;/p&gt;
&lt;p&gt;
When we recommend books to our colleagues we&amp;#39;re probably not being as
helpful as we can when we say &amp;#34;we like ….&amp;#34;&amp;#34;&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s important to think about how the text book is going to be
used. &lt;/p&gt;
&lt;p&gt;
Some text books weave a project, toolkit, or theme throughout
the chapters. That&amp;#39;s great if the teacher&amp;#39;s going to align the course
closely with the textbook. If you don&amp;#39;t however, it can make later
chapters harder on the students. If the text book develops, let&amp;#39;s say,
a graphics library in the early chapters and the teacher doesn&amp;#39;t do
the same, when the later chapters rely on this library students will
find themselves in a bit of trouble. &lt;/p&gt;
&lt;p&gt;
Some textbooks develop these large projects or libraries but do so as
add ons to each chapter. For most teachers that&amp;#39;s probably a better
bet.&lt;/p&gt;
&lt;p&gt;
Does the textbook have a rich set of problems, questions, and
examples? I haven&amp;#39;t found many that are great but then it&amp;#39;s probably
not as important these days with resources like &lt;a href=&#34;https://codingbat.com/java&#34;&gt;Coding Bat&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Does the textbook present material in a way similar to the teacher? If
it is, is that a good thing or not? On the one hand, it might make the
book easier for the student that&amp;#39;s &amp;#34;getting it&amp;#34; in class and then the
book and the class reinforce each other. On the other hand, if I&amp;#39;m not
connecting with a student, it&amp;#39;s probably better if the textbook takes
on a different voice.&lt;/p&gt;
&lt;p&gt;
There are more questions one should ask themselves when desciding on a
new textbook but I think you get the idea.&lt;/p&gt;
&lt;p&gt;
For my classes, I&amp;#39;ve never strictly used the textbook. It&amp;#39;s more meant
as a reference and alternate resource for the kids. For this reason, I
like a book that is more on the tutorial side. I generally don&amp;#39;t use
them for assignments but if the book has good ones, so much the
better. As we cover a unit in class, I want the book to be available
for the student who might need extra support. Nowadays, with so many
free resources out there I try to leverage them as well. For my
beginners at Hunter, I&amp;#39;ve been using &lt;a href=&#34;https://automatetheboringstuff.com/&#34;&gt;this&lt;/a&gt; and am pretty happy with it.&lt;/p&gt;
&lt;p&gt;
So, what am I missing? What else should we be considering more so than
just &amp;#34;I like the book.&amp;#34;
&amp;#34;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>March PD for CS Teachers</title>
      <link>https://cestlaz.github.io/post/pd-apcs-a-and-beyond-3-14-2019/</link>
      <pubDate>Tue, 26 Feb 2019 15:49:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-apcs-a-and-beyond-3-14-2019/</guid>
      <description>&lt;p&gt;
Back in December we ran our first &lt;a href=&#34;https://cestlaz.github.io/post/pd-apcs-a-and-beyond/&#34;&gt;PD session for CS teachers&lt;/a&gt;. This was
to address the need for professional development for teachers who were
more experienced in terms of computer science - we aimed this at people who were ready to
teach APCS-A, similar, or beyond and also to start to build a
community for these teachers. &lt;/p&gt;
&lt;p&gt;
We had trouble setting things up for February but we&amp;#39;re good to go for
March, April and May.&lt;/p&gt;
&lt;p&gt;
Just as with our first session, each session will consist of a content
piece, a pedagogy piece, and will overall be driven by the
participants.&lt;/p&gt;
&lt;p&gt;
The next session is set for Thursday, March 14 from 5:00 - 8:00 and
will be hosted by Digital Ocean. The sessions will earn you 3 CTLE
hours and dinner will be provided.&lt;/p&gt;
&lt;p&gt;
If you or a CS teacher you know is interested in this, they can sign
up here: &lt;a href=&#34;https://goo.gl/forms/DCXqPtwYS47Ooo8j1&#34;&gt;https://goo.gl/forms/DCXqPtwYS47Ooo8j1&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I use Github Classroom</title>
      <link>https://cestlaz.github.io/post/github-classroom/</link>
      <pubDate>Sun, 17 Feb 2019 16:42:48 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-classroom/</guid>
      <description>&lt;p&gt;
It&amp;#39;s been an amazingly unproductive weekend. Mostly because I&amp;#39;ve been
sick with the flu. It sucks but since the rest of the family&amp;#39;s away
anway at least I&amp;#39;m not making everyone miserable.&lt;/p&gt;
&lt;p&gt;
I did manage to stage my next couple of classes and figured that
writing this post wouldn&amp;#39;t take too much energy since it&amp;#39;s mostly a
video.&lt;/p&gt;
&lt;p&gt;
Earlier, I talked about using &lt;a href=&#34;https://cestlaz.github.io/post/github-classroom-travis/&#34;&gt;GitHub and TravicCI&lt;/a&gt; and this time around
I show how I use GitHub classroom to set up, disseminate, and collect
assignments.&lt;/p&gt;
&lt;p&gt;
Here are the important links you&amp;#39;ll need to set things up yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To register an organization (so that you can use private repos for
free): &lt;a href=&#34;https://education.github.com/discount_requests/new&#34;&gt;https://education.github.com/discount_requests/new&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The main GitHub education page with lots of good stuff and links: &lt;a href=&#34;https://education.github.com/&#34;&gt;https://education.github.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub Classroom: &lt;a href=&#34;https://classroom.github.com/&#34;&gt;https://classroom.github.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub Classroom Assistant: &lt;a href=&#34;https://classroom.github.com/assistant&#34;&gt;https://classroom.github.com/assistant&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The video goes through the entire process but doesn&amp;#39;t really much into
grading. For grading I usually do something like the following:&lt;/p&gt;
&lt;p&gt;
First I make a file named &lt;strong&gt;repos&lt;/strong&gt; with the names of all the submitted
repos:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd THEDIRECTORYWITHALLTHEREPOS
ls &amp;gt; repos&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Then I&amp;#39;ll use a script that looks something like this:&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;cat repos&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      cd /tmp/235-assignment-02-02-16-2019-07-25-00/$i
      NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** Name: &amp;#34;&lt;/span&gt; Readme.org | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/** Name: //g&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
      echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;================= &lt;/span&gt;$NAME&lt;span style=&#34;color:#e6db74&#34;&gt; ====================&amp;#34;&lt;/span&gt;
      make test
      ./test -s
      echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n------------------------------------\n\n&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt; &amp;gt; report&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
First I &lt;code&gt;cd&lt;/code&gt; into the repo. Each repo has a file named &lt;strong&gt;Readme.org&lt;/strong&gt; 
which has a line that looks like this &lt;code&gt;** Name: Students Name&lt;/code&gt;. The
line that starts &lt;strong&gt;NAME=&lt;/strong&gt; pulls out the student&amp;#39;s name. It then echos a
separator line with the sutdent&amp;#39;s name in it, builds and runs the
tests. &lt;code&gt;./test -s&lt;/code&gt; runs the doctest tests. The &lt;code&gt;-s&lt;/code&gt; says to print out
the passing tests as well as the failing ones. The output of the whole
loop is saved to a file named report.&lt;/p&gt;
&lt;p&gt;
From there I can look at the report and get a quick overview of who&amp;#39;s
submissions worked and who&amp;#39;s didn&amp;#39;t. I still have to look at the
students actual code but I usually navigate all of that in Emacs.&lt;/p&gt;
&lt;p&gt;
Finally, for grades, I just use a Google Spreadsheet with a script I
wronte to email grades to the students -
&lt;a href=&#34;https://cestlaz.github.io/posts/google-sheets/.&#34;&gt;https://cestlaz.github.io/posts/google-sheets/.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
You can easily adapt this processto use other languages wether you use Unit
Tests or not. &lt;/p&gt;
&lt;p&gt;
So, GitHub classroom - check it out. &lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/2PuXdb8OLYo&#34;&gt;https://www.youtube.com/embed/2PuXdb8OLYo&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Interfaces</title>
      <link>https://cestlaz.github.io/post/java-interfaces/</link>
      <pubDate>Fri, 08 Feb 2019 09:40:44 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/java-interfaces/</guid>
      <description>&lt;p&gt;
Two of the hardest topics to make meaningful to students in APCS-A are
inheritance and interfaces. It&amp;#39;s not that they&amp;#39;re super difficult
topics but rather that they&amp;#39;re not often needed, useful, or superior
to not using them on beginner assignments. More often than not the
motivation is a bit forced as are the assignments. &lt;/p&gt;
&lt;p&gt;
Inheritance is its own can of worms and to be honest, something I&amp;#39;ve
not found to be all that useful or necessary. The class abstraction
made sense to me for a number of projects but deep inheritance just
hasn&amp;#39;t come up much. &lt;/p&gt;
&lt;p&gt;
In any event, today I thought I&amp;#39;d talk about interfaces.&lt;/p&gt;
&lt;p&gt;
When Java was first built a decision was made not to allow multiple
inheritance - the idea that a class can be derived from multiple
parents. Multiple inheritance is powerful but it can also be
complicated and confusing. By not including multiple inheritance Java
ended up easier to work with than say C++ but there were times where
you needed features that multiple inheritance provide. Specifically
there are times when you need some functionality that operates across
multiple unrelated classes. Without any other features, you&amp;#39;d have to
start &lt;strong&gt;all&lt;/strong&gt; of your classes from a single based class and include that
functionality. Clearly not a good idea.&lt;/p&gt;
&lt;p&gt;
The first useful example is probably &lt;code&gt;Comparable&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
At first blush it might not seem all that useful. &lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s suppose you are doing something like finding the first String
(alphabetically) from an array:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
That&amp;#39;s easy enough but what if you had another class, &lt;code&gt;Shape&lt;/code&gt; where
you wanted to find the &amp;#34;smallest&amp;#34; based on area and a third class
&lt;code&gt;Person&lt;/code&gt; where you want to find the smallest by age? Without
interfaces you would need three independent search routines or set up
a crazy inheritance hierarchy where &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Shape&lt;/code&gt; all
come from the same parent. Instead, by having your two new classes
implement the &lt;code&gt;Comparable&lt;/code&gt; interface all three can use the same
search:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This is not entirely true. The above solution will give you compiler
warnings. You&amp;#39;ll have to decide if it makes sense to jump through the
hoops necessary to get rid of the warnings or if it&amp;#39;s sufficient to do
some vigorous had waving.&lt;/p&gt;
&lt;p&gt;
This is the benefit of interfaces. You can create functionality that
works across classes. In addition to writing things like our
 &lt;code&gt;findSmallest&lt;/code&gt; above, if our classes implement &lt;code&gt;Comparable&lt;/code&gt; we can sort
collections of our classes using the built in sort methods.&lt;/p&gt;
&lt;p&gt;
This is a benefit that our students can probably appreciate.&lt;/p&gt;
&lt;p&gt;
Anther place interfaces come up and make sense are with GUI
programming. It&amp;#39;s pretty easy to show the utility of using interfaces
with the assorted listeners. That said, Java GUI programming is
something of a bear so maybe that&amp;#39;s not the way to go.&lt;/p&gt;
&lt;p&gt;
Where else can you explore interfaces in APCS-A? Any program where you
have different entities that change in different ways over time. This
might be a simulation where time passes via a control loop or maybe a
game where time passes a turn at a time.&lt;/p&gt;
&lt;p&gt;
For example, you might have a simulation with various resources that
implement an interface with an &lt;code&gt;update&lt;/code&gt; routine:&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Maybe a food resource updates by raising or lowering the amount of
food it provides or perhaps an animal resource updates its location. You could
have an array of objects that implement this interface and just call
update on each one.&lt;/p&gt;
&lt;p&gt;
You could do the same with a game. Maybe the human player&amp;#39;s &lt;code&gt;update&lt;/code&gt; 
prompts for keyboard input while non player characters just calculate
their next state.&lt;/p&gt;
&lt;p&gt;
Interfaces are not the easiest thing to teach. The mechanics are
straightforward but the motivation is frequently forced for
beginners. I was never 100% happy with how I did it and now that I&amp;#39;m
in a C++ shop it doesn&amp;#39;t come up but I hope this is helpful to some of
you out there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github Classroom and Travis CI</title>
      <link>https://cestlaz.github.io/post/github-classroom-travis/</link>
      <pubDate>Sat, 02 Feb 2019 09:44:29 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-classroom-travis/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been using GitHub with my classes since GitHub&amp;#39;s early days. Over
time I&amp;#39;ve gotten my &lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4/&#34;&gt;workflows down&lt;/a&gt;. I use a combination of shell
scripts - many just written on the fly, GitHub organizations, and some
naming conventions and protocols that have served me well. &lt;/p&gt;
&lt;p&gt;
A few years ago, the &lt;a href=&#34;https://education.github.com/&#34;&gt;GitHub Education team&lt;/a&gt; started &lt;a href=&#34;https://classroom.github.com/&#34;&gt;GitHub
Classroom&lt;/a&gt;. I looked at it at the time. It was pretty cool but I had my
workflow so I didn&amp;#39;t adopt it. I still very much liked GitHub, the
education team, and the product so I kept tabs on the project as time
passed. &lt;/p&gt;
&lt;p&gt;
This semester I decided to go all in on GitHub Classroom. Why? A
combination of my changing my workflow and part due to the GitHub
education tools and community. At it&amp;#39;s core, GitHub classroom does two
things well:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Assignment creation and distribution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repo management and organization.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I thought I&amp;#39;d do a couple of posts and videos to show how I&amp;#39;m using
everything. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the first one.&lt;/p&gt;
&lt;p&gt;
Interestingly enough I&amp;#39;m not going to talk at all about GitHub
classroom for the remainder of this post. Instead I&amp;#39;m going to talk
about TravisCI (&lt;a href=&#34;https://travis-ci.com/&#34;&gt;&lt;a href=&#34;https://travis-ci.com/&#34;&gt;https://travis-ci.com/&lt;/a&gt;&lt;/a&gt;,
&lt;a href=&#34;https://travis-ci.org/&#34;&gt;https://travis-ci.org/&lt;/a&gt;). Travis is a platform for continuous
intergration. The idea is pretty simple. After setting things up,
whenever you push code to a repo that Travis is watching, Travis
starts a container for your repo and runs one or more scripts against
the repo. This usually means tests. It turns out that this can be a
useful sanity check for students. It&amp;#39;s true that they can run tests on
their assignments before submitting them but this way it&amp;#39;s done
automatically and after they submit. They can be sure that what
they&amp;#39;ve submitted actually works.&lt;/p&gt;
&lt;p&gt;
First you have to link your GitHub accoutn with Travis. To do this,
just go to travis-ci.org and log in using GitHub. You can then set a
bunch of options including which repos to run Travis on. The interface
at travis-ci.com looks similar but a bit nicer. The .org site is free
for open source or public repos  (as is the .com site, I think) but
the good people at Travis will give you rights to use private repos
for educational purposes for free. &lt;/p&gt;
&lt;p&gt;
The only other thing you have to do is create a &lt;a href=&#34;https://yaml.org/&#34;&gt;YAML&lt;/a&gt; file named
 &lt;code&gt;.travis.yml&lt;/code&gt; in your repo. Here&amp;#39;s one I&amp;#39;m using to test C++ projecs:&lt;/p&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;language&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cpp&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;compiler&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;clang&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;make test&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;./test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This tells Travis to use the clang compiler (as opposed to, say g++)
and then run &lt;code&gt;make test&lt;/code&gt; and then &lt;code&gt;./test&lt;/code&gt;. If all the tests pass you
get a green check and an email and you&amp;#39;re good to go. If they don&amp;#39;t
you get a red X and also an email. Of course for this particular
configuration to work you need &lt;code&gt;Makefile&lt;/code&gt; and everything else needed
to build the tests in the repo. In my case, I&amp;#39;m using &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt; for tests.&lt;/p&gt;
&lt;p&gt;
Travis has support for a whole bunch of languages including Java,
Python, and JavaScript and all of those have nice testing frameworks
so regardless of what you&amp;#39;re teaching with, Travis could be easily
integrated. &lt;/p&gt;
&lt;p&gt;
In this video I show how I&amp;#39;m using TravisCI and also a simple Python
setup. In the next post I&amp;#39;ll get back to GitHub classroom and how
TravisCI integrates into it.&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/-J8A5oWazvE&#34;&gt;https://www.youtube.com/embed/-J8A5oWazvE&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sequencing Topics</title>
      <link>https://cestlaz.github.io/post/sequencing-topics/</link>
      <pubDate>Sat, 26 Jan 2019 16:06:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sequencing-topics/</guid>
      <description>&lt;p&gt;
Monday&amp;#39;s the start of the Spring semester. Other than the 8:00am start
I&amp;#39;m looking forward to it. My 8:00am class is the honors/lab component
that goes with CS1. I taught it last semester and during each of the
past two years at Hunter. My second class is the follow up  - more OOP
/ C++, data structures and some algorithms.&lt;/p&gt;
&lt;p&gt;
The material is old hat. I&amp;#39;ve taught it in Java more times than I can
count and also in C++ albeit many years ago. What&amp;#39;s new is that I&amp;#39;m
teaching my Hunter kids and I&amp;#39;m doing it in a college framework - two
days a week, 1:15 a session. I&amp;#39;m not thinking too much about how I&amp;#39;ll
teach each class - I usually figure that out in the moment - not
actually in the class but week to week based on the flow of the
class. &lt;/p&gt;
&lt;p&gt;
Right now, I have to make final decisions on sequencing, at least for
the start of the class. We got ahead of the game by covering most of
the C++ topics - inheritance, templates, overloading etc. at the end
of last semester so that
leaves all the data structures, algorithms, dynamic structures, and
memory management, recursion, and sorting and searching. If I have
time I&amp;#39;d also love to get into some graph stuff. &lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the plan, at lest for now.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll start with recursion. They had the basics last term but now
we&amp;#39;ll talk about search - I usually focus this around a maze
solver. After this we&amp;#39;ll place recursion on hold - at least in terms
of class time and move to linked lists and dynamic memory. We&amp;#39;ll
follow this with sorting. The idea is that students have trouble
getting comfortable with both recursion and also with dynamic
structures first time through. Rather than ploughing  through from
recursion to the recursive sorts I&amp;#39;m hoping that putting the dynamic
lists in between will give recursion some time to marinate in the
background. Likewise I&amp;#39;m hoping that the dynamic memory stuff can
marinate through the sorting unit for when we revisit it with stacks,
queues, and trees after sorting.&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if this is the optimal way of sequencing the topics but I
think it will work pretty well.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll see as the semester progresses. If things are going swimmingly I
can always call an audible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Professional Development - APCS-A, similar and beyond</title>
      <link>https://cestlaz.github.io/post/pd-apcs-a-and-beyond/</link>
      <pubDate>Sat, 15 Dec 2018 08:56:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-apcs-a-and-beyond/</guid>
      <description>&lt;p&gt;
A while ago I wrote about &lt;a href=&#34;https://cestlaz.github.io/post/pd-in-nyc/&#34;&gt;our plans&lt;/a&gt; at Hunter to run professional
development for CS teachers. Specifically, running once a month
sessions for teachers who teach APCS-A, similar and beyond.&lt;/p&gt;
&lt;p&gt;
The idea started as a joke but morphed into a legit idea.&lt;/p&gt;
&lt;p&gt;
I was talking to some friends about CTLE hours and how ridiculous the
system is. NY State teachers need 100 hours of CTLE credit (PD hours)
every so many years. It&amp;#39;s something of a scam for a few
reasons. First, two of the biggest providers are the NYC DOE and the
UFT, the teacher&amp;#39;s union. I&amp;#39;ve been told they both charge money for
many CTLE credit bearing activities. That certainly doesn&amp;#39;t seem
kosher – your boss and your union set up a system to charge you to keep your
job. &lt;/p&gt;
&lt;p&gt;
Well, it turns out that Hunter is certified to issue CTLE credits so
we joked that we should get dinner and hang out once a month and call
it professional development. We were only half joking - whenever you
get a bunch of teachers in a room they talk shop and that is actually
the best PD there is. Upon talking among ourselves and also to other
teachers we realized there was a legitimate need for PD for teachers
who were beyond the basics and so we turned this silly idea into the
real deal.&lt;/p&gt;
&lt;p&gt;
Last Thursday we had our first session. We had about 25 attendees for
a three hour session.&lt;/p&gt;
&lt;p&gt;
I can&amp;#39;t tell you if it was any good - you&amp;#39;ll have to ask the
participants, I can tell you what we did and what we plan moving
forward.&lt;/p&gt;
&lt;p&gt;
We started with a content piece. I ran through &lt;a href=&#34;https://cestlaz.github.io/posts/2013-03-23-who_won_the_election-quadratic_to_linear_time/&#34;&gt;this lesson&lt;/a&gt; (or &lt;a href=&#34;https://cestlaz.github.io/posts/when-they-change-the-script/&#34;&gt;this
one&lt;/a&gt;) where the students find the mode of a list, realize it&amp;#39;s a slow
(n^2) algorithm and then refine it to a linear solution. The key idea
is to give the students an intuitive feeling for run time issues and
also to introduce them to &lt;a href=&#34;https://cestlaz.github.io/posts/2014-11-17-hidden-complexity.html/&#34;&gt;hidden complexity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
After this we had dinner, provided by our friends at Google. Over
dinner the teachers talked shop. In addition to getting to know each
other, their programs, and their classes we also asked them to
consider these three items:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What are things that cause you difficulty that you&amp;#39;d like us to
cover?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What are things you wish you knew about that you&amp;#39;d like us to
cover?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What are things you&amp;#39;re comfortable with that you&amp;#39;d be willing to
share with the group?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After dinner we circled up and JonAlf presented the way he set up
student note taking in his class.&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/pd-apcs-a.jpg&#34; width=&#34;500&#34; height=&#34;500px&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;
Finally, we discussed next steps - specifically what we came up with
for those three bullet points above.&lt;/p&gt;
&lt;p&gt;
I like the idea of having at least one short content piece, one short
pedagogy piece and a deeper dive at each meeting. For the first one,
JonAlf and I had to guess as to what might be useful and at the
appropriate level. We advertised for teachers who did APCS-A, similar,
or beyond but I&amp;#39;m sure we had teachers for whom the mode lesson was a
bit too advanced to do without scaffolding and also some for whom it
was way to simple. As we continue to meet, we&amp;#39;ll nail down the right
level and the right activities.&lt;/p&gt;
&lt;p&gt;
The real hope is that many of the participants will become regulars
and together we&amp;#39;ll turn this into both an amazing once a month
activity and also a community of teachers.&lt;/p&gt;
&lt;p&gt;
Right now, I&amp;#39;m looking for companies who want to feed us and possibly
provide space so if you know of any, hook me up. We&amp;#39;re also collecting
feedback and ideas from the attendees. &lt;/p&gt;
&lt;p&gt;
We&amp;#39;re targetting February for our next session followed by March,
April, May and possibly June.&lt;/p&gt;
&lt;p&gt;
In the meantime, stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let Teachers Teach</title>
      <link>https://cestlaz.github.io/post/let-teachers-teach/</link>
      <pubDate>Fri, 09 Nov 2018 08:57:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/let-teachers-teach/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://twitter.com/guzdial&#34;&gt;Mark Guzdial&lt;/a&gt;&amp;#39;s post the other day about &lt;a href=&#34;https://cacm.acm.org/blogs/blog-cacm/232557-direct-instruction-is-better-than-discovery-but-what-should-we-be-directly-instructing/fulltext&#34;&gt;direct isntruction&lt;/a&gt; struck a chord with
me. Right up front, Mark said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The research evidence is growing that students learn better through direct instruction rather than through a discovery-based method, where we expect students to figure things out for themselves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Quite a surprise to the teachers who have been beaten over the head
with &amp;#34;everything must be discovery&amp;#34; in recent years. 
At the end of the post, Mark writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m a follower of the research Felienne is citing in her blog post, and agree that direct instruction is better than discovery learning for introductory courses&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I found myself very much agreeing with Mark. I&amp;#39;m not surprised. It&amp;#39;s
true that Mark and I have traded blog comments with me saying that
a teacher dominant classroom can be very effective and Mark saying
lecturing is bad but after a while I realized that we were saying the
same thing. To me, a teacher dominant high school class means teacher
directed active learning experience and not a droning college lecture. &lt;/p&gt;
&lt;p&gt;
In any event, back to direct instruction vs discovery. It seems
like the pendulum is swinging again. A few years ago it was all about
discovery and now direct instruction is ok. There are two problems
here. The first is that in a few years it will be something
else. Before the discovery learning fad we had other fads. When I
started teaching it was cooperative learning. I also went through the
portfolio movement. There were other fads along the way including yet
another &amp;#34;new math.&amp;#34; At some point we got back to traditional direct
instruction, then discovery and that brings us back up to today.&lt;/p&gt;
&lt;p&gt;
The second problem is a big one that&amp;#39;s often ignored. Regardless of
what the research says or doesn&amp;#39;t say and what teachers know or don&amp;#39;t
know the powers that be have time and time again decided upon the one
true way to teach and tried to force it upon teachers.&lt;/p&gt;
&lt;p&gt;
It doesn&amp;#39;t work that way.&lt;/p&gt;
&lt;p&gt;
The missing piece of the puzzle is the fact that teachers bring
different things to the table and that&amp;#39;s a fact that&amp;#39;s often
ignored. When teachers are observed, at least in NY, supervisors want
to see what they want to see. After Danielson was implemented in NYC I
was talking to a friend who almost sheepishly told me that she was
getting great evaluations because her teaching style aligned perfectly
with Danielson but she knew that when something else came into vogue
all of a sudden she&amp;#39;d no longer be &amp;#34;highly effective.&amp;#34;&lt;/p&gt;
&lt;p&gt;
When I started, cooperative learning was all the rage but it didn&amp;#39;t
work for me. Since it didn&amp;#39;t work for me, it didn&amp;#39;t work for my
students. This didn&amp;#39;t mean that I couldn&amp;#39;t cherry pick aspects of
cooperative learning and use them to good effect nor did it mean that
I couldn&amp;#39;t run a cooperative learning experience effectively from time
to time  but it meant that I couldn&amp;#39;t whole hog teach the way I was
&amp;#34;supposed&amp;#34; to teach. In another case, I knew a teacher who was a very
strong lecturer and I mean this in the traditional one sided lecture
style. He was much weaker when using active learning techniques and in
no way could he give up control to a cooperative learning
experience. That was who he was. He was most effective as a lecturer
for better or worse. With the right group of kids it worked pretty
well. Certainly better than if he was forced to teach in a way that
was contrary to who he was. I&amp;#39;ve also outright asked some great math teacher
friends of mine about &amp;#34;the research&amp;#34; on how to teach and the responses
I&amp;#39;ve gotten back were generally either &amp;#34;I don&amp;#39;t read the research&amp;#34; or
&amp;#34;it doesn&amp;#39;t work for me so I do what I do.&amp;#34;&lt;/p&gt;
&lt;p&gt;
All this isn&amp;#39;t to say that research isn&amp;#39;t important and that a teacher
shouldn&amp;#39;t master a variety of techniques and tools. A good preservice
program will leave a teacher with a cabinet full of tools to draw from
and the expertise to know themselves, their students, and what tools
to put in the toolbelt for an any given class. Teachers should
likewise be trained to maximize their inherent tendencies and talents
and blend in teaching techniques as appropriate. Good professional development
should bring new ideas and new techniques to teachers and should
consider who they can be added in to a teacher&amp;#39;s practice rather than
to replace it.&lt;/p&gt;
&lt;p&gt;
Finally, teachers should be allowed to teach. It&amp;#39;s horrible that
there&amp;#39;s a movement to more and more scripted lessons and to tell
teachers how to teach. It was bad when I started and it&amp;#39;s only gotten
worse.&lt;/p&gt;
&lt;p&gt;
Fortunately, some supervisors do indeed get it. Back when I was a
young teacher I was talking to a supervisor about this and he told me
that he observed a class he started with one basic question: &amp;#34;is
learning going on?&amp;#34; Everything flowed from there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compile Each Concept</title>
      <link>https://cestlaz.github.io/post/compile-each-concept/</link>
      <pubDate>Tue, 09 Oct 2018 14:46:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/compile-each-concept/</guid>
      <description>
&lt;p&gt;
We&amp;#39;ve all been there:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Student: Teacher, I need help
Teacher (comes over)
Student (shows screen listing three bazillion errors)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The student has just written pages of code and finally decided to try
to run it only to end up with pages of errors.&lt;/p&gt;
&lt;p&gt;
Error messages can at times be hard to read for beginners but to see
and truth be told, they frequently don&amp;#39;t even read them but over the
years I&amp;#39;ve developed a practice that I&amp;#39;ve found helpful as a software
developer and if students adopt the same practice it can save them a
lot of time and effort.&lt;/p&gt;
&lt;p&gt;
The idea is very simple. &lt;/p&gt;
&lt;p&gt;
Compile and test one concept at a time.&lt;/p&gt;
&lt;p&gt;
It might seem silly, but if I&amp;#39;m writing a a program, my first compile
might be code that looks like this:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  using std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout;
  using std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
  {
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
or &lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

      &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
	
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
This might seem silly but it really doesn&amp;#39;t take any effort. I have a
key sequence to do this under Emacs and if I&amp;#39;m using an interactive
language like Python or Clojure I just have to hit &lt;code&gt;c-c c-c&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;
This might seem silly but I do it out of muscle memory and it
immediately tells me I don&amp;#39;t have any syntax errors and my build system
works.&lt;/p&gt;
&lt;p&gt;
Going further, I compile and test every time I code up what I call a
concept. What&amp;#39;s a concept? Let&amp;#39;s look at some code. A student might
write something like this to find prime number up to n:&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot going on there. To me, a concept is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A loop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A complex calculation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a conditional&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these can have other concepts within.&lt;/p&gt;
&lt;p&gt;
In the above code, I&amp;#39;d probable write it as follows, adding in tests
and print statements throughout the process:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Step 1:
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Step 2
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Step 3
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is not prime&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Step 4 
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,i_isPrime)
  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Step 5
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
It might not play out exactly this way but if not it would be something
similar. The idea is that if you test every time you add one concept
or construct there are fewer places where you can introduce an error.&lt;/p&gt;
&lt;p&gt;
If you enter 100 lines before you test there are 100 places where
things can go wrong. If you type 10, there are only 10. On top of
that, if you&amp;#39;ve added 100 lines, conecptually you&amp;#39;ve probably added a
lot and the error can be anywhere. While it&amp;#39;s not always the case,
most of the time, if you just added an &lt;strong&gt;if&lt;/strong&gt;, the problem will be in the
&lt;strong&gt;if&lt;/strong&gt; or as a result of the if. Same with a &lt;strong&gt;loop&lt;/strong&gt; or any other construct.&lt;/p&gt;
&lt;p&gt;
Once you get in the habit, it&amp;#39;s easy and doesn&amp;#39;t really take any
time. A couple of keystrokes to compile and a couple more to run. &lt;/p&gt;
&lt;p&gt;
All too often students try to write everything at once and it&amp;#39;s so
rare that it works. If we can get them to develop incrementally
they&amp;#39;ll be able to write much more complex systems and write them with
much less frustration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>CS vs CT vs Coding</title>
      <link>https://cestlaz.github.io/post/cs-ct-cc/</link>
      <pubDate>Fri, 28 Sep 2018 12:08:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ct-cc/</guid>
      <description>&lt;p&gt;
There&amp;#39;s been a lot of buzz recently concernting Computational Thinking
(CT) vs Computer Science (CS) vs Coding / Programming on the
interwebs.&lt;/p&gt;
&lt;p&gt;
Some of the questions and concerns that I&amp;#39;ve seen recently include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What is CT??&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Will rich schools get CS and poor only CT?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Will rich schools get CS and poor on coding?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first question is a big one and as a community we haven&amp;#39;t answered
it yet. I think about it as including things like algorithmic
thinking, decomposing problems, iterating, pattern recoginition and the like 
but I&amp;#39;m hardpressed to come up with a succinct formal definition. This
is somewhat related to the bigger problem of &amp;#34;what is CS?&amp;#34; A problem
the CS community is still dealing with. There seems to be an editorial
or letter in the &lt;a href=&#34;https://cacm.acm.org/&#34;&gt;Communications of the ACM&lt;/a&gt; every few months talking
about this. &amp;#34;We&amp;#39;re an enginering discipline. No, we&amp;#39;re a science. No
we&amp;#39;re an artistic endeavor&amp;#34; and on and on. It&amp;#39;s no surprise that the
rest of the world doesn&amp;#39;t understand what we are when we haven&amp;#39;t
figured it out ourselves. It&amp;#39;s also no surprise that this problem also
extends to CT.&lt;/p&gt;
&lt;p&gt;
One thing seemed clear on the twitter threads and posts I read is that
people seem to believe that CT and Coding are potentially overlapping
subsets of CS but you can do CT and Coding without CS.&lt;/p&gt;
&lt;p&gt;
While there&amp;#39;s probably a lot to say on the CT without CS or rather CT
without programming but today let&amp;#39;s look at the programming without CS
side of things.&lt;/p&gt;
&lt;p&gt;
This is probably of particular concern to me as a high school and now
college guy. There&amp;#39;s no doubt to me that there&amp;#39;s a big difference
between a kid learning coding/programming and computer science. &lt;/p&gt;
&lt;p&gt;
Coding can be a useful skill but without at least some computer
science it&amp;#39;s of limited value. Look at code schools as examples. Many
code schools work to prepare their customers for entry level tech
jobs. Usually, this includes the fundamentals of programming on top of
a typical business toolset. Examples would be a node.js backend,
Mongodb, and React.js. Another, albeit older one so probably not
taught as much now would be Ruby on Rails. Upon completing the
program, one can create a formulaic full stack applicationand knowing
that formula can make you employable in our current tech sector. The
downside though, as I&amp;#39;ve heard from countless employers, is that code
school graduates, by training, can&amp;#39;t break out of that formula. They
just don&amp;#39;t have the context, nor the problem solving ability - they
lack the CS. I&amp;#39;m sure many go on to learn the CS but that&amp;#39;s another
story. I was talking to a code school founder a few years ago about
this and asked &amp;#34;what happens when the formula chages.&amp;#34; The answer I
got was &amp;#34;that&amp;#39;s ok, we&amp;#39;ll just bring them back for a new bootcamp.&amp;#34; Of
course that will cost the kid another 10K or whatever bootcamps are
charging these days.&lt;/p&gt;
&lt;p&gt;
Now of course some code schools try harder than others and some
attempt build some CS into their programs but while there are always
outliers who can learn a great deal in a short period of time, and
often on their own, real education takes time and effort and a short
term bootcamp just doesn&amp;#39;t have that time.&lt;/p&gt;
&lt;p&gt;
Back to schools.&lt;/p&gt;
&lt;p&gt;
To start coding is easier to teach than CS. It can be formulaic and
there are lots of resources out there to assist teachers without a CS
background. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s also easy to test and show off. &lt;/p&gt;
&lt;p&gt;
I was at the NYTM once and they were celebrating a code school
project. The idea was really a good one - automatic sensing of heat in
low income apartments. I had a couple of questions about getting their
data out to the authorities but thought that if they figured that out
it could really do some good. On the other hand there was practically
no CS. As the project was described - it sets up it&amp;#39;s own mesh network
and communicates heat readings etc etc., I said to my neighbor in the
audience - sounds like an arduino with an XBee shield and yep, when
they showed the case, it was the exact form factor to hold an arduino
and xbee. That told me there was no CS. The mesh networking is
automatically done by the XBee so all they had to do was take the
sample arduino code to read the heat sensor and instead of sending it
to the serial port as the sample code does, send it to a particular
XBee node. Pretty much no CS and almost no programming. Just a great
idea and gluing some components together.&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen the same with student projects that have been highlighted at
events with funders and politicians and in the media. I won&amp;#39;t describe
them as they are student projects and wouldn&amp;#39;t do that to a student
but the projects really had no CS under the hood. Nice ideas or even
more importantly nice stories around the kid but it was glue and
simple basic programming not CS.&lt;/p&gt;
&lt;p&gt;
Teaching real CS is harder to do, harder to assess and harder to show
off which makes teaching coding so enticing. &lt;/p&gt;
&lt;p&gt;
This is not to say that teaching coding without CS doesn&amp;#39;t have
value. I believe it does but it also leads to another problem – it
can be assessed improperly either with showy projects that are merely
gluing a theme on a fixed pattern or by tests that allow for
memorization and this at times has led to students being given too
much too early.&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ve seen this with algebra and physics. Students end up taking these
subjects before they&amp;#39;re ready for them. They can pass the
standardized test  because they can plug numbers into formulas or can
recognize what form to use because there are a limited set of problem
patterns on the exams but they don&amp;#39;t really &amp;#34;get&amp;#34; the subject. This
leads to problems later on but of course that&amp;#39;s another teacher&amp;#39;s
problem.&lt;/p&gt;
&lt;p&gt;
This also happens in coding classes. While it&amp;#39;s usually pretty clear
when a kid isn&amp;#39;t getting a CS concept, I&amp;#39;ve seen programming
experiences where the student at first or in the short term can appear
to pass the assessments but later on it&amp;#39;s revealed that they weren&amp;#39;t
ready and they didn&amp;#39;t really learn what they were supposed to.&lt;/p&gt;
&lt;p&gt;
This is a problem. Just as we might have some students exposed to CT
without CS I think a major problem will be kids getting Coding without
CS. This will particularly be a danger in poorer schools and
communities but possibly across the board.&lt;/p&gt;
&lt;p&gt;
Just another thing we have to really be on guard for as we try to
achieve CS for all.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Not every lesson has to be magic</title>
      <link>https://cestlaz.github.io/post/not-always-exciting/</link>
      <pubDate>Tue, 25 Sep 2018 18:08:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/not-always-exciting/</guid>
      <description>&lt;p&gt;
If you check out Twitter, Facebook, Medium  and other blog sites you
might get the idea that you&amp;#39;re the worst teacher in the world. The
internet abounds with people sharing tweets and posts about wonderful
lessons they&amp;#39;ve just taught, witnessed or learned about in
professional development. Sure, the teacher forums rife with requests
for lesson ideas and resources but the shared material is always aces.&lt;/p&gt;
&lt;p&gt;
It makes sense, people in the community want to share things that
worked for them or things they think will work. &lt;/p&gt;
&lt;p&gt;
Still, for new teachers it can create an unhealthy illusion of what
really goes on in the classroom.&lt;/p&gt;
&lt;p&gt;
This is not to say that sharing of the good stuff is a bad thing but
the truth is that not every lesson is a masterpiece, not every teacher
is a super charismatic showman, and not all topics lend themselves to
creative teaching.&lt;/p&gt;
&lt;p&gt;
Why am I writing this now? Because I was planning lessons earlier
today and I&amp;#39;m at one of those places where I&amp;#39;m not going to be able to
deliver a whiz-bang lesson in my next class. One of my classes this
semester is for beginners so we&amp;#39;re building up language skills from
the ground up. Right now I want to do some loop applications but
there&amp;#39;s only so much we can do given what the students know. There are
reasons why I don&amp;#39;t want to do graphics with them right now. I also
haven&amp;#39;t introduced lists yet and don&amp;#39;t want to loop over strings yet
so I&amp;#39;m left with doing mathy stuff.&lt;/p&gt;
&lt;p&gt;
I think I&amp;#39;ll look at Newton&amp;#39;s method for square roots. It&amp;#39;s
interesting for the math inclined and does let us explore issues with
floating point and accuracy. &lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not going to be super exciting for everyone though and that&amp;#39;s okay. &lt;/p&gt;
&lt;p&gt;
I could do lists first but I don&amp;#39;t want the kids to have to handle so
much new material so quickly. I&amp;#39;d rather keep the pace slower and work
with what they&amp;#39;ve just learned for a bit. &lt;/p&gt;
&lt;p&gt;
I could also do graphics but that adds a level of overhead I don&amp;#39;t
want to get into now.&lt;/p&gt;
&lt;p&gt;
The idea is to look at the long game. A class runs a whole semester or
possibly a year. You&amp;#39;re going to have some special memorable lessons
and some mundane ones and that&amp;#39;s nothing to be ashamed of. &lt;/p&gt;
&lt;p&gt;
We&amp;#39;re still mostly going to see best practices shared online with only
a few brave souls sharing disaster classes and asking for help. That&amp;#39;s
just how the internet works. It&amp;#39;s not the worst thing in the
world. Just remember when you&amp;#39;re struggling to come up with a good
lesson or you&amp;#39;ve just taught a bad one that tomorrow&amp;#39;s will be
better. Judge yourself by your students long term development, not one
day at a time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Two Faces of Project Based Learning</title>
      <link>https://cestlaz.github.io/posts/two-faces-of-pbl/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/two-faces-of-pbl/</guid>
      <description>&lt;p&gt;
If one looks at my twitter feed they&amp;#39;ll notice that in addition to CS
Ed, another issue I&amp;#39;m passionate about is school reform or rather
resistance to what is popularly known as and mislabeled as school reform. I&amp;#39;m anti
vouchers, charter schools, high stakes testing and more. One of the
heroes of this resistance is education historian Diane Ravitch. I&amp;#39;m a
big fan of Diane&amp;#39;s and she&amp;#39;s one of the true great champions of public
schools, kids, and teachers. She blogged today about how a superintendent on Long Island &lt;a href=&#34;https://dianeravitch.net/2018/07/27/new-york-district-on-long-island-shows-that-problem-based-curriculum-produces-better-results-than-test-prep/&#34;&gt;replaced test
prep with project based learning&lt;/a&gt;. The post which talks about how this
superintendent improved test results  is worth a read. My only
quibble was that we shouldn&amp;#39;t read anything into the results for a
variety of reasons including the fact that the group of students who
did the project based learning (PBL) units instead of test prep were
self selecting volunteers.&lt;/p&gt;
&lt;p&gt;
One of the comments caught my eye:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PBL is just another “student-centered” fad…&lt;/p&gt;
&lt;p&gt;
PBL operates on the myth of “transference” perpetuated by non-educators.&lt;/p&gt;
&lt;p&gt;
…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The comment continues on with a number of good points.&lt;/p&gt;
&lt;p&gt;
Why am I writing about it here? Because PBL is a big CS Ed buzzword
and like most buzzwords there&amp;#39;s both truth at the root of the hype and
hype that distorts the truth.&lt;/p&gt;
&lt;p&gt;
When done right with the right group of kids, project based learning
can be wonderful but it takes a lot of time and effort. You can&amp;#39;t just
set the kids loose to learn. You&amp;#39;ve got to train them to work
together, set up the project, as the teacher, you&amp;#39;ve got to know the
subject so as to know when to guide, when to tell, when to prod, and when to leave
them alone. Doing it right, at least for most students, is certainly
not giving them the instruction sheet and going off the check your
email.&lt;/p&gt;
&lt;p&gt;
On the other hand, it&amp;#39;s easy to do it wrong. If you&amp;#39;ve got high
performing kids, they&amp;#39;ll figure things out. If you&amp;#39;ve got a few high
performing kids, they can mask the fact that the majority of a group
isn&amp;#39;t getting things. You might have an assignment where a kid figures
out a formula from discovered data and might be able to then use it to
make predictions but there&amp;#39;s a good chance they won&amp;#39;t understand why
it works or it&amp;#39;s root derivation. That&amp;#39;s where we need the teacher.&lt;/p&gt;
&lt;p&gt;
One of the dangers of bad PBL is that it&amp;#39;s sexy. Kids are engaged and
it appears to work - particularly when the teacher doesn&amp;#39;t know the
subject area. This is my great fear whenever I hear things about
teachers being &amp;#34;Lead Learners.&amp;#34; Sure, when you&amp;#39;re a converted
something else teacher moving into CS you won&amp;#39;t know the subject
matter but that has to change over time. I&amp;#39;ve seen enough instances of
cases where teachers never develop their chops and just throw projects
at the kids augmented by scripted curricula or computer driver
content. The kids get through the class or program but are not
prepared for the next class or next level. I&amp;#39;ve seen this with the old
Cisco curriculum, any number of after school and summer programs -
some VERY highly regarded ones and I think we&amp;#39;ll see more and more of
this in states that are pushing CSforAll without developing the
necessary pre and in service programs for their teachers.&lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t let my last two paragraphs leave you feeling that I&amp;#39;m anti
PBL. I&amp;#39;m not. It&amp;#39;s great when done right and if you have thee time and
resources in your school and classes you should be using it when
appropriate.&lt;/p&gt;
&lt;p&gt;
If you want some pointers on how to get going in the right direction with PBL in CS  check out &lt;a href=&#34;https://www.amazon.com/Computer-Science-K-12-Imagining-possibilities-ebook/dp/B07DYDXBSH/ref=sr_1_1?ie=UTF8&amp;amp;qid=1532808363&amp;amp;sr=8-1&amp;amp;keywords=doug+bergman&#34;&gt;this
book&lt;/a&gt; by my buddy Doug Bergman. It&amp;#39;s a great getting started guide by a
great teacher. He&amp;#39;s basically Mr. PBL and he does it right.  If you&amp;#39;re new to CS you&amp;#39;ll still need to learn content
and if you&amp;#39;re new to teaching, you&amp;#39;ll be developing your chops for
your entire career but it&amp;#39;s a great resource to get you and then your
kids started on the journey.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>